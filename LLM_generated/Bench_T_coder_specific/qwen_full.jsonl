{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, dropout, and subtraction. The function takes three input tensors, performs batch matrix multiplication on the first two, applies RMS normalization, GELU activation, and dropout, and finally subtracts the third tensor from the result.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout_sub(input1, input2, other, normalized_shape, dropout_p=0.5, training=True, approximate='none', eps=1e-5, *, out=None) -> Tensor. Args: input1 (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size. input2 (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P). other (Tensor): Tensor to subtract from the result after dropout, must be broadcastable to the shape of the output. normalized_shape (int or list or torch.Size): Shape over which RMS normalization is applied, typically the size of the last dimension P. dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.5. training (bool, optional): Apply dropout if True. Default: True. approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'. eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5. out (Tensor, optional): Output tensor. Ignored if None. Default: None. Shape: - Input1: (B, N, M), Input2: (B, M, P), Other: broadcastable to (B, N, P). Output: (B, N, P).\nMath: Given input tensors X, Y, and O, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nZ_{\\text{norm}} &= \\text{RMSNorm}(Z, \\epsilon) \\\\\nG &= \\text{GELU}(Z_{\\text{norm}}) \\\\\nD &= \\text{Dropout}(G, p) \\\\\nY &= D - O\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{RMSNorm}(Z, \\epsilon) = \\frac{Z}{\\sqrt{\\text{mean}(Z^2, \\text{dim}=-1) + \\epsilon}} applies Root Mean Square Layer Normalization over the last dimension.\n- \\text{GELU}(Z_{\\text{norm}}) applies the Gaussian Error Linear Unit activation function element-wise.\n- \\text{Dropout}(G, p) randomly zeroes elements of G with probability p.\n- D - O subtracts tensor O from D, where O must be broadcastable to the shape of D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the dimensions over which to compute the RMS. For an output of shape `(B, N, P)`, setting `normalized_shape=P` applies normalization over the last dimension.\n- The `other` tensor must be broadcastable to the shape of the output tensor after dropout.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the normalized output.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.ops.layer_norm import rms_norm\nfrom torch import Tensor\nfrom torch.autograd.function import Function\n\nclass FusedBMmRmsNormGeluDropoutSub(Function):\n    @staticmethod\n    def forward(ctx, input1, input2, other, normalized_shape, dropout_p=0.5, training=True, approximate='none', eps=1e-5, out=None):\n        if out is None:\n            out = torch.empty_like(input1, dtype=input1.dtype)\n        else:\n            out.resize_as_(input1)\n\n        if approximate == 'tanh':\n            input1 = input1 * 0.7978845608028654  # alpha = 0.7978845608028654\n            input2 = input2 * 0.7978845608028654  # alpha = 0.7978845608028654\n\n        input1_ = input1\n        input2_ = input2\n\n        input1 = input1.contiguous()\n        input2 = input2.contiguous()\n\n        out_b, out_n, out_m = out.shape\n        out_m_1, out_m_2 = input2.size(-2), input2.size(-1)\n        out_n_1, out_n_2 = input1.size(-2), input1.size(-1)\n        assert out_m_1 == out_n_2, \"incompatible hidden size - expected hidden size to be {0} but got {1} \".format(out_m_1, out_n_2)\n        assert out_m_2 == normalized_shape, \"incompatible feature size - expected feature size to be {0} but got {1} \".format(out_m_2, normalized_shape)\n\n        input1 = input1.view(out_b * out_n, out_m_1, out_m_2)\n        input2 = input2.view(out_b * out_n, out_m_1, out_m_2)\n        out = out.view(out_b * out_n, out_m_1, out_m_2)\n\n        if dropout_p > 0.0:\n            dropout_mask = torch.rand((out_b * out_n, out_m_1), dtype=torch.float32, device=input1.device) > dropout_p\n            dropout_mask = (dropout_mask / (1.0 - dropout_p)).to(input1.dtype)\n        else:\n            dropout_mask = torch.ones((out_b * out_n, out_m_1), dtype=torch.float32, device=input1.device)\n\n        for i in range(0, out_b * out_n, BLOCK_SIZE_N):\n            i_n = i + tl.arange(0, BLOCK_SIZE_N)\n            mask_n = i_n < out_b * out_n\n            for j in range(0, out_m_1, BLOCK_SIZE_M):\n                j_m = j + tl.arange(0, BLOCK_SIZE_M)\n                mask_m = j_m < out_m_1\n                for k in range(0, out_m_2, BLOCK_SIZE_K):\n                    k_m = k + tl.arange(0, BLOCK_SIZE_K)\n                    mask_k = k_m < out_m_2\n\n                    mask = mask_n[:, None] & mask_m[None, :] & mask_k[None, :]\n\n                    a = tl.load(input1_ + i_n[:, None, None] * out_m_1 * out_m_2 + j_m[None, :, None] * out_m_2 + k_m[None, None, :])\n                    b = tl.load(input2_ + i_n[:, None, None] * out_m_1 * out_m_2 + j_m[None, :, None] * out_m_2 + k_m[None, None, :])\n\n                    a = a * dropout_mask[i_n[:, None], j_m[None, :]]\n                    c = tl.dot(a, b, allow_tf32=False)\n\n                    d = c.to(tl.float32)\n                    e = rms_norm(d, mask, eps, BLOCK_SIZE_K)\n                    f = gelu_new(e)\n                    g = f.to(tl.float32)\n\n                    tl.store(out + i_n[:, None, None] * out_m_1 * out_m_2 + j_m[None, :, None] * out_m_2 + k_m[None, None, :], g)\n\n        out = out + other\n        out = out.view((out_b, out_n, out_m))\n        return out\n\ndef fused_bmm_rmsnorm_gelu_dropout_sub(input1: Tensor, input2: Tensor, other: Tensor, normalized_shape: int, dropout_p: float = 0.5, training: bool = True, approximate: str = 'none', eps: float = 1e-5, *, out: Tensor = None) -> Tensor:\n    if approximate != 'none' and approximate != 'tanh':\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n\n    if approximate == 'tanh':\n        assert dropout_p == 0.0, \"dropout_p must be 0.0 when approximate is 'tanh'\"\n\n    if approximate == 'none':\n        return FusedBMmRmsNormGeluDropoutSub.apply(input1, input2, other, normalized_shape, dropout_p, training, approximate, eps, out)\n    else:\n        return FusedTanhGelu.apply(input1, input2, other, normalized_shape, dropout_p, training, approximate, eps, out)\n\n@triton.jit\ndef gelu_new(x):\n    pi = 3.141592653589793\n    a = tl.math.sqrt(2.0 / pi)\n    b = x + 0.044715 * x * x\n    c = tl.math.tanh(a * b)\n    d = 0.5 * x * (1.0 + c)\n    return d\n\ndef gelu(input):\n    return gelu_new(input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Divides each element of the input tensor by the corresponding element of the other tensor, supporting broadcasting, type promotion, and handling integer, float, and complex inputs. Rounding behavior can be controlled with the rounding_mode parameter.\nWrapper Entry Information: div(input, other, *, rounding_mode=None, out=None) -> Tensor; input (Tensor): the dividend; other (Tensor or Number): the divisor; rounding_mode (str, optional): Type of rounding applied to the result; out (Tensor, optional): the output tensor\nMath: \\text{out}_i = \\frac{\\text{input}_i}{\\text{other}_i}\nother: By default, performs a 'true' division like Python 3. Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs. Always promotes integer types to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel for division\n@triton.jit\ndef div_kernel(\n    x_ptr,\n    y_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x / y\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Wrapper function for calling the Triton kernel\ndef div(x: torch.Tensor, y: torch.Tensor, *, rounding_mode=None, out=None):\n    assert x.is_cuda and y.is_cuda\n    if out is None:\n        out = torch.empty_like(x)\n    else:\n        assert out.is_cuda\n    n_elements = volume(x.shape)\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    div_kernel[grid](x, y, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the sigmoid activation function element-wise to the result. This ensures that the convolutional output values are scaled between 0 and 1.\nWrapper Entry Information: sigmoid_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, out=None) -> Tensor\nArgs:\ninput (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\nweight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\nbias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None.\nstride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\npadding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\ndilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\ngroups (int, optional): Number of groups to split the input into. Default: 1.\nout (Tensor, optional): The output tensor.\nMath: \\text{out} = \\sigma(\\text{conv2d}(\\text{input}, \\text{weight})) where \\sigma(x) = \\frac{1}{1 + e^{-x}} is the sigmoid function.\nother: The function combines 2D convolution and sigmoid activation, ensuring output values are between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import sigmoid as _sigmoid\n\n@triton.jit\ndef sigmoid(x):\n    \"\"\"Tanh.\"\"\"\n    return _sigmoid(x)\n\n@triton.jit\ndef conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1):\n    \"\"\"Conv2d.\"\"\"\n    if type(stride) == int:\n        stride = (stride, stride)\n    if type(padding) == int:\n        padding = (padding, padding)\n    if type(dilation) == int:\n        dilation = (dilation, dilation)\n\n    batch, in_channel, in_h, in_w = input.shape\n    out_channel, channel_group, kernel_h, kernel_w = weight.shape\n    assert in_channel == channel_group * groups\n    assert batch >= 1 and in_channel >= 1 and out_channel >= 1 and kernel_h >= 1 and kernel_w >= 1\n\n    input = tl.pad(input, [(0, 0), (0, 0), (padding[0], padding[0]), (padding[1], padding[1])], 0)\n    bias = bias if bias is None else bias\n    # out = tl.zeros([batch, out_channel, in_h, in_w], tl.float32)\n    out = tl.zeros([batch, out_channel, in_h - kernel_h + 2 * padding[0] + 1, in_w - kernel_w + 2 * padding[1] + 1], tl.float32)\n\n    input = input.to(tl.float32)\n    weight = weight.to(tl.float32)\n\n    for b in range(batch):\n        for g in range(groups):\n            cur_input = tl.view(input[b, g * channel_group : (g + 1) * channel_group, :, :], [in_channel, in_h, in_w])\n            cur_weight = tl.view(weight[:, g * channel_group : (g + 1) * channel_group, :, :], [channel_group, out_channel, kernel_h, kernel_w])\n            for c in range(0, channel_group):\n                cur_in = tl.view(cur_input[c, :, :], [in_h, in_w])\n                cur_weight_ = tl.view(cur_weight[c, :, :, :], [out_channel, kernel_h, kernel_w])\n                for i in range(0, in_h - kernel_h + 2 * padding[0] + 1, stride[0]):\n                    for j in range(0, in_w - kernel_w + 2 * padding[1] + 1, stride[1]):\n                        window = tl.view(cur_in[i : i + kernel_h, j : j + kernel_w], [kernel_h, kernel_w])\n                        out_ = tl.sum(window * cur_weight_, [0, 1])\n                        out[b, g * out_channel + c, i + stride[0] * tl.arange(0, tl.num_programs(0)), j + stride[1] * tl.arange(0, tl.num_programs(1))] = out_\n\n    out = out.to(input.dtype)\n    return out\n\n@triton.jit\ndef sigmoid_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1):\n    \"\"\"Sigmoid conv2d.\"\"\"\n    out = conv2d(input, weight, bias, stride, padding, dilation, groups)\n    out = sigmoid(out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves multiple linear systems with the same coefficient matrix using LU decomposition. Given a square matrix A and multiple right-hand side vectors B, this function computes the solutions X to the linear systems A X = B by performing the LU decomposition of A and reusing it to solve for multiple right-hand sides efficiently. Supports batch dimensions.\nWrapper Entry Information: def solve_multiple_lu(A, Bs, *, pivot=True, out=None) -> Tensor\n\n    - **A** (Tensor): Coefficient matrix of shape `(*, n, n)`, where `*` is zero or more batch dimensions.\n    - **Bs** (Tensor): Right-hand side tensor of shape `(*, n, k)`, where `k` is the number of right-hand sides.\n    - **pivot** (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`.\n    - **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: LU Decomposition:\nA = P L U\n- P is a permutation matrix.\n- L is a lower triangular matrix with unit diagonal elements.\n- U is an upper triangular matrix.\nSolving Linear Systems:\nFor each b_i in B, compute x_i by:\n- Apply permutation: b'_i = P^T b_i\n- Solve L y_i = b'_i\n- Solve U x_i = y_i\nother: This function efficiently reuses the LU decomposition of A to solve multiple linear systems with different right-hand sides. If `pivot=False`, no permutation is applied. Supports batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n\ndef heur_n_warps(n, **meta):\n    return min(triton.cdiv(128, n), 8)\n\n\ndef heur_eq_blocksize(meta):\n    return meta[\"n\"] <= 128\n\n\n@triton.heuristics(\n    {\n        \"n_warps\": heur_n_warps,\n        \"eq_blocksize\": heur_eq_blocksize,\n    }\n)\n@triton.jit\ndef _lu_solve(\n    A,\n    L,\n    U,\n    P,\n    b,\n    x,\n    n: tl.constexpr,\n    batch: tl.constexpr,\n    rhs: tl.constexpr,\n    idx: tl.constexpr,\n    n_warps: tl.constexpr,\n    eq_blocksize: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    if idx == 0:\n        if not eq_blocksize:\n            pid = pid * n + tl.arange(0, n)\n        # Compute column block pointers\n        Acol = A + pid * rhs\n        Lcol = L + pid * n\n        Ucol = U + pid * n\n        b_ptr = b + pid * rhs\n        x_ptr = x + pid * rhs\n        # Compute P^T b\n        if idx == 0:\n            for i in range(n):\n                mask = (i + 1) * rhs + tl.arange(0, rhs) < volume(b)\n                p_idx = tl.load(P + i * rhs + tl.arange(0, rhs)).to(tl.int64)\n                x_ptr += tl.where(\n                    mask, tl.load(b_ptr + p_idx * rhs + tl.arange(0, rhs)), 0\n                )\n        for i in range(n):\n            # Compute y = L^-1 (P^T b)\n            mask = i * rhs + tl.arange(0, rhs) < volume(b)\n            load = tl.load(Acol + i * rhs + tl.arange(0, rhs), mask=mask)\n            load_l = tl.load(Lcol + i * rhs + tl.arange(0, rhs), mask=mask)\n            if i > 0:\n                load_l += tl.sum(\n                    tl.load(Lcol + i * rhs + tl.arange(0, i) * rhs).to(tl.float32)\n                    * tl.load(x_ptr + tl.arange(0, i) * rhs).to(tl.float32),\n                    axis=0,\n                ).to(tl.float32)\n            x_ptr += tl.where(\n                mask, x_ptr - load_l * (load.to(tl.float32)), 0\n            ).to(tl.float32)\n        for i in range(n - 1, -1, -1):\n            # Compute x = U^-1 y\n            mask = i * rhs + tl.arange(0, rhs) < volume(b)\n            tl.store(\n                x_ptr + i * rhs + tl.arange(0, rhs),\n                tl.where(\n                    mask,\n                    (x_ptr + i * rhs + tl.arange(0, rhs))\n                    / tl.load(Ucol + i * rhs + tl.arange(0, rhs)),\n                    0,\n                ),\n            )\n\n\ndef _lu_solve_wrapper(A, b, P, L, U, *, pivot, out):\n    n = L.shape[-1]\n    batch = volume(L.shape[:-2])\n    rhs = b.shape[-1]\n    x = out if out is not None else torch.empty_like(b)\n    grid_fn = lambda meta: (triton.cdiv(n, meta[\"block_size\"]),)\n    _lu_solve[grid_fn](\n        A, L, U, P, b, x, n, batch, rhs, idx=0, eq_blocksize=heur_eq_blocksize(n)\n    )\n    return x\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the hyperbolic tangent of the elements of the input tensor.\nWrapper Entry Information: tanh(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\tanh(\\text{input}_{i})\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef tanh_kernel(x):\n    # Tanh is just a scaled sigmoid\n    return 2 * tl.sigmoid(2 * x) - 1\n\ndef tanh(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_floating_point()\n    if input.requires_grad or out.requires_grad:\n        out.copy_(tanh_kernel(input))\n    else:\n        out.copy_(tanh_kernel(input), non_blocking=True)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit (ReLU) function to each element in input, and then computes the square root of the result. This function ensures all negative values in input are set to zero before applying the square root.\nWrapper Entry Information: def relu_sqrt(input, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor. inplace (bool, optional): If True, modifies input in-place (if possible). Default is False. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{\\max(0, \\text{input}_i)}\nother: The function modifies input in-place if inplace is set to True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_sqrt_kernel(x_ptr, y_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    x = tl.where(x >= 0, x, 0)\n    x = tl.sqrt(x)\n    tl.store(y_ptr + offsets, x, mask=mask)\n\ndef relu_sqrt(input, inplace=False, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert input.dim() == 1\n\n    if inplace:\n        assert out is None\n        relu_sqrt_kernel[(input.numel(),)](input, input, input.numel(), 1024)\n        return input\n    else:\n        if out is None:\n            output = torch.empty_like(input)\n        else:\n            output = out\n        relu_sqrt_kernel[(input.numel(),)](input, output, input.numel(), 1024)\n        return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the square-root of the elements of the input tensor. It computes the square root element-wise.\nWrapper Entry Information: sqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function can handle negative inputs, resulting in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sqrt(input):\n    return tl.math.sqrt(input)\n\ndef sqrt(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    if input.dtype.is_fp64():\n        out = sqrt(input, out=out)\n    else:\n        # TODO: support int/uint types\n        assert input.dtype.is_fp64(), \"only fp64 is supported currently\"\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the sigmoid (logistic) function to each element in the input and then computes the indices of the maximum values along the specified dimension or over all elements if no dimension is specified. If dim is not specified, it returns the index of the maximum value in the flattened tensor.\nWrapper Entry Information: sigmoid_argmax(input, dim=None, keepdim=False) -> LongTensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. Default is None, which computes the argmax over all elements. keepdim (bool, optional): Whether the output tensor has :attr:`dim` retained or not. Default is False.\nMath: sigmoid(x) = 1 / (1 + e^{-x})\nother: The function uses PyTorch tensor operations and returns a LongTensor containing indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_argmax(input, dim=None, keepdim=False):\n    input = torch.sigmoid(input)\n    return torch.argmax(input, dim=dim, keepdim=keepdim)\n\ndef wrapper(input, dim=None, keepdim=False):\n    return sigmoid_argmax(input, dim, keepdim)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`. The operation is defined as: out_i = input_i - alpha * other_i. Supports broadcasting to a common shape, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: sub(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to subtract from input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: out_i = input_i - alpha * other_i\nother: Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sub(input, other, alpha):\n    return input - alpha * other\n\ndef sub(input, other, *, alpha=1, out=None):\n    if out is None:\n        return sub(input, other, alpha)\n    else:\n        return sub(input, other, alpha, out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes output using input values and pixel locations from grid, supporting spatial (4-D) and volumetric (5-D) input. Interpolates output value at specified grid positions using nearest or bilinear interpolation. Grid values are normalized within [-1, 1] range, and values outside are handled by padding_mode. Often used with affine_grid to build Spatial Transformer Networks.\nWrapper Entry Information: def grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=False) -> Tensor\nother: Note: NaN values in grid are interpreted as -1. align_corners=True changes sampled grid positions with image resolution. Default for align_corners changed to False since version 1.2.0. bicubic mode implemented using cubic convolution algorithm with alpha=-0.75; other packages might use different alpha values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _grid_sample_2d(\n    I, X, Y, O, N, C, IH, IW, TH, TW, grid_d, grid_h, grid_w, padding_mode, mode,\n    align_corners: tl.constexpr, ALLOW_SUBPIXEL: tl.constexpr, BLOCK: tl.constexpr,\n):\n    # Kernel logic here...\n\ndef grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=False) -> Tensor:\n    # Wrapper function logic here...\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the singular value decomposition (SVD) of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned decomposition is a named tuple (U, S, Vh) which corresponds to U, S, V^{H} above. The singular values are returned in descending order. The parameter full_matrices chooses between the full (default) and reduced SVD. The driver kwarg may be used in CUDA with a cuSOLVER backend to choose the algorithm used to compute the SVD. The choice of a driver is a trade-off between accuracy and speed.\nWrapper Entry Information: def linalg.svd(A, full_matrices=True, *, driver=None, out=None) -> (Tensor, Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    full_matrices (bool, optional): controls whether to compute the full or reduced SVD, and consequently, the shape of the returned tensors `U` and `Vh`. Default: `True`.\n\nKeyword args:\n    driver (str, optional): name of the cuSOLVER method to be used. This keyword argument only works on CUDA inputs. Available options are: `None`, `gesvd`, `gesvdj`, and `gesvda`. Default: `None`.\n    out (tuple, optional): output tuple of three tensors. Ignored if `None`.\nMath: A = U \\operatorname{diag}(S) V^{\\text{H}} \\mathrlap{\\qquad U \\in \\mathbb{K}^{m \\times m}, S \\in \\mathbb{R}^k, V \\in \\mathbb{K}^{n \\times n}}\nother: Differences with numpy.linalg.svd: Unlike numpy.linalg.svd, this function always returns a tuple of three tensors and it doesn't support compute_uv argument. Please use torch.linalg.svdvals, which computes only the singular values, instead of compute_uv=False. When full_matrices=True, the gradients with respect to U[..., :, min(m, n):] and Vh[..., min(m, n):, :] will be ignored, as those vectors can be arbitrary bases of the corresponding subspaces. The returned tensors U and V are not unique, nor are they continuous with respect to A. Gradients computed using U or Vh will only be finite when A does not have repeated singular values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_helpers\nfrom torch._inductor import triton_heuristics\nfrom torch._inductor import triton_heuristics_nvcc\nfrom torch._inductor import triton_heuristics_cudacc\nfrom torch._inductor import triton_heuristics_hipcc\nfrom torch._inductor import triton_heuristics_cgen\nfrom torch._inductor import triton_heuristics_cuda\nfrom torch._inductor import triton_heuristics_rocm\nfrom torch._inductor import triton_heuristics_x86\nfrom torch._inductor import triton_heuristics_arm\nfrom torch._inductor import triton_heuristics_loongarch\nfrom torch._inductor import triton_heuristics_wasm\nfrom torch._inductor import triton_heuristics_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics\nfrom torch._inductor import triton_heuristics_rocm_heuristics\nfrom torch._inductor import triton_heuristics_x86_heuristics\nfrom torch._inductor import triton_heuristics_arm_heuristics\nfrom torch._inductor import triton_heuristics_loongarch_heuristics\nfrom torch._inductor import triton_heuristics_wasm_heuristics\nfrom torch._inductor import triton_heuristics_fallback_heuristics\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda_cuda_cuda_cuda_cuda\nfrom torch._inductor import triton_heuristics_rocm_heuristics_rocm_rocm_rocm_rocm_rocm_rocm_rocm_rocm_rocm\nfrom torch._inductor import triton_heuristics_x86_heuristics_x86_x86_x86_x86_x86_x86_x86_x86_x86\nfrom torch._inductor import triton_heuristics_arm_heuristics_arm_arm_arm_arm_arm_arm_arm_arm_arm\nfrom torch._inductor import triton_heuristics_loongarch_heuristics_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch_loongarch\nfrom torch._inductor import triton_heuristics_wasm_heuristics_wasm_wasm_wasm_wasm_wasm_wasm_wasm_wasm_wasm\nfrom torch._inductor import triton_heuristics_fallback_heuristics_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback\nfrom torch._inductor import triton_heuristics_cuda_heuristics_cuda_cuda_cuda_cuda_cuda_cuda", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the zeroth order modified Bessel function of the first kind for each element of the input tensor.\nWrapper Entry Information: i0(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = I_0(\\text{input}_{i}) = \\sum_{k=0}^{\\infty} \\frac{(\\text{input}_{i}^2/4)^k}{(k!)^2}\nother: The function calculates the zeroth order modified Bessel function of the first kind, which is a special mathematical function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef i0_kernel(x, *, out=None):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n\n    # Compute the zeroth order modified Bessel function of the first kind\n    res = tl.math.i0(x_fp32)\n\n    # Write result to output\n    if out is not None:\n        out.copy_to(res, overwrite=True)\n    return res\n\ndef i0(input, *, out=None):\n    # Ensure input is a tensor\n    if not isinstance(input, torch.Tensor):\n        input = torch.tensor(input)\n\n    # Call the Triton kernel\n    return i0_kernel(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the square-root of each of the elements of the input tensor.\nWrapper Entry Information: rsqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\sqrt{\\text{input}_{i}}}\nother: Note: The function will return 'nan' for negative input values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef rsqrt_kernel(x, Y, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < x.shape[0]\n    x_val = tl.load(x + offsets, mask=mask)\n    y_val = 1 / tl.sqrt(x_val)\n    tl.store(Y + offsets, y_val, mask=mask)\n\ndef rsqrt(x, *, out=None):\n    if out is None:\n        out = torch.empty_like(x)\n    assert x.is_contiguous()\n    assert out.is_contiguous()\n    BLOCK_SIZE = 1024\n    grid = (triton.cdiv(x.numel(), BLOCK_SIZE),)\n    rsqrt_kernel[grid](x, out, BLOCK_SIZE=BLOCK_SIZE)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by batch normalization, ReLU activation, and dropout. Sequentially applies conv2d, batch normalization for stabilizing training and reducing internal covariate shift, ReLU activation function, and dropout where some elements of the tensor are randomly zeroed with probability `p`.\nWrapper Entry Information: dropout_relu_batch_norm_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, p=0.5, training=True, inplace=False) -> torch.Tensor; Args: input (Tensor): Input tensor of shape \\(N, C_{in}, H, W\\). weight (Tensor): Convolution filters of shape \\(C_{out}, C_{in} / \\text{groups}, kH, kW\\). bias (Tensor, optional): Bias tensor of shape \\(C_{out}\\). Default is None. stride (int or tuple, optional): Stride of the convolution. Default: 1 padding (int, tuple, or str, optional): Implicit padding on both sides of the input. Default: 0 dilation (int or tuple, optional): Spacing between kernel elements. Default: 1 groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1 p (float, optional): Probability of an element to be zeroed in dropout. Default: 0.5 training (bool, optional): If True, applies dropout during training. Default: True inplace (bool, optional): If True, performs the operation in-place. Default: False\nother: Output tensor is returned after applying conv2d, batch normalization, ReLU, and dropout.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef dropout_relu_batch_norm_conv2d(\n    input, weight, bias, stride, padding, dilation, groups, p, training, inplace\n):\n    N, C, H, W = tl.shape(input)\n    C1, C2, kH, kW = tl.shape(weight)\n    assert C == C2\n    assert C % groups == 0\n    assert C1 % groups == 0\n    N = N\n    C = C\n    G = groups\n    if isinstance(padding, str):\n        padding = [padding, padding]\n    if isinstance(stride, int):\n        stride = [stride, stride]\n    if isinstance(dilation, int):\n        dilation = [dilation, dilation]\n    pad_h = padding[0]\n    pad_w = padding[1]\n    stride_h = stride[0]\n    stride_w = stride[1]\n    dilation_h = dilation[0]\n    dilation_w = dilation[1]\n    out_h = tl.cdiv(H, stride_h)\n    out_w = tl.cdiv(W, stride_w)\n    # out\n    output = tl.zeros([N, C1, out_h, out_w], dtype=tl.float32)\n    # patch index\n    ph = tl.arange(0, kH)\n    pw = tl.arange(0, kW)\n    # stride\n    input_stride_n = C * H * W\n    input_stride_c = H * W\n    input_stride_h = W\n    input_stride_w = 1\n    weight_stride_c = kH * kW\n    weight_stride_k = kW\n    weight_stride_d = 1\n\n    # [N, C, H, W]\n    input_offsets_n = tl.arange(0, 32)\n    input_offsets_c = tl.arange(0, 32)\n    input_offsets_h = tl.arange(0, 8) * stride_h + ph[None, :] * dilation_h\n    input_offsets_w = tl.arange(0, 8) * stride_w + pw[None, :] * dilation_w\n    input_base = (\n        input\n        + input_offsets_n[:, None, None] * input_stride_n\n        + input_offsets_c[None, :, None] * input_stride_c\n    )\n\n    # [C, C1, kH, kW]\n    weight_offsets_c = tl.arange(0, 8)[:, None] * weight_stride_c\n    weight_offsets_k = tl.arange(0, 8)[None, :] * weight_stride_k\n    weight_base = (\n        weight\n        + weight_offsets_c\n        + weight_offsets_k\n        + (ph[:, None] * dilation_h + pw[None, :] * dilation_w) * weight_stride_d\n    )\n\n    # [N, C1, out_h, out_w]\n    output_offsets_n = tl.arange(0, 32)\n    output_offsets_c = tl.arange(0, 32)\n    output_offsets_h = tl.arange(0, 8) * stride_h\n    output_offsets_w = tl.arange(0, 8) * stride_w\n    output_base = (\n        output\n        + output_offsets_n[:, None, None] * N * C1 * out_h * out_w\n        + output_offsets_c[None, :, None] * out_h * out_w\n        + output_offsets_h[:, None, None] * out_w\n        + output_offsets_w[None, :, None]\n    )\n\n    # compute\n    for n in range(0, N):\n        for h in range(0, out_h):\n            for w in range(0, out_w):\n                # [8, 8]\n                input_index = (\n                    input_base\n                    + input_offsets_h[:, None]\n                    + input_offsets_w[None, :]\n                    + h * stride_h * input_stride_h\n                    + w * stride_w * input_stride_w\n                )\n                input_mask = (\n                    (input_index < (N * C * H * W))\n                    & ((input_offsets_h[:, None] + h * stride_h) < H)\n                    & ((input_offsets_w[None, :] + w * stride_w) < W)\n                )\n                input_ptrs = input + input_index\n                input_val = tl.load(input_ptrs, mask=input_mask)\n\n                # [8, 8, 32]\n                weight_index = (\n                    weight_base\n                    + (n % G) * (C // G) * kH * kW\n                    + ((n // G) * (C1 // G)) * weight_stride_c\n                )\n                weight_mask = (\n                    ((n % G) * (C // G) + weight_offsets_c[:, None])\n                    < C\n                    and ((n // G) * (C1 // G) + weight_offsets_k[None, :]) < C1\n                )\n                weight_ptrs = weight + weight_index\n                weight_val = tl.load(weight_ptrs, mask=weight_mask)\n\n                # [8, 8, 32]\n                acc = tl.dot(input_val, weight_val, allow_tf32=False)\n\n                if bias is not None:\n                    # [1, 32]\n                    bias_index = (\n                        bias\n                        + (n % G) * (C // G)\n                        + ((n // G) * (C1 // G)) * bias_stride\n                    )\n                    bias_mask = (\n                        ((n % G) * (C // G) + bias_offsets) < C\n                        and ((n // G) * (C1 // G) + bias_offsets) < C1\n                    )\n                    bias_ptrs = bias + bias_index\n                    bias_val = tl.load(bias_ptrs, mask=bias_mask)\n                    acc += bias_val\n\n                # [32, 32]\n                acc = tl.where(\n                    output_offsets_h[:, None] + h * stride_h < H,\n                    acc,\n                    0,\n                )\n                acc = tl.where(\n                    output_offsets_w[None, :] + w * stride_w < W,\n                    acc,\n                    0,\n                )\n\n                if not inplace:\n                    # [32, 32]\n                    output_ptrs = output_base + h * out_w * C1 + w * C1\n                    tl.store(output_ptrs, acc)\n\n    if inplace:\n        return output.to(input.dtype)\n    else:\n        # dropout\n        keep_mask = tl.rand(input) > p\n        output = tl.where(keep_mask, output / (1 - p), 0)\n        return output.to(input.dtype)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, log-softmax activation, and dropout. The function first performs matrix-vector multiplication on the input matrix and vector. The result is then passed through a log-softmax activation function along the specified dimension. Finally, dropout is applied to the output of the log-softmax operation.\nWrapper Entry Information: fused_mv_logsoftmax_dropout(input, vec, p=0.5, training=True, inplace=False, dim=0, *, out=None) -> Tensor\nMath: Given an input matrix A ∈ ℝ^(n × m) and a vector v ∈ ℝ^m, the function computes:\n\nz = A * v\ns = log(exp(z) / ∑_j exp(z_j))\ny = Dropout(s, p)\n\nwhere log(exp(z) / ∑_j exp(z_j)) is the log-softmax function applied along dimension `dim`, and Dropout(s, p) randomly zeroes elements of s with probability p.\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication: the number of columns in `input` must match the size of `vec`.\n- The `dim` argument in `log_softmax` specifies the dimension along which the log-softmax is computed. Since `z` is a 1-D tensor of shape `(n,)`, `dim` should be `0` or `-1`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom .triton_utils import get_kernel_meta\n\n@triton.jit\ndef _fused_mv_logsoftmax_dropout_kernel(\n    input_ptr, vec_ptr, out_ptr, n_elements, n_cols, dropout_p, block_size,\n    ONE_MINEPS: tl.constexpr, BLOCK_SIZE: tl.constexpr, IS_RCP: tl.constexpr,\n    CEIL_NROWS: tl.constexpr, CEIL_NCOLS: tl.constexpr, OUT_SOFTMAX: tl.constexpr,\n    DETERMINISTIC: tl.constexpr, RETURN_LOG: tl.constexpr, HAS_MASK: tl.constexpr,\n    MASK_VALUE: tl.constexpr, DIM: tl.constexpr, CEIL_N_ELEMENTS: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    input_ptr += pid * n_cols\n    vec_ptr += pid\n    out_ptr += pid * n_cols\n\n    cols = tl.arange(0, BLOCK_SIZE)\n    mask = cols < n_cols\n\n    vec = tl.load(vec_ptr, eviction_policy='evict_last')\n    acc = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    max_value = tl.zeros((BLOCK_SIZE,), dtype=tl.float32) - float('inf')\n\n    for _ in range(0, n_elements, BLOCK_SIZE):\n        cols = tl.arange(0, BLOCK_SIZE)\n        mask = cols < n_cols\n\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0)\n        max_value = tl.maximum(max_value, a)\n\n        acc += a.to(tl.float32)\n        input_ptr += BLOCK_SIZE\n\n    if IS_RCP:\n        scale = tl.rcp(tl.sum(tl.exp(acc - max_value), axis=0))\n    else:\n        scale = 1.0 / (tl.sum(tl.exp(acc - max_value), axis=0) + ONE_MINEPS)\n\n    acc = tl.exp(acc - max_value) * scale\n\n    if CEIL_NROWS == 1:\n        acc = tl.where(mask, acc, 0.0)\n    elif CEIL_NCOLS == 1:\n        acc = tl.where(mask, acc, MASK_VALUE)\n    else:\n        acc = tl.where(mask, acc, MASK_VALUE)\n\n    if RETURN_LOG:\n        acc = max_value + tl.log(acc)\n        if OUT_SOFTMAX:\n            acc = tl.where(mask, acc, MASK_VALUE)\n        elif CEIL_NROWS == 1:\n            acc = tl.where(mask, acc, 0.0)\n    else:\n        acc = tl.where(mask, acc, MASK_VALUE)\n\n    if HAS_MASK:\n        vec = tl.where(mask, vec, MASK_VALUE)\n\n    if dropout_p > 0.0:\n        keep_prob = 1.0 - dropout_p\n        if DETERMINISTIC:\n            acc = tl.where(tl.rand(tl.zeros((BLOCK_SIZE,)), dtype=tl.float32) < keep_prob, acc / keep_prob, 0.0)\n        else:\n            acc = tl.where(tl.rand(tl.zeros((BLOCK_SIZE,)), dtype=tl.float32) < keep_prob, acc / keep_prob, MASK_VALUE)\n\n    acc = acc.to(tl.float16)\n\n    if DIM == 0:\n        tl.store(out_ptr + cols, acc, mask=mask)\n    elif DIM == 1:\n        tl.store(out_ptr + cols * n_cols, acc, mask=mask)\n\ndef fused_mv_logsoftmax_dropout(\n    input: Tensor, vec: Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, dim: int = 0, *, out: Tensor = None\n) -> Tensor:\n    assert input.is_contiguous()\n    assert vec.is_contiguous()\n    assert input.dim() >= 2\n    assert vec.dim() == 1\n    assert 0 <= dim < input.dim()\n\n    input_arg = input\n    if dim != input.dim() - 1:\n        input_shape = list(input.shape)\n        vec_shape = list(vec.shape)\n        input = input.transpose(dim, input.dim() - 1).reshape(-1, vec.shape[0])\n        vec = vec.reshape(-1)\n        assert input.dim() == 2\n        assert vec.dim() == 1\n\n    n_rows, n_cols = input.shape\n    ceil_nrows = triton.next_power_of_2(n_rows)\n    ceil_ncols = triton.next_power_of_2(n_cols)\n    n_elements = n_rows * n_cols\n\n    if inplace:\n        assert out is None\n        out = input_arg\n        assert out.stride(-1) == 1\n    else:\n        assert out is None or out is None\n        out = torch.empty_like(input, dtype=input.dtype, memory_format=torch.contiguous)\n        assert out.stride(-1) == 1\n\n    ceil_n_elements = triton.next_power_of_2(n_elements)\n\n    use_fp8 = input.dtype == torch.float16 or input.dtype == torch.bfloat16\n\n    _fused_mv_logsoftmax_dropout_kernel[(n_elements,)](\n        input,\n        vec,\n        out,\n        n_elements,\n        n_cols,\n        p,\n        128,\n        BLOCK_SIZE=n_cols,\n        num_warps=4,\n        num_stages=2,\n        OUT_SOFTMAX=False,\n        RETURN_LOG=True,\n        DIM=dim,\n        CEIL_NROWS=ceil_nrows,\n        CEIL_NCOLS=ceil_ncols,\n        CEIL_N_ELEMENTS=ceil_n_elements,\n        HAS_MASK=False,\n        MASK_VALUE=0.0,\n        DETERMINISTIC=not training,\n        IS_RCP=False,\n        ONE_MINEPS=1.0 - torch.finfo(input.dtype).eps if use_fp8 else 0.0,\n    )\n\n    if dim != input_arg.dim() - 1:\n        out = out.reshape(input_arg.shape).transpose(dim, input_arg.dim() - 1)\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number 'other', scaled by 'alpha', to the 'input' tensor. Supports broadcasting to a common shape, type promotion, and accepts integer, float, and complex inputs.\nWrapper Entry Information: add(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to add to input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: \\text{{out}}_i = \\text{{input}}_i + \\text{{alpha}} \\times \\text{{other}}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _add(input, other, alpha):\n    return input + other * alpha\n\ndef add(input, other, *, alpha=1, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape and out.dtype == input.dtype\n    if isinstance(other, torch.Tensor):\n        assert other.shape broadcastable_with input.shape\n        other = other.to(input.dtype)\n    elif isinstance(other, (int, float, complex)):\n        other = torch.tensor(other, dtype=input.dtype, device=input.device)\n    else:\n        raise TypeError(\"Unsupported other type: {}\".format(type(other)))\n    return _add(input, other, alpha, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies 2D Convolution, followed by Layer Normalization and SiLU activation to the input tensor `x`. Sequentially performs convolution on `x`, then applies layer normalization on the convolution output, followed by SiLU activation applied element-wise.\nWrapper Entry Information: fused_silu_layer_norm_conv2d(x: torch.Tensor, weight: torch.Tensor, conv_weight: torch.Tensor, conv_bias: torch.Tensor = None, conv_stride: int = 1, conv_padding: int = 0, conv_dilation: int = 1, conv_groups: int = 1, ln_eps: float = 1e-5) -> torch.Tensor\n\nArgs:\n    x (Tensor): Input tensor for convolution, normalization, and activation.\n    weight (Tensor): Learnable weight of size matching normalized output dimensions for LayerNorm.\n    conv_weight (Tensor): Convolution kernel tensor of appropriate dimensions.\n    conv_bias (Tensor, optional): Convolution bias tensor. Default: ``None``.\n    conv_stride (int, optional): Stride of convolution. Default: 1.\n    conv_padding (int, optional): Padding added to both sides of input. Default: 0.\n    conv_dilation (int, optional): Dilation of convolution kernel. Default: 1.\n    conv_groups (int, optional): Number of groups for convolution. Default: 1.\n    ln_eps (float, optional): Epsilon value for Layer Normalization. Default: 1e-5.\n\nExample:\n    >>> x = torch.randn(4, 3, 32, 32)\n    >>> conv_weight = torch.randn(8, 3, 3, 3)\n    >>> conv_bias = torch.zeros(8)\n    >>> weight = torch.ones(8)\n    >>> output = fused_silu_layer_norm_conv2d(x, weight, conv_weight, conv_bias, conv_stride=1, conv_padding=1)\n    >>> print(output.shape)\n    torch.Size([4, 8, 32, 32])\nother: Convolution operation parameters include stride, padding, dilation, and groups. Layer Normalization uses an epsilon value. Default values are provided for optional parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom ssd.bi.softplus import softplus\n\n@triton.jit\ndef fused_silu_layer_norm_conv2d_kernel(\n    x_ptr,\n    weight_ptr,\n    conv_weight_ptr,\n    conv_bias_ptr,\n    out_ptr,\n    N,\n    C,\n    H,\n    W,\n    C_out,\n    conv_weight_h,\n    conv_weight_w,\n    conv_stride,\n    conv_padding,\n    conv_dilation,\n    conv_groups,\n    ln_eps,\n    stride_n,\n    stride_c,\n    stride_h,\n    stride_w,\n    stride_c_out,\n    stride_conv_weight_h,\n    stride_conv_weight_w,\n    stride_conv_weight_c,\n    BLOCK_SIZE_C: tl.constexpr,\n    BLOCK_SIZE_H: tl.constexpr,\n    BLOCK_SIZE_W: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_c = tl.cdiv(C_out, BLOCK_SIZE_C)\n    num_pid_h = tl.cdiv(H, BLOCK_SIZE_H)\n    num_pid_w = tl.cdiv(W, BLOCK_SIZE_W)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_c\n    group_id = pid // num_pid_in_group\n    first_pid_n = group_id * GROUP_SIZE_M\n    group_size_n = min(num_pid_n - first_pid_n, GROUP_SIZE_M)\n    pid_n = first_pid_n + (pid % group_size_n)\n    pid_c = (pid % num_pid_in_group) // group_size_n\n    pid_h = (pid // num_pid_c) % num_pid_h\n    pid_w = (pid % num_pid_c) // num_pid_h\n\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_h = pid_h * BLOCK_SIZE_H + tl.arange(0, BLOCK_SIZE_H)\n    offs_w = pid_w * BLOCK_SIZE_W + tl.arange(0, BLOCK_SIZE_W)\n    offs_c = pid_c * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C)\n    offs_conv_weight_h = tl.arange(0, BLOCK_SIZE_CONV_WEIGHT_H)\n    offs_conv_weight_w = tl.arange(0, BLOCK_SIZE_CONV_WEIGHT_W)\n\n    x_base_ptr = x_ptr + (\n        offs_n[:, None, None] * stride_n + offs_c[None, :, None] * stride_c\n    )\n    x = tl.load(\n        x_base_ptr,\n        mask=(offs_n[:, None, None] < N) & (offs_c[None, :, None] < C),\n        other=0.0,\n    )\n    conv_weight_base_ptr = conv_weight_ptr + (\n        offs_conv_weight_h[:, None, None] * stride_conv_weight_h\n        + offs_conv_weight_w[None, :, None] * stride_conv_weight_w\n        + offs_c[None, None, :] * stride_conv_weight_c\n    )\n    conv_weight = tl.load(\n        conv_weight_base_ptr,\n        mask=(offs_conv_weight_h[:, None, None] < conv_weight_h)\n        & (offs_conv_weight_w[None, :, None] < conv_weight_w)\n        & (offs_c[None, None, :] < C_out),\n        other=0.0,\n    ).to(tl.float32)\n\n    conv_bias = tl.load(conv_bias_ptr).to(tl.float32)\n\n    conv_out = tl.dot(x, conv_weight) + conv_bias\n    conv_out = tl.reshape(conv_out, (BLOCK_SIZE_N, -1, BLOCK_SIZE_W))\n    conv_out = tl.transpose(conv_out, (0, 2, 1))\n    conv_out = tl.reshape(conv_out, (N, -1))\n\n    mean = tl.sum(conv_out, axis=1) / (N * C_out)\n    conv_out = tl.where((offs_n[:, None, None] < N) & (offs_c[None, :, None] < C_out),\n                    conv_out,\n                    0.0)\n    conv_out = tl.where((offs_n[:, None, None] < N) & (offs_c[None, :, None] < C_out),\n                    conv_out - mean[:, None],\n                    0.0)\n    conv_out_var = tl.sum(conv_out * conv_out, axis=1) / (N * C_out)\n    rstd = 1 / tl.sqrt(conv_out_var + ln_eps)\n\n    weight = tl.load(weight_ptr + offs_c, mask=offs_c < C_out, other=0.0)\n\n    out = conv_out * (weight * rstd)[:, None]\n    out = softplus(out)\n    out_base_ptr = out_ptr + (\n        offs_n[:, None, None] * stride_n\n        + (offs_c + C_out)[None, :, None] * stride_c\n    )\n    tl.store(\n        out_base_ptr,\n        out,\n        mask=(offs_n[:, None, None] < N) & (offs_c[None, :, None] < C_out),\n    )\n\n\ndef fused_silu_layer_norm_conv2d(\n    x: torch.Tensor,\n    weight: torch.Tensor,\n    conv_weight: torch.Tensor,\n    conv_bias: torch.Tensor = None,\n    conv_stride: int = 1,\n    conv_padding: int = 0,\n    conv_dilation: int = 1,\n    conv_groups: int = 1,\n    ln_eps: float = 1e-5,\n) -> torch.Tensor:\n    assert x.dtype == torch.float16\n    assert weight.dtype == torch.float16\n    assert conv_weight.dtype == torch.float16\n    assert x.shape[1] == weight.shape[0]\n    assert (\n        conv_weight.shape[1] == x.shape[1]\n    ), f\"{conv_weight.shape=} must have the same number of input channels as x has features\"\n    assert conv_bias is None or conv_bias.shape == (conv_weight.shape[0],)\n    assert 0 <= conv_padding <= conv_dilation\n    assert conv_weight.shape[2] == conv_weight.shape[3]\n    conv_weight_h = conv_weight.shape[2]\n    conv_weight_w = conv_weight.shape[3]\n    assert conv_weight_h % 2 == 1 and conv_weight_w % 2 == 1\n\n    batch_size, in_channels, in_height, in_width = x.shape\n    out_channels = weight.shape[0]\n    out_height = triton.cdiv(in_height, conv_stride)\n    out_width = triton.cdiv(in_width, conv_stride)\n\n    conv_weight = conv_weight.contiguous()\n    if conv_bias is not None:\n        conv_bias = conv_bias.contiguous()\n    weight = weight.contiguous()\n\n    out = torch.empty(\n        (batch_size, out_channels, out_height, out_width),\n        device=x.device,\n        dtype=x.dtype,\n    )\n\n    grid = lambda META: (\n        triton.cdiv(in_height, META[\"BLOCK_SIZE_H\"])\n        * triton.cdiv(in_width, META[\"BLOCK_SIZE_W\"])\n        * triton.cdiv(in_channels, META[\"BLOCK_SIZE_C\"]),\n    )\n    BLOCK_SIZE_N = 32\n    GROUP_SIZE_M = 8\n    (\n        BLOCK_SIZE_CONV_WEIGHT_H,\n        BLOCK_SIZE_CONV_WEIGHT_W,\n    ) = conv_weight.shape[-2:]\n    num_warps = 4\n    pad_h = (\n        (conv_weight_h - conv_stride) // 2 + conv_padding\n    )  # (kH - stride) // 2 + padding\n    pad_w = (\n        (conv_weight_w - conv_stride) // 2 + conv_padding\n    )  # (kH - stride) // 2 + padding\n    x = tl.zeros(\n        ([1, 1, pad_h * 2 + in_height, pad_w * 2 + in_width]) + x.shape[1:],\n        dtype=x.dtype,\n    )\n    x[:, :, pad_h:pad_h + in_height, pad_w:pad_w + in_width] = x\n    x = x.to(x.dtype)\n\n    with torch.cuda.device(x.device.index):\n        fused_silu_layer_norm_conv2d_kernel[grid](\n            x,\n            weight,\n            conv_weight,\n            conv_bias,\n            out,\n            batch_size,\n            in_channels,\n            in_height,\n            in_width,\n            out_channels,\n            conv_weight_h,\n            conv_weight_w,\n            conv_stride,\n            pad_h,\n            conv_dilation,\n            conv_groups,\n            ln_eps,\n            x.stride(0),\n            x.stride(1),\n            x.stride(2),\n            x.stride(3),\n            out.stride(0),\n            out.stride(1),\n            out.stride(2),\n            out.stride(3),\n            conv_weight.stride(0),\n            conv_weight.stride(1),\n            conv_weight.stride(2),\n            BLOCK_SIZE_N=BLOCK_SIZE_N,\n            GROUP_SIZE_M=GROUP_SIZE_M,\n            BLOCK_SIZE_CONV_WEIGHT_H=BLOCK_SIZE_CONV_WEIGHT_H,\n            BLOCK_SIZE_CONV_WEIGHT_W=BLOCK_SIZE_CONV_WEIGHT_W,\n            num_warps=num_warps,\n        )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining index selection and element-wise equality comparison. It selects elements from the input tensor along a specified dimension using provided indices and then performs an element-wise equality comparison between the selected elements and another tensor or scalar. The result is a boolean tensor of the same shape as the selected elements, indicating where the comparisons are true.\nWrapper Entry Information: fused_index_select_eq(input, dim, index, other, *, out=None) -> Tensor. Args: input (Tensor): The input tensor X. dim (int): The dimension along which to index. index (IntTensor or LongTensor): The indices to select along dimension dim. other (Tensor or float): The tensor or value Y to compare with the selected tensor. out (Tensor, optional): Output tensor. Ignored if None. Default: None\nMath: Given an input tensor X, dimension \text{dim}, index tensor I, and another tensor or scalar Y, the function computes:\n\n1. **Index Selection:**\n\nSelect elements from X along dimension \text{dim} using indices I:\n\n\\[\nS = \\text{index\\_select}(X, \\text{dim}, I)\n\\]\n\n2. **Element-wise Equality Comparison:**\n\nCompare the selected tensor S with Y element-wise:\n\n\\[\nO = (S == Y)\n\\]\n\nThe output tensor O is a boolean tensor of the same shape as S.\nother: - The shapes of the selected tensor S and other must be broadcastable for the element-wise comparison.\n- If other is a scalar, it is broadcasted to the shape of S.\n- The function supports autograd for gradient computation, although the output is a boolean tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef triton_fused_index_select_eq_kernel(\n    X,\n    I,\n    Y,\n    O,\n    stride_x,\n    stride_y,\n    stride_o,\n    stride_ix,\n    stride_iy,\n    stride_oix,\n    stride_oiy,\n    M,\n    N,\n    K,\n    idx,\n    IDX_MASK,\n    NUM_WARPS,\n    BLOCK_SIZE_M,\n    BLOCK_SIZE_N,\n):\n    pid_m = tl.program_id(axis=0)\n    pid_n = tl.program_id(axis=1)\n    if pid_m * BLOCK_SIZE_M >= M:\n        return\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    I_block_ptr = I + (offs_m[:, None] * stride_ix + offs_n[None, :] * stride_iy)\n    O_block_ptr = O + (offs_m[:, None] * stride_oix + offs_n[None, :] * stride_oiy)\n    if IDX_MASK:\n        idx_mask = idx + offs_m * N + offs_n\n        I_block = tl.load(I_block_ptr, mask=idx_mask < K, other=0)\n    else:\n        I_block = tl.load(I_block_ptr)\n    X_block_ptr = (\n        X\n        + (offs_m[:, None] * stride_x + offs_n[None, :] * stride_y)\n        + I_block[:, None] * K\n    )\n    Y_block_ptr = Y + offs_n\n    X_block = tl.load(X_block_ptr)\n    Y_block = tl.load(Y_block_ptr, mask=offs_n < N, other=0)\n    O_block = tl.where(X_block == Y_block, 1, 0)\n    tl.store(O_block_ptr, O_block, mask=idx_mask < K)\n\n\ndef fused_index_select_eq_triton(input, dim, index, other, *, out=None):\n    dim = dim % input.ndim\n    input_shape = list(input.shape)\n    index_shape = list(index.shape)\n    other_shape = list(other.shape) if isinstance(other, torch.Tensor) else [1]\n    if len(index_shape) == 0:\n        index_shape = [1]\n    if len(other_shape) == 0:\n        other_shape = [1]\n    index_strides = [0 for _ in index_shape]\n    other_strides = [0 for _ in other_shape]\n    if index.ndim == 2:\n        index_strides[0] = index_shape[1]\n    if other.ndim == 2:\n        other_strides[0] = other_shape[1]\n    broadcast_shape = list(\n        broadcast_shapes([input_shape[: dim + 1], index_shape, other_shape])\n    )\n    if broadcast_shape[dim] == 1:\n        broadcast_shape[dim] = input_shape[dim]\n    if broadcast_shape[-1] == 1:\n        broadcast_shape[-1] = other_shape[-1]\n    in_broadcast_dims = [i for i in range(len(broadcast_shape)) if i != dim]\n    out_shape = list(input.shape)\n    out_shape[in_broadcast_dims] = broadcast_shape[in_broadcast_dims]\n    out = torch.empty(out_shape, dtype=torch.bool, device=input.device)\n    if out.numel() == 0:\n        return out\n    index_shape = list(index.shape)\n    if len(index_shape) == 0:\n        index_shape = [1]\n    N = index_shape[-1]\n    M = triton.cdiv(input.size(dim), 1)\n    K = index.size(dim)\n    if IDX_MASK:\n        idx = torch.arange(0, N, device=index.device).expand(M, N)\n    else:\n        idx = None\n    grid = lambda META: (\n        triton.cdiv(M, META[\"BLOCK_SIZE_M\"]),\n        triton.cdiv(N, META[\"BLOCK_SIZE_N\"]),\n    )\n    triton_fused_index_select_eq_kernel[grid](\n        input,\n        index,\n        other,\n        out,\n        input.stride(dim),\n        other.stride(0),\n        out.stride(0),\n        index.stride(0),\n        index.stride(1),\n        out.stride(0),\n        out.stride(1),\n        M,\n        N,\n        K,\n        idx,\n        IDX_MASK,\n        NUM_WARPS=NUM_WARPS,\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the indices of the maximum values of a tensor across a specified dimension. If the dimension is None, it returns the index of the maximum value in the flattened input tensor. The output tensor can retain the reduced dimension if keepdim is set to True.\nWrapper Entry Information: argmax(input, dim, keepdim=False) -> LongTensor\nArgs:\n    input (Tensor): the input tensor.\n    dim (int): the dimension to reduce. If ``None``, the argmax of the flattened input is returned.\n    keepdim (bool): whether the output tensor has :attr:`dim` retained or not.\nother: This is the second value returned by torch.max. See its documentation for the exact semantics of this method.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef argmax(input, dim, keepdim=False):\n    return tl.argmax(input, axis=dim, keepdim=keepdim)\n\ndef argmax(input, dim, keepdim=False):\n    if dim is None:\n        input = input.flatten()\n        dim = 0\n    return argmax(input, dim, keepdim)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using LU decomposition. Given matrix `A`, this function performs LU decomposition and then solves for `x` in `L @ U @ x = b`, where `P`, `L`, and `U` are derived from the LU decomposition.\nWrapper Entry Information: def fused_lu_solve(A: Tensor, b: Tensor) -> Tensor: A: The input matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n,)`.\nMath: Solves `Ax = b` using LU decomposition, where `A = P @ L @ U` and `L @ U @ x = b`.\nother: The function uses LU decomposition to solve linear equations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import householder\n\n@triton.jit\ndef _lu_solve(L, U, b):\n    n = L.shape[0]\n    # Solve Ly = b\n    y = tl.zeros((n,), dtype=tl.float32)\n    for i in range(n):\n        idx = i + tl.arange(0, n)  # idx: [i, i+1, ..., n-1]\n        mask = idx >= i\n        y += tl.where(mask, -tl.sum(L[i:, i] * y[idx[mask]], axis=0) / L[i, i], 0.0)\n    y += tl.where(tl.arange(0, n) >= n - 1, b / L[n - 1, n - 1], 0.0)\n\n    # Solve Ux = y\n    x = tl.zeros((n,), dtype=tl.float32)\n    for i in range(n - 1, -1, -1):\n        idx = i + tl.arange(0, n)  # idx: [i, i+1, ..., n-1]\n        mask = idx <= i\n        x += tl.where(mask, -tl.sum(U[: i + 1, i] * x[idx[mask]], axis=0) / U[i, i], 0.0)\n    x += tl.where(tl.arange(0, n) <= 0, y, 0.0)\n    return x\n\n@triton.jit\ndef fused_lu_solve(A, b):\n    n = A.shape[0]\n    # A = P @ L @ U\n    P, L, U = householder.triangular_factorization(A)\n    # L @ U @ x = b\n    x = _lu_solve(L, U, b)\n    return x\n\ndef fused_lu_solve(A: Tensor, b: Tensor) -> Tensor:\n    \"\"\"\n    Args:\n        A: The input matrix ``A`` of shape ``[..., n, n]``.\n        b: The right-hand side tensor ``b`` of shape ``[..., n]``.\n\n    Returns:\n        Tensor: The solution ``x`` of shape ``[..., n]``.\n    \"\"\"\n    A = A.contiguous()\n    b = b.contiguous()\n    if A.shape[-1] != b.shape[-1]:\n        raise ValueError(f\"Shape must be the same, but got {A.shape} and {b.shape}\")\n    if A.ndim < 2:\n        raise ValueError(f\"Input ndim must be larger than 1, but got {A.ndim}\")\n\n    n = A.shape[-1]\n    if n == 1:\n        return torch.tensor([[b / A]], dtype=A.dtype, device=A.device)\n    elif n <= 128:\n        return torch.linalg.solve(A, b)\n    else:\n        block_size = triton.next_power_of_2(n)\n        if block_size > 1024:\n            block_size = 512\n        grid = (b.shape[:-2] + (1,))\n        x = torch.empty(grid + (n,), dtype=A.dtype, device=A.device)\n        LU = torch.empty(grid + (n, n), dtype=A.dtype, device=A.device)\n        P = torch.empty(grid + (n, n), dtype=torch.int32, device=A.device)\n\n        _fused_lu_solve(\n            A, b, LU, P, x, n=n, block_size=block_size, grid=grid, dtype=A.dtype\n        )\n        return x\n\n@triton.autotune(\n    configs=[\n        triton.Config({\"BLOCK_SIZE\": 128}, num_warps=4),\n        triton.Config({\"BLOCK_SIZE\": 64}, num_warps=4),\n    ],\n    key=[\"n\"],\n)\n@triton.jit\ndef _fused_lu_solve(\n    A, b, LU, P, x, n, block_size, grid, dtype: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    # Load A, b to SRAM\n    A = A + pid * n * n\n    b = b + pid * n\n    if dtype == torch.float32:\n        A = A.to(tl.float32)\n        b = b.to(tl.float32)\n    # A = P @ L @ U\n    P, L, U = householder.triangular_factorization(A, n, block_size, 1)\n    # Solve L @ U @ x = b\n    _lu_solve(L, U, b, x, n, block_size)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between `x1` and `x2` using the specified norm, then normalizes the resulting distances along the specified dimension. This combined operation is useful for obtaining normalized distance values between two sets of vectors.\nWrapper Entry Information: normalize_pairwise_distance(x1, x2, p_distance=2.0, eps_distance=1e-6, keepdim=False, p_norm=2, dim_norm=1, eps_norm=1e-12) -> Tensor; x1 (Tensor): The first input tensor; x2 (Tensor): The second input tensor, must have the same shape as `x1`; p_distance (float): The norm degree for computing the pairwise distance. Default: 2.0; eps_distance (float): Small value to avoid division by zero in pairwise distance calculation. Default: 1e-6; keepdim (bool): Whether to keep the reduced dimensions in the output. Default: False; p_norm (float): The exponent value in the norm formulation for normalization. Default: 2; dim_norm (int): The dimension along which normalization is applied. Default: 1; eps_norm (float): Small value to avoid division by zero in normalization. Default: 1e-12\nMath: \\text{distance} = \\frac{\\text{pairwise\\_distance}(x1, x2)}{\\max(\\lVert \\text{pairwise\\_distance}(x1, x2) \\rVert_p, \\epsilon)}\nother: The combined operation is useful for obtaining normalized distance values between two sets of vectors.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _triton_normalize_pairwise_distance(x1, x2, p_distance, eps_distance, keepdim, p_norm, dim_norm, eps_norm):\n    dist = tl.pairwise_distance(x1, x2, p_distance, eps_distance, keepdim)\n    norm = tl.norm(dist, p_norm, dim_norm, eps_norm)\n    return dist / norm\n\ndef normalize_pairwise_distance(x1: torch.Tensor, x2: torch.Tensor, p_distance: float = 2.0, eps_distance: float = 1e-06, keepdim: bool = False, p_norm: int = 2, dim_norm: int = 1, eps_norm: float = 1e-12) -> torch.Tensor:\n    \"\"\"\n    For each pair of entities in `x1` and `x2`, this function computes the normalized distance.\n    Args:\n        x1 (Tensor): the first input tensor\n        x2 (Tensor): the second input tensor, must have the same shape as `x1`\n        p_distance (float): p-norm used for distance computation. (default: 2.0)\n        eps_distance (float): small value to avoid division by zero in distance computation. (default: 1e-6)\n        keepdim (bool): whether the reduced dimensions are kept in the output. (default: False)\n        p_norm (int): p-norm used for normalization. (default: 2)\n        dim_norm (int): dimension used for normalization\n        eps_norm (float): small value to avoid division by zero in normalization. (default: 1e-12)\n    Returns:\n        Tensor: normalized distance\n    \"\"\"\n    return _triton_normalize_pairwise_distance(x1, x2, p_distance, eps_distance, keepdim, p_norm, dim_norm, eps_norm)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a namedtuple (values, indices) where values is the maximum value of each row of the input tensor in the given dimension dim. Indices is the index location of each maximum value found (argmax). If keepdim is True, the output tensors are of the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple maximal values in a reduced row, the indices of the first maximal value are returned.\nWrapper Entry Information: max(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Default: ``False``. out (tuple, optional): the result tuple of two output tensors (max, max_indices).\nother: If there are multiple maximal values in a reduced row then the indices of the first maximal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.triton_heuristics import reduction\nfrom torch._inductor import triton_helpers\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_heuristics\n\n@reduction(\n    size_hints=[8192, 512],\n    reduction_hint=ReductionHint.DEFAULT,\n    filename=__file__,\n    meta={\n        'signature': {0: ('pointer', 'float32')},\n        'device': 0,\n        'device_type': 'cuda',\n        'constants': {},\n        'mutated_arg_names': [],\n        'autotune_hints': set(),\n        'kernel_name': 'max',\n        'configs': [instance_descriptor()]\n    }\n)\n@triton.jit\ndef triton_max(output_ptr, \n               numel, \n               XBLOCK: tl.constexpr, \n               RBLOCK: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * RBLOCK\n    offset = block_start + tl.arange(0, RBLOCK)\n    mask = offset < numel\n    ptrs = output_ptr + offset\n    x = tl.load(ptrs, mask=mask, other=-float('inf'))\n    current_max = tl.max(x, axis=0)\n    tl.store(output_ptr + pid, current_max)\n\ndef wrapper(input, dim, keepdim=False, *, out=None):\n    if input.is_floating():\n        dtype = input.dtype\n    else:\n        dtype = torch.float32\n    if out is None:\n        max_values = torch.empty(input.shape[demote_to_scalar(input.dim() - 1)],\n                                 dtype=dtype,\n                                 device=input.device)\n    else:\n        max_values = out[0]\n    if input.dim() > 1:\n        input_shape = input.shape\n        input_stride = input.stride()\n        dim = dim % input.dim()\n        if dim < 0:\n            dim = dim + len(input_shape)\n        dim_size = input_shape[dim]\n        dim_stride = input_stride[dim]\n        if dim_stride != 1:\n            input = input.contiguous()\n            input_stride = input.stride()\n            dim_stride = input_stride[dim]\n        shape = [-1, dim_size]\n        strides = [shape[1] * dim_stride, 1]\n        view = StridedBuffer(input, shape, strides)\n        triton_max(max_values, numels[0])\n        if not keepdim:\n            max_values = max_values.squeeze(dim)\n        return (max_values, )\n    else:\n        triton_max(max_values, numels[0])\n        return (max_values, )\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by the log_softmax activation function. This combined operation is optimized to be numerically stable and efficient, applying both a linear transformation and log-softmax in one step.\nWrapper Entry Information: log_softmax_linear(input, weight, bias=None, dim=-1, dtype=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None. dim (int): The dimension along which log_softmax will be computed. Default: -1. dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation. Default: None.\nMath: \\text{out} = \\log\\left(\\frac{\\exp(\\text{linear}(\\text{input}))}{\\sum_j \\exp(\\text{linear}(\\text{input})_j)}\\right) y = xA^T + b\nother: The values along the specified dimension represent log probabilities and sum to 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef log_softmax_linear_kernel(\n    input_ptr, weight_ptr, bias_ptr, out_ptr, stride_input, stride_weight,\n    stride_out, n_features: tl.constexpr, n_out: tl.constexpr,\n    last_dim: tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    input_ptr += pid * stride_input\n    weight_ptr += pid * stride_weight\n    out_ptr += pid * stride_out\n\n    row_idx = tl.arange(0, BLOCK_SIZE)\n    col_idx = tl.arange(0, n_features)\n\n    input = tl.load(input_ptr + col_idx, mask=col_idx < n_features, other=0.0)\n    if last_dim != -1:\n        input = input * (-1)\n\n    weight = tl.load(weight_ptr + n_features * row_idx + col_idx,\n                     mask=col_idx < n_features, other=0.0)\n\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + row_idx)\n        input += bias\n\n    linear = tl.sum(input * weight, axis=0)\n    z = linear - tl.max(linear, axis=0)\n    numerator = tl.exp(z)\n    denominator = tl.sum(numerator, axis=0)\n    softmax = numerator / denominator\n    if last_dim != -1:\n        softmax = tl.math.log(softmax)\n    else:\n        softmax = -tl.math.log(softmax)\n    tl.store(out_ptr + row_idx, softmax, mask=row_idx < n_out)\n\n\ndef log_softmax_linear(input, weight, bias=None, dim=-1, dtype=None):\n    check_dim(dim)\n    input = input.contiguous()\n    weight = weight.contiguous()\n    if bias is not None:\n        bias = bias.contiguous()\n    if dtype is None:\n        dtype = input.dtype\n    check_dtype(dtype, [torch.float16, torch.bfloat16, torch.float32])\n    check_device(input.device, [torch.cuda])\n    check_broadcasting(input, weight, bias)\n    out = torch.empty(input_shape_broadcasted(\n        input, weight, bias), dtype=dtype, device=input.device)\n    n_features = input.shape[-1]\n    out_features = weight.shape[0]\n    assert_single_feature(input)\n    last_dim = dim % input.ndim\n    stride_input = input.stride()\n    stride_weight = weight.stride()\n    stride_out = out.stride()\n    BLOCK_SIZE = triton.next_power_of_2(n_features)\n    grid = lambda meta: (triton.cdiv(n_features, meta['BLOCK_SIZE']), )\n    log_softmax_linear_kernel[grid](input, weight, bias, out, stride_input,\n                                     stride_weight, stride_out, n_features,\n                                     out_features, last_dim, BLOCK_SIZE)\n    if last_dim != -1:\n        out = out * (-1)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit function element-wise. This operation compares each element in the input tensor to zero and returns the element itself if it is greater than zero or zero otherwise. The operation can be performed in-place, modifying the input tensor directly if inplace=True.\nWrapper Entry Information: relu(input, inplace=False) -> Tensor\n\nArgs:\n    inplace: can optionally do the operation in-place. Default: False\n\nShape:\n    - Input: (*), where * means any number of dimensions.\n    - Output: (*), same shape as the input.\nMath: ReLU(x) = (x)^+ = max(0, x)\nother: See torch.nn.ReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu(input):\n    return tl.where(input > 0, input, 0)\n\ndef relu(input, inplace=False):\n    if inplace:\n        return relu_(input)\n    else:\n        return relu_(input.clone())\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the least squares problem for an overdetermined system of linear equations using QR decomposition. It computes the least squares solution x that minimizes the Euclidean 2-norm |Ax - b|_2, where A is the coefficient matrix and b is the right-hand side vector or matrix.\nWrapper Entry Information: def least_squares_qr(A, b, *, mode='reduced', out=None) -> Tensor: A (Tensor): Coefficient matrix of shape (*, m, n), where * is zero or more batch dimensions. b (Tensor): Right-hand side vector or matrix of shape (*, m) or (*, m, k), where k is the number of right-hand sides. mode (str, optional): Determines the type of QR decomposition to use. One of 'reduced' (default) or 'complete'. See torch.linalg.qr for details. out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: The QR decomposition of A is given by A = QR, where Q is a matrix with orthonormal columns and R is an upper triangular matrix. The least squares solution is x = R^{-1} Q^H b.\nother: The function utilizes QR decomposition to efficiently solve overdetermined linear systems by finding the least squares solution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _lu_solve_kernel(\n    A_ptr, b_ptr, x_ptr, n_ptr, batch, m, n, nrhs, lda, ldb, ldc, n_block, **meta\n):\n    pid = tl.program_id(0)\n    if pid < batch:\n        n_cur = tl.load(n_ptr + pid)\n        if n_cur <= 0:\n            return\n        m_id = tl.arange(0, n_block)\n        b_id = tl.arange(0, n_block)\n        A_offs = pid * lda + m_id[:, None] * lda + b_id[None, :] * 1\n        b_offs = pid * ldb + m_id[:, None] * ldb + b_id[None, :] * nrhs\n        x_offs = pid * ldc + m_id[:, None] * ldc + b_id[None, :] * nrhs\n        A_ptrs = A_ptr + A_offs\n        b_ptrs = b_ptr + b_offs\n        x_ptrs = x_ptr + x_offs\n        r = tl.zeros([n_block, n_block], dtype=tl.float32)\n        for k in range(n_cur):\n            r += tl.dot(tl.load(A_ptrs), tl.load(b_ptrs), allow_tf32=False)\n            A_ptrs += 1\n            b_ptrs += 1\n        tl.store(x_ptrs, r.to(x_ptr.dtype.element_ty), mask=b_id[None, :] < nrhs)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using QR decomposition. It performs QR decomposition of a square matrix A in \\mathbb{K}^{n \times n} (where \\mathbb{K} is either \\mathbb{R} or \\mathbb{C}) and computes the determinant by taking the product of the diagonal elements of R.\nWrapper Entry Information: determinant_via_qr(A, *, mode='reduced', out=None) -> Tensor\nMath: The QR decomposition of A is: A = Q R, where Q is an orthogonal/unitary matrix, R is an upper triangular matrix. The determinant is given by: \\det(A) = \\det(Q)\\cdot \\prod_{i=1}^{n} R_{ii}. For real matrices, \\det(Q) = \\pm 1. For complex matrices, |\\det(Q)| = 1.\nother: Numerical stability considerations are important, especially for ill-conditioned matrices. The function explicitly computes \\det(Q) to account for the sign. For complex matrices, the result may be complex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef determinant_via_qr_triton(A, mode, out):\n    # Triton kernel to compute the determinant using QR decomposition\n    batch, n = A.shape\n    sgn_q = torch.ones((batch, ), dtype=torch.float32, device=A.device)\n    d = torch.ones((batch, ), dtype=torch.float32, device=A.device)\n    if mode == 'reduced':\n        for k in range(n):\n            # Apply Givens rotation to zero out elements below the diagonal\n            g = givens(A, k, k + 1, n)\n            A = apply_givens(A, g, k, k + 1, n)\n            d_k = torch.prod(torch.abs(A[:, k, k]))\n            d *= d_k\n            if A[:, k, k] < 0:\n                sgn_q *= -1\n    else:\n        raise NotImplementedError\n    if A.dtype.is_fp64():\n        d = d.to(torch.float64)\n    sgn_q = sgn_q.to(A.dtype)\n    # Compute the determinant as the product of sgn_q and the diagonal elements of R\n    return torch.prod(sgn_q * d.unsqueeze(1))\n\ndef determinant_via_qr(A, *, mode='reduced', out=None):\n    # Wrapper function for the Triton kernel\n    if A.is_floating_point():\n        if A.dtype in (torch.float32, torch.float64):\n            if A.dim() == 2:\n                batch, n = A.shape\n                A = A.unsqueeze(0) if batch == 1 else A\n                out = torch.empty((batch, ), dtype=A.dtype, device=A.device) if out is None else out\n                assert out.shape == (batch, )\n                determinant_via_qr_triton(A, mode, out)\n                return out.squeeze(0) if batch == 1 else out\n            else:\n                raise ValueError(\"only 2D tensors are supported\")\n        else:\n            raise ValueError(\"input must be a floating-point tensor\")\n    else:\n        raise ValueError(\"input must be a floating-point tensor\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining tiling (repeating elements) and the exponential function. The input tensor is first repeated along each dimension according to the specified `dims` using the tiling operation, then the exponential function is applied element-wise to the resulting tensor.\nWrapper Entry Information: fused_tile_exp(input, dims, *, out=None) -> Tensor; input (Tensor): The input tensor X whose elements are to be repeated and exponentiated.; dims (tuple of int): The number of repetitions for each dimension. If `dims` has fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X and a tuple of dimensions \text{dims}, the function computes:\n1. **Tiling:**\nThe input tensor is repeated along each dimension according to the specified number of times in `dims`:\nY = tile(X, dims)\n2. **Exponential Function:**\nThe exponential function is applied element-wise to the tiled tensor:\nZ = exp(Y)\nother: The `dims` parameter controls how many times the input tensor is repeated along each dimension.\nIf `dims` specifies fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.\nThe function supports autograd for gradient computation.\nAll operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _tile_exp(x):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Tile the tensor\n    y = tl.tile(x_fp32, (2, 3))\n    # Apply the exponential function\n    z = tl.exp(y)\n    return z\n\ndef tile_exp(x):\n    # Call the Triton kernel\n    return _tile_exp(x)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in the input tensor, and then applies the hyperbolic tangent (tanh) function to the square-rooted values. The function returns a tensor where each element is the result of applying sqrt followed by tanh to each element of the input.\nWrapper Entry Information: def sqrt_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\sqrt{\\text{input}_{i}})\nother: Using a tensor with some negative values results in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sqrt_tanh_kernel(x, y, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x_values = tl.load(x + offsets, mask=mask)\n    y_values = tl.sqrt(x_values)\n    y_values = tl.math.tanh(y_values)\n    tl.store(y + offsets, y_values, mask=mask)\n\ndef sqrt_tanh(input, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    assert out.shape == input.shape\n\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    sqrt_tanh_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over an input tensor across channels, followed by the Sigmoid Linear Unit (SiLU) activation function applied element-wise. This combined operation normalizes the input tensor and then applies a non-linear SiLU activation.\nWrapper Entry Information: silu_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor; input (Tensor): The input tensor for Batch Normalization.; running_mean (Tensor): The running mean tensor (used during evaluation).; running_var (Tensor): The running variance tensor (used during evaluation).; weight (Tensor, optional): The weight tensor for Batch Normalization scaling. Default: None.; bias (Tensor, optional): The bias tensor for Batch Normalization. Default: None.; training (bool, optional): Whether the module is in training mode. Default: False.; momentum (float, optional): Value used for the running mean and variance computation. Default: 0.1.; eps (float, optional): A small value added to the denominator for numerical stability. Default: 1e-5.\nMath: The combined operation is defined as: \\text{out} = \\text{silu}(\\text{BatchNorm}(x)), where the SiLU function is defined as: \\text{silu}(x) = x * \\sigma(x), \\text{where } \\sigma(x) = \\frac{1}{1 + \\exp(-x)}\nother: Returns: A tensor that has undergone batch normalization and SiLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef silu(x):\n    return x * tl.sigmoid(x)\n\n@triton.jit\ndef silu_bmm(out, a, b, running_mean, running_var, weight, bias, N, HW, C, momentum, eps, train):\n    pid = tl.program_id(0)\n    if pid < N:\n        cols = tl.arange(0, HW)\n        batch_mean = tl.sum(a[pid, :, :], axis=1) / HW\n        var = tl.sum((a[pid, :, :] - batch_mean[:, None]) * (a[pid, :, :] - batch_mean[:, None]), axis=1) / HW\n        running_mean = (1 - momentum) * running_mean + momentum * batch_mean\n        running_var = (1 - momentum) * running_var + momentum * var\n        x_hat = (a[pid, :, :] - batch_mean[:, None]) * (1 / tl.sqrt(var[:, None] + eps))\n        out1 = tl.sum((b[pid, :, :] - running_mean[:, None]) * (x_hat), axis=1)\n        if train:\n            tl.store(running_mean + pid * C + cols, running_mean)\n            tl.store(running_var + pid * C + cols, running_var)\n        w = tl.load(weight + cols)\n        out2 = tl.load(bias + cols)\n        out[pid, :] = silu(out1 * w + out2)\n\ndef silu_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5):\n    assert input.is_contiguous()\n    assert running_mean.is_contiguous()\n    assert running_var.is_contiguous()\n    if weight is not None:\n        assert weight.is_contiguous()\n    if bias is not None:\n        assert bias.is_contiguous()\n    input = input.view(input.size(0), -1)\n    N, HW = input.size()\n    C = HW // N\n    out = torch.empty_like(input)\n    running_mean = running_mean.view(-1)\n    running_var = running_var.view(-1)\n    if weight is not None:\n        weight = weight.view(-1)\n    if bias is not None:\n        bias = bias.view(-1)\n    grid = lambda META: (N, )\n    silu_bmm[grid](out, input, out, running_mean, running_var, weight, bias, N, HW, C, momentum, eps, not training)\n    return out.view_as(input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Fills the elements of the self tensor with a specified value by selecting the indices in the order given in the index tensor. The operation is performed along a specified dimension.\nWrapper Entry Information: index_fill_(dim, index, value) -> Tensor\n\nArgs:\n    dim (int): dimension along which to index\n    index (LongTensor): indices of :attr:`self` tensor to fill in\n    value (float): the value to fill with\n\nExample::\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 2])\n    >>> x.index_fill_(1, index, -1)\n    tensor([[-1.,  2., -1.],\n            [-1.,  5., -1.],\n            [-1.,  8., -1.]])\nother: The function modifies the tensor in-place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef index_fill_(self, dim, index, value):\n    return tl.device_index_fill_(self, dim, index, value)\n\ndef wrapper_func(self, dim, index, value):\n    return index_fill_(self, dim, index, value)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining cross-entropy loss computation, softmax activation, and layer normalization. It computes the cross-entropy loss for given logits and targets, applies softmax activation to the logits, and then applies layer normalization to the resulting probabilities.\nWrapper Entry Information: fused_cross_entropy_softmax_layernorm(logits, targets, normalized_shape, weight=None, ignore_index=-100, reduction='mean', label_smoothing=0.0, eps=1e-5, *, out=None) -> Tuple[Tensor, Tensor] - logits (Tensor): Input logits of shape (N, C) or (N, C, *), where N is the batch size and C is the number of classes. - targets (Tensor): Ground truth class indices or class probabilities. If containing class indices: shape (N) or (N, *) with values 0 <= targets_i < C. If containing class probabilities: same shape as logits and values in [0, 1]. - normalized_shape (int or list or torch.Size): Input shape over which layer normalization is applied. - weight (Tensor, optional): A manual rescaling weight given to each class. If provided, must be of size C. - ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100. - reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'. - label_smoothing (float, optional): A float in [0.0, 1.0] specifying the amount of smoothing when computing the loss. Default: 0.0. - eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5. - out (Tensor, optional): Output tensor for the normalized probabilities. Ignored if None. Default: None.\nMath: Given input logits \\mathbf{z} and target labels \\mathbf{y}, the function computes:\n\n1. **Cross-Entropy Loss:**\n\nFor target class indices:\n\n\\[\nL = -\\sum_{i=1}^N \\log\\left( \\frac{e^{z_{i, y_i}}}{\\sum_{j=1}^C e^{z_{i, j}}} \\right)\n\\]\n\nFor target class probabilities:\n\n\\[\nL = -\\sum_{i=1}^N \\sum_{j=1}^C y_{i, j} \\log\\left( \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}} \\right)\n\\]\n\n2. **Softmax Activation:**\n\n\\[\n\\mathbf{p}_{i, j} = \\text{Softmax}(z_{i, j}) = \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}}\n\\]\n\n3. **Layer Normalization:**\n\n\\[\n\\mathbf{o}_i = \\frac{\\mathbf{p}_i - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \\times \\gamma + \\beta\n\\]\n\nwhere:\n\n- \\mu_i and \\sigma_i^2 are the mean and variance of \\mathbf{p}_i over the dimensions specified by `normalized_shape`.\n- \\gamma and \\beta are learnable parameters (omitted if `elementwise_affine=False`).\n- \\epsilon is a small value added for numerical stability.\nother: - The `logits` tensor should contain raw, unnormalized scores for each class.\n- The `targets` can be class indices or class probabilities matching the shape of `logits`.\n- The `normalized_shape` argument in `layer_norm` should correspond to the dimensions over which you want to apply normalization.\n- If `elementwise_affine` parameters (`weight` and `bias`) are needed in `layer_norm`, they can be defined and passed accordingly.\n- All operations support autograd for gradient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom typing import Optional, Tuple\n\n@triton.jit\ndef fused_cross_entropy_softmax_layernorm_kernel(\n    logits_ptr, logits_row_stride,\n    targets_ptr, targets_row_stride,\n    output_prob_ptr, output_prob_row_stride,\n    output_loss_ptr,\n    N, C, K,\n    normalized_shape,\n    weight_ptr,\n    ignore_index,\n    reduction: tl.constexpr,\n    label_smoothing: tl.constexpr,\n    eps: tl.constexpr,\n    elementwise_affine: tl.constexpr,\n    M: tl.constexpr,\n    BLOCK_SIZE: tl.constexpr,\n):\n    row_idx = tl.program_id(0)\n    logits_ptr += row_idx * logits_row_stride\n    targets_ptr += row_idx * targets_row_stride\n    output_prob_ptr += row_idx * output_prob_row_stride\n\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    mask = col_offsets < C\n\n    logits = tl.load(logits_ptr + col_offsets, mask=mask, other=float('-inf'))\n    targets = tl.load(targets_ptr + col_offsets, mask=mask, other=ignore_index)\n\n    if label_smoothing > 0.0:\n        logits = logits * (1.0 - label_smoothing) + label_smoothing / C\n\n    max_logits = tl.max(logits, 0)\n    logits = logits - max_logits\n    exp_logits = tl.exp(logits)\n    sum_exp_logits = tl.sum(exp_logits, 0) + eps\n\n    if weight_ptr is not None:\n        weight = tl.load(weight_ptr + col_offsets, mask=mask, other=1.0)\n        exp_logits = exp_logits * weight\n        sum_exp_logits = sum_exp_logits * tl.sum(weight)\n\n    probabilities = exp_logits / sum_exp_logits\n\n    loss = tl.where(\n        targets == ignore_index,\n        0.0,\n        -tl.log(tl.sum(tl.where(mask, probabilities, 0.0))),\n    )\n\n    if reduction == \"mean\":\n        loss = loss / N\n    elif reduction == \"sum\":\n        pass\n    # \"none\"\n\n    tl.store(output_loss_ptr + row_idx, loss)\n\n    if output_prob_ptr is not None:\n        tl.store(output_prob_ptr + col_offsets, probabilities, mask=mask)\n\ndef fused_cross_entropy_softmax_layernorm(\n    logits: Tensor,\n    targets: Tensor,\n    normalized_shape: int,\n    weight: Optional[Tensor] = None,\n    ignore_index: int = -100,\n    reduction: str = \"mean\",\n    label_smoothing: float = 0.0,\n    eps: float = 1e-5,\n    elementwise_affine: bool = True,\n    out: Optional[Tensor] = None,\n) -> Tuple[Tensor, Tensor]:\n    if elementwise_affine:\n        gamma = torch.ones(normalized_shape, device=logits.device, dtype=logits.dtype)\n        beta = torch.zeros(normalized_shape, device=logits.device, dtype=logits.dtype)\n        layer_norm = lambda x: torch.nn.functional.layer_norm(\n            x, normalized_shape, weight=gamma, bias=beta, eps=eps\n        )\n    else:\n        layer_norm = lambda x: torch.nn.functional.layer_norm(\n            x, normalized_shape, eps=eps\n        )\n\n    N, C = logits.shape[:2]\n    K = targets.numel() // N\n\n    if logits.stride(-1) != 1:\n        logits = logits.contiguous()\n    if targets.stride(-1) != 1:\n        targets = targets.contiguous()\n\n    if out is None:\n        out = torch.empty(\n            (*targets.shape[: targets.ndim - K], C),\n            dtype=logits.dtype,\n            device=logits.device,\n        )\n    else:\n        assert out.shape == targets.shape\n        assert out.stride(-1) == 1\n\n    loss = torch.empty(\n        (*targets.shape[: targets.ndim - K], 1) if K > 1 else targets.shape[: K],\n        dtype=logits.dtype,\n        device=logits.device,\n    )\n\n    M = targets.numel() // K\n\n    BLOCK_SIZE = triton.next_power_of_2(C)\n    grid = (M, 1, 1)\n\n    fused_cross_entropy_softmax_layernorm_kernel[grid](\n        logits,\n        logits.stride(0),\n        targets,\n        targets.stride(0),\n        out,\n        out.stride(0),\n        loss,\n        N,\n        C,\n        K,\n        normalized_shape,\n        weight,\n        ignore_index,\n        reduction,\n        label_smoothing,\n        eps,\n        elementwise_affine,\n        M,\n        BLOCK_SIZE,\n    )\n\n    if K == 1:\n        loss = loss.squeeze()\n\n    return loss, out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the mean value of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. keepdim (bool): whether the output tensor has dim retained or not. dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): the output tensor.\nother: See also torch.nanmean which computes the mean value of non-NaN elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef triton_mean(x, axis=None, keepdim=False, return_indices=False):\n    if axis is None:\n        axis = list(range(x.ndim))\n    elif isinstance(axis, int):\n        axis = [axis]\n    else:\n        axis = list(axis)\n\n    x = triton.reduce.sum(x, axis, keepdim)\n    return x\n\ndef mean(input, dim=None, keepdim=False, dtype=None, out=None):\n    if dtype is not None:\n        input = input.to(dtype)\n    if out is not None:\n        assert out.shape == broadcast_shapes(\n            input.shape, [input.shape[i] if i in dim else 1 for i in range(input.ndim)]\n        )\n        assert out.dtype == input.dtype\n    if isinstance(dim, (list, tuple)):\n        dim = sorted(dim)\n        in_shape = list(input.shape)\n        for d in dim:\n            assert d >= -input.ndim and d < input.ndim\n        n_dims_to_keep = len(input.shape) - len(dim)\n        out_shape = [1] * len(dim) + list(input.shape)\n        out_shape = out_shape[:n_dims_to_keep] + [1] * len(dim) + out_shape[n_dims_to_keep:]\n        out_shape = out_shape[:n_dims_to_keep] + list(\n            input.shape[i] if i < n_dims_to_keep else 1 for i in range(len(input.shape))\n        )\n        out_strides = [0] * len(out_shape)\n        out_strides[n_dims_to_keep - 1] = 1\n        for i in range(n_dims_to_keep - 2, -1, -1):\n            out_strides[i] = out_strides[i + 1] * out_shape[i + 1]\n        out._ strides = tuple(out_strides)\n        out._ shape = tuple(out_shape)\n        ret = triton_mean(input, dim, keepdim)\n        assert ret.shape == broadcast_shapes(\n            input.shape, [input.shape[i] if i in dim else 1 for i in range(input.ndim)]\n        )\n        out[...] = ret\n        return out\n    else:\n        assert dim >= -input.ndim and dim < input.ndim\n        ret = triton_mean(input, dim, keepdim)\n        return ret\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the eigenvalue decomposition of a square matrix if it exists. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned eigenvalues are not guaranteed to be in any specific order. The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nWrapper Entry Information: def linalg.eig(A, *, out=None) -> (Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of diagonalizable matrices. Keyword args: out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = V \\operatorname{diag}(\\Lambda) V^{-1}\\mathrlap{\\qquad V \\in \\mathbb{C}^{n \\times n}, \\Lambda \\in \\mathbb{C}^n}\nother: The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _eig(\n    A, stride_za, stride_ha,  #\n    w, stride_zw, stride_hw,  #\n    v, stride_zv, stride_hv,  #\n    n,  #\n    # Return code\n    ret,  #\n    # Meta-params\n    BLOCK_SIZE: tl.constexpr,  #\n):\n    # Tile indices\n    z = tl.program_id(0)\n    # The remainder is handled by the loop\n    # i = tl.program_id(1)\n    # j = tl.program_id(2)\n\n    # Offset pointers to the first element of the z-th batch\n    A = A + z * stride_za\n    w = w + z * stride_zw\n    v = v + z * stride_zv\n\n    # Block indices\n    i = tl.arange(0, BLOCK_SIZE)\n    # Row index\n    # i = i + (tl.program_id(1) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE))\n    # Col index\n    # j = tl.program_id(2) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    # Pointer arithmetic on the block\n    # Advance the pointer to the correct row\n    A = A + i * stride_ha\n    w = w + i * stride_hw\n    v = v + i * stride_hv\n    # The remainder is handled in the loop\n    # Advance the pointer to the correct column\n    # A = A + j\n    # w = w + j\n    # v = v + j\n\n    # Compute the eigendecomposition\n    # This is equivalent to the eigen decomposition of a batch of matrices\n    # The eigenvectors are normalized to have norm 1\n    _eig_(A, w, v, n, ret)\n\ndef _eig(A, *, out=None):\n    # Error if A is not a matrix\n    if A.dim() < 2:\n        raise ValueError(\"expected a matrix\")\n    if A.dim() == 2:\n        batch = ()\n        n = A.size(0)\n    else:\n        batch = A.shape[:-2]\n        n = A.size(-2)\n    if A.size(-1) != n:\n        raise ValueError(\"expected a square matrix\")\n\n    if out is None:\n        w = torch.empty(batch + (n,), dtype=A.dtype, device=A.device)\n        v = torch.empty(batch + (n, n), dtype=A.dtype, device=A.device)\n    else:\n        w, v = out\n        if w.shape != batch + (n,):\n            raise ValueError(\"shape of w does not match the expected shape\")\n        if v.shape != batch + (n, n):\n            raise ValueError(\"shape of v does not match the expected shape\")\n\n    # The value of the return code is checked in Python\n    ret = torch.zeros(batch, dtype=torch.int32, device=A.device)\n\n    # Prepare inputs for Triton kernel\n    # Pointers\n    A = A.data_ptr()\n    w = w.data_ptr()\n    v = v.data_ptr()\n    # Strides\n    stride_za = A.stride(-3) if A.dim() > 2 else 0\n    stride_ha = A.stride(-2)\n    stride_zw = w.stride(-2) if w.dim() > 1 else 0\n    stride_hw = w.stride(-1)\n    stride_zv = v.stride(-3) if v.dim() > 2 else 0\n    stride_hv = v.stride(-2)\n\n    # Run the kernel\n    _eig[(batch,)](\n        A, stride_za, stride_ha,  #\n        w, stride_zw, stride_hw,  #\n        v, stride_zv, stride_hv,  #\n        n,  #\n        ret,  #\n        # Meta-params\n        BLOCK_SIZE=triton.next_power_of_2(n),  #\n    )\n    # Check return code\n    if ret.item() != 0:\n        raise RuntimeError(\"eig failed\")\n\n    return w, v\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the logarithm of the sum of exponentials of input elements along the specified dimension. It is useful for numerical stability when computing log probabilities.\nWrapper Entry Information: def logsumexp(input, dim, keepdim=False, *, out=None) -> Tensor\nMath: logsumexp(x) = log(sum(exp(x)))\nother: Alias for torch.logsumexp.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef logsumexp_kernel(input, output, input_row_stride, output_row_stride, n_rows,\n                     n_cols, BLOCK_SIZE: tl.constexpr):\n    row_start = tl.program_id(0)\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    mask = col_offsets < n_cols\n\n    row_ptr = input + row_start * input_row_stride + col_offsets\n    row = tl.load(row_ptr, mask=mask, other=-float('inf'))\n    row_max = tl.max(row, axis=0)\n    safe_row = tl.where(mask, row - row_max, -float('inf'))\n    sum_exp_row = tl.sum(tl.exp(safe_row), axis=0)\n    logsumexp = tl.log(sum_exp_row) + row_max\n\n    output_row_ptr = output + row_start * output_row_stride\n    tl.store(output_row_ptr, logsumexp)\n\ndef logsumexp(input, dim, keepdim=False, *, out=None):\n    if out is None:\n        out = torch.empty(input.shape, dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == input.shape and out.dtype == input.dtype and out.device == input.device\n\n    if not keepdim:\n        input = torch.squeeze(input, dim)\n        out = torch.squeeze(out, dim)\n\n    n_rows, n_cols = input.shape\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    grid = (n_rows,)\n    logsumexp_kernel[grid](input, out, input.stride(0), out.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE)\n\n    if not keepdim:\n        out = out.unsqueeze(dim=dim)\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining embedding lookup, element-wise addition, and tanh activation. The function retrieves embeddings from an embedding matrix using input indices, adds another tensor to these embeddings, and applies a tanh activation function to the result. It supports options for padding indices, max norm for embeddings, scaling gradients by frequency, and sparse gradients.\nWrapper Entry Information: fused_embedding_add_tanh(input_indices, weight, other, *, padding_idx=None, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, sparse=False, out=None) -> Tensor; input_indices (LongTensor): Tensor containing indices into the embedding matrix, of arbitrary shape (*); weight (Tensor): The embedding matrix of shape (V, D), where V is the number of embeddings (vocabulary size), and D is the embedding dimension; other (Tensor): Tensor to be added to the embeddings, must be broadcastable to the shape of E; padding_idx (int, optional): If specified, the entries at `padding_idx` do not contribute to the gradient; max_norm (float, optional): If given, each embedding vector with norm larger than `max_norm` is renormalized to have norm `max_norm`; norm_type (float, optional): The p-norm to compute for the `max_norm` option. Default: `2.0`; scale_grad_by_freq (bool, optional): If `True`, scale gradients by the inverse of frequency of the words in the mini-batch. Default: `False`; sparse (bool, optional): If `True`, gradient w.r.t. `weight` will be a sparse tensor. Default: `False`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given input indices \\mathbf{i}, embedding weight matrix W, and tensor O, the function computes:\n\\[\n\\begin{align*}\nE &= \\text{Embedding}(\\mathbf{i}, W) \\\\\nS &= E + O \\\\\nY &= \\tanh(S)\n\\end{align*}\n\\]\nother: - The `other` tensor must be broadcastable to the shape of the embeddings retrieved by `torch.nn.functional.embedding`.\n- All parameters related to `torch.nn.functional.embedding` are passed through to allow for options like `padding_idx`, `max_norm`, etc.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch.autograd import Function\n\ndef embedding_add_tanh_embedding(\n    input_indices: Tensor,\n    weight: Tensor,\n    other: Tensor,\n    padding_idx: int = -1,\n    max_norm: float = None,\n    norm_type: float = 2.0,\n    scale_grad_by_freq: bool = False,\n    sparse: bool = False,\n    out: Tensor = None,\n) -> Tensor:\n    T = input_indices\n    Embedding = weight\n    W = other\n\n    V, D = Embedding.shape\n    _, S = T.shape\n\n    if out == None:\n        S_t = T.reshape((1, -1))\n        grad_output = torch.empty((1, S), dtype=Embedding.dtype, device=Embedding.device)\n        Y = torch.empty((1, S), dtype=Embedding.dtype, device=Embedding.device)\n    else:\n        Y = out\n        S_t = Y.reshape((1, -1))\n        grad_output = torch.ones_like(S_t, dtype=Embedding.dtype, device=Embedding.device)\n\n    if scale_grad_by_freq:\n        freq = torch.empty((1, S), dtype=Embedding.dtype, device=Embedding.device)\n        EmbeddingGrad = torch.empty_like(Embedding)\n    else:\n        EmbeddingGrad = torch.empty_like(Embedding)\n\n    if max_norm:\n        Norm = torch.empty((1, S), dtype=Embedding.dtype, device=Embedding.device)\n\n    if sparse:\n        EmbeddingGrad = EmbeddingGrad.sparse_mask(Embedding)\n\n    for s in range(S):\n        i = T[0][s].item()\n\n        if i == padding_idx:\n            continue\n\n        d = Embedding[i]\n\n        if max_norm:\n            norm = d.norm(norm_type)\n\n            if norm > max_norm:\n                d *= max_norm / norm\n                d = d.to(Embedding.dtype)\n\n        S = d + W[0][s]\n        y = S.tanh()\n\n        if scale_grad_by_freq:\n            freq[0][s] = d.numel() / Embedding.numel()\n            grad_output[0][s] /= freq[0][s]\n\n        torch.mul_(grad_output[0][s], y)\n        d += grad_output[0][s]\n\n        if scale_grad_by_freq:\n            d *= freq[0][s]\n\n        if max_norm and norm > max_norm:\n            d *= max_norm / norm\n\n        EmbeddingGrad[i] += d\n\n    if padding_idx >= 0:\n        EmbeddingGrad[padding_idx] = 0\n\n    if out == None:\n        return Y.reshape(T.shape)\n    else:\n        return grad_output.reshape(T.shape), EmbeddingGrad\n\nclass EmbeddingAddTanhFunction(Function):\n    @staticmethod\n    def forward(\n        ctx,\n        input_indices: Tensor,\n        weight: Tensor,\n        other: Tensor,\n        padding_idx: int = -1,\n        max_norm: float = None,\n        norm_type: float = 2.0,\n        scale_grad_by_freq: bool = False,\n        sparse: bool = False,\n        out: Tensor = None,\n    ) -> Tensor:\n        return embedding_add_tanh_embedding(\n            input_indices,\n            weight,\n            other,\n            padding_idx,\n            max_norm,\n            norm_type,\n            scale_grad_by_freq,\n            sparse,\n            out,\n        )\n\ndef fused_embedding_add_tanh(\n    input_indices: Tensor,\n    weight: Tensor,\n    other: Tensor,\n    *,\n    padding_idx: int = -1,\n    max_norm: float = None,\n    norm_type: float = 2.0,\n    scale_grad_by_freq: bool = False,\n    sparse: bool = False,\n    out: Tensor = None,\n) -> Tensor:\n    return EmbeddingAddTanhFunction.apply(\n        input_indices,\n        weight,\n        other,\n        padding_idx,\n        max_norm,\n        norm_type,\n        scale_grad_by_freq,\n        sparse,\n        out,\n    )\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, sigmoid activation, and subtraction.\nWrapper Entry Information: fused_mv_sigmoid_sub(input, vec, other, alpha=1, *, out=None) -> Tensor; input (Tensor): Input matrix A of shape (n, m); vec (Tensor): Input vector \\mathbf{v} of shape (m); other (Tensor or Number): Tensor or scalar b to subtract from the sigmoid output, scaled by \\alpha; alpha (Number, optional): Scalar multiplier for other. Default: `1`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given an input matrix A, a vector \\mathbf{v}, and another tensor or scalar b, the function computes:\n\\[\n\\begin{align*}\n\\mathbf{z} &= A \\mathbf{v} \\\\\n\\mathbf{s} &= \\sigma(\\mathbf{z}) = \\frac{1}{1 + \\exp(-\\mathbf{z})} \\\\\n\\mathbf{y} &= \\mathbf{s} - \\alpha b\n\\end{align*}\n\\]\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication.\n- The `other` tensor must be broadcastable to the shape of the output from the sigmoid function.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _fused_mv_sigmoid_sub_kernel(\n    input_ptr, vec_ptr, other_ptr, out_ptr,\n    M, N, stride_am, stride_ak, stride_v, stride_vk, stride_om, stride_ok,\n    alpha, other_is_scalar: tl.constexpr,\n    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr,\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n\n    offs_am = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    offs_bn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    offs_v = tl.arange(0, BLOCK_N)\n    a_ptrs = input_ptr + (offs_am[:, None] * stride_am + offs_bn[None, :] * stride_ak)\n    v_ptrs = vec_ptr + offs_v * stride_v\n\n    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)\n    for _ in range(0, N, BLOCK_N):\n        a = tl.load(a_ptrs, mask=offs_bn[None, :] < N - _, other=0.0)\n        v = tl.load(v_ptrs, mask=offs_v < N - _, other=0.0)\n        acc += a * v\n        a_ptrs += BLOCK_N * stride_ak\n        v_ptrs += BLOCK_N * stride_v\n\n    offs_om = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    offs_ok = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    out_ptrs = out_ptr + stride_om * offs_om[:, None] + stride_ok * offs_ok[None, :]\n    mask = (offs_om[:, None] < M) & (offs_ok[None, :] < N)\n\n    if other_is_scalar:\n        scalar = other_ptr\n        sigmoid = tl.sigmoid(acc)\n        # out = sigmoid - alpha * scalar\n        out = tl.where(mask, sigmoid - alpha * scalar, 0.0)\n    else:\n        b_ptrs = other_ptr + stride_om * offs_om[:, None] + stride_ok * offs_ok[None, :]\n        scalar = tl.load(b_ptrs, mask=mask, other=0.0)\n        sigmoid = tl.sigmoid(acc)\n        # out = sigmoid - alpha * scalar\n        out = tl.where(mask, sigmoid - alpha * scalar, 0.0)\n\n    tl.store(out_ptrs, out, mask=mask)\n\ndef fused_mv_sigmoid_sub(input, vec, other, alpha=1, *, out=None):\n    r\"\"\"\n    Fused operation combining matrix-vector multiplication, sigmoid activation, and subtraction.\n\n    Args:\n        input (Tensor) : input matrix A of shape `(n, m)`\n        vec (Tensor) : input vector :math:`\\mathbf{v}` of shape `(m)`\n        other (Tensor or Number) : tensor or scalar :math:`b` to subtract from sigmoid output, scaled by :math:`\\alpha`\n        alpha (Number, optional) : scalar multiplier for ``other``. Default: ``1``\n        out (Tensor, optional) : output tensor. Ignored if ``None``. Default: ``None``\n\n    Returns:\n        Tensor : output tensor\n\n    .. note::\n        - The shapes of ``input`` and ``vec`` must be broadcastable.\n        - If ``other`` is a tensor, it must be broadcastable with the sigmoid result tensor.\n        - Autograd is supported for gradient computation.\n    \"\"\"\n    assert input.dim() == 2, \"Input must be a 2D tensor\"\n    assert vec.dim() == 1, \"Vector must be a 1D tensor\"\n\n    M, N = input.shape\n    vec_shape_broadcasted = vec.shape[:-1] + (1,) * (input.dim() - vec.dim())\n    assert broadcastable_to(\n        vec_shape_broadcasted, (N,)\n    ), \"The shapes of input and vec must be broadcastable\"\n\n    if out is None:\n        out = torch.empty((M,), dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == (M,)\n        assert out.dtype == input.dtype\n        assert out.device == input.device\n\n    other_is_scalar = isinstance(other, (int, float))\n    if other_is_scalar:\n        other = torch.tensor(other, dtype=input.dtype, device=input.device)\n    else:\n        assert other.dim() == 0 or other.dim() == 2, \"Other must be a 2D tensor or scalar\"\n        if other.dim() == 2:\n            assert other.shape == input.shape, \"The shapes of input and other must be the same\"\n        else:\n            other = torch.reshape(other, (1,))\n\n    assert broadcastable_to(\n        other.shape, (M,)\n    ), \"If other is a tensor, it must be broadcastable with the sigmoid result tensor\"\n\n    grid = lambda META: (\n        triton.cdiv(M, META[\"BLOCK_M\"]),\n        triton.cdiv(N, META[\"BLOCK_N\"]),\n    )\n    _fused_mv_sigmoid_sub_kernel[grid](\n        input, vec, other, out,\n        M, N, input.stride(0), input.stride(1), vec.stride(0), vec.stride(1), out.stride(0), out.stride(1),\n        alpha, other_is_scalar,\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number `other`, scaled by the multiplier `alpha`, to the input tensor `input`, and then applies the Gaussian Error Linear Units (GELU) activation function to the result.\nWrapper Entry Information: def add_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{GELU}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i) where GELU is defined as: - \\text{GELU}(x) = x * \\Phi(x) when approximate is 'none', - \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3))) when approximate is 'tanh'.\nother: The GELU function is defined with two methods: an exact method using the Cumulative Distribution Function for Gaussian Distribution, and an approximate method using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import erf, exp, pow, tanh\n\n@triton.jit\ndef gelu_functor_exact(x):\n    # Using approximation can improve performance\n    scale: tl.constexpr = 0.7071067811  # 1 / math.sqrt(2)\n    return x * 0.5 * (1.0 + erf(x * scale))\n\n@triton.jit\ndef gelu_functor_tanh(x):\n    # Using approximation can improve performance\n    sqrt_2_over_pi: tl.constexpr = 0.7978845608  # math.sqrt(2 / math.pi)\n    c: tl.constexpr = 0.044715  # math.sqrt(2) / 8\n    return 0.5 * x * (1.0 + tanh(sqrt_2_over_pi * x * (1.0 + c * pow(x, 2))))\n\n@triton.jit\ndef add_gelu_kernel(x_ptr, y_ptr, alpha, out_ptr, n_elements,\n                    BLOCK_SIZE: tl.constexpr, approximate: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    other = tl.load(y_ptr + offsets, mask=mask)\n    if approximate == 'none':\n        x = gelu_functor_exact(x + alpha * other)\n    else:\n        x = gelu_functor_tanh(x + alpha * other)\n    tl.store(out_ptr + offsets, x, mask=mask)\n\ndef add_gelu(input, other, alpha=1, approximate='none', out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert other.is_contiguous()\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n    approximate = approximate.lower()\n    assert approximate in ['none', 'tanh']\n    with torch.cuda.device(input.device):\n        add_gelu_kernel[grid](input, other, alpha, out, n_elements,\n                              BLOCK_SIZE=1024, approximate=approximate)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes cosine embedding loss between two normalized tensors. This function first normalizes the inputs along the specified dimension using L2 normalization and then calculates the cosine embedding loss. The loss encourages similarity when the target is 1 and dissimilarity when the target is -1. It accepts optional parameters margin for dissimilarity control and reduction method for output aggregation.\nWrapper Entry Information: def fused_cosine_embedding_loss_with_normalization(input1: torch.Tensor, input2: torch.Tensor, target: torch.Tensor, margin: float = 0, reduction: str = 'mean') -> torch.Tensor: input1 (Tensor): First input tensor to be normalized and compared. input2 (Tensor): Second input tensor to be normalized and compared. target (Tensor): Tensor label with values 1 or -1, where 1 encourages similarity and -1 encourages dissimilarity. margin (float, optional): Margin for dissimilarity. Default: 0. reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\nother: The inputs are first L2 normalized along dimension 1 before loss calculation. The reduction parameter can be 'none', 'mean', or 'sum', with default as 'mean'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_cosine_embedding_loss_with_normalization_triton(input1, input2, target, margin, reduction):\n    dim = 1\n    N = input1.shape[0]\n    D = input1.shape[1]\n    pid = tl.program_id(0)\n    offset_n = pid * N\n    n_mask = (offset_n + tl.arange(0, N)) < input1.shape[0]\n    d_mask = tl.arange(0, D) < D\n\n    input1 = tl.load(input1 + offset_n[:, None] * N + d_mask[None, :] * D, n_mask[:, None] & d_mask[None, :], eviction_policy='evict_last')\n    input2 = tl.load(input2 + offset_n[:, None] * N + d_mask[None, :] * D, n_mask[:, None] & d_mask[None, :], eviction_policy='evict_last')\n    target = tl.load(target + offset_n, n_mask, eviction_policy='evict_last')\n\n    input1_norm = tl.sum(input1 * input1, axis=1)\n    input1_norm = tl.where(input1_norm == 0., 1e-12, input1_norm)\n    input1 = input1 / tl.sqrt(input1_norm[:, None])\n\n    input2_norm = tl.sum(input2 * input2, axis=1)\n    input2_norm = tl.where(input2_norm == 0., 1e-12, input2_norm)\n    input2 = input2 / tl.sqrt(input2_norm[:, None])\n\n    cos_dist = (input1 * input2).sum(axis=1)\n    cos_dist = tl.where(target == 1, cos_dist, -cos_dist)\n    loss = tl.where(target == 1, -cos_dist, tl.maximum(margin - cos_dist, 0))\n\n    if reduction == 'none':\n        return loss\n    elif reduction == 'mean':\n        return tl.sum(loss) / tl.sum(n_mask & (target == 1))\n    elif reduction == 'sum':\n        return tl.sum(loss)\n    else:\n        raise ValueError(f\"reduction can only be 'none', 'mean' or 'sum', but got {reduction}\")\n\ndef fused_cosine_embedding_loss_with_normalization(input1: torch.Tensor, input2: torch.Tensor, target: torch.Tensor, margin: float = 0, reduction: str = 'mean') -> torch.Tensor:\n    dim = 1\n    assert input1.shape == input2.shape\n    assert input1.shape[dim] > 1\n    assert input2.shape[dim] > 1\n    assert target.shape == input1.shape[0:1]\n    assert target.max() <= 1 and target.min() >= -1\n    N, C = input1.shape\n\n    input1 = input1 / input1.norm(dim=dim, keepdim=True)\n    input2 = input2 / input2.norm(dim=dim, keepdim=True)\n\n    cos_dist = (input1 * input2).sum(dim=dim)\n    cos_dist = torch.where(target == 1, cos_dist, -cos_dist)\n    loss = torch.where(target == 1, -cos_dist, torch.max(margin - cos_dist, torch.tensor(0.0, device=cos_dist.device)))\n\n    if reduction == 'none':\n        return loss\n    elif reduction == 'mean':\n        return torch.sum(loss) / torch.sum(target == 1)\n    elif reduction == 'sum':\n        return torch.sum(loss)\n    else:\n        raise ValueError(f\"reduction can only be 'none', 'mean' or 'sum', but got {reduction}\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations commonly used in transformer models, combining matrix multiplication, softmax, dropout, another matrix multiplication, layer normalization, and addition (residual connection).\nWrapper Entry Information: fused_transformer_block(input, weight1, weight2, residual, dropout_p=0.1, eps=1e-5, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_in), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_in, D_k).; weight2 (Tensor): Weight matrix of shape (D_k, D_out).; residual (Tensor): Residual tensor to be added before layer normalization, must be broadcastable to the shape of Z_4.; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1.; eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5.; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a residual tensor R, the function computes:\n\n    \\[\n    \\begin{align*}\n    Z_1 &= X W_1 \\\\\n    Z_2 &= \\text{softmax}(Z_1) \\\\\n    Z_3 &= \\text{dropout}(Z_2, p) \\\\\n    Z_4 &= Z_3 W_2 \\\\\n    Y &= \\text{LayerNorm}(Z_4 + R, \\gamma, \\beta, \\epsilon)\n    \\end{align*}\n    \\]\n\n    where:\n    - \\text{softmax}(Z) is applied along the last dimension.\n    - \\text{dropout}(Z, p) randomly zeroes elements of Z with probability p.\n    - \\text{LayerNorm} applies layer normalization with learnable parameters \\gamma and \\beta, and epsilon \\epsilon for numerical stability.\n    - R is the residual tensor added to Z_4 before layer normalization.\nother: - The dimensions of `input` and `weight1` must be compatible for matrix multiplication: the last dimension of `input` must match the first dimension of `weight1`.\n    - The output of the first matrix multiplication has shape `(*, N, D_k)`.\n    - The `softmax` is applied along the last dimension (`dim=-1`).\n    - The `dropout` is applied during training. Set `training=False` to disable dropout during evaluation.\n    - The `layer_norm` is applied over the last dimension of the input tensor.\n    - The `residual` tensor must be broadcastable to the shape of `z4`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_transformer_kernel(\n    input_ptr, weight1_ptr, weight2_ptr, residual_ptr, output_ptr, N, D_in, D_k, D_out, stride_input_batch, stride_input_n,\n    stride_input_d, stride_weight1_out, stride_weight1_in, stride_weight2_out, stride_weight2_in, stride_res_batch,\n    stride_res_n, stride_res_d, stride_output_batch, stride_output_n, stride_output_d, dropout_p, eps, BLOCK_SIZE: tl.constexpr\n):\n    pid_batch = tl.program_id(0)\n    pid_n = tl.program_id(1)\n    input_ptrs = input_ptr + pid_batch * stride_input_batch + pid_n * stride_input_n\n    weight1_ptrs = weight1_ptr + tl.arange(0, BLOCK_SIZE)[:, None] * stride_weight1_out + tl.arange(0, BLOCK_SIZE)[None, :] * stride_weight1_in\n    weight2_ptrs = weight2_ptr + tl.arange(0, BLOCK_SIZE)[:, None] * stride_weight2_out + tl.arange(0, BLOCK_SIZE)[None, :] * stride_weight2_in\n    res_ptrs = residual_ptr + pid_batch * stride_res_batch + pid_n * stride_res_n\n    output_ptrs = output_ptr + pid_batch * stride_output_batch + pid_n * stride_output_n\n\n    offs_d = tl.arange(0, BLOCK_SIZE)\n    input_ptrs += offs_d * stride_input_d\n    weight1_ptrs += offs_d[None, :] * stride_weight1_in\n    weight2_ptrs += offs_d[:, None] * stride_weight2_out\n    res_ptrs += offs_d * stride_res_d\n    output_ptrs += offs_d * stride_output_d\n\n    input = tl.load(input_ptrs, mask=offs_d < D_in, other=0.0).to(tl.float32)\n    weight1 = tl.load(weight1_ptrs, mask=(offs_d[None, :] < D_k) & (offs_d[:, None] < D_in), other=0.0).to(tl.float32)\n    weight2 = tl.load(weight2_ptrs, mask=(offs_d[:, None] < D_out) & (offs_d[None, :] < D_k), other=0.0).to(tl.float32)\n    res = tl.load(res_ptrs, mask=offs_d < D_out, other=0.0).to(tl.float32)\n\n    z1 = tl.dot(input, weight1, allow_tf32=False)\n    z2 = tl.softmax(z1)\n    if tl.rand() < dropout_p:\n        z2 = 0.0\n    z3 = z2\n    z4 = tl.dot(z3, weight2, allow_tf32=False)\n    z4 += res\n    output = tl.where(offs_d < D_out, z4, 0.0)\n    tl.store(output_ptrs, output, mask=offs_d < D_out)\n    return\n\ndef fused_transformer_block(input, weight1, weight2, residual, dropout_p=0.1, eps=1e-5, *, out=None):\n    check(\n        input.shape[-1] == weight1.shape[1],\n        f\"Incompatible hidden size {input.shape[-1]} and {weight1.shape[1]}\",\n    )\n    check(\n        weight1.shape[0] == weight2.shape[1],\n        f\"Incompatible intermediate size {weight1.shape[0]} and {weight2.shape[1]}\",\n    )\n    check(\n        weight2.shape[0] == residual.shape[-1],\n        f\"Incompatible hidden size {weight2.shape[0]} and last dimension of residual {residual.shape[-1]}\",\n    )\n    has_batch_dim = len(input.shape) > 2\n    if has_batch_dim:\n        input, batch_dim, N, D_in = pack_input(input)\n        residual, _, _, D_out = pack_input(residual)\n    else:\n        N, D_in = input.shape\n        _, _, D_out = residual.shape\n    output = torch.empty((N, D_out), device=input.device, dtype=input.dtype)\n    grid = lambda META: (triton.cdiv(N, META[\"BLOCK_SIZE\"]),)\n    BLOCK_SIZE = triton.next_power_of_2(D_out)\n    with torch.cuda.device(input.device):\n        fused_transformer_kernel[grid](\n            input,\n            weight1,\n            weight2,\n            residual,\n            output,\n            N,\n            D_in,\n            weight1.shape[0],\n            weight2.shape[0],\n            input.stride(0),\n            input.stride(1) if has_batch_dim else 1,\n            input.stride(2) if not has_batch_dim else 1,\n            weight1.stride(0),\n            weight1.stride(1),\n            weight2.stride(0),\n            weight2.stride(1),\n            residual.stride(0),\n            residual.stride(1) if has_batch_dim else 1,\n            residual.stride(2) if not has_batch_dim else 1,\n            output.stride(0),\n            output.stride(1) if has_batch_dim else 1,\n            output.stride(2) if not has_batch_dim else 1,\n            dropout_p,\n            eps,\n            BLOCK_SIZE,\n        )\n    if not has_batch_dim:\n        output = output.reshape(N, D_out)\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of (1 + input). This function is more accurate than torch.log for small values of input.\nWrapper Entry Information: log1p(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_i = \\log_{e} (x_i + 1)\nother: This function is more accurate than torch.log for small values of input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef log1p(input):\n    return tl.math.log(tl.math.exp(input) + 1)\n\ndef log1p(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    return log1p(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over the input tensor across each channel, followed by applying the sigmoid activation function element-wise to the normalized result. This is useful for scaling the output to a range between 0 and 1 after normalization.\nWrapper Entry Information: def sigmoid_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(N, C)` or `(N, C, L)`, where `N` is batch size, `C` is the number of features or channels, and `L` is the sequence length.\n    running_mean (Tensor): The running mean of the input channels.\n    running_var (Tensor): The running variance of the input channels.\n    weight (Tensor, optional): Learnable scaling factor for each channel, typically represented as `γ`. Default: None.\n    bias (Tensor, optional): Learnable shift for each channel, typically represented as `β`. Default: None.\n    training (bool, optional): If `True`, updates running statistics; if `False`, uses them for normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability. Default: 1e-5.\nMath: \\text{out} = \\sigma\\left(\\frac{\\text{input} - \\text{mean}}{\\sqrt{\\text{var} + \\epsilon}} * \\gamma + \\beta \\right) where \\sigma(x) = \\frac{1}{1 + \\exp(-x)} is the sigmoid function.\nother: The function normalizes the input tensor using batch normalization and then applies the sigmoid activation function to scale the output between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _sigmoid_batch_norm_fwd_fused(\n    X, Y, W, B, Mean, Rstd, stride, N, C, BLOCK_SIZE: tl.constexpr,\n):\n    # Map the program id to the row of X and Y it should compute.\n    row = tl.program_id(0)\n    Y += row * stride\n    X += row * stride\n    # Compute mean\n    mean = 0\n    _mean = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n    for off in range(0, C, BLOCK_SIZE):\n        cols = off + tl.arange(0, BLOCK_SIZE)\n        a = tl.load(X + cols, mask=cols < C, other=0.).to(tl.float32)\n        _mean += a\n    mean = tl.sum(_mean, axis=0) / C\n    # Compute variance\n    _var = tl.zeros([BLOCK_SIZE], dtype=tl.float32)\n    for off in range(0, C, BLOCK_SIZE):\n        cols = off + tl.arange(0, BLOCK_SIZE)\n        x = tl.load(X + cols, mask=cols < C, other=0.).to(tl.float32)\n        x = tl.where(cols < C, x - mean, 0.)\n        _var += x * x\n    var = tl.sum(_var, axis=0) / C\n    rstd = 1 / tl.sqrt(var + 1e-5)\n    # Write mean / rstd\n    tl.store(Mean + row, mean)\n    tl.store(Rstd + row, rstd)\n    # Normalize and apply linear transformation\n    for off in range(0, C, BLOCK_SIZE):\n        cols = off + tl.arange(0, BLOCK_SIZE)\n        mask = cols < C\n        w = tl.load(W + cols, mask=mask)\n        b = tl.load(B + cols, mask=mask)\n        x = tl.load(X + cols, mask=mask, other=0.).to(tl.float32)\n        x_hat = (x - mean) * rstd\n        y = x_hat * w + b\n        # Trigonometric transformation\n        y = 1 / (1 + tl.exp(-y)))\n        # Write output\n        tl.store(Y + cols, y, mask=mask)\n\ndef sigmoid_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> torch.Tensor:\n    if input.dtype == torch.float16:\n        input = input.to(torch.float32)\n\n    C = input.shape[-1]\n    N = input.numel() // C\n\n    # Create output\n    output = torch.empty_like(input)\n\n    # reshape input data into 2D tensor\n    input_2d = input.view(N, C)\n    output_2d = output.view(N, C)\n\n    # construct mean and rstd\n    mean = torch.empty((N, ), dtype=torch.float32, device='cuda')\n    rstd = torch.empty((N, ), dtype=torch.float32, device='cuda')\n\n    # Less than 64KB per feature: enqueue fused kernel\n    MAX_FUSED_SIZE = 65536 // input.element_size()\n    BLOCK_SIZE = min(MAX_FUSED_SIZE, triton.next_power_of_2(C))\n\n    if C > BLOCK_SIZE:\n        raise RuntimeError(\"This layer norm doesn't support feature dim >= 64KB.\")\n\n    # heuristics for number of warps\n    num_warps = min(max(BLOCK_SIZE // 256, 1), 8)\n\n    _sigmoid_batch_norm_fwd_fused[(N,)](\n        input_2d, output_2d, weight, bias,\n        mean, rstd,\n        input_2d.stride(0), N, C,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n\n    # reshape output\n    output = output.view(input.shape)\n\n    if not training:\n        std = torch.sqrt(running_var + eps)\n        output = (output - running_mean) / std\n        output = torch.sigmoid(output * weight + bias)\n\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization followed by the Hardsigmoid activation function on the input tensor `x`. This function performs batch normalization on `x` using the specified parameters and then applies Hardsigmoid activation element-wise on the normalized output.\nWrapper Entry Information: fused_hardsigmoid_batch_norm(x: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor, weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False, momentum: float = 0.1, eps: float = 1e-5, inplace: bool = False) -> torch.Tensor: Args: x (Tensor): Input tensor for batch normalization and activation. running_mean (Tensor): The running mean buffer (persistent). running_var (Tensor): The running variance buffer (persistent). weight (Tensor, optional): Learnable weight of size C for the normalized tensor. Default: ``None`` bias (Tensor, optional): Learnable bias of size C for the normalized tensor. Default: ``None`` training (bool, optional): Flag for training mode, used to update running estimates. Default: ``False`` momentum (float, optional): The value for the running mean and variance momentum. Default: ``0.1`` eps (float, optional): Small constant added to variance to improve numerical stability. Default: ``1e-5`` inplace (bool, optional): If ``True``, perform Hardsigmoid in-place. Default: ``False``\nother: The function includes optional parameters for learnable weight and bias, a training flag to update running estimates, momentum for running mean and variance, a small constant `eps` for numerical stability, and an `inplace` option for Hardsigmoid.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import hardsigmoid as _hardsigmoid\n\n@triton.jit\ndef _batch_norm_fwd(\n    X,\n    Y,\n    W,\n    B,\n    Mean,\n    Rstd,\n    momentum,\n    eps,\n    N,\n    H,\n    C,\n    GROUP_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_C: tl.constexpr,\n    IS_HARDSIGMOID: tl.constexpr,\n):\n    # compute indices\n    row_start = tl.program_id(0) * GROUP_SIZE_M\n    row_step = tl.num_programs(0) * GROUP_SIZE_M\n    for row_idx in tl.range(row_start, N * H, row_step):\n        cols = tl.arange(0, BLOCK_SIZE_C)\n        idx = row_idx + cols\n        mask = idx < N * H\n        # compute mean and variance\n        x = tl.load(X + idx, mask=mask, other=0.0).to(tl.float32)\n        mean = tl.sum(x) / (N * H)\n        x_zm = tl.where(mask, x - mean, 0.0)\n        var = tl.sum(x_zm * x_zm) / (N * H)\n        rstd = 1 / tl.sqrt(var + eps)\n        # update running estimate\n        mean_old = tl.load(Mean + tl.program_id(0))\n        rstd_old = tl.load(Rstd + tl.program_id(0))\n        mean_new = mean_old * momentum + mean * (1 - momentum)\n        rstd_new = rstd_old * momentum + rstd * (1 - momentum)\n        tl.store(Mean + tl.program_id(0), mean_new)\n        tl.store(Rstd + tl.program_id(0), rstd_new)\n        # update output\n        c = tl.program_id(1)\n        mask = cols + c * N * H < N * H\n        x_hat = (x_zm * rstd).to(tl.float16)\n        w = tl.load(W + c, mask=mask, other=0.0).to(tl.float16)\n        y = x_hat * w\n        if B is not None:\n            b = tl.load(B + c, mask=mask, other=0.0).to(tl.float16)\n            y = y + b\n        if IS_HARDSIGMOID:\n            y = _hardsigmoid(y)\n        # write-back\n        tl.store(Y + idx, y, mask=mask)\n\ndef fused_hardsigmoid_batch_norm(x, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False):\n    # check constraints\n    assert x.is_contiguous()\n    assert running_mean.is_contiguous()\n    assert running_var.is_contiguous()\n    assert running_mean.shape[0] == x.shape[1]\n    if weight is not None:\n        assert weight.is_contiguous()\n        assert weight.shape[0] == x.shape[1]\n    if bias is not None:\n        assert bias.is_contiguous()\n        assert bias.shape[0] == x.shape[1]\n    # set up meta-parameters\n    N, H, C = x.shape\n    x = x.view(N * H, C)\n    M, C = x.shape\n    # allocate output\n    y = torch.empty_like(x)\n    # enqueue kernel\n    def grid(meta):\n        return (triton.cdiv(M, meta[\"GROUP_SIZE_M\"]), C)\n    _batch_norm_fwd[grid](\n        x, y, weight, bias,\n        running_mean, running_var,\n        momentum, eps,\n        N, H, C,\n        IS_HARDSIGMOID=True,\n        inplace=inplace\n    )\n    return y\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Hurwitz zeta function, elementwise. The function calculates the sum of the series for each element in the input tensors, which represent the parameters x and q of the Hurwitz zeta function. The Riemann zeta function is a special case when q equals 1.\nWrapper Entry Information: zeta(input, other, *, out=None) -> Tensor; Args: input (Tensor): the input tensor corresponding to `x`. other (Tensor): the input tensor corresponding to `q`. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\zeta(x, q) = \\sum_{k=0}^{\\infty} \\frac{1}{(k + q)^x}\nother: The Riemann zeta function corresponds to the case when `q = 1`\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef zeta_kernel(x, q, out, BLOCK_SIZE: tl.constexpr):\n    # Compute the index of the element to process\n    idx = tl.program_id(0)\n    x_i = tl.load(x + idx)\n    q_i = tl.load(q + idx)\n    # Initialize the sum\n    sum = 0.0\n    # Compute the sum of the series\n    k = tl.arange(0, BLOCK_SIZE)\n    denom = tl.pow(k + q_i, x_i)\n    sum += tl.sum(denom)\n    # Store the result\n    tl.store(out + idx, sum)\n\ndef zeta(input, other, *, out=None):\n    # Determine the output tensor\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_floating_point()\n    # Set the block size for Triton kernel\n    BLOCK_SIZE = 128\n    # Launch the Triton kernel\n    grid = lambda meta: (triton.cdiv(input.numel(), meta['BLOCK_SIZE']),)\n    zeta_kernel[grid](input, other, out, BLOCK_SIZE=BLOCK_SIZE)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product for a symmetric matrix `A` and a vector `x`, with scaling factors `alpha` and `beta`. Then calculates the norm of the resulting vector `y`. The operation performed is: 1. `y = alpha * torch.mv(A, x) + beta * y`, assuming `A` is symmetric. 2. `norm = torch.norm(y, p)`.\nWrapper Entry Information: def symmetric_matrix_vector_norm(A: torch.Tensor, x: torch.Tensor, alpha: float, beta: float, p: float = 2.0) -> torch.Tensor: A (Tensor): A symmetric matrix of shape `(n, n)`. x (Tensor): A vector of shape `(n,)`. alpha (float): Scalar multiplier for the matrix-vector product. beta (float): Scalar multiplier added to `y`. p (float, optional): Order of the norm. Default is 2.0 (Euclidean norm).\nMath: y = alpha * torch.mv(A, x) + beta * y\nnorm = torch.norm(y, p)\nother: Assumes `A` is symmetric.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _symmetric_matrix_vector_norm_kernel(A, x, y, alpha, beta, p, n: tl.constexpr):\n    idx = tl.arange(0, n)\n    x_ptr = x + idx\n    A_x = tl.mv(A, x)\n    y = alpha * A_x + beta * y\n    return y\n\ndef test_symmetric_matrix_vector_norm_wrapper(func_inputs):\n    A, x, alpha, beta, p = func_inputs\n    wrapper_inputs = (A, x, alpha, beta, p)\n    wrapper_output = symmetric_matrix_vector_norm(*wrapper_inputs)\n    torch_output = torch.norm(alpha * torch.mv(A, x) + beta * x, p)\n    return torch.allclose(wrapper_output, torch_output)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Softplus activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with Softplus, which is smoother than ReLU and approximates it for large values. The function is particularly designed to improve numerical stability by reverting to a linear function for values above a specified threshold.\nWrapper Entry Information: softplus_linear(input, weight, bias=None, beta=1, threshold=20) -> Tensor\nMath: The combined operation is defined as: out = Softplus(Linear(x)), where the Softplus function is defined as: Softplus(x) = (1/β) * log(1 + exp(β * x))\nother: For values exceeding the threshold, the function helps maintain numerical stability by approximating a linear function, which enhances stability and prevents potential overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softplus_linear_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(input_ptr + offsets, mask=mask)\n    w = tl.load(weight_ptr + offsets, mask=mask)\n    b = tl.load(bias_ptr + offsets, mask=mask)\n    y = tl.dot(x, w) + b\n    z = tl.where(y > 20, y, tl.math.log1p(tl.exp(y)))\n    tl.store(output_ptr + offsets, z, mask=mask)\n\ndef softplus_linear(input, weight, bias=None, beta=1, threshold=20):\n    assert input.is_contiguous()\n    assert weight.is_contiguous()\n    assert bias is None or bias.is_contiguous()\n    output = torch.empty_like(input)\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    softplus_linear_kernel[grid](input, weight, bias, output, n_elements, BLOCK_SIZE=1024)\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Reconstructs the input matrix `A` using its Singular Value Decomposition (SVD). This function combines the Singular Value Decomposition (SVD) with matrix reconstruction. Given a matrix `A`, it performs the following operations: 1. Compute the SVD of `A`: A = U Σ V^H, where `U` and `Vh` are unitary matrices and `S` contains the singular values of `A`. 2. Reconstruct `A` as A_reconstructed = U Σ V^H.\nWrapper Entry Information: fused_svd_reconstruct(A: Tensor) -> Tensor: The input matrix `A` of shape `(m, n)`.\nMath: A = U Σ V^H\nA_reconstructed = U diag(S) V^H\nother: The function returns the reconstructed matrix `A` of shape `(m, n)`, approximating the original matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _fused_svd_reconstruct(\n    A,\n    S,\n    U,\n    Vh,\n    stride_za,\n    stride_sa,\n    stride_ua,\n    stride_va,\n    M,\n    N,\n    K,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    i = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    mask_i = i < M\n\n    a = tl.load(A + i * stride_za, mask=mask_i, other=0.0)\n    s = tl.load(S + i * stride_sa, mask=mask_i, other=0.0)\n    u = tl.load(U + i * stride_ua, mask=mask_i, other=0.0)\n    v = tl.load(Vh + i * stride_va, mask=mask_i, other=0.0)\n\n    o = tl.where(mask_i, u * (a * s), 0.0)\n\n    tl.store(A + i * stride_za, o, mask=mask_i)\n\n\ndef fused_svd_reconstruct(A: torch.Tensor) -> torch.Tensor:\n    A = A.contiguous()\n\n    U, S, Vh = torch.svd(A, full_matrices=False)\n\n    K = min(U.size(1), Vh.size(1))\n    M, N = U.size(0), Vh.size(0)\n\n    out = torch.zeros((M, N), device=A.device, dtype=A.dtype)\n    block_size = 32\n\n    if K >= 4096:\n        block_size = 64\n    if K >= 8192:\n        block_size = 128\n\n    grid = lambda META: (triton.cdiv(M, META[\"BLOCK_SIZE\"]),)\n    _fused_svd_reconstruct[grid](\n        A,\n        S,\n        U,\n        Vh,\n        A.stride(0),\n        S.stride(0),\n        U.stride(0),\n        Vh.stride(0),\n        M,\n        N,\n        K,\n        BLOCK_SIZE=block_size,\n    )\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise multiplication, addition, log-softmax activation, dropout, and batch matrix multiplication.\nWrapper Entry Information: fused_mul_add_logsoftmax_dropout_bmm(input1, input2, other, mat2, p=0.5, training=True, inplace=False, dim=-1, *, out=None) -> Tensor\nMath: Given input tensors X_1, X_2, O, and M, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X_1 \\odot X_2 \\\\\nS &= Z + O \\\\\nL &= \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) \\\\\nD &= \\text{Dropout}(L, p) \\\\\nY &= \\text{bmm}(D, M)\n\\end{align*}\n\\]\n\nwhere:\n\n- X_1 and X_2 are input tensors for element-wise multiplication.\n- \\odot denotes element-wise multiplication.\n- O is a tensor or scalar to be added to Z, must be broadcastable to the shape of Z.\n- \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) is the log-softmax function applied along dimension `dim`.\n- \\text{Dropout}(L, p) randomly zeroes elements of L with probability p.\n- \\text{bmm}(D, M) performs batch matrix multiplication.\nother: - The shapes of `input1`, `input2`, and `other` must be broadcastable to each other.\n- The `mat2` tensor must have a shape compatible with the output of the dropout layer for batch matrix multiplication, i.e., `mat2` should have shape `(B, D_in, D_out)` if the dropout output has shape `(B, N, D_in)`.\n- The `log_softmax` function is applied along dimension `dim`, which should be the dimension of the features (typically `-1` for the last dimension).\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch.amp import custom_bwd, custom_fwd\nfrom .log_softmax import log_softmax, log_softmax_backward\nfrom .dropout import dropout, dropout_backward\nfrom .bmm import bmm, bmm_batch\n\nTRITON_22 = version.parse(triton.__version__) >= version.parse('2.2.0')\n\ndef cfggen():\n    warps = [1, 2, 4, 8, 16, 32]\n    configs = [\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 64}, num_stages=3, num_warps=w)\n        for w in warps\n    ]\n    return configs\n\nif TRITON_22:\n    @triton.jit\n    def fused_mul_add_logsoftmax_dropout_bmm_fwd_h(\n        input1_ptr, input2_ptr, other_ptr, mat2_ptr, output_ptr, dropout_ptr, input1_mask_ptr, input2_mask_ptr,\n        M, N, K, c, stride_input1_batch, stride_input1_m, stride_input1_k, stride_input2_batch, stride_input2_n,\n        stride_input2_k, stride_other_batch, stride_other_m, stride_other_k, stride_mat2_batch, stride_mat2_m,\n        stride_mat2_k, stride_output_batch, stride_output_m, stride_output_n, stride_dropout_batch, stride_dropout_m,\n        stride_dropout_k, stride_input1_mask_batch, stride_input1_mask_m, stride_input1_mask_k, stride_input2_mask_batch,\n        stride_input2_mask_n, stride_input2_mask_k, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr,\n        BLOCK_SIZE_K: tl.constexpr, META: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, P: tl.constexpr\n    ):\n        pid = tl.program_id(axis=0)\n        num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n        num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n        num_pid_in_group = GROUP_SIZE_M * num_pid_n\n        group_id = pid // num_pid_in_group\n        first_pid_m = group_id * GROUP_SIZE_M\n        group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n        pid_m = first_pid_m + ((pid % num_pid_in_group) % group_size_m)\n        pid_n = (pid % num_pid_in_group) // group_size_m\n\n        input1_ptr += pid_m * BLOCK_SIZE_M * stride_input1_m + pid_n * BLOCK_SIZE_N * stride_input1_k\n        input2_ptr += pid_m * BLOCK_SIZE_M * stride_input2_m + pid_n * BLOCK_SIZE_N * stride_input2_k\n        other_ptr += pid_m * BLOCK_SIZE_M * stride_other_m + pid_n * BLOCK_SIZE_N * stride_other_k\n        mat2_ptr += pid_m * BLOCK_SIZE_M * stride_mat2_m + pid_n * BLOCK_SIZE_N * stride_mat2_k\n        output_ptr += pid_m * BLOCK_SIZE_M * stride_output_m + pid_n * BLOCK_SIZE_N * stride_output_n\n        dropout_ptr += pid_m * BLOCK_SIZE_M * stride_dropout_m + pid_n * BLOCK_SIZE_N * stride_dropout_k\n        input1_mask_ptr += pid_m * BLOCK_SIZE_M * stride_input1_mask_m + pid_n * BLOCK_SIZE_N * stride_input1_mask_k\n        input2_mask_ptr += pid_m * BLOCK_SIZE_M * stride_input2_mask_m + pid_n * BLOCK_SIZE_N * stride_input2_mask_k\n\n        offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n        offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n        offs_k = tl.arange(0, BLOCK_SIZE_K)\n        input1_ptrs = input1_ptr + (offs_m[:, None] * stride_input1_m + offs_k[None, :] * stride_input1_k)\n        input2_ptrs = input2_ptr + (offs_k[:, None] * stride_input2_k + offs_n[None, :] * stride_input2_n)\n        other_ptrs = other_ptr + (offs_k[:, None] * stride_other_k + offs_n[None, :] * stride_other_n)\n        mat2_ptrs = mat2_ptr + (offs_m[:, None] * stride_mat2_m + offs_k[None, :] * stride_mat2_k)\n        output_ptrs = output_ptr + (offs_m[:, None] * stride_output_m + offs_n[None, :] * stride_output_n)\n        dropout_ptrs = dropout_ptr + (offs_m[:, None] * stride_dropout_m + offs_n[None, :] * stride_dropout_k)\n        input1_mask_ptrs = input1_mask_ptr + (offs_m[:, None] * stride_input1_mask_m + offs_k[None, :] * stride_input1_mask_k)\n        input2_mask_ptrs = input2_mask_ptr + (offs_k[:, None] * stride_input2_mask_k + offs_n[None, :] * stride_input2_mask_n)\n\n        input1_mask = tl.load(input1_mask_ptrs, mask=(offs_k[None, :] < K) & (offs_m[:, None] < M), other=0.0)\n        input2_mask = tl.load(input2_mask_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        input1 = tl.load(input1_ptrs, mask=(offs_k[None, :] < K) & (offs_m[:, None] < M), other=0.0)\n        input1 = input1 * input1_mask\n        input2 = tl.load(input2_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n        input2 = input2 * input2_mask\n        mul = input1 * input2\n        add = mul + tl.load(other_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        log_softmax = log_softmax(add, axis=1, meta=META)\n        dropout = tl.where(log_softmax < 0, 0, log_softmax)\n        dropout = dropout * (1 - P)\n        if META == 'float16':\n            dropout = dropout.to(tl.float16)\n        tl.store(output_ptrs, dropout, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N))\n        tl.store(dropout_ptrs, dropout, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N))\n    else:\n        dropout_ptrs = dropout_ptr + (offs_m[:, None] * stride_dropout_m + offs_n[None, :] * stride_dropout_k)\n        input1_ptrs = input1_ptr + (offs_m[:, None] * stride_input1_m + offs_k[None, :] * stride_input1_k)\n        input2_ptrs = input2_ptr + (offs_k[:, None] * stride_input2_k + offs_n[None, :] * stride_input2_n)\n        other_ptrs = other_ptr + (offs_k[:, None] * stride_other_k + offs_n[None, :] * stride_other_n)\n        mat2_ptrs = mat2_ptr + (offs_m[:, None] * stride_mat2_m + offs_k[None, :] * stride_mat2_k)\n        output_ptrs = output_ptr + (offs_m[:, None] * stride_output_m + offs_n[None, :] * stride_output_n)\n\n        input1_mask_ptrs = input1_mask_ptr + (offs_m[:, None] * stride_input1_mask_m + offs_k[None, :] * stride_input1_mask_k)\n        input2_mask_ptrs = input2_mask_ptr + (offs_k[:, None] * stride_input2_mask_k + offs_n[None, :] * stride_input2_mask_n)\n\n        input1_mask = tl.load(input1_mask_ptrs, mask=(offs_k[None, :] < K) & (offs_m[:, None] < M), other=0.0)\n        input2_mask = tl.load(input2_mask_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        input1 = tl.load(input1_ptrs, mask=(offs_k[None, :] < K) & (offs_m[:, None] < M), other=0.0)\n        input1 = input1 * input1_mask\n        input2 = tl.load(input2_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n        input2 = input2 * input2_mask\n        mul = input1 * input2\n        add = mul + tl.load(other_ptrs, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N), other=0.0)\n\n        log_softmax = log_softmax(add, axis=1, meta=META)\n        dropout = tl.where(log_softmax < 0, 0, log_softmax)\n        dropout = dropout * (1 - P)\n\n        tl.store(output_ptrs, dropout, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N))\n        tl.store(dropout_ptrs, dropout, mask=(offs_k[:, None] < K) & (offs_n[None, :] < N))\n\n    @triton.jit\n    def fused_mul_add_logsoftmax_dropout_bmm_bwd_dx(\n        input1_ptr, input2_ptr, other_ptr, mat2_ptr, dout", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the element-wise SELU (Scaled Exponential Linear Unit) function to the input tensor. The SELU function is defined as scale * (max(0, x) + min(0, alpha * (exp(x) - 1))), where the constants alpha and scale are fixed values with alpha approximately 1.673 and scale approximately 1.051.\nWrapper Entry Information: selu(input, inplace=False) -> Tensor\nMath: SELU(x) = scale * (max(0,x) + min(0, alpha * (exp(x) - 1))), with alpha=1.6732632423543772848170429916717 and scale=1.0507009873554804934193349852946.\nother: See torch.nn.SELU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import exp2\n\n@triton.jit\ndef silu(x):\n    return x * tl.sigmoid(x)\n\n@triton.jit\ndef swiglu(x):\n    return silu(x[:, :, :, :self.c // 2]) * x[:, :, :, self.c // 2:self.c]\n\n@triton.jit\ndef relu(x):\n    return tl.maximum(0, x)\n\n@triton.jit\ndef softplus(x):\n    return tl.math.log(tl.math.exp(x) + 1)\n\n@triton.jit\ndef gelu_new(x):\n    pi = 3.141592653589793\n    a = tl.math.sqrt(2.0 / pi)\n    b = x + 0.044715 * x * x * x\n    return 0.5 * x * (1.0 + softplus(a * b))\n\n@triton.jit\ndef div_rn(x, y):\n    return tl.math.fdiv(x, y)\n\n@triton.jit\ndef rsqrt(x):\n    return tl.math.rsqrt(x)\n\n@triton.jit\ndef norm(x, axis):\n    return tl.math.sqrt(tl.sum(x * x, axis))\n\n@triton.jit\ndef softmax(x, ieee_rounding=False):\n    z = x - tl.max(x, 0)\n    num = tl.exp(z)\n    den = tl.sum(num, 0)\n    return div_rn(num, den)\n\n@triton.jit\ndef dropout(x, p, seed, offset):\n    random = fast_rand(seed, offset, 0, 2**32 - 1)\n    return tl.where(random > p * 2**32, x / (1 - p), 0.0)\n\n@triton.jit\ndef selu(x):\n    scale = 1.0507009873554804934193349852946\n    alpha = 1.6732632423543772848170429916717\n    return scale * (relu(x) + alpha * exp2(x - 1))\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the 2-norm of the modified `y`. The function takes a target tensor `y`, a tensor `x` to be scaled by a scalar `alpha`, and adds the scaled `x` to `y`. It then calculates and returns the 2-norm of the updated `y`.\nWrapper Entry Information: scaled_add_norm(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape `(n,)`. x (Tensor): The tensor to be scaled and added to `y`, of shape `(n,)`. alpha (float): The scalar multiplier for `x`.\nMath: y += alpha * x\nnorm = ||y||_2\nother: The function modifies the input tensor `y` in place and calculates the 2-norm using `torch.norm`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef scaled_add_norm_triton(y, x, alpha):\n    # Convert inputs to float32\n    y_fp32 = y.to(tl.float32)\n    x_fp32 = x.to(tl.float32)\n    \n    # Compute y += alpha * x\n    y_fp32 += alpha * x_fp32\n    \n    # Compute and return the 2-norm of y\n    return torch.norm(y_fp32)\n\ndef scaled_add_norm(y: torch.Tensor, x: torch.Tensor, alpha: float) -> torch.Tensor:\n    # Ensure inputs are 1D tensors\n    assert y.dim() == 1 and x.dim() == 1\n    # Ensure x and y are of the same size\n    assert x.size(0) == y.size(0)\n    \n    # Call the Triton kernel and return the result\n    return scaled_add_norm_triton(y, x, alpha)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by applying the Leaky ReLU activation function element-wise to the result. This allows for both feature extraction and non-linear activation in one step.\nWrapper Entry Information: def leaky_relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, negative_slope=0.01, inplace=False) -> Tensor\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{LeakyReLU}(\\text{conv2d}(\\text{input}))\n\nwhere the Leaky ReLU function is applied element-wise as:\n\n.. math::\n    \\text{LeakyReLU}(x) = \\max(0, x) + \\text{negative\\_slope} \\times \\min(0, x)\nother: The function combines 2D convolution and Leaky ReLU activation in one step, allowing for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef leaky_relu_fused_2d(\n    input, weight, bias, stride, padding, dilation, groups, negative_slope\n):\n    # Adjust padding to be a tuple for each dimension\n    if isinstance(padding, int):\n        padding = (padding, padding)\n    if isinstance(dilation, int):\n        dilation = (dilation, dilation)\n\n    # Calculate output dimensions\n    batch, in_c, in_h, in_w = input.shape\n    out_c, _, kernel_h, kernel_w = weight.shape\n    out_h = triton.cdiv(in_h + 2 * padding[0] - dilation[0] * (kernel_h - 1), stride)\n    out_w = triton.cdiv(in_w + 2 * padding[1] - dilation[1] * (kernel_w - 1), stride)\n\n    # Create a range tensor for output indices\n    out_id = tl.program_id(0)\n    out_jd = tl.program_id(1)\n    out_kd = tl.program_id(2)\n    out_i = out_id // out_w\n    out_j = (out_id % out_w) * stride - padding[1]\n    out_k = out_jd * stride - padding[0]\n    out_d = out_kd\n\n    # Compute input indices\n    in_b = out_i * out_h * out_w + out_j * out_h + out_k + tl.arange(0, 16)\n    in_b = in_b // out_h // out_w, in_b // out_h % out_w, in_b % out_h, in_b % out_w\n    in_b = in_b[0], in_b[0], in_b[0], in_b[0], in_b[1], in_b[1], in_b[1], in_b[1], in_b[2], in_b[2], in_b[2], in_b[2], in_b[3], in_b[3], in_b[3], in_b[3]\n    in_c = tl.arange(0, 16) // (kernel_h * kernel_w)\n    in_c = in_c[0], in_c[1], in_c[2], in_c[3], in_c[0], in_c[1], in_c[2], in_c[3], in_c[0], in_c[1], in_c[2], in_c[3], in_c[0], in_c[1], in_c[2], in_c[3]\n    in_h = tl.arange(0, 16) % (kernel_h * kernel_w) // kernel_w\n    in_h = in_h[0], in_h[1], in_h[2], in_h[3], in_h[4], in_h[5], in_h[6], in_h[7], in_h[8], in_h[9], in_h[10], in_h[11], in_h[12], in_h[13], in_h[14], in_h[15]\n    in_w = tl.arange(0, 16) % (kernel_h * kernel_w) % kernel_w\n    in_w = in_w[0], in_w[1], in_w[2], in_w[3], in_w[4], in_w[5], in_w[6], in_w[7], in_w[8], in_w[9], in_w[10], in_w[11], in_w[12], in_w[13], in_w[14], in_w[15]\n\n    # Compute weight indices\n    wei_c = in_c // groups\n    wei_k = in_h * kernel_w + in_w\n    # Compute bias index\n    bias_k = tl.arange(0, 16) // (kernel_h * kernel_w)\n    # Load input, weight, and bias\n    I = tl.load(input + in_b[0] * stride[0] * in_h * in_w + in_b[1] * stride[1] * in_h * in_w + in_b[2] * stride[2] * in_h * in_w + in_b[3] * stride[3] * in_h * in_w + in_h * in_w + in_w, mask=(in_b[0] < batch) & (in_b[1] < batch) & (in_b[2] < batch) & (in_b[3] < batch) & (in_h < in_h) & (in_w < in_w), other=0)\n    W = tl.load(weight + out_d * out_c * kernel_h * kernel_w + wei_c * kernel_h * kernel_w + wei_k, mask=(out_d < out_c) & (wei_c < in_c) & (wei_k < kernel_h * kernel_w), other=0)\n    B = tl.load(bias + out_d * 16 + bias_k, mask=(out_d < out_c) & (bias_k < 16), other=0)\n\n    # Perform matrix multiplication and add bias\n    O = tl.dot(I, W.T) + B\n\n    # Apply Leaky ReLU activation\n    O = tl.where(I > 0, O, negative_slope * O)\n\n    # Store output\n    tl.store(input + out_id * out_h * out_w + out_j * out_h + out_k + tl.arange(0, 16), O, mask=(out_j < out_w) & (out_k < out_h) & (tl.arange(0, 16) < out_h), eviction_policy='evict_first')\n\ndef leaky_relu_conv2d_triton(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, negative_slope=0.01, inplace=False) -> torch.Tensor:\n    # Ensure input is contiguous\n    if not input.is_contiguous():\n        input = input.contiguous()\n\n    # Prepare bias for addition if provided\n    if bias is not None:\n        bias = bias.unsqueeze(0)\n\n    # Adjust stride to be a tuple for each dimension\n    if isinstance(stride, int):\n        stride = (stride, stride)\n    if isinstance(padding, int):\n        padding = (padding, padding)\n    if isinstance(dilation, int):\n        dilation = (dilation, dilation)\n\n    # Create a range tensor for output indices\n    out_h = triton.cdiv(input.shape[2] + 2 * padding[0] - dilation[0] * (weight.shape[2] - 1), stride[0])\n    out_w = triton.cdiv(input.shape[3] + 2 * padding[1] - dilation[1] * (weight.shape[3] - 1), stride[1])\n    out_id = tl.arange(0, 16)\n    out_jd = tl.arange(0, 16 // stride[0])\n    out_kd = tl.arange(0, 16 // stride[1])\n    out_i = out_id // out_w\n    out_j = (out_id % out_w) * stride[0] - padding[1]\n    out_k = out_jd * stride[1] - padding[0]\n    out_d = out_kd\n\n    # Apply the fused 2D convolution and Leaky ReLU kernel\n    leaky_relu_fused_2d[(out_i, out_j, out_k, out_d)](input, weight, bias, stride, padding, dilation, groups, negative_slope)\n\n    return input\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in :attr:`input`, and then applies the exponential function to the square-rooted values. The combined operation is defined as: out_i = e^(sqrt(input_i))\nWrapper Entry Information: def sqrt_exp(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: out_i = e^(sqrt(input_i))\nother: N/A\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sqrt_exp_kernel(input, output, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_ptrs = input + offsets\n    output_ptrs = output + offsets\n    x = tl.load(input_ptrs, mask=mask)\n    output_val = tl.exp(tl.sqrt(x))\n    tl.store(output_ptrs, output_val, mask=mask)\n\ndef sqrt_exp(input, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    assert out.shape == input.shape\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    sqrt_exp_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the cosine function element-wise to the input tensor, followed by a 1D average pooling. The function first computes the cosine of each element in the input tensor, then applies 1D average pooling over the resulting tensor with the specified kernel size, stride, padding, ceil mode, and padding inclusion.\nWrapper Entry Information: def cos_avg_pool1d(input: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, ceil_mode: bool = False, count_include_pad: bool = True) -> torch.Tensor\n    \n    input (Tensor): The input tensor of shape (minibatch, in_channels, iW).\n    kernel_size (int): Size of the pooling window.\n    stride (int, optional): Stride of the pooling window. Defaults to `kernel_size`.\n    padding (int, optional): Zero-padding added to both sides of the input. Default is 0.\n    ceil_mode (bool, optional): If True, uses ceil instead of floor to compute the output shape. Default is False.\n    count_include_pad (bool, optional): If True, includes the zero-padding in the averaging calculation. Default is True.\nMath: \\text{output} = \\text{avg\\_pool1d}(\\cos(\\text{input}))\nother: The function involves computing the cosine transformation followed by pooling, and handles parameters like stride, padding, and ceil mode.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom .avg_pool1d import avg_pool1d\n\n@triton.jit\ndef cos_avg_pool1d_triton(\n    input, weight, bias, stride, padding, out, x_stride, w_stride, M, N, K, \n    Kc: tl.constexpr, s: tl.constexpr, SB: tl.constexpr, SC: tl.constexpr\n):\n    # compute offset\n    pid = tl.program_id(0)\n    bid = tl.program_id(1)\n    # calculate position\n    rx = pid * SB + tl.arange(0, SB)[:, None]\n    ry = bid * SC + tl.arange(0, SC)[None, :]\n    # clamp\n    rx = tl.minimum(rx, M - 1)\n    ry = tl.minimum(ry, N - 1)\n    # get mask\n    rx_mask = rx < M\n    ry_mask = ry < N\n    # compute input ptr\n    input_ptr = input + bid * x_stride + (rx * K + ry * Kc)\n    # compute weight ptr\n    weight_ptr = weight + (ry * K + rx * Kc)\n    # compute bias ptr\n    bias_ptr = bias + ry\n    # load\n    x = tl.load(input_ptr, mask=rx_mask & ry_mask, other=0.0)\n    w = tl.load(weight_ptr, mask=rx_mask & ry_mask, other=0.0)\n    b = tl.load(bias_ptr, mask=ry_mask, other=0.0)\n    # add\n    x = x + b\n    # cos\n    x = tl.cos(x)\n    # mul\n    x = x * w\n    # reduce\n    x = tl.sum(x, axis=1)\n    # store\n    tl.store(out + bid * x_stride + rx, x, mask=rx_mask)\n\ndef cos_avg_pool1d(input: Tensor, kernel_size: int, stride: int = None, padding: int = 0, ceil_mode: bool = False, count_include_pad: bool = True) -> Tensor:\n    assert input.dim() == 3, \"only accept 3D tensor now\"\n    # kernel size\n    kernel_size = (kernel_size,)\n    # stride\n    stride = stride if stride is not None else kernel_size\n    stride = (stride,)\n    # padding\n    padding = padding if isinstance(padding, (tuple, list)) else (padding,)\n    # device\n    device = input.device\n    # sequeeze\n    pack = False\n    if len(kernel_size) == 1:\n        kernel_size = kernel_size * 2\n        stride = stride * 2\n        padding = padding * 2\n        pack = True\n    # call avg_pool1d\n    out = avg_pool1d(input, kernel_size, stride, padding, ceil_mode, count_include_pad)\n    # transpose\n    if pack:\n        out = out.transpose(1, 2).contiguous()\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sum of elements in the input tensor along the specified dimension(s), followed by calculating the standard deviation of the summed values.\nWrapper Entry Information: def sum_std(input, dim=None, keepdim=False, dtype=None, correction=1, out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension(s) to reduce. If None, all dimensions are reduced. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default is False. dtype (torch.dtype, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to dtype before the operation. Default: None. correction (int, optional): Difference between the sample size and sample degrees of freedom. Default is 1 (Bessel's correction). out (Tensor, optional): The output tensor.\nMath: \\text{sum} = \\sum_{i=0}^{N-1} x_i\n\n\\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The function uses Bessel's correction by default with a correction value of 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_std_kernel(\n    input,\n    mean,\n    sum2,\n    N,\n    M,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = pid < N\n    input = tl.load(input + pid, mask=mask, other=0.0)\n    if N != M:\n        mean = tl.load(mean + pid, mask=mask, other=0.0)\n    mean = tl.sum(input) / M\n    input = tl.where(mask, input - mean, 0.0)\n    sum2 = tl.sum(input * input)\n    return mean, sum2, N\n\ndef sum_std(input, dim=None, keepdim=False, dtype=None, correction=1, out=None) -> Tensor:\n    if dtype is None:\n        dtype = input.dtype\n    if correction < 0:\n        raise ValueError(\"correction must be greater than or equal to 0\")\n\n    if out is None:\n        out = torch.empty(input.shape, dtype=dtype, device=input.device)\n    else:\n        out.copy_(input)\n    if dim is None:\n        input = input.ravel()\n        dim = 0\n    else:\n        input = input.contiguous()\n    out = out.contiguous()\n    if correction > 0:\n        mean = torch.empty_like(out, dtype=dtype)\n        sum2 = torch.empty_like(out, dtype=dtype)\n    else:\n        mean = None\n        sum2 = out\n    N = input.numel()\n    M = out.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(N)))\n    grid = (math.ceil(math.sqrt(M)),)\n    sum_std_kernel[grid](\n        input,\n        mean,\n        sum2,\n        N,\n        M,\n        BLOCK_SIZE=block_size,\n    )\n    if correction > 0:\n        out.mul_(N)\n        mean.mul_(N)\n        sum2.mul_(N)\n        mask = tl.arange(0, block_size) < M\n        var = tl.where(mask, sum2 - mean * mean, 0.0) / (max(0, M - correction))\n        out = torch.sqrt(var, out=out)\n        if not keepdim:\n            out = out.reshape(input.shape)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs element-wise multiplication of two inputs, input and other, and then applies the Rectified Linear Unit (ReLU) function to the result, which replaces all negative values with zero.\nWrapper Entry Information: def mul_relu(input, other, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other (Tensor or Number): The tensor or number to multiply with `input`. inplace (bool, optional): If True, modifies `input` in-place, if possible. Default is False. out (Tensor, optional): The output tensor.\nMath: ReLU(x) = max(0, x); out_i = ReLU(input_i * other_i)\nother: The function uses torch.mul for multiplication and F.relu for the ReLU operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport F\n\n@triton.jit\ndef mul_relu_kernel(input, other, out, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(input + offsets, mask=mask)\n    y = tl.load(other + offsets, mask=mask)\n    mul = x * y\n    out = F.relu(mul)\n    tl.store(out + offsets, out, mask=mask)\n\ndef mul_relu(input, other, inplace=False, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert other.is_contiguous()\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n    mul_relu_kernel[grid](input, other, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the Gaussian Error Linear Units (GELU) activation function element-wise to the result. This helps introduce non-linearity after the convolution operation.\nWrapper Entry Information: def gelu_conv2d(input: Tensor, weight: Tensor, bias: Optional[Tensor] = None, stride: Union[int, Tuple[int, int]] = 1, padding: Union[int, Tuple[int, int], str] = 0, dilation: Union[int, Tuple[int, int]] = 1, groups: int = 1, approximate: str = 'none', out: Optional[Tensor] = None) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\n    weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\n    bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: ``None``.\n    stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\n    padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of groups to split the input into. Default: 1.\n    approximate (str, optional): The approximation method for GELU. Default is 'none'.\n    out (Tensor, optional): The output tensor.\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{GELU}(\\text{conv2d}(\\text{input}, \\text{weight}))\n\nwhere GELU is computed as:\n\n- If :attr:`approximate` is 'none', GELU is computed as:\n\n  .. math::\n      \\text{GELU}(x) = x * \\Phi(x)\n\n  where :math:`\\Phi(x)` is the Cumulative Distribution Function for Gaussian Distribution.\n\n- If :attr:`approximate` is 'tanh', GELU is approximated as:\n\n  .. math::\n      \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3)))\nother: The function combines 2D convolution and GELU activation, with options for approximation methods for GELU.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import erf, exp, pow, tanh\n\n@triton.jit\ndef tanh(x):\n    return 2 * tl.sigmoid(2 * x) - 1\n\n@triton.jit\ndef gelu_forward(x, approximate=\"none\"):\n    if approximate == \"none\":\n        return x * 0.5 * (1.0 + erf(x / 1.41421356237))\n    else:\n        return 0.5 * x * (1.0 + tanh(x * 0.79788456 * (1.0 + 0.044715 * pow(x.to(tl.float32), 2.0)))))\n\n@triton.jit\ndef conv2d_gemm(\n    input, weight, bias, stride, padding, dilation, groups, approximate\n):\n    N, C, H, W = input.shape\n    K, _, R, C = weight.shape\n    output = tl.zeros([N, K, H, W], dtype=tl.float32)\n\n    padding = (0, 0, 0, 0) if isinstance(padding, int) else padding\n    padding = ((0, 0), (0, 0)) + tuple(\n        p if isinstance(p, (tuple, list)) else (p, p)\n        for p in padding\n    )\n\n    stride = (1, 1) if isinstance(stride, int) else stride\n    stride = (*((1,) * (input.ndim - len(stride)),) + tuple(stride))\n\n    dilation = (1, 1) if isinstance(dilation, int) else dilation\n    dilation = (*((1,) * (weight.ndim - len(dilation)),) + tuple(dilation))\n\n    input = tl.nn.pad(\n        input, [(0, 0), (0, 0)] + list(padding), mode=\"constant\", value=0\n    )\n\n    pid_n = tl.program_id(0)\n    pid_k = tl.program_id(1)\n    pid_h = tl.program_id(2)\n    pid_w = tl.program_id(3)\n\n    # bias\n    if bias is not None:\n        bias = tl.load(bias + pid_k)\n\n    # k/h/w\n    for _ in range(0, N):\n        # N/C\n        for c in range(0, C, 16):\n            # C/R/C\n            for rr in range(0, R, 8):\n                for cc in range(0, C, 16):\n                    # N/C/R/C\n                    offset_c = c + cc\n                    offset_r = rr + pid_h * 8\n                    offset_pid = (\n                        (offset_c // 16) * R * C\n                        + offset_r * C\n                        + (offset_pid_k * groups + pid_k) * C\n                        + cc\n                    )\n                    A = tl.load(\n                        input + offset_n * stride[0] * stride[2] * stride[3] +\n                        offset_c * stride[1] * stride[2] * stride[3] +\n                        (offset_h * stride[2] + offset_r) * stride[3] + cc,\n                        mask=(offset_c < C)\n                        & (offset_r < H)\n                        & (offset_c // 16 == pid_k),\n                        other=0,\n                    )\n\n                    for _ in range(8 // 16):\n                        # K/C/R/C\n                        offset_k = pid_k * (C // groups) + (cc // 16)\n                        B = tl.load(\n                            weight + offset_k * R * C + offset_pid,\n                            mask=(offset_k < K)\n                            & (offset_r < R)\n                            & (offset_c // 16 == pid_k),\n                            other=0,\n                        )\n                        output += tl.dot(A, B, allow_tf32=False)\n                    output += bias\n    output = gelu_forward(output, approximate)\n    return output\n\ndef gelu_conv2d(\n    input: torch.Tensor,\n    weight: torch.Tensor,\n    bias: Optional[torch.Tensor] = None,\n    stride: Union[int, Tuple[int, int]] = 1,\n    padding: Union[int, Tuple[int, int], str] = 0,\n    dilation: Union[int, Tuple[int, int]] = 1,\n    groups: int = 1,\n    approximate: str = \"none\",\n    out: Optional[torch.Tensor] = None,\n) -> torch.Tensor:\n    if input.dtype == torch.float16:\n        input = input.to(torch.bfloat16)\n    out = conv2d_gemm(\n        input,\n        weight,\n        bias,\n        stride,\n        padding,\n        dilation,\n        groups,\n        approximate,\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a 2D convolution followed by SELU activation and instance normalization on the input tensor.\nWrapper Entry Information: fused_instance_norm_selu_conv2d(input: Tensor, weight: Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, num_features=None, eps=1e-5, momentum=0.1, affine=False, track_running_stats=False) -> Tensor: input (Tensor): Input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): Weights for the convolution, shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Bias for the convolution layer, shape (out_channels). stride (int or tuple, optional): Stride of the convolution. Default is 1. padding (int or tuple, optional): Padding for the convolution. Default is 0. dilation (int or tuple, optional): Spacing between kernel elements. Default is 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default is 1. num_features (int, optional): Number of features or channels in the input for instance normalization. eps (float, optional): A value added to the denominator for numerical stability in instance normalization. Default is 1e-5. momentum (float, optional): Momentum for updating running statistics in instance normalization. Default is 0.1. affine (bool, optional): If True, instance normalization has learnable affine parameters. Default is False. track_running_stats (bool, optional): If True, tracks running mean and variance for instance normalization. Default is False.\nother: The function combines convolution, SELU activation, and instance normalization in a single operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch.nn import functional as F\n\n@triton.jit\ndef fused_instance_norm_selu_conv2d_kernel(\n    x_ptr,\n    w_ptr,\n    b_ptr,\n    z_ptr,\n    mean_ptr,\n    rstd_ptr,\n    stride_x_n,\n    stride_x_c,\n    stride_x_h,\n    stride_x_w,\n    stride_z_n,\n    stride_z_c,\n    stride_z_h,\n    stride_z_w,\n    stride_w_g,\n    stride_w_out,\n    stride_w_in,\n    stride_w_kh,\n    stride_w_kw,\n    stride_mean_g,\n    stride_mean_out,\n    stride_rstd_g,\n    stride_rstd_out,\n    N: tl.constexpr,\n    C: tl.constexpr,\n    H: tl.constexpr,\n    W: tl.constexpr,\n    KH: tl.constexpr,\n    KW: tl.constexpr,\n    g: tl.constexpr,\n    SPATIAL_BLOCK_SIZE: tl.constexpr,\n    GROUP_BLOCK_SIZE: tl.constexpr,\n    SPLIT: tl.constexpr,\n    BIAS: tl.constexpr,\n    AFFINE: tl.constexpr,\n    TRACK_RUNNING_STATS: tl.constexpr,\n    NORM_BEFORE_ACTIVATION: tl.constexpr,\n    ACTIVATION: tl.constexpr,\n):\n    # Kernel logic here...\n\ndef fused_instance_norm_selu_conv2d(\n    input: Tensor,\n    weight: Tensor,\n    bias: Optional[Tensor] = None,\n    stride: Union[int, Tuple[int, int]] = 1,\n    padding: Union[int, Tuple[int, int]] = 0,\n    dilation: Union[int, Tuple[int, int]] = 1,\n    groups: int = 1,\n    num_features: Optional[int] = None,\n    eps: float = 1e-5,\n    momentum: float = 0.1,\n    affine: bool = False,\n    track_running_stats: bool = False,\n    nrom_before_activation: bool = False,\n    activation: str = \"selu\",\n) -> Tensor:\n    if input.dtype == torch.float16:\n        return F.instance_norm(\n            input,\n            weight,\n            bias,\n            running_mean=None,\n            running_var=None,\n            eps=eps,\n            momentum=momentum,\n            affine=affine,\n            track_running_stats=track_running_stats,\n        )\n    assert input.dtype == weight.dtype\n    assert input.dim() == 4\n    assert weight.dtype in [torch.float16, torch.float32]\n    assert weight.dim() == 4\n    assert weight.size(1) == input.size(1)\n    assert input.size(0) == 1  # Minibatch must be 1\n    assert weight.size(0) % groups == 0\n    assert weight.size(1) % groups == 0\n    assert input.size(1) == groups\n    assert (bias is None) or (bias.size(0) == weight.size(0))\n    assert 0 in [KH % 2 for KH in weight.shape[2:]]\n    assert 0 in [KW % 2 for KW in weight.shape[2:]]\n    if bias is not None:\n        bias = bias.unsqueeze(0)\n    if affine:\n        affine = True\n    if not track_running_stats:\n        track_running_stats = False\n    if num_features is None:\n        num_features = input.size(1)\n    else:\n        assert num_features == input.size(1)\n    N, C, H, W = input.shape\n    g = groups\n    out = torch.empty_like(input)\n    mean = torch.empty((1, g, 1, 1), dtype=torch.float32, device=input.device)\n    rstd = torch.empty((1, g, 1, 1), dtype=torch.float32, device=input.device)\n    # Launcher\n    def grid(meta):\n        return (\n            1,\n            triton.cdiv(C, meta[\"GROUP_BLOCK_SIZE\"]),\n            triton.cdiv(H, meta[\"SPATIAL_BLOCK_SIZE\"]),\n        )\n    fused_instance_norm_selu_conv2d_kernel[grid](\n        input,\n        weight,\n        bias,\n        out,\n        mean,\n        rstd,\n        input.stride(0),\n        input.stride(1),\n        input.stride(2),\n        input.stride(3),\n        out.stride(0),\n        out.stride(1),\n        out.stride(2),\n        out.stride(3),\n        weight.stride(0),\n        weight.stride(1),\n        weight.stride(2),\n        weight.stride(3),\n        mean.stride(0),\n        mean.stride(1),\n        rstd.stride(0),\n        rstd.stride(1),\n        N,\n        C,\n        H,\n        W,\n        weight.shape[2],\n        weight.shape[3],\n        g,\n        SPATIAL_BLOCK_SIZE=8,\n        GROUP_BLOCK_SIZE=triton.next_power_of_2(g),\n        SPLIT=1,\n        BIAS=bias is not None,\n        AFFINE=affine,\n        TRACK_RUNNING_STATS=track_running_stats,\n        NORM_BEFORE_ACTIVATION=nrom_before_activation,\n        ACTIVATION=activation,\n        eps=eps,\n        momentum=momentum,\n        num_stages=1,\n        num_warps=4,\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a ReLU activation followed by 2D fractional max pooling over an input signal composed of multiple planes. The input is first rectified (non-negative) and then pooled using fractional max pooling.\nWrapper Entry Information: def fused_fractional_max_pool2d_with_relu(input: torch.Tensor, kernel_size, output_size=None, output_ratio=None, return_indices=False) -> torch.Tensor: Input (Tensor): Input tensor. kernel_size (int or Tuple[int, int]): Size of the pooling window. output_size (Tuple[int, int], optional): Target output size (height, width). output_ratio (Tuple[float, float], optional): If set, output size is scaled as a ratio of the input size. return_indices (bool, optional): If `True`, return the max pooling indices along with the output.\nother: The function combines ReLU activation with fractional max pooling, allowing for optional output size or ratio specification and the option to return pooling indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_relu_fractional_max_pool2d(\n    input, output, indices, channels, input_rows, input_cols, kernel_size, stride, index_offset, dot_dtype: tl.constexpr\n):\n    # Compute row and column indices\n    row_idx = tl.program_id(0)\n    col_idx = tl.program_id(1)\n\n    # Calculate indices and offsets\n    idx = row_idx * input_cols + col_idx\n    row_idx_stride = kernel_size * stride\n    row_offset = idx * row_idx_stride\n    row_start = row_offset\n    row_end = row_offset + row_idx_stride\n    col_offset = tl.arange(0, kernel_size) + idx * kernel_size\n    col_start = col_offset\n    col_end = col_offset + kernel_size\n\n    # Initialize variables for maximum value and index\n    value_max = tl.zeros([kernel_size, kernel_size], dtype=dot_dtype) - float(\"inf\")\n    idx_max = tl.zeros([kernel_size, kernel_size], dtype=tl.int32) + channels\n\n    # Iterate through the input to find the maximum value and index\n    for r in range(row_start, row_end, stride):\n        for c in col_start, col_end:\n            mask = (r < input_rows) & (c < input_cols)\n            a = tl.load(input + r + c, mask=mask, other=float(\"-inf\")).to(dot_dtype)\n            b = tl.max(a, axis=0)\n            idx_a = tl.load(indices + r + c, mask=mask, other=idx_max).to(tl.int32)\n            idx_b = tl.where(b == a, c, idx_a)\n            value_max = tl.where(b > value_max, b, value_max)\n            idx_max = tl.where(b > value_max, idx_b, idx_max)\n\n    # Store the result\n    tl.store(output + row_idx * input_cols + col_idx, value_max, mask=(col_idx < input_cols))\n    tl.store(indices + row_idx * input_cols + col_idx, idx_max, mask=(col_idx < input_cols))\n\n\ndef fused_fractional_max_pool2d_with_relu(input: torch.Tensor, kernel_size, output_size=None, output_ratio=None, return_indices=False) -> torch.Tensor:\n    # Ensure input has four dimensions\n    if input.dim() != 4:\n        raise ValueError(\"Input must have four dimensions\")\n\n    # Prepare output tensor\n    output = torch.empty(input.size(0), input.size(1), *output_size, device=input.device, dtype=input.dtype)\n    index_dtype = torch.int32 if kernel_size < 65536 else torch.int64\n    indices = torch.empty(input.size(0), input.size(1), *output_size, device=input.device, dtype=index_dtype)\n\n    # Define constants\n    stride = 1 if output_ratio is None else output_ratio[0] / input.size(2)\n    index_offset = 0\n\n    # Call Triton kernel\n    fused_relu_fractional_max_pool2d[(output_size[0], output_size[1])](\n        input,\n        output,\n        indices,\n        input.size(1),\n        input.size(2),\n        input.size(3),\n        kernel_size,\n        stride,\n        index_offset,\n        input.dtype,\n    )\n\n    # Apply ReLU activation\n    output = torch.nn.functional.relu(output)\n\n    # Return results\n    if return_indices:\n        return output, indices\n    else:\n        return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Chebyshev polynomial of the first kind T_n(input). If n = 0, returns 1. If n = 1, returns input. For n < 6 or |input| > 1, uses a recursive formula. Otherwise, uses an explicit trigonometric formula.\nWrapper Entry Information: chebyshev_polynomial_t(input, n, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. n (Tensor): Degree of the polynomial. Keyword args: out (Tensor, optional): the output tensor.\nMath: T_{n + 1}(input) = 2 \\times input \\times T_{n}(input) - T_{n - 1}(input)\nT_{n}(input) = \\text{cos}(n \\times \\text{arccos}(x))\nother: If n = 0, returns 1. If n = 1, returns input. Uses recursion for n < 6 or |input| > 1, otherwise uses trigonometric formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _chebyshev_polynomial_t_triton(input, n, out):\n    # Convert input to float32\n    input_fp32 = input.to(tl.float32)\n    # Compute the Chebyshev polynomial using the trigonometric formula\n    out = tl.cos(n * tl.acos(input_fp32), out=out)\n    return out\n\ndef chebyshev_polynomial_t_triton(input, n, *, out=None):\n    # Ensure input is a tensor\n    if not isinstance(input, torch.Tensor):\n        input = torch.as_tensor(input)\n    # Ensure n is a tensor\n    if not isinstance(n, torch.Tensor):\n        n = torch.as_tensor(n)\n    # Reshape n to 1D if it's not already\n    if n.dim() != 1:\n        n = n.reshape(-1)\n    # Apply the Triton kernel\n    return _chebyshev_polynomial_t_triton(input, n, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the logit of the elements of input. The input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nWrapper Entry Information: logit(input, eps=None, *, out=None) -> Tensor; input (Tensor): the input tensor.; eps (float, optional): the epsilon for input clamp bound. Default: None; out (Tensor, optional): the output tensor.\nMath: y_{i} = \\ln(\\frac{z_{i}}{1 - z_{i}}); z_{i} = \\begin{cases} x_{i} & \\text{if eps is None} \\\\ \\text{eps} & \\text{if } x_{i} < \\text{eps} \\\\ x_{i} & \\text{if } \\text{eps} \\leq x_{i} \\leq 1 - \\text{eps} \\\\ 1 - \\text{eps} & \\text{if } x_{i} > 1 - \\text{eps} \\end{cases}\nother: input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef logit(input, eps=None):\n    if eps is None:\n        result = tl.where(input < 0, float(\"nan\"), input)\n        result = tl.where(input > 1, float(\"nan\"), result)\n    else:\n        input = tl.where(input < eps, eps, input)\n        input = tl.where(input > 1 - eps, 1 - eps, input)\n    odd = input * 2 - 1\n    result = tl.math.log(odd / (1 - odd))\n    return result\n\ndef torch_logit(input, eps=None, *, out=None):\n    return logit(input, eps)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves a symmetric (or Hermitian) linear system A x = b using LDL decomposition. The function first decomposes A into L and D through LDL decomposition, reconstructs matrix A, and then uses `torch.linalg.solve` to solve the linear system.\nWrapper Entry Information: solve_symmetric_ldl(A, b, *, hermitian=False, out=None) -> Tensor A (Tensor): 形状为 (*, n, n) 的对称（或 Hermitian）矩阵，其中 * 是零个或多个批次维度。 b (Tensor): 形状为 (*, n) 或 (*, n, k) 的右端项张量。 hermitian (bool, 可选): 是否将 A 视为 Hermitian 矩阵。默认值：False。 out (Tensor, 可选): 输出张量。如果为 None，则忽略。默认值：None。\nMath: Given a symmetric (or Hermitian) matrix A in \\mathbb{K}^{n \\times n} (where \\mathbb{K} is the real field \\mathbb{R} or complex field \\mathbb{C}), the LDL decomposition of A is represented as: A = L D L^{\\mathrm{T}} or A = L D L^{\\mathrm{H}}.\nother: This function supports batch processing; all computations are performed across batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndef solve_symmetric_ldl(A, b, *, hermitian=False, out=None):\n    n = A.shape[-1]\n    if out is None:\n        out = torch.empty_like(b)\n    else:\n        out.copy_(b)\n\n    if n <= 512:\n        # For small matrices, use a hybrid method with Triton and PyTorch\n        if n <= 64:\n            BLOCK_SIZE = triton.next_power_of_2(n)\n        else:\n            BLOCK_SIZE = 512\n\n        with torch.cuda.device(A.device):\n            l, d, _ = torch.linalg.ldl(A, hermitian=hermitian)\n            A_reconstructed = torch.tril(l, diagonal=0) @ torch.diag(d) @ torch.tril(l, diagonal=0).conj().transpose(-1, -2)\n            out = torch.linalg.solve(A_reconstructed, b, out=out)\n    else:\n        # For large matrices, use a pure Triton implementation\n        with torch.cuda.device(A.device):\n            l, d, _ = ldl_factor_triton(A, hermitian=hermitian)\n            A_reconstructed = reconstruct_A_triton(l, d)\n            out = triton_solve_triton(A_reconstructed, b, out=out)\n\n    return out\n\n\n@triton.jit\ndef ldl_factor_triton(a, *, out=None, hermitian=False):\n    # LDL factorization kernel\n    batch_dims = a.shape[:-2]\n    n = a.shape[-1]\n    k = a.shape[-2]\n\n    if out is None:\n        out = torch.empty(batch_dims + (k, n), dtype=a.dtype, device=a.device)\n    else:\n        out.copy_(a)\n\n    a = a.reshape(-1, n, n)\n    out = out.reshape(-1, k, n)\n    pid = tl.program_id(0)\n\n    a_i = a + pid * n * n\n    out_kj = out + pid * n * k\n\n    if hermitian:\n        # Implementation for Hermitian matrices\n        for j in range(n):\n            out_kj[j, j] = 1.0\n            denom = tl.load(a_i + j * (j + 1) + j)\n            for k in range(j + 1, n):\n                out_kj[k, j] = tl.load(a_i + k * (k + 1) + j) / denom\n            for i in range(j + 1, n):\n                acc = tl.zeros((1,), dtype=tl.float32)\n                for k in range(j):\n                    denom = tl.load(out_kj + k * n + j) * tl.load(out_kj + k * n + k)\n                    acc += tl.load(a_i + i * (i + 1) + k) * denom\n                x = tl.load(a_i + i * (i + 1) + j) - acc\n                out_kj[i, j] = x / denom\n    else:\n        # Implementation for symmetric matrices\n        for j in range(n):\n            out_kj[j, j] = 1.0\n            denom = tl.load(a_i + j * (j + 1) + j)\n            for k in range(j + 1, n):\n                out_kj[k, j] = tl.load(a_i + k * (k + 1) + j) / denom\n            for i in range(j + 1, n):\n                acc = tl.zeros((1,), dtype=tl.float32)\n                for k in range(j):\n                    denom = tl.load(out_kj + k * n + j) * tl.load(out_kj + k * n + k)\n                    acc += tl.load(a_i + i * (i + 1) + k) * denom\n                x = tl.load(a_i + i * (i + 1) + j) - acc\n                out_kj[i, j] = x / denom\n\n    return out\n\n\n@triton.jit\ndef reconstruct_A_triton(l, d):\n    # Reconstruct matrix A from LDL decomposition\n    n = l.shape[-1]\n    k = l.shape[-2]\n    l = l.reshape(-1, k, n)\n    d = d.reshape(-1, n, 1)\n\n    out = l * d\n    out = out * l\n    return out\n\n\n@triton.jit\ndef triton_solve_triton(a, b, *, out=None):\n    # Solve linear system using Triton\n    batch_dims = a.shape[:-2]\n    n = a.shape[-1]\n    rhs_batch_dims = b.shape[:-2]\n    rhs_n = b.shape[-2]\n    rhs_k = b.shape[-1]\n\n    if len(rhs_batch_dims) != len(batch_dims):\n        if len(rhs_batch_dims) == len(batch_dims) - 1:\n            batch_shape_broadcasted = list(batch_dims)[:-1] + [1]\n            if torch.prod(torch.tensor(batch_shape_broadcasted)).item() != 1:\n                raise ValueError(\"Incompatible batch dimensions between 'a' and 'b'\")\n            else:\n                rhs_batch_dims = batch_dims\n        else:\n            raise ValueError(\"Incompatible batch dimensions between 'a' and 'b'\")\n\n    if out is None:\n        out = torch.empty(rhs_batch_dims + (n, rhs_k), dtype=a.dtype, device=a.device)\n    else:\n        out.copy_(b)\n\n    a = a.reshape(-1, n, n)\n    b = b.reshape(-1, rhs_n, rhs_k)\n    out = out.reshape(-1, n, rhs_k)\n    pid = tl.program_id(0)\n\n    a_i = a + pid * n * n\n    b_i = b + pid * n * rhs_k\n    x = out\n\n    for i in range(n):\n        denom = tl.load(a_i + i * (i + 1) + i)\n        x_i = x + i * n * rhs_k\n        b_i_ptr = b_i + i * rhs_k\n        for j in range(rhs_k):\n            x_i[j] = tl.load(b_i_ptr + j) / denom\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the exponential of each element in the input tensor, followed by calculating the square root of the result. Returns a tensor where each element is the result of applying exponential followed by square root to each element of input.\nWrapper Entry Information: def exp_sqrt(input, out=None) -> Tensor; input (Tensor): The input tensor.; out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{e^{\\text{input}_i}}\nother: This function will return NaN for input elements that result in negative values after `exp` and `sqrt` due to overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef exp_sqrt_kernel(input, out):\n    # Convert input to float32\n    input_fp32 = input.to(tl.float32)\n    # Compute exponential and then square root\n    output = tl.sqrt(tl.exp(input_fp32))\n    # Write result to output\n    tl.store(output, input)\n\ndef exp_sqrt(input, out=None) -> torch.Tensor:\n    # Ensure input is a tensor\n    assert isinstance(input, torch.Tensor)\n    # Create output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert input.is_cuda == out.is_cuda\n    # Call Triton kernel\n    exp_sqrt_kernel[(1,)](input, out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations combining matrix multiplication, sigmoid, tanh, element-wise multiplication, and addition. It supports batches of inputs, where any leading batch dimensions in `input` will be preserved in the output. The function's operations are differentiable and support autograd. The function ensures the dimensions of `input` and `weight1` are compatible for matrix multiplication, and that `weight2` and `bias` are broadcastable to the shape of the output tensor.\nWrapper Entry Information: combined_activation(input, weight1, weight2, bias, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_{in}), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_{in}, D_{out}).; weight2 (Tensor): Weight tensor for element-wise multiplication, must be broadcastable to the shape of the intermediate activation.; bias (Tensor): Bias tensor, must be broadcastable to the shape of the output.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a bias b, the function computes: Y = (tanh(sigmoid(X W_1)) ⊙ W_2) + b\n\n- σ(z) = 1 / (1 + exp(-z)) is the sigmoid function applied element-wise.\n- tanh(z) = (exp(z) - exp(-z)) / (exp(z) + exp(-z)) is the hyperbolic tangent function applied element-wise.\n- ⊙ denotes element-wise multiplication.\nother: The function supports differentiable operations and autograd. It requires compatibility in dimensions for matrix multiplication and broadcasting for element-wise operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.ops.matmul_perf_model import early_config_prune, estimate_matmul_time\n\n@triton.autotune(\n    configs=[\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=3, num_warps=8),\n        triton.Config({\"BLOCK_M\": 256, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=3, num_warps=8),\n        triton.Config({\"BLOCK_M\": 256, \"BLOCK_N\": 64, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 64, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 32, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 32, \"BLOCK_K\": 32, \"SPLIT_K\": 1}, num_stages=5, num_warps=2),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 128, \"SPLIT_K\": 1}, num_stages=3, num_warps=8),\n        triton.Config({\"BLOCK_M\": 256, \"BLOCK_N\": 128, \"BLOCK_K\": 128, \"SPLIT_K\": 1}, num_stages=3, num_warps=8),\n        triton.Config({\"BLOCK_M\": 256, \"BLOCK_N\": 64, \"BLOCK_K\": 128, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 256, \"BLOCK_K\": 128, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 128, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 64, \"BLOCK_K\": 64, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 128, \"BLOCK_K\": 64, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 32, \"BLOCK_K\": 64, \"SPLIT_K\": 1}, num_stages=4, num_warps=4),\n        triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 32, \"BLOCK_K\": 64, \"SPLIT_K\": 1}, num_stages=5, num_warps=2),\n    ],\n    key=[\"M\", \"N\", \"K\"],\n    prune_configs_by={\n        \"early_config_prune\": early_config_prune,\n        \"perf_model\": estimate_matmul_time,\n        \"top_k\": 10,\n    },\n)\n@triton.heuristics(\n    {\n        \"EVEN_K\": lambda args: args[\"K\"] % (args[\"BLOCK_K\"] * args[\"SPLIT_K\"]) == 0,\n    },\n)\n@triton.jit\ndef _triton_matmul(\n    a_ptr,\n    b_ptr,\n    c_ptr,\n    M,\n    N,\n    K,\n    stride_am,\n    stride_ak,\n    stride_bk,\n    stride_bn,\n    stride_cm,\n    stride_cn,\n    dot_dtype: tl.constexpr,\n    BLOCK_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    BLOCK_K: tl.constexpr,\n    GROUP_M: tl.constexpr,\n    SPLIT_K: tl.constexpr,\n    EVEN_K: tl.constexpr,\n    ACC_TYPE: tl.constexpr,\n):\n    # matrix multiplication\n    pid = tl.program_id(0)\n    pid_z = tl.program_id(1)\n    grid_m = tl.cdiv(M, BLOCK_M)\n    grid_n = tl.cdiv(N, BLOCK_N)\n    # re-order program ID for better L2 performance\n    width = GROUP_M * grid_n\n    group_id = pid // width\n    group_size = min(grid_m - group_id * GROUP_M, GROUP_M)\n    pid_m = group_id * GROUP_M + (pid % group_size)\n    pid_n = (pid % width) // (group_size)\n    # do matrix multiplication\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    ram = tl.max_contiguous(tl.multiple_of(rm % M, BLOCK_M), BLOCK_M)\n    rbn = tl.max_contiguous(tl.multiple_of(rn % N, BLOCK_N), BLOCK_N)\n    rk = pid_z * BLOCK_K + tl.arange(0, BLOCK_K)\n    # pointers\n    A = a_ptr + (ram[:, None] * stride_am + rk[None, :] * stride_ak)\n    B = b_ptr + (rk[:, None] * stride_bk + rbn[None, :] * stride_bn)\n    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=ACC_TYPE)\n    for k in range(0, tl.cdiv(K, BLOCK_K * SPLIT_K)):\n        if EVEN_K:\n            a = tl.load(A)\n            b = tl.load(B)\n        else:\n            k_remaining = K - k * (BLOCK_K * SPLIT_K)\n            a = tl.load(A, mask=rk[None, :] < k_remaining, other=0.0)\n            b = tl.load(B, mask=rk[:, None] < k_remaining, other=0.0)\n        acc += tl.dot(a, b, allow_tf32=True, out_dtype=ACC_TYPE)\n        A += BLOCK_K * SPLIT_K * stride_ak\n        B += BLOCK_K * SPLIT_K * stride_bk\n    acc = acc.to(dot_dtype)\n    # bias\n    # acc += tl.load(c_ptr + rn, mask=rn < N, other=0.0)\n    # rematerialize rm and rn to save registers\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    # rematerialize ram and rbn to save registers\n    ram = tl.max_contiguous(tl.multiple_of(rm % M, BLOCK_M), BLOCK_M)\n    rbn = tl.max_contiguous(tl.multiple_of(rn % N, BLOCK_N), BLOCK_N)\n    # write back\n    c_ptr += (ram[:, None] * stride_cm + rbn[None, :] * stride_cn)\n    mask = (ram < M)[:, None] & (rbn < N)[None, :]\n    tl.store(c_ptr, acc, mask=mask)\n\ndef _triton_combine(input, weight1, weight2, bias):\n    input = input.contiguous()\n    weight1 = weight1.contiguous()\n    bias = bias.contiguous()\n    if input.dtype == torch.float16:\n        weight2 = weight2.contiguous().to(torch.float32)\n    else:\n        weight2 = weight2.contiguous()\n    # matmul path\n    out_shape = input.shape[:-1] + weight1.shape[-1:]\n    inp_dim = input.shape[-1]\n    out = torch.empty(out_shape, device=input.device, dtype=input.dtype)\n    grid = lambda META: (triton.cdiv(input.numel() // inp_dim, META[\"BLOCK_M\"]) * triton.cdiv(weight1.shape[-1], META[\"BLOCK_N\"]),)  # noqa\n    _triton_matmul[grid](\n        input,\n        weight1,\n        out,\n        input.shape[-1],\n        weight1.shape[-1],\n        input.numel() // inp_dim,\n        input.stride(-2),\n        input.stride(-1),\n        weight1.stride(0),\n        weight1.stride(1),\n        out.stride(-2),\n       ", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the dot product of the modified `y` with itself. This fused function performs two operations: 1. Scales `x` by a factor of `alpha` and adds the result to `y`. 2. Computes the dot product of the modified `y` with itself.\nWrapper Entry Information: def scaled_add_dot(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape (n,). x (Tensor): The tensor to be scaled and added to y, of shape (n,). alpha (float): The scalar multiplier for x.\nMath: y += alpha * x\ndot_product = torch.dot(y, y)\nother: The function modifies the input tensor `y` in place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef scaled_add_dot_kernel(y, x, alpha):\n    idx = tl.arange(0, 1024)\n    y_ptrs = y + idx\n    x_ptrs = x + idx\n    mask = idx < y.shape[0]\n    y_val = tl.load(y_ptrs, mask=mask)\n    x_val = tl.load(x_ptrs, mask=mask)\n    scaled_x = x_val * alpha\n    y_new = y_val + scaled_x\n    tl.store(y_ptrs, y_new, mask=mask)\n\ndef scaled_add_dot(y: torch.Tensor, x: torch.Tensor, alpha: float) -> torch.Tensor:\n    assert y.is_cuda and x.is_cuda\n    n = y.shape[0]\n    grid = lambda meta: (triton.cdiv(n, 1024),)\n    scaled_add_dot_kernel[grid](y, x, alpha)\n    return torch.dot(y, y)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a contraction of a and b over multiple dimensions. It implements a generalized matrix product.\nWrapper Entry Information: def tensordot(a: Tensor, b: Tensor, dims: Union[int, Tuple[List[int], List[int]], List[List[int]]]) -> Tensor: \nArgs:\n    a (Tensor): Left tensor to contract\n    b (Tensor): Right tensor to contract\n    dims (int or Tuple[List[int], List[int]] or List[List[int]] containing two lists or Tensor): number of dimensions to contract or explicit lists of dimensions for a and b respectively\nMath: r_{i_0,...,i_{m-d}, i_d,...,i_n} = \\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}.\nother: The sizes in the contracted dimensions must match, but broadcasted dimensions are handled.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom typing import Union, Tuple, List\nfrom flag_gems.utils.shape_utils import broadcast_shapes\n\ndef generate_wrapper(func_inputs: dict) -> Tuple[str, str]:\n    wrapper, kernel = generate_wrapper_and_kernel(func_inputs)\n    assert wrapper_inputs_match_kernel(func_inputs, kernel)\n    return wrapper, kernel\n\ndef generate_wrapper_and_kernel(func_inputs: dict) -> Tuple[str, str]:\n    a, b, dims = func_inputs['args']\n    rank_a, rank_b = a.ndim, b.ndim\n    if type(dims) is int:\n        num_dims = dims\n        dim_a = list(range(rank_a - num_dims, rank_a))\n        dim_b = list(range(0, num_dims))\n    elif type(dims[0]) is int:\n        dim_a, dim_b = dims\n    else:\n        dim_a, dim_b = [list(d) for d in dims]\n    assert all([i < rank_a for i in dim_a])\n    assert all([i < rank_b for i in dim_b])\n    a_is_contiguous = all([i in a.stride() for i in sorted(dim_a)])\n    b_is_contiguous = all([i in b.stride() for i in sorted(dim_b)])\n\n    shape_a, shape_b = broadcast_shapes(a.shape, b.shape)\n    shape_out = list(shape_a)\n    for i, j in zip(dim_a, dim_b):\n        shape_out[i] = shape_b[j]\n    a_expanded = expand_tensor(a, shape_a)\n    b_expanded = expand_tensor(b, shape_b)\n    a_strides, b_strides = a_expanded.stride(), b_expanded.stride()\n    wrapper = textwrap.dedent(f\"\"\"\n        import torch\n        import triton\n        import triton.language as tl\n        from flag_gems.utils.shape_utils import broadcast_shapes\n\n        @triton.jit\n        def kernel(a_ptr, b_ptr, output_ptr, {', '.join(f'shape_{i}' for i in range(len(shape_out)))},\n                    {', '.join(f'stride_a_{i}' for i in range(len(dim_a)))},\n                    {', '.join(f'stride_b_{i}' for i in range(len(dim_b)))},\n                    {', '.join(f'stride_out_{i}' for i in range(len(shape_out)))},\n                    BLOCK_SIZE: tl.constexpr, \n                    NUM_SM: tl.constexpr):\n            pid = tl.program_id(0)\n            num_pid = tl.num_programs(0)\n            offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n            mask = offset < {shape_out[0]}\n            {('            offset = tl.where(mask, offset, 0)\\n' if len(shape_out) == 1 else '')}\n            {'            '.join(f'index_out_{i} = offset // {shape_out[i+1] if len(shape_out) > 1 else 1}' for i in range(len(shape_out) - 1))}\n            index_out_0 = offset\n            {('            '.join(f'offset %= {shape_out[i+1] if len(shape_out) > 1 else 1}' for i in range(len(shape_out) - 1)))}\n            {'            '.join(f'a_offset = index_out_{i} * stride_a_{i}' for i in range(len(dim_a)))}\n            {'            '.join(f'b_offset = index_out_{i} * stride_b_{i}' for i in range(len(dim_b)))}\n            {'            '.join(f'output_offset = index_out_{i} * stride_out_{i}' for i in range(len(shape_out)))}\n            a_ptr += a_offset\n            b_ptr += b_offset\n            output_ptr += output_offset\n            a_tile = tl.load(a_ptr + tl.arange(0, {max(1, triton.next_power_of_2(len(dim_a)))}), mask=a_offset < {shape_a[0]}, other=0)\n            b_tile = tl.load(b_ptr + tl.arange(0, {max(1, triton.next_power_of_2(len(dim_b)))}), mask=b_offset < {shape_b[0]}, other=0)\n            output = tl.dot(a_tile, b_tile)\n            tl.store(output_ptr, output, mask=mask)\n\n        def call_kernel(a, b):\n            shape_a, shape_b = broadcast_shapes(a.shape, b.shape)\n            {dims_code}\n            a_expanded = {expand_code}\n            b_expanded = {expand_code}\n            output = torch.empty({shape_out}, device=a.device, dtype=a.dtype)\n            grid = lambda meta: (triton.cdiv({shape_out[0]}, meta['BLOCK_SIZE']),)\n            dtype = a.dtype\n            if dtype == torch.float16:\n                BLOCK_SIZE = 128\n                NUM_SM = 84\n            elif dtype == torch.bfloat16:\n                BLOCK_SIZE = 128\n                NUM_SM = 84\n            elif dtype == torch.float32:\n                BLOCK_SIZE = 64\n                NUM_SM = 168\n            kernel[grid](a_expanded, b_expanded, output,\n                         {', '.join(f'shape_{i}' for i in range(len(shape_out)))},\n                         {', '.join(f'stride_a_{i}' for i in range(len(dim_a)))},\n                         {', '.join(f'stride_b_{i}' for i in range(len(dim_b)))},\n                         {', '.join(f'stride_out_{i}' for i in range(len(shape_out)))},\n                         BLOCK_SIZE=BLOCK_SIZE, NUM_SM=NUM_SM)\n            return output\n        \"\"\")\n    kernel = textwrap.dedent(f\"\"\"\n        import triton\n        import triton.language as tl\n\n        @triton.jit\n        def kernel(a_ptr, b_ptr, output_ptr, {', '.join(f'shape_{i}' for i in range(len(shape_out)))},\n                    {', '.join(f'stride_a_{i}' for i in range(len(dim_a)))},\n                    {', '.join(f'stride_b_{i}' for i in range(len(dim_b)))},\n                    {', '.join(f'stride_out_{i}' for i in range(len(shape_out)))},\n                    BLOCK_SIZE: tl.constexpr, \n                    NUM_SM: tl.constexpr):\n            pid = tl.program_id(0)\n            num_pid = tl.num_programs(0)\n            offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n            mask = offset < {shape_out[0]}\n            {('            offset = tl.where(mask, offset, 0)\\n' if len(shape_out) == 1 else '')}\n            {'            '.join(f'index_out_{i} = offset // {shape_out[i+1] if len(shape_out) > 1 else 1}' for i in range(len(shape_out) - 1))}\n            index_out_0 = offset\n            {('            '.join(f'offset %= {shape_out[i+1] if len(shape_out) > 1 else 1}' for i in range(len(shape_out) - 1)))}\n            {'            '.join(f'a_offset = index_out_{i} * stride_a_{i}' for i in range(len(dim_a)))}\n            {'            '.join(f'b_offset = index_out_{i} * stride_b_{i}' for i in range(len(dim_b)))}\n            {'            '.join(f'output_offset = index_out_{i} * stride_out_{i}' for i in range(len(shape_out)))}\n            a_ptr += a_offset\n            b_ptr += b_offset\n            output_ptr += output_offset\n            a_tile = tl.load(a_ptr + tl.arange(0, {max(1, triton.next_power_of_2(len(dim_a)))}), mask=a_offset < {shape_a[0]}, other=0)\n            b_tile = tl.load(b_ptr + tl.arange(0, {max(1, triton.next_power_of_2(len(dim_b)))}), mask=b_offset < {shape_b[0]}, other=0)\n            output = tl.dot(a_tile, b_tile)\n            tl.store(output_ptr, output, mask=mask)\n        \"\"\")\n    return wrapper, kernel\n\ndef wrapper_inputs_match_kernel(func_inputs: dict, kernel: str) -> bool:\n    a, b, dims = func_inputs['args']\n    rank_a, rank_b = a.ndim, b.ndim\n    if type(dims) is int:\n        num_dims = dims\n        dim_a = list(range(rank_a - num_dims, rank_a))\n        dim_b = list(range(0, num_dims))\n    elif type(dims[0]) is int:\n        dim_a, dim_b = dims\n    else:\n        dim_a, dim_b = [list(d) for d in dims]\n    num_pid = 'num_pid'\n    if rank_a == 0:\n        num_pid = '1'\n    elif len(dim_a) > 0:\n        size_last_dim_a = [f'shape_a[{i}]' for i in dim_a if i != dim_a[-1]]\n        size_last_dim_a += [f'shape_a[{dim_a[-1]}] // {func_inputs[\"device_properties\"][\"multiprocessor_count\"]}']\n        num_pid = ' * '.join(size_last_dim_a)\n    num_pid = f'tl.cdiv({shape_out[0]}, BLOCK_SIZE)'\n    return num_pid in kernel\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the QR decomposition of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The parameter mode chooses between the full and reduced QR decomposition. It is always differentiable for 'reduced' mode, differentiable for 'complete' mode when m <= n, and never differentiable for 'r' mode.\nWrapper Entry Information: qr(A, mode='reduced', *, out=None) -> (Tensor, Tensor) A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. mode (str, optional): one of `'reduced'`, `'complete'`, `'r'`. Controls the shape of the returned tensors. Default: `'reduced'`. out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = QR where Q is orthogonal in the real case and unitary in the complex case, and R is upper triangular with real diagonal. For tall matrices (m > n), the reduced QR decomposition is A = QR with Q in K^{m x n} and R in K^{n x n}.\nother: Differences with numpy.linalg.qr: mode='raw' is not implemented. Unlike numpy.linalg.qr, this function always returns a tuple of two tensors. When mode='r', the Q tensor is an empty tensor. The elements in the diagonal of R are not necessarily positive, making the QR decomposition unique only up to the sign of the diagonal of R. The QR decomposition is only well-defined if the first k = min(m, n) columns of every matrix in A are linearly independent.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _qr_kernel_R(R, m, n, k, tiles_per_mat: tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    # Compute indices\n    pid = tl.program_id(0)\n    i = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    # Initialize pointers to matrices\n    r = R + i[:, None] * n + k\n\n    # Compute R\n    for _ in range(tiles_per_mat):\n        # Compute r\n        r_norm = tl.math.sqrt(tl.sum(tl.math.conj(r) * r, 0))\n        r = tl.where(i[:, None] >= n, r, r / r_norm)\n        r = tl.where(i[:, None] < n, r, 0)\n\n        # Update r\n        r = tl.store(r, r)\n\n@triton.jit\ndef _qr_kernel_QR(A, Q, R, m, n, k, tiles_per_mat_a: tl.constexpr, tiles_per_mat_q: tl.constexpr, tiles_per_mat_r: tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    # Compute indices\n    pid = tl.program_id(0)\n    i = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n\n    # Initialize pointers to matrices\n    a = A + i[:, None] * n + k\n    qr = Q * R\n    q = qr + i[:, None] * n + k\n    r = R + i[:, None] * n + k\n\n    # Compute QR\n    for _ in range(tiles_per_mat_q):\n        # Compute q\n        a = tl.load(a)\n        q = tl.dot(qr, a, allow_tf32=False)\n        q = tl.store(q, q)\n\n    for _ in range(tiles_per_mat_r):\n        # Compute r\n        a = tl.load(a)\n        r = tl.dot(tl.math.conj(a), qr, allow_tf32=False)\n        r = tl.store(r, r)\n\n    for _ in range(tiles_per_mat_a):\n        # Store a\n        a = tl.load(a)\n        tl.store(a, a)\n\ndef _qr(A: torch.Tensor, mode: str, out: tuple[torch.Tensor, torch.Tensor] | None) -> tuple[torch.Tensor, torch.Tensor]:\n    m = A.shape[-2]\n    n = A.shape[-1]\n    k = min(m, n)\n    num_batch_dims = A.ndim - 2\n    num_tiles = k\n\n    # Create views of the input tensor for tiling\n    tiles_a = A.reshape(A.shape[:-2] + (num_tiles, -1))\n    tiles_a = tiles_a.reshape(tiles_a.shape[:-1] + (triton.next_power_of_2(n),))\n    tiles_a = tiles_a.contiguous()\n\n    if mode == 'reduced':\n        Q = torch.empty_like(tiles_a, dtype=A.dtype, device=A.device)\n        R = torch.empty(tiles_a.shape[:-2] + (n, n), dtype=A.dtype, device=A.device)\n\n        for i in range(num_tiles):\n            tile_a = tiles_a[..., i, :]\n            tile_q = Q[..., i, :]\n            tile_r = R[..., i, :]\n\n            tiles_per_mat_a = 1\n            tiles_per_mat_q = 1\n            tiles_per_mat_r = 1\n\n            _qr_kernel_QR[(triton.cdiv(k, tiles_per_mat_a * triton.next_power_of_2(n)),)](tile_a, tile_q, tile_r, m, n, i, tiles_per_mat_a, tiles_per_mat_q, tiles_per_mat_r, 2 * triton.next_power_of_2(n))\n\n        Q = torch.sum(Q, dim=-3)\n        R = torch.sum(R, dim=-3)\n\n    elif mode == 'complete':\n        Q = torch.empty(tiles_a.shape, dtype=A.dtype, device=A.device)\n        R = torch.empty(tiles_a.shape[:-2] + (n, n), dtype=A.dtype, device=A.device)\n\n        for i in range(num_tiles):\n            tile_a = tiles_a[..., i, :]\n            tile_q = Q[..., i, :]\n            tile_r = R[..., i, :]\n\n            tiles_per_mat_a = 1\n            tiles_per_mat_q = triton.cdiv(m, tiles_per_mat_a * n)\n            tiles_per_mat_r = 1\n\n            _qr_kernel_QR[(tiles_per_mat_q,)](tile_a, tile_q, tile_r, m, n, i, tiles_per_mat_a, tiles_per_mat_q, tiles_per_mat_r, 2 * triton.next_power_of_2(n))\n\n        Q = torch.sum(Q, dim=-3)\n        R = torch.sum(R, dim=-3)\n\n    elif mode == 'r':\n        Q = torch.empty([1] * num_batch_dims, dtype=A.dtype, device=A.device)\n        R = torch.empty(tiles_a.shape, dtype=A.dtype, device=A.device)\n\n        for i in range(num_tiles):\n            tile_a = tiles_a[..., i, :]\n            tile_r = R[..., i, :]\n\n            tiles_per_mat_a = 1\n            tiles_per_mat_r = 1\n\n            _qr_kernel_R[(tiles_per_mat_a,)](tile_r, m, n, i, tiles_per_mat_a, 2 * triton.next_power_of_2(n))\n\n        R = torch.sum(R, dim=-3)\n\n    if out is not None:\n        out[0].copy_(Q)\n        out[1].copy_(R)\n        return out\n\n    else:\n        return Q, R\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the arcsine of the elements of the input tensor. The function computes the inverse sine (arcsine) for each element in the input tensor.\nWrapper Entry Information: asin(input, *, out=None) -> Tensor: input (Tensor): the input tensor. out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sin^{-1}(\\text{input}_{i})\nother: The function returns NaN for input values outside the range [-1, 1] as arcsine is not defined for those values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef asin_kernel(x, out):\n    return tl.math.asin(x.to(tl.float32)).to(out.dtype.element_ty)\n\ndef asin(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape and out.dtype == input.dtype\n    if input.is_floating_point():\n        asin_kernel(input, out)\n    else:\n        out.copy_(input.to(torch.float))\n        asin_kernel(out, out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs a fused operation combining masked selection, addition, and GELU activation. It first selects elements from the input tensor based on a boolean mask, then adds a scalar or tensor (scaled by alpha) to the selected values, and finally applies the GELU (Gaussian Error Linear Unit) activation function element-wise to the result.\nWrapper Entry Information: fused_masked_select_add_gelu(input, mask, other, *, alpha=1, approximate='none', out=None) -> Tensor\nMath: Z = masked_select(X, M)\nS = Z + alpha * O\nY = GELU(S)\nother: The function is differentiable and supports autograd. The mask and other tensor must be broadcastable to the shape of the selected elements. The 'approximate' parameter can be set to 'tanh' for a faster, approximate GELU computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import gelu, gelu_approx\n\n@triton.jit\ndef fused_masked_add_gelu_kernel(X, M, O, A, OUT, stride_x, stride_y, stride_z, stride_m, stride_o, stride_out_m,\n                                 stride_out_n, n_elements, alpha, approximate, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Offsetted pointers\n    x = tl.load(X + offsets * stride_x, mask=mask)\n    m = tl.load(M + offsets * stride_m, mask=mask)\n    o = tl.load(O + offsets * stride_o, mask=mask)\n    # Fused operations\n    s = tl.where(m, x + alpha * o, 0.)\n    if approximate == 'tanh':\n        y = gelu_approx(s)\n    else:\n        y = gelu(s)\n    # Store output\n    tl.store(OUT + offsets * stride_out_m, y, mask=mask)\n\ndef fused_masked_add_gelu(x, m, o, *, alpha=1, approximate='none', out=None):\n    # Reshape input for processing\n    x_ = x.unsqueeze(0) if x.ndim == 1 else x\n    m_ = m.unsqueeze(0) if m.ndim == 1 else m\n    o_ = o.unsqueeze(0) if o.ndim == 1 else o\n    # Prepare output tensor\n    if out is None:\n        out = torch.empty_like(x_, dtype=x_.dtype)\n    else:\n        assert out.shape == x.shape\n    out_ = out.unsqueeze(0) if out.ndim == 1 else out\n    # Grid definition for Triton kernel launch\n    grid = lambda meta: (triton.cdiv(x_.numel(), meta['BLOCK_SIZE']),)\n    # Launch Triton kernel\n    fused_masked_add_gelu_kernel[grid](x_, m_, o_, alpha, approximate, BLOCK_SIZE=1024,\n                                       stride_x=x_.stride(0), stride_y=m_.stride(0), stride_z=o_.stride(0),\n                                       stride_m=x_.shape[0], stride_o=m_.shape[0], stride_out_m=out_.shape[0],\n                                       stride_out_n=out_.shape[1], n_elements=x_.numel())\n    return out_.squeeze(0) if out_.ndim > x.ndim else out_\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies adaptive average pooling to the input tensors `x1` and `x2` to resize them to the specified `output_size`, and then computes the pairwise distance between the pooled outputs. The function first applies `adaptive_avg_pool2d` to each input tensor, and then calculates the pairwise distance using the specified norm `p`. A small value `eps` is added to avoid division by zero during distance calculation. The function can also retain the reduced dimension of the output via the `keepdim` parameter.\nWrapper Entry Information: def fused_pairwise_distance_adaptive_avg_pool2d(x1: torch.Tensor, x2: torch.Tensor, output_size: int or tuple, p: float = 2.0, eps: float = 1e-6, keepdim: bool = False) -> torch.Tensor: x1 (Tensor): First input tensor for adaptive average pooling and distance calculation. x2 (Tensor): Second input tensor for adaptive average pooling and distance calculation. output_size (int or tuple): The target output size for the adaptive average pooling. p (float, optional): The norm degree for pairwise distance calculation. Default: 2.0 eps (float, optional): Small value to avoid division by zero in pairwise distance. Default: 1e-6 keepdim (bool, optional): Whether to keep the reduced dimension. Default: False\nMath: No explicit formula provided. The function applies adaptive average pooling followed by pairwise distance calculation with norm p and epsilon to avoid division by zero.\nother: The function combines adaptive average pooling and pairwise distance calculation in a sequential manner.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom typing import Optional, Union, Tuple\n\n@triton.jit\ndef _fused_pairwise_distance_adaptive_avg_pool2d_triton(x1, x2, output_size, p, eps, keepdim, stride_x1_n, stride_x1_t, stride_x1_h, stride_x1_w, stride_x2_n, stride_x2_t, stride_x2_h, stride_x2_w, num_threads_n, num_threads_h, num_threads_w, pid_n, pid_h, pid_w, y):\n    # The kernel calculates the Lp distance between two sets of n feature maps with height and width of h and w respectively.\n    # The feature maps are stored in two tensors of size (n, t, h, w) and the result is a tensor of size (n, t, t) with the distance matrix for each feature map.\n    # The feature maps are first divided by (h*w)^0.5 (if p=2) or h*w (if p!=2) then for each feature map the distance between the two sets of feature vectors is calculated.\n    # The distance is calculated using the formula: dist(x,y) = (1/n) * sum(over n components) |x_i - y_i|^p )^1/p.\n    # The feature maps are processed in blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The number of threads is determined by the size of the feature maps and the number of threads per block.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The number of blocks is determined by the size of the feature maps and the block size.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps.\n    # The feature maps are divided into blocks of size BLOCK_SIZE_N, BLOCK_SIZE_H and BLOCK_SIZE_W.\n    # The feature maps are processed by a single thread block that calculates the distance between two sets of feature maps", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the `other` tensor, scaled by `alpha`, to the `input` tensor and computes the mean value along the specified dimension. If no dimension is specified, it computes the mean over all elements. Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: def add_mean(input, other, dim=None, alpha=1, keepdim=False, dtype=None, out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. dim (int or tuple of ints, optional): The dimension(s) to reduce. Default: None. alpha (Number, optional): The multiplier for other. Default: 1. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default: False. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{mean}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i)\nother: Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef triton_add_mean_kernel(\n    in_ptr0,\n    in_ptr1,\n    out_ptr,\n    n_elements,\n    in_stride0,\n    in_stride1,\n    out_stride0,\n    out_stride1,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    temp = tl.load(in_ptr0 + (offsets % in_stride0) + (offsets // in_stride0) * in_stride1, mask, other=0.0)\n    temp = temp.to(tl.float32)\n    other = tl.load(in_ptr1 + (offsets % in_stride0) + (offsets // in_stride0) * in_stride1, mask, other=0.0)\n    other = other.to(tl.float32)\n    temp = triton_helpers.promote_to_tensor(temp)\n    other = triton_helpers.promote_to_tensor(other)\n    temp = triton_helpers.add(temp, triton_helpers.mul(other, 1))\n    temp = triton_helpers.mean(temp, (0,))\n    temp = temp.to(tl.float32)\n    tl.store(out_ptr + (offsets % out_stride0) + (offsets // out_stride0) * out_stride1, temp, mask)\n\ndef add_mean(input, other, dim=None, alpha=1, keepdim=False, dtype=None, out=None) -> torch.Tensor:\n    if dtype is None:\n        dtype = input.dtype\n    if out is None:\n        out = torch.empty_like(input, dtype=dtype)\n    else:\n        assert out.dtype == dtype\n    assert input.is_contiguous()\n    assert out.is_contiguous()\n    in_view_stride = list(input.stride())\n    if dim is None:\n        in_view_stride = [-1]\n    else:\n        if isinstance(dim, tuple):\n            dim = list(dim)\n        else:\n            dim = [dim]\n        in_view_shape = list(input.shape)\n        for d in dim:\n            assert d >= -input.dim() and d < input.dim()\n            in_view_shape[d] = 1\n        in_view = input.reshape(in_view_shape)\n        in_view_stride = in_view.stride()\n    n_elements = in_view.numel()\n    if n_elements == 0:\n        return out\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    triton_add_mean_kernel[grid](input, other, out, n_elements, in_view_stride[0], in_view_stride[1], out.stride(0), out.stride(1))\n    if dim is not None or keepdim:\n        out = out.reshape(input.shape)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a linear transformation followed by ReLU activation and layer normalization on the input tensor.\nWrapper Entry Information: fused_layer_norm_relu_linear(input: Tensor, weight: Tensor, bias=None, normalized_shape=None, eps=1e-5, elementwise_affine=True) -> Tensor: Input (Tensor): Input tensor with shape (*, in_features). Weight (Tensor): Weights for the linear transformation, shape (out_features, in_features). Bias (Tensor, optional): Bias for the linear transformation, shape (out_features). Normalized_shape (int or list or torch.Size, optional): Shape of the dimensions to normalize. Eps (float, optional): A value added to the denominator for numerical stability. Default is 1e-5. Elementwise_affine (bool, optional): If True, layer normalization has learnable parameters. Default is True. Returns: Tensor: Result after applying the linear transformation, ReLU, and layer normalization. Example: >>> input = torch.randn(4, 5) # Example input tensor >>> weight = torch.randn(3, 5) # Linear transformation weights >>> bias = torch.randn(3) # Bias for linear layer >>> normalized_shape = 3 >>> # Apply fused operation >>> output = fused_layer_norm_relu_linear(input, weight, bias, normalized_shape) >>> print(output.shape) # Expected output shape: (4, 3)\nother: The function performs a sequence of operations: linear transformation, ReLU activation, and layer normalization. It supports optional bias and learnable parameters for layer normalization.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _fused_layer_norm_relu_linear_fwd(\n    input_ptr, weight_ptr, bias_ptr, ln_weight_ptr, ln_bias_ptr, pre_act_ptr, out_ptr,\n    N,  # in_features\n    C,  # out_features\n    input_stride,  # input_ptr.stride(0)\n    pre_act_stride,  # pre_act_ptr.stride(0)\n    out_stride,  # out_ptr.stride(0)\n    ln_weight_stride,  # ln_weight_ptr.stride(0)\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_C: tl.constexpr,\n    N_MID: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    # C: out_features, N: in_features\n    # N_MID: mid feature size, reduce over mid\n    # 1. mid feature fusion, reduce over N\n    # 2. layer norm over mid feature\n    # 3. linear layer over mid feature\n    # 4. relu over linear layer\n    # 5. final linear layer over relu\n    # pid: 0 ~ M-1\n    # block_id_n: 0 ~ (N // BLOCK_SIZE_N) - 1\n    # block_id_c: 0 ~ (C // BLOCK_SIZE_C) - 1\n\n    # block_id_n: 0 ~ (N // BLOCK_SIZE_N) - 1\n    block_id_n = tl.program_id(0)\n    # block_id_c: 0 ~ (C // BLOCK_SIZE_C) - 1\n    block_id_c = tl.program_id(1)\n\n    # mid feature fusion\n    # accumulate at mid_feature_ptr\n    # [C // BLOCK_SIZE_C, BLOCK_SIZE_N, BLOCK_SIZE_C] -> [BLOCK_SIZE_N, BLOCK_SIZE_C, C // BLOCK_SIZE_C]\n    mid_feature = tl.zeros([BLOCK_SIZE_N, BLOCK_SIZE_C, C // BLOCK_SIZE_C], dtype=tl.float32)\n\n    # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    input_ptr_mask = (block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[:, None] * input_stride + \\\n        (block_id_c * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C))[None, :]  # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    input = tl.load(input_ptr + input_ptr_mask,\n                    mask=(block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[:, None] <\n                    input_ptr.shape[0] and (block_id_c * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C))[None, :] < input_ptr.shape[1],\n                    other=0.0)\n\n    # [C // BLOCK_SIZE_C, BLOCK_SIZE_N, BLOCK_SIZE_C] -> [BLOCK_SIZE_N, BLOCK_SIZE_C, C // BLOCK_SIZE_C]\n    mid_feature += tl.transpose(input, [1, 0, 2])\n\n    mid_feature = mid_feature.to(tl.float16)\n\n    # linear\n    # [BLOCK_SIZE_N, C]\n    mid_feature = tl.reshape(mid_feature, [BLOCK_SIZE_N, C])\n    linear = tl.dot(mid_feature, weight_ptr)\n\n    if bias_ptr is not None:\n        linear += bias_ptr\n\n    # relu\n    linear = tl.where(linear > 0, linear, 0)\n\n    # save pre act\n    pre_act_idx = pid * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C)\n    pre_act_ptr_mask = pre_act_idx[:, None] * pre_act_stride + \\\n        (block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :]  # [BLOCK_SIZE_C, BLOCK_SIZE_N]\n    tl.store(pre_act_ptr + pre_act_ptr_mask,\n             linear, mask=pre_act_idx[:, None] < pre_act_ptr.shape[0] and (block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :] < pre_act_ptr.shape[1])\n\n    # layer norm\n    # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    linear = tl.reshape(linear, [BLOCK_SIZE_N, BLOCK_SIZE_C])\n    mean = tl.sum(linear, axis=0) / N\n\n    # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    linear = tl.where((block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[:, None] <\n                      linear.shape[0] and (block_id_c * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C))[None, :] < linear.shape[1], linear, 0.0)\n\n    # [BLOCK_SIZE_C]\n    # keepdim?\n    mean = tl.sum(linear, axis=0) / N\n    # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    linear = linear - mean\n    # [BLOCK_SIZE_C]\n    var = tl.sum(linear * linear, axis=0) / N\n    rstd = 1 / tl.sqrt(var + 1e-5)\n\n    linear = linear * rstd\n\n    # affine\n    if ln_weight_ptr is not None and ln_bias_ptr is not None:\n        linear = linear * ln_weight_ptr + ln_bias_ptr\n\n    # [BLOCK_SIZE_N, BLOCK_SIZE_C]\n    linear = tl.reshape(linear, [BLOCK_SIZE_N, BLOCK_SIZE_C])\n    out_idx = pid * BLOCK_SIZE_C + tl.arange(0, BLOCK_SIZE_C)\n    out_ptr_mask = out_idx[:, None] * out_stride + \\\n        (block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :]  # [BLOCK_SIZE_C, BLOCK_SIZE_N]\n    tl.store(out_ptr + out_ptr_mask,\n             linear, mask=out_idx[:, None] < out_ptr.shape[0] and (block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :] < out_ptr.shape[1])\n\n\ndef fused_layer_norm_relu_linear_triton(input, weight, bias=None, ln_weight=None, ln_bias=None, eps=1e-5, elementwise_affine=True):\n    # input: [M, N], weight: [C, N], bias: [C], ln_weight: [C], ln_bias: [C]\n    # output: [M, C]\n    assert input.shape[1] == weight.shape[1], \"in_features must match\"\n    assert input.is_contiguous(), \"input must be contiguous\"\n    assert weight.is_contiguous(), \"weight must be contiguous\"\n    assert bias is None or bias.is_contiguous(), \"bias must be None or contiguous\"\n    assert ln_weight is None or ln_weight.is_contiguous(), \"ln_weight must be None or contiguous\"\n    assert ln_bias is None or ln_bias.is_contiguous(), \"ln_bias must be contiguous\"\n\n    M, N = input.shape\n    C = weight.shape[0]\n\n    BLOCK_SIZE_N = 8\n    BLOCK_SIZE_C = 16\n    # 16, 32, 64, 128, 256\n    # 2, 4, 8, 16, 32\n    # 1/8/16 input\n    # 1/4/8/16 mid_feature\n    # 1/2/4/8/16/32/64/128/256 output\n    # BLOCK_SIZE_N * BLOCK_SIZE_C >= C\n    # N_MID * BLOCK_SIZE_N == N\n    N_MID = N // BLOCK_SIZE_N\n\n    # [M, C]\n    out = torch.empty((M, C), device=input.device, dtype=input.dtype)\n    # [M, N]\n    pre_act = torch.empty((M, N), device=input.device, dtype=input.dtype)\n\n    grid = (triton.cdiv(N, BLOCK_SIZE_N) * triton.cdiv(C, BLOCK_SIZE_C), )\n\n    # [M, N], [C, N], [C], [C], [C], [M, N], [M, C]\n    _fused_layer_norm_relu_linear_fwd[grid](\n        input, weight, bias, ln_weight, ln_bias, pre_act, out,\n        N, C,\n        input.stride(0),\n        pre_act.stride(0),\n        out.stride(0),\n        ln_weight.stride(0) if ln_weight is not None else 0,\n        BLOCK_SIZE_N,\n        BLOCK_SIZE_C,\n        N_MID,\n        num_warps=4,\n        num_stages=2,\n    )\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise addition, element-wise multiplication, and group normalization. It takes two input tensors, adds them element-wise, multiplies the result with the second tensor, and then applies group normalization using learnable parameters for scaling and shifting. The function supports autograd for gradient computation and all operations are differentiable.\nWrapper Entry Information: fused_add_mul_groupnorm(input1, input2, weight, bias, num_groups, eps=1e-5, *, out=None) -> Tensor; input1 (Tensor): The first input tensor X; input2 (Tensor): The second input tensor Y, must be broadcastable to the shape of X; weight (Tensor): Learnable weight parameter \\gamma of shape (C,), where C is the number of channels; bias (Tensor): Learnable bias parameter \\beta of shape (C,); num_groups (int): Number of groups to separate the channels into for group normalization; eps (float, optional): A value added to the denominator for numerical stability in group normalization. Default: `1e-5`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given two input tensors X and Y, and learnable parameters \\gamma and \\beta for group normalization, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X + Y \\\\\nM &= Z \\odot Y \\\\\nO &= \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon)\n\\end{align*}\n\\]\n\nwhere:\n- X and Y are input tensors.\n- \\odot denotes element-wise multiplication.\n- \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon) applies group normalization to M with \\gamma and \\beta as affine parameters, over the specified number of groups, and \\epsilon for numerical stability.\nother: - The shapes of `input1` and `input2` must be broadcastable to each other.\n- The `weight` and `bias` parameters must have shape `(C,)`, where `C` is the number of channels in the input tensors.\n- The `num_groups` parameter must divide the number of channels `C` evenly.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch.autograd.function import Function\n\nclass FusedAddMulGroupNorm(Function):\n    @staticmethod\n    def forward(ctx, x, y, weight, bias, num_groups, eps=1e-5, out=None):\n        x = x.contiguous()\n        y = y.contiguous()\n        weight = weight.contiguous()\n        bias = bias.contiguous()\n\n        if out is None:\n            out = torch.empty_like(x)\n        else:\n            out = out.contiguous()\n\n        x_dtype = x.dtype\n        y_dtype = y.dtype\n        weight_dtype = weight.dtype\n        bias_dtype = bias.dtype\n        out_dtype = out.dtype\n\n        if x_dtype != out_dtype:\n            if x_dtype.is_fp64():\n                out = out.to(tl.float32)\n            else:\n                out = out.to(x_dtype)\n        if y_dtype != out_dtype:\n            if y_dtype.is_fp64():\n                out.to(tl.float32)\n            else:\n                out.to(y_dtype)\n        if weight_dtype != out_dtype:\n            if weight_dtype.is_fp64():\n                weight = weight.to(tl.float32)\n            else:\n                weight = weight.to(out_dtype)\n        if bias_dtype != out_dtype:\n            if bias_dtype.is_fp64():\n                bias = bias.to(tl.float32)\n            else:\n                bias = bias.to(out_dtype)\n\n        if x.dtype == torch.float16:\n            x = x.to(tl.bfloat16)\n            y = y.to(tl.bfloat16)\n\n        if triton.__version__ >= \"2.1.0\":\n            lafgng = _fused_add_mul_group_norm_forward_triton_ if x.is_contiguous() and y.is_contiguous() and out.is_contiguous() and weight.is_contiguous() and bias.is_contiguous() else _fused_add_mul_group_norm_forward_triton\n        else:\n            lafagng = _fused_add_mul_group_norm_forward_triton\n\n        return lafagng(x, y, weight, bias, num_groups, out, eps)\n\ndef fused_add_mul_groupnorm(input1, input2, weight, bias, num_groups, eps=1e-5, *, out=None):\n    return FusedAddMulGroupNorm.apply(input1, input2, weight, bias, num_groups, eps, out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements stochastic gradient descent, optionally with momentum, weight decay, dampening, and Nesterov momentum. It can maximize or minimize an objective function and supports different optimization algorithms for performance.\nWrapper Entry Information: def SGD(params, lr=1e-3, momentum=0, weight_decay=0, dampening=0, nesterov=False, maximize=False, foreach=None, differentiable=False, fused=None)\nMath: \\begin{aligned} &g_t \\leftarrow \\nabla_{\\theta} f_t (\\theta_{t-1}) \\\\\\ &\\text{if} \\: \\lambda \\neq 0 \\\\\\ &g_t \\leftarrow g_t + \\lambda \\theta_{t-1} \\\\\\ &\\text{if} \\: \\mu \\neq 0 \\\\\\ &\\text{if} \\: t > 1 \\\\\\ &\\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t \\\\\\ &\\text{else} \\\\\\ &\\textbf{b}_t \\leftarrow g_t \\\\\\ &\\text{if} \\: \\textit{nesterov} \\\\\\ &g_t \\leftarrow g_{t} + \\mu \\textbf{b}_t \\\\\\ &\\text{else} \\\\\\ &g_t  \\leftarrow  \\textbf{b}_t \\\\\\ &\\text{if} \\: \\textit{maximize} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} + \\gamma g_t \\\\\\ &\\text{else} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t \\end{aligned}\nother: Nesterov momentum is based on a research paper. The algorithm prioritizes different implementations based on performance. It differs from some traditional frameworks in its handling of momentum. The initial momentum buffer is set to the gradient value at the first step.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\nfrom .utils import calculate_settings, get_block_size\n\ndef has_fp64_support(dtype):\n    return dtype in (torch.float16, torch.bfloat16, torch.float32)\n\ndef has_bf16_support(dtype):\n    return dtype in (torch.bfloat16,)\n\ndef cfggen():\n    block_m = [1, 2, 4]\n    block_n = [1024, 2048, 4096]\n    warps = [4, 8, 16]\n    configs = [\n        triton.Config({\"BLOCK_SIZE_M\": m, \"BLOCK_SIZE_N\": n}, num_warps=w)\n        for m in block_m\n        for n in block_n\n        for w in warps\n    ]\n    return configs\n\n@triton.jit\ndef sgd_kernel(\n    params_ptr,\n    state_ptr,\n    grad_ptr,\n    new_params_ptr,\n    curr_step_ptr,\n    lr,\n    momentum,\n    dampening,\n    weight_decay,\n    nesterov,\n    maximize,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    state_ptr += pid * 2\n    params_ptr += pid * BLOCK_SIZE_N\n    new_params_ptr += pid * BLOCK_SIZE_N\n    grad_ptr += pid * BLOCK_SIZE_N\n\n    params = tl.load(params_ptr, mask=pid < BLOCK_SIZE_M, other=0.0).to(tl.float32)\n    state = tl.load(state_ptr, mask=pid < BLOCK_SIZE_M, other=0.0).to(tl.float32)\n    grad = tl.load(grad_ptr, mask=pid < BLOCK_SIZE_M, other=0.0).to(tl.float32)\n\n    if weight_decay != 0:\n        grad += weight_decay * params\n    if momentum != 0:\n        state = state * momentum + grad\n        if nesterov:\n            grad += momentum * state\n    else:\n        state = grad\n    if dampening != 0:\n        state *= 1 - dampening\n    if not maximize:\n        params -= lr * state\n    else:\n        params += lr * state\n    tl.store(new_params_ptr, params, mask=pid < BLOCK_SIZE_M)\n    tl.store(state_ptr, state, mask=pid < BLOCK_SIZE_M)\n\nclass _FusedSGD(torch.autograd.Function):\n    @staticmethod\n    def forward(\n        ctx,\n        params,\n        lr,\n        momentum,\n        dampening,\n        weight_decay,\n        nesterov,\n        maximize,\n        foreach,\n        differentiable,\n        fused,\n    ):\n        if fused is None:\n            fused = has_fp64_support(params.dtype) and torch.is_grad_enabled()\n\n        if fused:\n            orig_params = params\n            if orig_params.requires_grad and not differentiable:\n                orig_params = orig_params.detach()\n            new_params = torch.empty_like(orig_params)\n            curr_step = torch.zeros(1, dtype=torch.int32, device=orig_params.device)\n            N, block_size = calculate_settings(\n                numels=orig_params.numel(), block_size=get_block_size(orig_params)\n            )\n            sgd_kernel[N,](\n                orig_params,\n                torch.zeros(N, 2, dtype=torch.float32, device=orig_params.device),\n                torch.zeros(N, block_size, dtype=torch.float32, device=orig_params.device),\n                new_params,\n                curr_step,\n                lr,\n                momentum,\n                dampening,\n                weight_decay,\n                nesterov,\n                maximize,\n            )\n            return new_params\n        else:\n            clone_params = params.detach().clone()\n            orig_params = params\n            if orig_params.requires_grad and not differentiable:\n                orig_params = orig_params.detach()\n            grad = torch.zeros_like(orig_params)\n            for param, new_param in zip(orig_params, clone_params):\n                grad[0] = 0.0\n                def closure():\n                    nonlocal grad\n                    grad += param.grad\n                    param.grad = None\n                    return param\n                SGD(\n                    params=[param],\n                    lr=lr,\n                    momentum=momentum,\n                    dampening=dampening,\n                    weight_decay=weight_decay,\n                    nesterov=nesterov,\n                    maximize=maximize,\n                    foreach=fused,\n                    differentiable=differentiable,\n                )(closure())\n                new_param.copy_(grad[0])\n            return clone_params\n\ndef SGD(params, lr=1e-3, momentum=0, weight_decay=0, dampening=0, nesterov=False, maximize=False, foreach=None, differentiable=False, fused=None):\n    return _FusedSGD.apply(params, lr, momentum, dampening, weight_decay, nesterov, maximize, foreach, differentiable, fused)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by batch normalization and then applies the ReLU activation function element-wise to the normalized result. This combined operation is useful for applying feature extraction, normalization, and non-linearity in one step, commonly used in convolutional neural networks (CNNs).\nWrapper Entry Information: def relu_batch_norm_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, running_mean=None, running_var=None, bn_weight=None, bn_bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False) -> Tensor\n\nArgs:\n    input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW).\n    weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW).\n    bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None.\n    stride (int or tuple, optional): The stride of the convolution kernel. Default: 1.\n    padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1.\n    running_mean (Tensor, optional): The running mean for batch normalization. Default: None.\n    running_var (Tensor, optional): The running variance for batch normalization. Default: None.\n    bn_weight (Tensor, optional): Learnable scaling factor for batch normalization (gamma). Default: None.\n    bn_bias (Tensor, optional): Learnable shift factor for batch normalization (beta). Default: None.\n    training (bool, optional): If True, updates running statistics for batch normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance in batch normalization. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability in batch normalization. Default: 1e-5.\n    inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: out = ReLU(BatchNorm(conv2d(input)))\nReLU(x) = max(0, x)\ny = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta\nother: The function combines convolution, batch normalization, and ReLU activation in a single step, which is a common pattern in CNNs for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_batch_norm_conv2d_triton(x,\n                                  weight,\n                                  bias,\n                                  stride,\n                                  padding,\n                                  dilation,\n                                  groups,\n                                  running_mean,\n                                  running_var,\n                                  bn_weight,\n                                  bn_bias,\n                                  is_train,\n                                  momentum,\n                                  eps,\n                                  save_stats,\n                                  x_mean,\n                                  x_var,\n                                  out,\n                                  stride_x_c,\n                                  stride_x_h,\n                                  stride_x_w,\n                                  stride_w_c,\n                                  stride_w_kh,\n                                  stride_w_kw,\n                                  stride_b,\n                                  stride_out_c,\n                                  stride_out_h,\n                                  stride_out_w,\n                                  C,\n                                  H,\n                                  W,\n                                  K,\n                                  KH,\n                                  KW,\n                                  PAD_H,\n                                  PAD_W,\n                                  c1,\n                                  c2,\n                                  c3,\n                                  c4,\n                                  c5,\n                                  c6,\n                                  c7,\n                                  c8,\n                                  c9,\n                                  c10,\n                                  BLOCK_SIZE_C: tl.constexpr,\n                                  BLOCK_SIZE_H: tl.constexpr,\n                                  BLOCK_SIZE_W: tl.constexpr):\n    # Positional indices\n    c, h, w, b = tl.program_id(0), tl.program_id(1), tl.program_id(2), tl.program_id(3)\n    # The range of indices for each dimension is computed so we can index into the input matrix\n    # using a single offset\n    h_start = h * BLOCK_SIZE_H + tl.arange(0, BLOCK_SIZE_H)\n    w_start = w * BLOCK_SIZE_W + tl.arange(0, BLOCK_SIZE_W)\n    c_tile_start = c * BLOCK_SIZE_C\n    c_start = c_tile_start + tl.arange(0, BLOCK_SIZE_C)\n    c_end = tl.minimum(c_start + BLOCK_SIZE_C, C) - 1\n    h_in = h_start[:, None] + tl.arange(0, KH)[None, :]\n    w_in = w_start[:, None] + tl.arange(0, KW)[None, :]\n    c_in = c_start[None, :]\n    c_k = c_tile_start + tl.arange(0, c10)\n    # Load input and weights with proper padding\n    x = tl.load(x + c_in * stride_x_c + h_in * stride_x_h + w_in * stride_x_w,\n                mask=(c_start < C) & (h_in < PAD_H) & (w_in < PAD_W), other=0.0)\n    w = tl.load(weight + c_k[None, :] * stride_w_c + (KW - 1 - tl.arange(0, c9))[\n        None, :] * stride_w_kw + (KH - 1 - tl.arange(0, c8))[:, None] * stride_w_kh,\n                mask=(c_k < C) & (tl.arange(0, c9) < KW) & (tl.arange(0, c8) < KH), other=0.0)\n    # Apply convolution\n    c_out = c * c7 + tl.arange(0, c6)\n    out = tl.sum(x * w, 1)[:, None] + c5\n    # Apply batch normalization\n    x_mean = tl.sum(x, 1)[:, None] / (C * KH * KW)\n    if is_train:\n        x_var = tl.sum((x - x_mean) * (x - x_mean), 1)[:, None] / (C * KH * KW)\n    else:\n        x_var = tl.load(x_var + c_out * stride_out_c + h * stride_out_h +\n                        w * stride_out_w, mask=(c_out < c4) & (h < c3) & (w < c2), other=0.0)\n    x_hat = (x - x_mean) / tl.sqrt(x_var + eps)\n    if save_stats:\n        tl.store(running_mean + c_out * stride_out_c + h * stride_out_h +\n                 w * stride_out_w, x_mean, mask=(c_out < c4) & (h < c3) & (w < c2))\n        tl.store(running_var + c_out * stride_out_c + h * stride_out_h +\n                 w * stride_out_w, x_var, mask=(c_out < c4) & (h < c3) & (w < c2))\n    # Apply affine transformation\n    if (bn_weight is not None) | (bn_bias is not None):\n        gamma = tl.load(bn_weight + c_out,\n                        mask=(c_out < c4), other=1.0).to(tl.float32)\n        beta = tl.load(bn_bias + c_out, mask=(c_out < c4), other=0.0).to(tl.float32)\n        out = x_hat * gamma + beta\n    # Store output\n    tl.store(out + c_out * stride_out_c + h * stride_out_h + w * stride_out_w,\n             out, mask=(c_out < c4) & (h < c3) & (w < c2))\n\n\ndef relu_batch_norm_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, running_mean=None, running_var=None, bn_weight=None, bn_bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False) -> Tensor:\n    if inplace:\n        raise Exception(\"Inplace is not supported\")\n\n    has_bias = 1 if (bias is not None) else 0\n    has_bn_weight = 1 if (bn_weight is not None) else 0\n    has_bn_bias = 1 if (bn_bias is not None) else 0\n\n    f = torch.empty_like(input, dtype=torch.float32)\n    mean = torch.empty(input.shape[0], input.shape[2], input.shape[3],\n                       dtype=torch.float32, device=input.device) if running_mean is None else running_mean\n    var = torch.empty(input.shape[0], input.shape[2], input.shape[3],\n                      dtype=torch.float32, device=input.device) if running_var is None else running_var\n\n    # reshape input data into 2D tensor\n    x_2d = as2d(input, groups)\n    c, m, n = x_2d.shape\n    # shape for final output\n    out_shape = list(input.shape)\n    # run kernel\n    _relu_batch_norm_conv2d_triton[(m, n, c, 1)](\n        x_2d,\n        weight,\n        bias,\n        stride,\n        padding,\n        dilation,\n        groups,\n        mean,\n        var,\n        bn_weight,\n        bn_bias,\n        training,\n        momentum,\n        eps,\n        save_stats=has_bn_weight | has_bn_bias,\n        x_mean=f,\n        x_var=f,\n        out=as2d(f, 1),\n        stride_x_c=x_2d.stride(0),\n        stride_x_h=x_2d.stride(1),\n        stride_x_w=x_2d.stride(2),\n        stride_w_c=weight.stride(0),\n        stride_w_kh=weight.stride(1),\n        stride_w_kw=weight.stride(2),\n        stride_b=bias.stride(0) if has_bias else 0,\n        stride_out_c=x_2d.stride(0),\n        stride_out_h=x_2d.stride(1),\n        stride_out_w=x_2d.stride(2),\n        C=c, H=m, W=n, K=weight.shape[0], KH=weight.shape[1], KW=weight.shape[2],\n        PAD_H=((stride - 1) * m + dilation * (KH - 1) - stride + 1),\n        PAD_W=((stride - 1) * n + dilation * (KW - 1) - stride + 1),\n        c1=triton.next_power_of_2(KW),\n        c2=triton.next_power_of_2(KH),\n        c3=triton.next_power_of_2(n),\n        c4=triton.next_power_of_2(m),\n        c5=torch.tensor(0.0, device=input.device),\n        c6=triton.next_power_of_2(c),\n        c7=triton.cdiv(c, triton.next_power_of_2(8)),\n        c8=triton.next_power_of_2(KW),\n        c9=triton.next_power_of_2(KH),\n        c10=triton.next_power_of_2(groups),\n        GROUP_SIZE=1,\n        BLOCK_SIZE_C=triton.next_power_of_2(c),\n        BLOCK_SIZE_H=triton.next_power_of_2(m),\n        BLOCK_SIZE_W=triton.next_power_of_2(n),\n        num_warps=4,\n        num_stages=1,\n    )\n    return f.reshape(out_shape)\n\n\ndef _jit_wrapper_relu_batch_norm_conv2d(x, w, b, stride, padding, dilation, groups, running_mean, running_var, bn_weight, bn_bias, training, momentum, eps, inplace):\n    return relu_batch_norm_conv2d(x, w, b, stride, padding, dilation, groups, running_mean, running_var, bn_weight, bn_bias, training, momentum, eps, inplace)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image composed of several input planes. Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN for performance. Supports complex data types.\nWrapper Entry Information: conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor Args: input: input tensor of shape (minibatch , in_channels , iH , iW) weight: filters of shape (out_channels , in_channels/groups , kH , kW) bias: optional bias tensor of shape (out_channels). Default: None stride: the stride of the convolving kernel. Can be a single number or a tuple (sH, sW). Default: 1 padding: implicit paddings on both sides of the input. Can be a string {'valid', 'same'}, single number or a tuple (padH, padW). Default: 0 dilation: the spacing between kernel elements. Can be a single number or a tuple (dH, dW). Default: 1 groups: split input into groups, both in_channels and out_channels should be divisible by the number of groups. Default: 1\nother: Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN. Supports complex data types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.autotune(\n    configs=[\n        triton.Config({\"num_warps\": 1}),\n        triton.Config({\"num_warps\": 2}),\n        triton.Config({\"num_warps\": 4}),\n        triton.Config({\"num_warps\": 8}),\n        triton.Config({\"num_warps\": 16}),\n        triton.Config({\"num_warps\": 32}),\n    ],\n    key=[\"group_size\"],\n)\n@triton.jit\ndef _conv2d_st_fwd_kernel(\n    input, weight, bias, output, stride, padding, dilation, group_size, N, C, H, W, kH, kW, _stride_n, _stride_c, _stride_h, _stride_w, _r_stride_n, _r_stride_c, _r_stride_h, _r_stride_w, NO_GROUPS: tl.constexpr, GROUP_SIZE: tl.constexpr, TILES_PER_GROUP: tl.constexpr, EVEN_K: tl.constexpr, BIAS: tl.constexpr, COMPLEX: tl.constexpr, BLOCK_N: tl.constexpr, BLOCK_HW: tl.constexpr\n):\n    # Kernel logic here...\n\ndef conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1):\n    if groups != 1:\n        raise NotImplementedError(\"Only groups == 1 is supported\")\n    if padding != 0:\n        raise NotImplementedError(\"Only padding == 0 is supported\")\n    if dilation != 1:\n        raise NotImplementedError(\"Only dilation == 1 is supported\")\n\n    N, C, H, W = input.shape\n    out_channels, _, kH, kW = weight.shape\n    stride_n, stride_c, stride_h, stride_w = input.stride()\n    r_stride_n, r_stride_c, r_stride_h, r_stride_w = (\n        weight.stride(0),\n        weight.stride(1),\n        weight.stride(2),\n        weight.stride(3),\n    )\n\n    if bias is not None:\n        bias = bias\n    else:\n        bias = torch.zeros((out_channels), device=input.device, dtype=input.dtype)\n\n    if input.dtype == torch.complex64:\n        input = input.float()\n    if weight.dtype == torch.complex64:\n        weight = weight.float()\n\n    output = torch.empty((N, out_channels, H, W), device=input.device, dtype=input.dtype)\n    grid = lambda META: (\n        triton.cdiv(N, META[\"BLOCK_N\"]),\n        1,\n        triton.cdiv(out_channels, META[\"GROUP_SIZE\"]),\n    )\n    _conv2d_st_fwd_kernel[grid](\n        input,\n        weight,\n        bias,\n        output,\n        stride,\n        padding,\n        dilation,\n        groups,\n        N,\n        C,\n        H,\n        W,\n        kH,\n        kW,\n        stride_n,\n        stride_c,\n        stride_h,\n        stride_w,\n        r_stride_n,\n        r_stride_c,\n        r_stride_h,\n        r_stride_w,\n        groups == 1,\n        GROUP_SIZE=groups,\n        TILES_PER_GROUP=4,\n        BIAS=bias is not None,\n        BLOCK_N=64,\n        BLOCK_HW=16,\n        NUM_SM=128,\n        COMPLEX=input.dtype == torch.complex64 or weight.dtype == torch.complex64,\n    )\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between two normalized input tensors `x1` and `x2`. This function normalizes `x1` and `x2` along a specified dimension using L_p normalization, and subsequently calculates the cosine similarity between these normalized tensors along the specified dimension. This involves ensuring vectors are scaled to avoid division by zero by introducing small epsilon values both during normalization and similarity computation.\nWrapper Entry Information: def normalized_cosine_similarity(x1: Tensor, x2: Tensor, dim: int = 1, eps_similarity: float = 1e-8, p_norm: float = 2, eps_norm: float = 1e-12) -> Tensor\nMath: The operation is defined as:\n\nsimilarity = \\frac{\\text{normalize}(x1) \\cdot \\text{normalize}(x2)}{\\max(\\lVert \\text{normalize}(x1) \\Vert _2, \\epsilon) \\cdot \\max(\\lVert \\text{normalize}(x2) \\Vert _2, \\epsilon)}\n\nwhere the `normalize` function is defined as:\n\nv = \\frac{v}{\\max(\\lVert v \\rVert_p, \\epsilon)}.\nother: The function allows broadcasting x2 to match x1's shape. Default values are provided for dimension, normalization, and similarity thresholds to enhance robustness against division by zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _triton_normalized_cosine_similarity(x1, x2, dim, eps_similarity, p_norm, eps_norm):\n    # Normalize x1 and x2 along the specified dimension\n    x1_norm = tl.normalize(x1, dim=dim, p=p_norm, eps=eps_norm)\n    x2_norm = tl.normalize(x2, dim=dim, p=p_norm, eps=eps_norm)\n\n    # Calculate cosine similarity\n    similarity = x1_norm * x2_norm\n    similarity = tl.sum(similarity, axis=dim)\n\n    # Ensure similarity is non-negative\n    similarity = tl.where(similarity < 0, 0, similarity)\n\n    # Apply a small epsilon to avoid division by zero\n    similarity = tl.where(similarity < eps_similarity, eps_similarity, similarity)\n\n    return similarity\n\ndef normalized_cosine_similarity(x1: Tensor, x2: Tensor, dim: int = 1, eps_similarity: float = 1e-8, p_norm: float = 2, eps_norm: float = 1e-12) -> Tensor:\n    # Ensure x2 can be broadcasted to x1's shape\n    assert x2.shape == x1.broadcast_to(x2.shape).shape\n\n    # Call the Triton kernel for cosine similarity calculation\n    return _triton_normalized_cosine_similarity(x1, x2, dim, eps_similarity, p_norm, eps_norm)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using the Cholesky decomposition. It first performs Cholesky decomposition on a symmetric positive-definite matrix `A` to obtain a lower triangular matrix `L` such that `A = L * L.T`, then solves for `x` in `Ax = b` using the Cholesky factorization.\nWrapper Entry Information: def fused_cholesky_solve(A: Tensor, b: Tensor) -> Tensor: A: The symmetric positive-definite matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n, k)`.\nMath: Cholesky decomposition: A = L * L.T, Solve: Ax = b\nother: The function assumes that the input matrix `A` is symmetric positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _fused_cholesky_solve_kernel(A, b, n, k, stride_am, stride_ak, stride_bk, stride_bn):\n    row, col = tl.program_id(0), tl.program_id(1)\n    if row < n:\n        # Compute L * y = b\n        sum_ = 0.0\n        for m in range(0, col):\n            l = tl.load(A + row * stride_am + m * stride_ak)\n            y = tl.load(b + m * stride_bk + col * stride_bn)\n            sum_ += l * y\n        y = tl.load(b + col * stride_bk + row * stride_bn)\n        y -= sum_\n        y /= tl.load(A + row * stride_am + row * stride_ak)\n        tl.store(b + col * stride_bk + row * stride_bn, y)\n\n        # Compute L.T * x = y\n        for m in range(col + 1, n):\n            l = tl.load(A + m * stride_am + row * stride_ak)\n            y = tl.load(b + col * stride_bk + m * stride_bn)\n            y -= l * tl.load(b + col * stride_bk + row * stride_bn)\n            tl.store(b + col * stride_bk + m * stride_bn, y)\n        x = tl.load(b + col * stride_bk + row * stride_bn)\n        for m in range(row + 1, n):\n            x -= tl.load(A + m * stride_am + row * stride_ak) * tl.load(b + col * stride_bk + m * stride_bn)\n        x /= tl.load(A + row * stride_am + row * stride_ak)\n        tl.store(b + col * stride_bk + row * stride_bn, x)\n    return\n\ndef fused_cholesky_solve(A: Tensor, b: Tensor) -> Tensor:\n    n, k = b.shape\n    assert A.shape[0] == A.shape[1] == n, \"Matrix A must be square\"\n    assert A.stride(0) == 1 or A.stride(1) == 1, \"Matrix A must be contiguous in memory\"\n    assert b.stride(0) == 1 or b.stride(1) == 1, \"Matrix b must be contiguous in memory\"\n    A = A.contiguous()\n    b = b.contiguous()\n    _fused_cholesky_solve_kernel[(n, n)](A, b, n, k, A.stride(0), A.stride(1), b.stride(0), b.stride(1))\n    return b\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Matrix product of two tensors. The behavior depends on the dimensionality of the tensors: 1D tensors return a dot product; 2D tensors return a matrix-matrix product; 1D and 2D tensors return a matrix-vector product; N-dimensional tensors (N > 2) return a batched matrix multiply with broadcasting support. Sparse layouts are supported for 2D matrix-matrix products. TensorFloat32 is supported. On certain ROCm devices, float16 inputs use different precision for backward. The 1D dot product version does not support an out parameter.\nWrapper Entry Information: matmul(input, other, *, out=None) -> Tensor\nArguments:\n    input (Tensor): the first tensor to be multiplied\n    other (Tensor): the second tensor to be multiplied\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. If you notice missing functionality please open a feature request.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import logging\nimport functools\nimport torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\nfrom flag_gems.utils import layout_helpers\nfrom flag_gems.ops.triton.kernels import gemm\n\n\ndef has_typed_mem_fn(layout):\n    return layout in (torch.strided, torch.sparse_csr, torch.sparse_bsr)\n\n\ndef is_eligible(shape, dtype, layout, device, pin_memory):\n    return (shape and len(shape) > 2) or has_typed_mem_fn(layout) or device.type == \"rocm\" or dtype == torch.float16\n\n\n@triton.jit\ndef matmul_fallback_kernel(\n    a_ptr, b_ptr, c_ptr, n_ptr, k_ptr, lda, ldb, ldc, N, K, M, grid_offset, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr, GROUP_SIZE_M: tl.constexpr\n):\n    pid = tl.program_id(0) + grid_offset\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + ((pid % num_pid_in_group) % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    offs_m = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_n = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = a_ptr + (offs_m[:, None] * lda + offs_k[None, :])\n    b_ptrs = b_ptr + (offs_k[:, None] * ldb + offs_n[None, :])\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K\n        b_ptrs += BLOCK_SIZE_K * ldb\n    c = accumulator.to(tl.float16)\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    n = tl.load(n_ptr)\n    k = tl.load(k_ptr)\n    mask = (offs_m < M)[:, None] & (offs_n < N)[None, :]\n    c_ptrs = c_ptr + ldc * offs_m[:, None] + offs_n[None, :]\n    tl.store(c_ptrs, c, mask=mask)\n\n\ndef matmul_fallback(\n    a,\n    b,\n    n=None,\n    k=None,\n    *,\n    out=None,\n    allow_tf32=True,\n    out_dtype=None,\n    out_layout=None,\n    out_device=None,\n    out_pin_memory=None,\n):\n    logging.debug(\"GEMS MATMUL\")\n    device = a.device\n    if not all((x.is_contiguous() for x in (a, b))):\n        a, b = a.contiguous(), b.contiguous()\n    if a.device.type == \"cuda\" and b.device.type == \"cuda\":\n        if a.layout == torch.sparse_csr and b.layout == torch.sparse_csr:\n            return torch.sparse.mm(a, b.to(torch.sparse_csr))\n        elif a.layout == torch.sparse_csr:\n            return torch.sparse.mm(a, b)\n        elif b.layout == torch.sparse_csr:\n            return torch.sparse.mm(b, a).T\n    if not is_eligible(a.shape, a.dtype, a.layout, device, a.pin_memory) or not is_eligible(\n        b.shape, b.dtype, b.layout, device, b.pin_memory\n    ):\n        logging.debug(\"GEMS MATMUL FALLBACK\")\n        if a.layout == torch.sparse_csr and b.layout == torch.sparse_bsr:\n            if a._nnz() == 0 or b._nnz() == 0:\n                return torch.zeros(a.size(0), b.size(1), device=a.device, dtype=a.dtype)\n            if a.size(-1) != b.size(-2):\n                raise ValueError(\"Size mismatch CSRCOO @ BSRCOO\")\n            if a._sparse_dim() != 2 or b._sparse_dim() != 2:\n                raise RuntimeError(\"Only 2D sparse matmuls are supported currently\")\n            if a.size(0) != b.size(0):\n                raise ValueError(\"Shape mismatch on batch dimensions CSRCOO @ BSRCOO\")\n\n            _n = b.size(-1)\n            _k = a.size(-1)\n\n            b = b.coalesce()\n            a_indices = a._indices()\n            a_values = a._values()\n            b_indices = b._indices()\n            b_values = b._values()\n\n            _batch_indices = a_indices[:-2]\n            _matmul_indices = a_indices[-2:]\n            _n_repeat_indices = list(\n                itertools.chain.from_iterable(\n                    itertools.repeat(i, b.size(0) // a.size(0)) for i in range(a.size(0))\n                )\n            )\n            _n_repeat_indices = torch.tensor(_n_repeat_indices, dtype=torch.int32, device=a.device)\n            _n_indices = torch.arange(b.size(-1), device=a.device, dtype=torch.int32)\n            mask = _n_indices != _n_repeat_indices[:, None]\n            _n_indices = _n_indices[None, :] + (_n_repeat_indices[:, None] + 1) * b.size(-1)\n            n_repeat = torch.sum(mask.to(torch.int32), axis=0)\n            n = torch.full((1, 1), n_repeat, dtype=torch.int32, device=a.device)\n\n            _k_repeat_indices = list(\n                itertools.chain.from_iterable(\n                    itertools.repeat(i, b.size(0) // a.size(0)) for i in range(a.size(0))\n                )\n            )\n            _k_repeat_indices = torch.tensor(_k_repeat_indices, dtype=torch.int32, device=a.device)\n            k_repeat = torch.abs(_k - _k_repeat_indices)\n            k = torch.min(k_repeat, axis=0)[0]\n\n            output = torch.empty(a_indices.size(0) - 2, n, device=a.device, dtype=a.dtype)\n            output._indices_(a_indices)\n            output._values_(torch.zeros_like(a_values))\n            matmul_fn = functools.partial(\n                matmul_fallback_kernel,\n                n_ptr=n,\n                k_ptr=k,\n                lda=a.stride(-2),\n                ldb=b.stride(-2),\n                ldc=output.stride(-2),\n                M=a.size(-2),\n                N=b.size(-1),\n                K=a.size(-1),\n            )\n            grid = lambda META: (triton.cdiv(a.size(-2), META[\"BLOCK_SIZE_M\"]) * triton.cdiv(b.size(-1), META[\"BLOCK_SIZE_N\"]),)\n            matmul_fn[grid]()\n            return output.to_sparse_csr()\n        else:\n            return torch.matmul(a, b)\n    else:\n        return matmul_triton(a, b, out, allow_tf32, out_dtype, out_layout, out_device, out_pin_memory)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining torch.gather and torch.Tensor.masked_fill. It first gathers values from the input tensor along a specified dimension using provided indices, and then replaces the gathered elements with a specified value where the mask is True.\nWrapper Entry Information: fused_gather_masked_fill(input, dim, index, mask, value, *, sparse_grad=False, out=None) -> Tensor; input (Tensor): The input tensor X.; dim (int): The dimension along which to index.; index (LongTensor): The indices of elements to gather, of the same dimensionality as `input`.; mask (BoolTensor): A boolean mask tensor, broadcastable to the shape of the output tensor Y.; value (float): The value to fill in where `mask` is True.; sparse_grad (bool, optional): If True, gradient w.r.t. `input` will be a sparse tensor. Default: `False`.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Y = \\text{gather}(X, \\text{dim}, I)\nY[M] = \\text{value}\nother: - The input and index tensors must have the same number of dimensions.\n- The size of index at each dimension d must not exceed the size of input at that dimension, except at dimension dim.\n- The mask tensor must be broadcastable to the shape of the gathered output.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch.distributed._tensor.experimental import local_map\n\n@triton.jit\ndef _fused_gather_masked_fill_kernel(\n    input, index, mask, value, dim, out, I, M, N, input_strides, index_strides, mask_strides, out_strides, IS_SCALAR\n):\n    pid = tl.program_id(0)\n    # Compute offsets for the batch dimensions\n    batch_offsets = pid * N\n    # Compute offsets for the index dimension\n    idx_stride = tl.load(index_strides + dim)\n    idx_offsets = tl.arange(0, M) * idx_stride\n    index_offsets = batch_offsets + idx_offsets\n    # Load index values\n    idx = tl.load(index + index_offsets)\n    cond = tl.logical_and(idx < N, idx >= 0)\n    idx = tl.where(cond, idx, 0)\n    # Compute offsets for the remaining dimensions\n    n = N\n    for i in range(1, I):\n        dim = dim % (tl.num_programs(0) // N)\n        pid = tl.program_id(i)\n        stride = tl.load(input_strides + dim)\n        dim_offsets = pid * stride\n        dim_sizes = tl.load(input_strides + dim + 1)\n        dim_size = tl.minimum(n, dim_sizes)\n        n = n // dim_size\n        dim_idx = tl.arange(0, dim_size)\n        offsets = dim_idx + dim_offsets\n        mask = offsets < dim_sizes * dim_size\n        cur_idx = tl.load(index + index_offsets + offsets, mask=mask)\n        idx = idx * dim_size + cur_idx\n    idx = idx + batch_offsets\n    # Load input and apply mask\n    cur_input = tl.load(input + idx, mask=cond)\n    cur_mask = tl.load(mask + batch_offsets + tl.arange(0, M), mask=cond)\n    cur_value = tl.full([M], value, tl.int64)\n    if IS_SCALAR:\n        cur_value = cur_value + 0 * cur_input\n    cur_out = tl.where(cur_mask, cur_value, cur_input)\n    # Store result\n    tl.store(out + idx, cur_out, mask=cond)\n\ndef fused_gather_masked_fill(\n    input, dim, index, mask, value, *, sparse_grad=False, out=None\n):\n    I, M, N = input.ndim, index.shape[-1], input.shape[dim]\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape\n    input_strides = list(input.stride())\n    index_strides = list(index.stride())\n    mask_strides = list(mask.stride())\n    out_strides = list(out.stride())\n    # Broadcast mask to output shape\n    for i in range(I - len(mask_strides)):\n        mask_strides.append(1)\n    mask = mask.reshape(mask_strides)\n    # Determine if value is a scalar\n    IS_SCALAR = isinstance(value, (float, int))\n    if IS_SCALAR:\n        value = torch.tensor(value, device=input.device, dtype=torch.int64)\n    # Launch Triton kernel\n    grid = (\n        triton.cdiv(input.numel() // N, N),\n        *input.shape[:-1],\n    )\n    kwargs = [\n        input,\n        index,\n        mask,\n        value,\n        dim,\n        out,\n        I,\n        M,\n        N,\n        input_strides,\n        index_strides,\n        mask_strides,\n        out_strides,\n        IS_SCALAR,\n    ]\n    _fused_gather_masked_fill_kernel[grid](*kwargs)\n    if sparse_grad:\n        out = local_map(out, requires_grad=True)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the cross entropy loss with log softmax applied to the input logits. It combines log softmax activation and cross entropy loss calculation in a numerically stable way. The log softmax is applied to the input logits, and the cross entropy loss is computed between the normalized logits and the target. The function allows customization with options such as which dimension to apply the log softmax, manual rescaling weights for each class, handling of ignored targets, reduction method for loss aggregation, and label smoothing to modify the target distribution.\nWrapper Entry Information: def fused_cross_entropy_log_softmax(input: torch.Tensor, target: torch.Tensor, dim: int = 1, weight: torch.Tensor = None, ignore_index: int = -100, reduction: str = 'mean', label_smoothing: float = 0.0) -> torch.Tensor\nArgs:\n    input (Tensor): Input tensor of logits, where softmax will be computed along `dim`.\n    target (Tensor): Ground truth class indices or probabilities.\n    dim (int, optional): Dimension along which to compute log softmax. Default is 1.\n    weight (Tensor, optional): Manual rescaling weight for each class.\n    ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100.\n    reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\n    label_smoothing (float, optional): Specifies the amount of smoothing to be applied, where 0.0 means no smoothing. Default: 0.0.\nMath: log_softmax(x_i) = log(exp(x_i) / sum(exp(x)))\nCE(y, p) = -sum(y * log(p))\nother: The function integrates the log softmax and cross entropy loss computation into a single operation for numerical stability. The input and target tensors must be of compatible shapes, where the input is expected to have logits of size (N, C) and target should have size (N,) for class indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_cross_entropy_log_softmax_kernel(\n    input_ptr, target_ptr, weight_ptr, output_ptr, n, c, ignore_index, label_smoothing,\n    reduction: tl.constexpr, dim: tl.constexpr, ignore_index_set: tl.constexpr, \n    label_smoothing_set: tl.constexpr, BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n\n\n    # Load\n    target = tl.load(target_ptr + offsets, mask=mask, other=0)\n    target_mask = mask & (target != ignore_index)\n\n    input = tl.load(input_ptr + offsets * c, mask=mask)\n\n    if dim != -1:\n        dim = dim % c\n        input = tl.trans(input, perm=[dim, (dim + 1) % 2])\n    input = input.to(tl.float32)\n\n    if label_smoothing_set:\n        label_smoothing = label_smoothing.to(tl.float32)\n        smooth = tl.full([BLOCK_SIZE], 1 - label_smoothing, dtype=tl.float32)\n        smooth = smooth * label_smoothing / (c - 1)\n    else:\n        smooth = None\n\n    # Fused log softmax and cross entropy\n    loss, input = tl.log_softmax_and_cross_entropy(\n        input, target, weight_ptr, ignore_index, label_smoothing, smooth\n    )\n\n    if ignore_index_set:\n        loss = tl.where(target_mask, loss, 0)\n\n    if reduction == \"sum\":\n        loss = tl.sum(loss)\n    elif reduction == \"mean\":\n        if ignore_index_set:\n            loss = tl.sum(loss) / tl.sum(target_mask.to(tl.float32))\n        else:\n            loss = tl.sum(loss) / n\n\n    # Store\n    tl.store(output_ptr + offsets, loss, mask=mask)\n\n\ndef fused_cross_entropy_log_softmax(\n    input: torch.Tensor,\n    target: torch.Tensor,\n    dim: int = 1,\n    weight: torch.Tensor = None,\n    ignore_index: int = -100,\n    reduction: str = \"mean\",\n    label_smoothing: float = 0.0,\n) -> torch.Tensor:\n    assert input.ndim >= 2, \"Input tensor must have at least 2 dimensions\"\n    assert (\n        target.ndim == input.ndim - 1\n    ), \"Target tensor must have the same number of dimensions as input, except for the last dimension\"\n    assert 0 <= dim < input.ndim, \"Invalid dimension\"\n    assert 0.0 <= label_smoothing < 1.0, \"Label smoothing must be between 0 and 1\"\n\n    n = target.numel()\n    c = input.shape[dim]\n    assert (\n        c == target.max() + 1\n    ), \"The class index of target must be in range [0, num_classes-1]\"\n\n    ignore_index_set = ignore_index != -100\n    label_smoothing_set = label_smoothing > 0.0\n\n    if weight is not None:\n        assert weight.ndim == 1, \"Weight must be a 1-dimensional tensor\"\n        assert weight.numel() == c, \"Weight must have the same number of elements as the number of classes\"\n    else:\n        weight = torch.ones((c,), dtype=torch.float32, device=input.device)\n\n    if n <= 1024:\n        BLOCK_SIZE = n\n    else:\n        BLOCK_SIZE = 1024\n\n    loss = torch.empty((BLOCK_SIZE,), dtype=torch.float32, device=input.device)\n\n    # Wrapper for triton kernel\n    def grid(meta):\n        return (triton.cdiv(n, meta[\"BLOCK_SIZE\"]),)\n\n    fused_cross_entropy_log_softmax_kernel[grid](\n        input, target, weight, loss, n, c, ignore_index, label_smoothing, reduction, dim, ignore_index_set, label_smoothing_set, BLOCK_SIZE\n    )\n\n    return loss.sum()\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the matrices mat1 and mat2. The matrix input is added to the final result. If mat1 is a (n x m) tensor, mat2 is a (m x p) tensor, then input must be broadcastable with a (n x p) tensor and out will be a (n x p) tensor. Alpha and beta are scaling factors on matrix-vector product between mat1 and mat2 and the added matrix input respectively. If beta is 0, then input will be ignored, and nan and inf in it will not be propagated. This operation supports sparse layouts. If input is sparse the result will have the same layout and if out is provided it must have the same layout as input. Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nWrapper Entry Information: addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor; input (Tensor): matrix to be added; mat1 (Tensor): the first matrix to be matrix multiplied; mat2 (Tensor): the second matrix to be matrix multiplied; beta (Number, optional): multiplier for input (β); alpha (Number, optional): multiplier for mat1 @ mat2 (α); out (Tensor, optional): the output tensor.\nMath: out = β * input + α * (mat1 @ mat2)\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch._inductor.triton_heuristics import grid\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef triton_addmm_kernel(\n    input, mat1, mat2, out, beta, alpha, n, m, grid_m, grid_n, TILE_M: tl.constexpr, TILE_N: tl.constexpr, TILE_K: tl.constexpr\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n    rm = pid_m * TILE_M + tl.arange(0, TILE_M)[:, None]\n    rn = pid_n * TILE_N + tl.arange(0, TILE_N)[None, :]\n    rk = tl.arange(0, TILE_K)\n    input_ptrs = input + rm * n + rn\n    mat1_ptrs = mat1 + rm * m + rk[None, :]\n    mat2_ptrs = mat2 + rk[:, None] + rn\n    acc = tl.zeros((TILE_M, TILE_N), dtype=tl.float32)\n    for k in range(0, tl.cdiv(m, TILE_K)):\n        input_vals = tl.load(input_ptrs, mask=(rm < n) & (rn < n), other=0.0)\n        mat1_vals = tl.load(mat1_ptrs, mask=(rm < n) & (rk < m), other=0.0).to(tl.float32)\n        mat2_vals = tl.load(mat2_ptrs, mask=(rk < m) & (rn < n), other=0.0).to(tl.float32)\n        acc += tl.dot(mat1_vals, mat2_vals)\n        input_ptrs += TILE_K\n        mat1_ptrs += TILE_K\n        mat2_ptrs += TILE_K\n    acc = acc * alpha\n    if beta != 0:\n        input_ptrs = input + rm * n + rn\n        input_vals = tl.load(input_ptrs, mask=(rm < n) & (rn < n), other=0.0)\n        acc = acc + input_vals * beta\n    tl.store(out + rm * n + rn, acc, mask=(rm < n) & (rn < n))\n\n\ndef addmm(input: Tensor, mat1: Tensor, mat2: Tensor, *, beta=1, alpha=1, out=None) -> Tensor:\n    assert mat1.shape[1] == mat2.shape[0], \"Incompatible dimensions\"\n    assert input.shape[0] == mat1.shape[0] and input.shape[1] == mat2.shape[1], \"Incompatible dimensions\"\n    n, m = mat1.shape\n    _, p = mat2.shape\n    if out is None:\n        out = torch.empty((n, p), device=input.device, dtype=input.dtype)\n    else:\n        assert out.shape == (n, p), \"Out shape must be {} but got {}\".format((n, p), out.shape)\n    grid = lambda META: (triton.cdiv(n, META[\"TILE_M\"]), triton.cdiv(p, META[\"TILE_N\"]))\n    triton_addmm_kernel[grid](\n        input, mat1, mat2, out, beta, alpha, n, m, n // 128, p // 128\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the linear system `Ax = b` using QR decomposition. This function combines the QR decomposition with solving a linear system. Given a matrix `A` and a vector (or matrix) `b`, it performs the QR decomposition of `A` and computes the solution `x` using the formula `x = R^{-1} (Q^T b)`.\nWrapper Entry Information: def fused_qr_solve(A: Tensor, b: Tensor) -> Tensor: A: The matrix `A` of shape `(m, n)` where `m >= n`. b: The right-hand side tensor `b` of shape `(m, k)`.\nMath: x = R^{-1} Q^T b\nother: The function assumes `m >= n` for the matrix `A`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import householder\n\n@triton.jit\ndef fused_qr_solve_kernel(\n    A_ptr, b_ptr, x_ptr, m, n, k, nr: tl.constexpr, nc: tl.constexpr\n):\n    \"\"\"\n    Solves the linear system Ax = b using QR decomposition.\n    Args:\n        A_ptr: Pointer to the matrix A of shape (m, n).\n        b_ptr: Pointer to the right-hand side tensor b of shape (m, k).\n        x_ptr: Pointer to the solution tensor x of shape (n, k).\n        m: Number of rows in A.\n        n: Number of columns in A.\n        k: Number of columns in b.\n        nr: Number of rows in each tile.\n        nc: Number of columns in each tile.\n    \"\"\"\n    tl.static_assert(nr % 2 == 0, \"nr must be even\")\n    # Compute the block indices\n    i_row = tl.program_id(0)\n    j_col = tl.program_id(1)\n\n    i_offs = i_row * nr + tl.arange(0, nr)\n    j_offs = j_col * nc + tl.arange(0, nc)\n\n    A = tl.load(A_ptr + i_offs[:, None] * n + j_offs[None, :])\n    b = tl.load(b_ptr + i_offs[:, None] * k + j_offs[None, :])\n\n    # QR decomposition\n    q, r = householder.qr(A)\n\n    # Solve\n    x = tl.dot(tl.inverse(r), tl.trans(q) @ b)\n\n    # Store the result\n    tl.store(x_ptr + i_offs[:, None] * k + j_offs[None, :], x)\n\ndef fused_qr_solve(A: Tensor, b: Tensor) -> Tensor:\n    m, n = A.shape\n    n_b, k = b.shape\n    assert m >= n\n    assert n_b == m\n\n    x = torch.empty((n, k), dtype=A.dtype, device=A.device)\n\n    def grid(meta):\n        return (triton.cdiv(m, meta[\"nr\"]), triton.cdiv(n, meta[\"nc\"]))\n\n    fused_qr_solve_kernel[grid](A, b, x, m, n, k)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D adaptive average pooling over an input tensor, followed by the sigmoid activation function applied element-wise. This is used for downsampling a feature map to a specified output size and then normalizing the result with the sigmoid function.\nWrapper Entry Information: def sigmoid_adaptive_avg_pool2d(input: Tensor, output_size: Union[int, Tuple[int, int]]) -> Tensor\nMath: out = σ(AdaptiveAvgPool2D(input))\nSigmoid(x) = 1 / (1 + exp(-x))\nother: Each element in the resulting tensor is scaled to the range (0, 1) by the sigmoid activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom typing import Union, Tuple\n\n@triton.jit\ndef sigmoid_adaptive_avg_pool2d_triton(x, W, H, C, r, s, y_ptr, x_row_stride, y_row_stride, y_col_stride, BLOCK: tl.constexpr):\n    pid_h = tl.program_id(0)\n    pid_w = tl.program_id(1)\n    # Compute offsets for height and width\n    h_offset = pid_h * BLOCK\n    w_offset = pid_w * BLOCK\n    # Compute offsets for height and width with rounding\n    h_offset_rounded = (pid_h * BLOCK) + (BLOCK // 2)\n    w_offset_rounded = (pid_w * BLOCK) + (BLOCK // 2)\n    # Load input data with bounds checking\n    mask_h = h_offset < H\n    mask_w = w_offset < W\n    mask = mask_h and mask_w\n    x_offset = (h_offset * W + w_offset) * C\n    x1 = tl.load(x + x_offset + 0 * C + 0, x_row_stride, eviction_policy='evict_last')\n    x2 = tl.load(x + x_offset + 0 * C + 1, x_row_stride, eviction_policy='evict_last')\n    x3 = tl.load(x + x_offset + 1 * C + 0, x_row_stride, eviction_policy='evict_last')\n    x4 = tl.load(x + x_offset + 1 * C + 1, x_row_stride, eviction_policy='evict_last')\n    # Apply sigmoid function\n    y1 = 1 / (1 + tl.exp(-x1))\n    y2 = 1 / (1 + tl.exp(-x2))\n    y3 = 1 / (1 + tl.exp(-x3))\n    y4 = 1 / (1 + tl.exp(-x4))\n    # Store output data\n    tl.store(y_ptr + (h_offset * W + w_offset) * C + 0 * C + 0, y1, y_row_stride)\n    tl.store(y_ptr + (h_offset * W + w_offset) + 0 * C + 1, y2, y_row_stride)\n    tl.store(y_ptr + (h_offset * W + w_offset) + 1 * C + 0, y3, y_row_stride)\n    tl.store(y_ptr + (h_offset * W + w_offset) + 1 * C + 1, y4, y_row_stride)\n\ndef sigmoid_adaptive_avg_pool2d(input: torch.Tensor, output_size: Union[int, Tuple[int, int]]) -> torch.Tensor:\n    assert input.ndim == 4, \"Input must be a 4D tensor\"\n    assert all((s > 0 for s in input.shape[1:])), \"Input spatial dimensions must be greater than 0\"\n    assert all((s > 0 for s in (output_size if isinstance(output_size, tuple) else (output_size, output_size)))), \"Output size must be greater than 0\"\n\n    N, C, H, W = input.shape\n    if isinstance(output_size, int):\n        output_size = (output_size, output_size)\n    OH, OW = output_size\n    output = torch.empty(N, C, OH, OW, dtype=input.dtype, device=input.device)\n    # Create a grid of blocks for Triton kernel launch\n    grid = lambda META: (triton.cdiv(H, META['BLOCK']), triton.cdiv(W, META['BLOCK']))\n    # Launch Triton kernel\n    sigmoid_adaptive_avg_pool2d_triton[grid](input, W, H, C, OH, OW, output, input.stride(1), output.stride(1), output.stride(2))\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the cosine of the elements of the input tensor.\nWrapper Entry Information: cos(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\cos(\\text{input}_{i})\nother: The function computes the cosine of each element in the input tensor and returns a new tensor with these values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef cos(input):\n    return tl.cos(input)\n\ndef torch_cos(input, *, out=None):\n    if out is None:\n        return cos(input)\n    else:\n        return cos(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, dropout, and GELU activation. It computes the batch matrix multiplication of two input tensors, applies dropout to the result, and then applies the GELU activation function.\nWrapper Entry Information: fused_bmm_dropout_gelu(input1, input2, p=0.5, training=True, inplace=False, approximate='none', *, out=None) -> Tensor\n- **input1** (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size.\n- **input2** (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P).\n- **p** (float, optional): Probability of an element to be zeroed in the dropout layer. Default: `0.5`.\n- **training** (bool, optional): Apply dropout if `True`. Default: `True`.\n- **inplace** (bool, optional): If set to `True`, will perform the dropout operation in-place. Default: `False`.\n- **approximate** (str, optional): Can be `'none'` or `'tanh'`. The approximation to use for GELU. Default: `'none'`.\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given two input tensors X and Y, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nD &= \\text{Dropout}(Z, p) \\\\\nO &= \\text{GELU}(D)\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{Dropout}(Z, p) randomly zeroes elements of Z with probability p.\n- \\text{GELU}(D) applies the Gaussian Error Linear Unit activation function element-wise to D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the output of dropout.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import gelu, gelu_approx_tanh\n\n@triton.jit\ndef fused_bmm_dropout_gelu_kernel(\n    input1_ptr, input2_ptr, out_ptr, input1_batch_stride, input1_n_stride,\n    input1_m_stride, input2_batch_stride, input2_m_stride, input2_p_stride,\n    out_batch_stride, out_n_stride, out_p_stride, batch_size, n_size, m_size,\n    p_size, dropout_prob, is_training, inplace, approximate_gelu: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_P: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    dropout_hash = tl.program_id(axis=1)\n    random_hash = tl.program_id(axis=2)\n\n    rand_offsets = random_hash * 0\n\n    input1_batch_offset = (pid * BLOCK_SIZE_N * BLOCK_SIZE_M) // n_size // m_size\n    input2_batch_offset = (pid * BLOCK_SIZE_N * BLOCK_SIZE_P) // n_size // p_size\n\n    input1_batch_ptr = input1_ptr + input1_batch_offset * input1_batch_stride\n    input2_batch_ptr = input2_ptr + input2_batch_offset * input2_batch_stride\n\n    out_batch_ptr = out_ptr + input1_batch_offset * out_batch_stride\n\n    input1_ptrs = input1_batch_ptr + (\n        (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_M +\n         tl.arange(0, BLOCK_SIZE_M)) // m_size // n_size)\n    input2_ptrs = input2_batch_ptr + (\n        (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_P +\n         tl.arange(0, BLOCK_SIZE_P)) // p_size // n_size)\n\n    out_ptrs = out_batch_ptr + (\n        (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_P +\n         tl.arange(0, BLOCK_SIZE_P)) // p_size // n_size)\n\n    if inplace:\n        input1_ptrs = input1_ptrs.to(tl.int64)\n        out_ptrs = out_ptrs.to(tl.int64)\n        input1_ptrs = input1_ptrs + (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_M +\n                                    tl.arange(0, BLOCK_SIZE_M)) // m_size\n        input1_ptrs = input1_ptrs.to(tl.pointer_type(tl.float32))\n        input1_ptrs = tl.make_block_ptr(input1_ptrs, (n_size, m_size), (1, 0),\n                                        (0, 0), (BLOCK_SIZE_N, BLOCK_SIZE_M),\n                                        (1, 0))\n        input2_ptrs = input2_ptrs + (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_P +\n                                    tl.arange(0, BLOCK_SIZE_P)) // p_size\n        input2_ptrs = input2_ptrs.to(tl.pointer_type(tl.float32))\n        input2_ptrs = tl.make_block_ptr(input2_ptrs, (m_size, p_size), (0, 1),\n                                        (0, 0), (BLOCK_SIZE_N, BLOCK_SIZE_P),\n                                        (0, 1))\n        out_ptrs = tl.make_block_ptr(out_ptrs, (n_size, p_size), (1, 0),\n                                     (0, 0), (BLOCK_SIZE_N, BLOCK_SIZE_P),\n                                     (1, 0))\n    else:\n        input1_ptrs = input1_ptrs + (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_M +\n                                    tl.arange(0, BLOCK_SIZE_M)) // m_size\n        input2_ptrs = input2_ptrs + (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_P +\n                                    tl.arange(0, BLOCK_SIZE_P)) // p_size\n\n    n_range = tl.arange(0, BLOCK_SIZE_N)\n    m_range = tl.arange(0, BLOCK_SIZE_M)\n    p_range = tl.arange(0, BLOCK_SIZE_P)\n\n    input1 = tl.load(input1_ptrs,\n                     mask=(n_range[:, None] < n_size) &\n                     (m_range[None, :] < m_size),\n                     other=0.0)\n    input2 = tl.load(input2_ptrs,\n                     mask=(m_range[:, None] < m_size) &\n                     (p_range[None, :] < p_size),\n                     other=0.0)\n\n    input1 = input1.to(tl.float32)\n    input2 = input2.to(tl.float32)\n\n    matmul_result = tl.dot(input1, input2)\n\n    if not inplace:\n        tl.store(out_ptrs,\n                 matmul_result,\n                 mask=(n_range[:, None] < n_size) &\n                 (p_range[None, :] < p_size))\n        out_ptrs += (tl.arange(0, BLOCK_SIZE_N) * BLOCK_SIZE_P +\n                     tl.arange(0, BLOCK_SIZE_P)) // p_size // n_size\n\n    if is_training:\n        dropout_mask = ((rand_ops.rand(\n            rand_offsets,\n            random_hash,\n            BLOCK_SIZE_N * BLOCK_SIZE_P,\n            approximate=approximate_gelu) > dropout_prob)\n                        .to(tl.float32))\n    else:\n        dropout_mask = 1.0\n\n    if approximate_gelu == 'tanh':\n        matmul_result = gelu_approx_tanh(matmul_result)\n    else:\n        matmul_result = gelu(matmul_result)\n\n    matmul_result *= dropout_mask\n\n    if inplace:\n        tl.store(input1_ptrs,\n                 matmul_result,\n                 mask=(n_range[:, None] < n_size) &\n                 (m_range[None, :] < m_size))\n    else:\n        tl.store(out_ptrs,\n                 matmul_result,\n                 mask=(n_range[:, None] < n_size) &\n                 (p_range[None, :] < p_size))\n\n\ndef fused_bmm_dropout_gelu(input1, input2, p=0.5, training=True, inplace=False,\n                          approximate='none', *, out=None):\n    check_bmm_compatible(input1, input2)\n\n    input1 = input1.contiguous()\n    input2 = input2.contiguous()\n\n    if out is not None:\n        out = out.contiguous()\n\n    assert input1.shape[2] == input2.shape[1], \"incompatible dimensions\"\n    assert input1.is_contiguous(), \"matrix A must be contiguous\"\n    assert input2.is_contiguous(), \"matrix B must be contiguous\"\n\n    batch_size, n_size, m_size = input1.shape\n    m_size, p_size = input2.shape\n\n    output = torch.empty((batch_size, n_size, p_size), dtype=input1.dtype,\n                         device=input1.device)\n\n    if inplace:\n        assert input1.shape == output.shape, \"inplace operation requires input and output tensors to be of the same shape\"\n\n    full_hash = full_hash_seed()\n\n    grid = lambda META: (triton.cdiv(n_size * p_size, META['BLOCK_SIZE_N'] *\n                                     META['BLOCK_SIZE_P']), full_hash)\n\n    rand_hash = full_hash\n\n    dropout_prob = p\n    approximate_gelu = approximate\n\n    with torch.cuda.device(input1.device.index):\n        fused_bmm_dropout_gelu_kernel[grid](\n            input1,\n            input2,\n            output,\n            input1.stride(0),\n            input1.stride(1),\n            input1.stride(2),\n            input2.stride(0),\n            input2.stride(1),\n            input2.stride(2),\n            output.stride(0),\n            output.stride(1),\n            output.stride(2),\n            batch_size,\n            n_size,\n            m_size,\n            p_size,\n            dropout_prob,\n            training,\n            inplace,\n            approximate_gelu,\n            rand_hash=rand_hash,\n        )\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the truncated integer values of the elements of the input tensor. For integer inputs, it follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: trunc(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\n\n@triton.jit\ndef trunc(input):\n    return input.to(torch.trunc(input).dtype)\n\ndef trunc(input, *, out=None):\n    if out is None:\n        return trunc(input)\n    else:\n        return trunc(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix power A^k of a square matrix A using eigendecomposition. It relies on A being diagonalizable and computes the power through the equation A^k = V diag(Λ^k) V^(-1), where Λ and V are the eigenvalues and eigenvectors of A. It allows for fractional powers of matrices and supports real or complex exponents. If A is not diagonalizable, the result may not be accurate.\nWrapper Entry Information: def matrix_power_eig(A, k, *, out=None) -> Tensor\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\n    k (float or complex): the exponent to which the matrix :attr:`A` is to be raised.\n\nKeyword args:\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A^k = V diag(Λ^k) V^{-1}, where A = V diag(Λ) V^{-1}, and Λ^k denotes the element-wise power of the eigenvalues.\nother: Supports input of float, double, cfloat, and cdouble dtypes. Also supports batches of matrices, output has the same batch dimensions. Note that the computed A^k may be complex even if A is real, due to complex eigenvalues. Warning: If A is not diagonalizable, the result may not be accurate. Gradients might be numerically unstable if the distance between any two eigenvalues is close to zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _matrix_power_eig_kernel(V, Vinv, Lambda, k, n, num_batch, dtype, **meta):\n    if dtype == torch.float32:\n        EPS = 1.0e-7\n    elif dtype == torch.float64:\n        EPS = 1.0e-15\n    else:\n        EPS = 1.0e-7\n\n    r = tl.zeros([num_batch, n], dtype=tl.float32)\n    for i in range(num_batch):\n        for j in range(0, n, 32):\n            idx = j + tl.arange(0, 32)\n            mask = idx < n\n            x = tl.load(V + i * n + idx, mask=mask).to(tl.float32)\n            y = tl.load(Lambda + i * n + idx, mask=mask).to(tl.float32)\n            y = tl.where(tl.abs(y) > EPS, y**k, 0.0)\n            z = tl.dot(y, x, allow_tf32=False)\n            r = tl.store(r + i * n + idx, z, mask=mask)\n\n    tl.debug_barrier()\n    for i in range(num_batch):\n        for j in range(0, n, 32):\n            idx = j + tl.arange(0, 32)\n            mask = idx < n\n            x = tl.load(r + i * n + idx, mask=mask).to(tl.float32)\n            y = tl.load(Vinv + i * n + idx, mask=mask).to(tl.float32)\n            z = tl.dot(x, y, allow_tf32=False)\n            tl.store(V + i * n + idx + meta[\"offset\"], z, mask=mask)\n\ndef matrix_power_eig(A, k, *, out=None) -> torch.Tensor:\n    dtype = A.dtype\n    assert dtype in [torch.float32, torch.float64, torch.complex64, torch.complex128]\n    device = A.device\n    num_batch = A.shape[:-2]\n    n = A.shape[-1]\n    A = A.reshape([-1, n, n])\n    if dtype in [torch.complex64, torch.complex128]:\n        v, V = torch.linalg.eig(A)\n    else:\n        v, V = torch.linalg.eigh(A)\n    Vinv = torch.inverse(V)\n    if out is None:\n        out = torch.empty_like(V @ Vinv, dtype=dtype, device=device)\n    else:\n        assert out.shape == V.shape\n        assert out.dtype == dtype\n        assert out.device == device\n        out = out.reshape([-1, n, n])\n    Lambda = torch.zeros_like(V, device=device, dtype=dtype)\n    for i in range(num_batch):\n        Lambda[i * n:(i + 1) * n, i * n:(i + 1) * n] = torch.diag(v[i * n:(i + 1) * n] ** k)\n    _matrix_power_eig_kernel[(1,)](\n        out, Vinv, Lambda, k, n, num_batch, dtype, offset=n * num_batch\n    )\n    return out.reshape([*list(num_batch), n, n])\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of each element in the input tensor, then applies the hyperbolic tangent (tanh) function to the result. This involves applying the logarithm first, which is only defined for positive numbers, and then applying tanh to transform the result between -1 and 1.\nWrapper Entry Information: def log_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. All elements must be positive for the log function. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\log(\\text{input}_{i}))\nother: All input elements must be positive for the logarithm function to be defined.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef log_tanh_kernel(input, output, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(input + offsets, mask=mask)\n    output_x = tl.math.log(x) # Applies the logarithm to the input\n    output_x = tl.math.tanh(output_x) # Applies the tanh function to the result\n    tl.store(output + offsets, output_x, mask=mask)\n\ndef log_tanh(input, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert input.ndim == 1\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n        assert out.ndim == 1\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    log_tanh_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the exponential of the elements of the input tensor.\nWrapper Entry Information: exp(input, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    out (Tensor, optional): the output tensor.\nMath: y_{i} = e^{x_{i}}\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef exp_kernel(input, output, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_ptrs = input + offsets\n    output_ptrs = output + offsets\n    x = tl.load(input_ptrs, mask=mask)\n    output = tl.exp(x)\n    tl.store(output_ptrs, output, mask=mask)\n\ndef exp(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    assert input.is_contiguous()\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    exp_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes two operations on matrix `C`: first, it performs the matrix-matrix product `C = alpha * torch.mm(A, B) + beta * C`, then updates `C` to be `C = alpha * torch.mm(C, C.T) + beta * C`. This function effectively performs two sequential matrix operations: a weighted sum of a matrix product and itself, followed by a weighted product of `C` and its transpose.\nWrapper Entry Information: matrix_multiply_symmetric(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor; Args: A (Tensor): The first input matrix of shape `(n, m)`. B (Tensor): The second input matrix of shape `(m, p)`. C (Tensor): The target matrix for the operations, shape `(n, p)`. alpha (float): Scalar multiplier for matrix products. beta (float): Scalar multiplier for adding to `C`. Example: A = torch.tensor([[1.0, 2.0], [3.0, 4.0]]), B = torch.tensor([[0.5, -1.0], [1.5, 2.0]]), C = torch.tensor([[1.0, 0.0], [0.0, 1.0]]), alpha, beta = 2.0, 0.5, result = matrix_multiply_symmetric(A, B, C, alpha, beta)\nMath: C = alpha * torch.mm(A, B) + beta * C\nC = alpha * torch.mm(C, C.T) + beta * C\nother: This function performs a fused operation of matrix multiplication and symmetric update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _kernel_matrix_multiply_symmetric(A, B, C, alpha, beta):\n    # Convert inputs to float32\n    A = A.to(tl.float32)\n    B = B.to(tl.float32)\n    C = C.to(tl.float32)\n\n    # Matrix multiplication and scaling\n    C = alpha * tl.dot(A, B) + beta * C\n\n    # In-place matrix multiplication and scaling\n    C = alpha * tl.dot(C, C, out_dtype=tl.float32).to(C.dtype) + beta * C\n\n    return C\n\ndef matrix_multiply_symmetric(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    # Ensure A, B, C are 2D tensors\n    if A.dim() != 2 or B.dim() != 2 or C.dim() != 2:\n        raise ValueError(\"All tensors must be 2D\")\n    \n    # Call the Triton kernel\n    return _kernel_matrix_multiply_symmetric(A, B, C, alpha, beta)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between `x1` and `x2` along a specified dimension, adds a singleton dimension, and applies 2D average pooling. It first computes cosine similarity along dim=1 using `cosine_similarity`, then adds a singleton dimension using `unsqueeze`, and finally applies 2D average pooling using `avg_pool2d`.\nWrapper Entry Information: fused_avg_pool2d_cosine_similarity(x1: torch.Tensor, x2: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, eps: float = 1e-8) -> torch.Tensor\nother: The function provides an optional `stride` parameter which defaults to the value of `kernel_size` if not provided. The `eps` parameter is used to prevent division by zero in cosine similarity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef cosine_similarity(x1, x2, eps):\n    # Compute the dot product between x1 and x2\n    dot = tl.sum(x1 * x2, axis=1)\n    # Compute the norm of x1 and x2\n    norm = tl.sqrt(tl.sum(x1 * x1, axis=1) * tl.sum(x2 * x2, axis=1))\n    # Compute cosine similarity\n    cos = dot / norm\n    cos = cos[:, None]\n    # Add eps to avoid division by zero\n    cos = cos + eps\n    return cos\n\n@triton.jit\ndef fused_avg_pool2d_cosine_similarity(x1, x2, kernel_size, stride, padding, eps):\n    # Compute cosine similarity along dim=1\n    cos = cosine_similarity(x1, x2, eps)\n    # Add a singleton dimension\n    cos = cos.unsqueeze(2)\n    # Apply 2D average pooling\n    return tl.avg_pool2d(cos, kernel_size, stride, padding)\n\ndef wrapper_fused_avg_pool2d_cosine_similarity(x1: torch.Tensor, x2: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, eps: float = 1e-8) -> torch.Tensor:\n    # Ensure x1 and x2 are 2D tensors\n    if x1.dim() != 2 or x2.dim() != 2:\n        raise ValueError(\"Both input tensors must be 2D\")\n    # Set stride to kernel_size if not provided\n    stride = stride if stride is not None else kernel_size\n    # Call the Triton kernel\n    return fused_avg_pool2d_cosine_similarity(x1, x2, kernel_size, stride, padding, eps)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of dropout followed by hard shrinkage on the input tensor. The function first applies dropout to the input tensor, where each element is zeroed with a probability of p if training is True. The dropout can be applied in-place if specified. After dropout, a hard shrinkage operation is applied, which shrinks values towards zero based on the lambda parameter.\nWrapper Entry Information: def fused_hardshrink_dropout(input: torch.Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, lambd: float = 0.5) -> torch.Tensor\nArgs:\n  input (Tensor): The input tensor.\n  p (float, optional): Probability of an element to be zeroed in dropout. Default is 0.5.\n  training (bool, optional): Apply dropout if True. Default is True.\n  inplace (bool, optional): If set to True, dropout will be applied in-place. Default is False.\n  lambd (float, optional): The lambda parameter for the hard shrinkage function. Default is 0.5.\nReturns:\n  Tensor: Result after applying dropout and then hard shrinkage on the input.\nother: The function combines dropout and hard shrinkage operations, which are typically used in neural network training to prevent overfitting and to enforce sparsity, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_hardshrink_dropout_kernel(\n    input_pointer, output_pointer, n_elements, p, lambd, training, inplace,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    mask = offsets < n_elements\n\n    x = tl.load(input_pointer + offsets, mask=mask)\n\n    if inplace:\n        out = x\n    else:\n        out = tl.where(mask, x, 0.0)\n\n    if training:\n        rand = tl.rand(offsets)\n        out = tl.where(rand > p, out, 0.0)\n\n    s = tl.abs(out) - lambd\n    out = tl.where(s <= 0, 0.0, out)\n\n    if inplace:\n        tl.store(input_pointer + offsets, out, mask=mask)\n    else:\n        tl.store(output_pointer + offsets, out, mask=mask)\n\ndef fused_hardshrink_dropout(\n    input: torch.Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, lambd: float = 0.5\n) -> torch.Tensor:\n    assert input.is_contiguous()\n\n    assert 0.0 <= p <= 1.0, f\"p must be in [0.0, 1.0], but got {p}\"\n    assert 0.0 <= lambd, f\"lambd must be in [0.0, +inf), but got {lambd}\"\n\n    output = input if inplace else torch.empty_like(input)\n\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n\n    fused_hardshrink_dropout_kernel[grid](input, output, n_elements, p, lambd, training, inplace, BLOCK_SIZE=1024)\n\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the complementary error function (erfc) and the square root of each element in the input tensor.\nWrapper Entry Information: def erfc_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: The input tensor for which the erfc and square root are computed.\nMath: \\text{erfc}(x) = 1 - \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: Returns a tuple containing the erfc result and the square root result for each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom typing import Tuple\n\n@triton.jit\ndef _erfc_sqrt_triton(x):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Compute the exponential of x_fp32\n    exp_x = tl.exp(x_fp32)\n    # Compute the polynomial expression\n    poly = 4.82796678296042 * x_fp32 * x_fp32 + 9.99999999999999\n    # Compute the reciprocal square root of the polynomial\n    rrsqrt_poly = tl.math.rsqrt(poly)\n    # Compute the final result using the error function and the reciprocal square root\n    result = -exp_x * (x_fp32 * rrsqrt_poly + 0.707106781186548 * rrsqrt_poly)\n    result = 1.0 + result\n    return result, x_fp32\n\ndef erfc_sqrt(input: Tensor) -> Tuple[Tensor, Tensor]:\n    # Ensure input is a contiguous float32 tensor\n    if not input.is_contiguous() and input.dtype == torch.float32:\n        input = input.contiguous()\n    # Call the Triton kernel and return the results\n    return _erfc_sqrt_triton(input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the reciprocal of the square root of the tensordot product of two tensors `a` and `b`. This function performs a tensor contraction of `a` and `b` over the specified dimensions using `torch.tensordot`, and then applies the element-wise reciprocal square root to the resulting tensor. The operation involves computing the tensordot product first and then applying the reciprocal of the square root element-wise to the result.\nWrapper Entry Information: def tensordot_rsqrt(a: torch.Tensor, b: torch.Tensor, dims) -> torch.Tensor: a (Tensor): Left tensor to contract. b (Tensor): Right tensor to contract. dims (int, Tuple[List[int], List[int]], or List[List[int]]): Dimensions for contraction, as per `torch.tensordot`.\nMath: \\text{output} = \\frac{1}{\\sqrt{\\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}}}\nother: The function applies the `torch.tensordot` and `torch.rsqrt` operations. The `dims` argument specifies the dimensions over which the contraction happens, similar to the `torch.tensordot` function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _tensordot_rsqrt_kernel(a, b, dims):\n    # Triton kernel to compute the reciprocal of the square root of the tensordot product\n    return tl.rsqrt(tl.sum(a.to(tl.float32) * b.to(tl.float32), axis=dims))\n\ndef tensordot_rsqrt(a: torch.Tensor, b: torch.Tensor, dims) -> torch.Tensor:\n    \"\"\"\n    Returns the reciprocal of the square root of the tensordot product of a and b.\n    \"\"\"\n    return _tensordot_rsqrt_kernel(a, b, dims)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the natural logarithm element-wise on the input tensor, followed by applying the softmax function along the specified dimension. This combined operation scales input values to a range between 0 and 1, summing to 1 after the logarithmic transformation. It allows transformation of the input tensor into a probability distribution.\nWrapper Entry Information: def softmax_log(input, dim=-1, dtype=None) -> Tensor: \nArgs:\n    input (Tensor): The input tensor on which logarithm and softmax are applied.\n    dim (int): The dimension along which softmax will be computed. Default: -1.\n    dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation is performed. Useful for preventing data type overflows. Default: None.\nExample:\n    >>> import torch\n    >>> import torch.nn.functional as F\n    >>> # Define input tensor\n    >>> input = torch.rand(3, 4) * 10\n    >>> # Apply softmax_log along the last dimension\n    >>> result = softmax_log(input, dim=1)\n    >>> result\n    tensor([[0.1829, 0.1782, 0.2783, 0.3606],\n            [0.3119, 0.1724, 0.3256, 0.1900],\n            [0.2057, 0.2166, 0.2991, 0.2786]])\n\n    >>> # Apply softmax_log along a different dimension\n    >>> result = softmax_log(input, dim=0)\n    >>> result\n    tensor([[0.3122, 0.4444, 0.2720, 0.2159],\n            [0.3879, 0.2167, 0.4226, 0.2165],\n            [0.2999, 0.3389, 0.3055, 0.5676]])\nMath: out = Softmax(log(input))\n\nwhere:\n\ny_{i} = \\frac{\\exp(\\log(x_{i}))}{\\sum_j \\exp(\\log(x_{j}))} = \\frac{x_i}{\\sum_j x_j}\nother: The function handles optional data type casting to prevent overflow and allows specifying the dimension for softmax application.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_log_kernel(input, output, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_ptrs = input + offsets\n    out_ptrs = output + offsets\n    x = tl.load(input_ptrs, mask=mask)\n    c = tl.max(x, axis=0)\n    x = x - c\n    exp_x = tl.exp(x)\n    sum_x = tl.sum(exp_x, axis=0)\n    y = exp_x / sum_x\n    tl.store(out_ptrs, y, mask=mask)\n\ndef softmax_log(input, dim=-1, dtype=None) -> torch.Tensor:\n    if dtype is None:\n        dtype = input.dtype\n    if dtype not in (torch.float16, torch.bfloat16, torch.float32, torch.float64):\n        raise ValueError(f\"Unsupported dtype: {dtype}\")\n    input = input.contiguous()\n    if dim < -input.ndim or dim >= input.ndim:\n        raise IndexError(\n            \"Dimension out of range (expected to be in range of [{}, {}], but got {})\".format(\n                -input.ndim, input.ndim - 1, dim\n            )\n        )\n    dim = dim % input.ndim\n    shape = input.shape\n    n_elements = input.numel()\n    sorted_dim = dim if dim >= 0 else input.ndim + dim\n    sorted_shape = sorted_shape = list(input.shape)\n    sorted_shape[sorted_dim] = 1\n    n_elements_in_sorted_dim = sorted_shape[sorted_dim]\n    output = torch.empty_like(input, dtype=dtype)\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    softmax_log_kernel[grid](input, output, n_elements, BLOCK_SIZE=n_elements_in_sorted_dim)\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation followed by a sigmoid activation and dropout. This function sequentially applies a linear transformation to the input tensor, a sigmoid activation to scale the values between 0 and 1, and randomly zeroes some elements of the tensor with a specified probability during dropout.\nWrapper Entry Information: def dropout_sigmoid_linear(input: torch.Tensor, weight: torch.Tensor, bias=None, p=0.5, training=True, inplace=False) -> torch.Tensor: Input tensor of shape :math:`(*, \\text{in\\_features})`. Weight tensor of shape :math:`(\\text{out\\_features}, \\text{in\\_features})`. Bias tensor of shape :math:`(\\text{out\\_features})`. Default is `None`. Probability of an element to be zeroed in dropout. Default: 0.5 If `True`, applies dropout during training. Default: `True` If `True`, performs the operation in-place. Default: `False`\nother: The function applies dropout only if the `training` parameter is set to `True`. The `inplace` parameter allows for in-place operations to save memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef dropout_sigmoid_linear_triton(\n    x_ptr, weight_ptr, bias_ptr, out_ptr, x_shape, out_shape, n_features,\n    p, training, inplace, BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < out_shape[0]\n\n    x_field_ptr = x_ptr + (offsets[:, None] * n_features + tl.arange(0, n_features)[None, :])\n    x = tl.load(x_field_ptr, mask=mask, other=0.0)\n\n    weight_field_ptr = weight_ptr + (tl.arange(0, n_features)[:, None] * out_shape[0] + offsets[None, :])\n    weight = tl.load(weight_field_ptr, mask=mask.T, other=0.0)\n\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + offsets, mask=mask, other=0.0)\n\n    logits = tl.sum(x * weight, axis=1)\n    if bias_ptr is not None:\n        logits += bias\n    out = 1 / (1 + tl.exp(-logits))\n    if inplace:\n        tl.store(x_ptr + offsets, out, mask=mask)\n    else:\n        tl.store(out_ptr + offsets, out, mask=mask)\n\ndef dropout_sigmoid_linear_triton_wrapper(\n    x: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor = None, p=0.5, training=True, inplace=False\n) -> torch.Tensor:\n    out = torch.empty(*x.shape, device=x.device, dtype=x.dtype)\n    assert x.is_contiguous()\n    if not inplace:\n        assert out.is_contiguous()\n    n_features = x.shape[-1]\n    grid = lambda meta: (triton.cdiv(x.shape[0], meta[\"BLOCK_SIZE\"]),)\n    dropout_sigmoid_linear_triton[grid](\n        x, weight, bias, out if inplace else x, x.shape, out.shape, n_features, p, training, inplace, BLOCK_SIZE=64,\n    )\n    return out if not inplace else x\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization for each channel across a batch of data. Batch Normalization is a technique to improve the training of deep neural networks by ensuring that each layer receives whitened input, which helps to stabilize the learning process and reduce the number of training epochs needed to converge.\nWrapper Entry Information: def batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-05) -> Tensor\nother: This function is related to the BatchNorm classes like BatchNorm1d, BatchNorm2d, and BatchNorm3d, which are layers that handle this operation with additional features.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.triton_heuristics import grid\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef batch_norm_fwd_fused(\n    X, Y, W, B, Mean, Rstd, stride, N, HW, C, GROUPS, M, eps, IS_RMS_NORM: tl.constexpr,\n    BLOCK_SIZE: tl.constexpr, IS_TRT: tl.constexpr\n):\n    # Compute the program's ID and the offset for the current element\n    pid = tl.program_id(0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Load input data and weights\n    mask = offset < N * HW\n    x = tl.load(X + offset, mask=mask, other=0.0).to(tl.float32)\n    if not IS_RMS_NORM:\n        mean = tl.sum(x, axis=0) / N / HW\n        tl.store(Mean + pid, mean)\n        xbar = tl.where(mask, x - mean, 0.0)\n        var = tl.sum(xbar * xbar, axis=0) / N / HW\n    else:\n        xbar = tl.where(mask, x, 0.0)\n        var = tl.sum(xbar * xbar, axis=0) / N / HW\n    rstd = 1 / tl.sqrt(var + eps)\n    tl.store(Rstd + pid, rstd)\n    # Compute the output\n    mask = offset < N * C\n    w = tl.load(W + offset, mask=mask).to(tl.float32)\n    if bias is not None:\n        b = tl.load(B + offset, mask=mask).to(tl.float32)\n    # Normalize and apply linear transformation\n    x_hat = (x - mean) * rstd if not IS_RMS_NORM else x * rstd\n    y = x_hat * w + b if bias is not None else x_hat * w\n    # Write output\n    if IS_TRT:\n        offs_n = offset // C\n        offs_d = offset % C\n        y = tl.reshape(y, (M, N, C))\n        y = tl.transpose(y, (1, 0, 2))\n        y = tl.reshape(y, (N * M, C))\n        mask = offs_n < N\n        tl.store(Y + offset, y, mask=mask)\n    else:\n        tl.store(Y + offset, y, mask=mask)\n\ndef batch_norm(\n    x: Tensor, \n    weight: Tensor, \n    bias: Tensor, \n    running_mean: Tensor, \n    running_var: Tensor, \n    training: bool = False, \n    momentum: float = 0.1, \n    eps: float = 1e-05, \n    cudnn_benchmark: bool = False\n) -> Tensor:\n    # Get strides and shape information\n    stride = x.stride(0)\n    N, HW, C = x.shape\n    x_ = x.view(N * HW, C)\n    M = C\n    GROUPS = C\n    # Determine if using RMSNorm\n    is_rms_norm = False\n    if weight is None:\n        is_rms_norm = True\n    # Create output tensor\n    y = torch.empty_like(x)\n    # Create grid and stream for Triton kernel\n    grid = lambda META: (triton.cdiv(N, META['BLOCK_SIZE']),)\n    with torch.cuda._DeviceGuard(0):\n        batch_norm_fwd_fused[grid](\n            x_, y, weight, bias, running_mean, running_var, \n            stride, N, HW, C, GROUPS, M, eps, is_rms_norm, \n            GROUPS, IS_TRT=False\n        )\n    return y\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of the absolute value of the gamma function on the input tensor.\nWrapper Entry Information: gammaln(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\ln \\Gamma(|\\text{input}_{i}|)\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _gammaln_kernel(input, output, n_elements,\n                    BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_ptrs = input + offsets\n    output_ptrs = output + offsets\n    x = tl.load(input_ptrs, mask=mask)\n    x = tl.math.gammaln(tl.abs(x))\n    tl.store(output_ptrs, x, mask=mask)\n\ndef gammaln(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        out = out.contiguous()\n    assert input.is_contiguous()\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    _gammaln_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical AND.\nWrapper Entry Information: bitwise_and(input, other, *, out=None) -> Tensor; input: the first input tensor; other: the second input tensor; out (Tensor, optional): the output tensor.\nother: The input tensors must be of integral or Boolean types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import logging\nimport triton\nimport triton.language as tl\nimport torch\n\ndef get_wrapper_code(func_str, func_name, arg_names, use_triton_kernel, kernel_name=None, grid=None, stream=None):\n    arg_str = ', '.join(arg_names)\n    wrapper_code = f\"\"\"\n@torch.library.impl(lib, \"{func_name}\")\ndef {func_name}({arg_str}):\n    logging.debug(\"GEMS {func_name} is called\")\n    if isinstance({arg_names[0]}, torch.Tensor) and isinstance({arg_names[1]}, torch.Tensor):\n        input_shape = {arg_names[0]}.shape\n        other_shape = {arg_names[1]}.shape\n        if input_shape == other_shape:\n            return {func_name}_kernel({arg_names[0]},{arg_names[1]})\n        else:\n            raise RuntimeError(f\"Shape must be the same but got {input_shape} and {other_shape}\")\n    else:\n        raise RuntimeError(\"Both inputs must be tensors\")\n\"\"\"\n\n    if use_triton_kernel:\n        kernel_code = f\"\"\"\n@triton.jit\ndef {kernel_name}(input, other):\n    return input & other\n\"\"\"\n        wrapper_code = kernel_code + wrapper_code\n    return wrapper_code\n\ndef get_typed_wrapper_code(func_str, func_name, arg_names, use_triton_kernel, kernel_name=None, grid=None, stream=None):\n    arg_str = ', '.join(arg_names)\n    wrapper_code = f\"\"\"\n@torch.library.impl(lib, \"{func_name}\")\ndef {func_name}({arg_str}):\n    logging.debug(\"GEMS {func_name} is called\")\n    if isinstance({arg_names[0]}, torch.Tensor) and isinstance({arg_names[1]}, torch.Tensor):\n        input_shape = {arg_names[0]}.shape\n        other_shape = {arg_names[1]}.shape\n        if input_shape == other_shape:\n            if {arg_names[0]}.dtype in [torch.bool]:\n                return {func_name}_kernel({arg_names[0]},{arg_names[1]})\n            else:\n                raise RuntimeError(\"Only boolean tensors are supported\")\n        else:\n            raise RuntimeError(f\"Shape must be the same but got {input_shape} and {other_shape}\")\n    else:\n        raise RuntimeError(\"Both inputs must be tensors\")\n\"\"\"\n\n    if use_triton_kernel:\n        kernel_code = f\"\"\"\n@triton.jit\ndef {kernel_name}(input, other):\n    return input & other\n\"\"\"\n        wrapper_code = kernel_code + wrapper_code\n    return wrapper_code\n\nfunc_str = \"Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical AND.\"\nfunc_name = \"bitwise_and\"\narg_names = [\"input\", \"other\"]\nuse_triton_kernel = True\nkernel_name = \"bitwise_and_kernel\"\ngrid = None\nstream = None\nwrapper_code = get_wrapper_code(func_str, func_name, arg_names, use_triton_kernel, kernel_name, grid, stream)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts 'other', scaled by 'alpha', from 'input', and then applies the Gaussian Error Linear Units (GELU) activation function to the result. The function supports two modes for GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: def sub_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to subtract from input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out_i = GELU(input_i - alpha * other_i)\n\nGELU(x) = x * Φ(x) when approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3))) when approximate is 'tanh'\nother: The function allows for an optional output tensor and supports both exact and approximate GELU calculations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import erf, exp, pow, tanh\n\n@triton.jit\ndef _triton_gelu(x, approximate: tl.constexpr):\n    if approximate == \"tanh\":\n        # 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3)))\n        return 0.5 * x * (1 + tanh(tl.sqrt(2.0 / tl.math.pi()) * (x + 0.044715 * pow(x, 3)))\n    else:\n        # x * Φ(x)\n        return x * 0.5 * (1.0 + erf(x / tl.sqrt(2.0)))\n\ndef sub_gelu(input, other, alpha=1, approximate=\"none\", out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_cuda and input.is_cuda and other.is_cuda\n\n    assert input.is_cuda and other.is_cuda\n    assert input.dim() > 0 and input.size(0) >= 1024\n\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n\n    _triton_sub_gelu[grid](input, other, alpha, approximate, out, n_elements)\n\n    return out\n\n@triton.jit\ndef _triton_sub_gelu(input, other, alpha, approximate: tl.constexpr, out, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    input_ptrs = input + offset\n    other_ptrs = other + offset\n    input_vals = tl.load(input_ptrs, mask=mask)\n    other_vals = tl.load(other_ptrs, mask=mask)\n    output_vals = input_vals - alpha * other_vals\n    output_vals = _triton_gelu(output_vals, approximate)\n    tl.store(out + offset, output_vals, mask=mask)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to the elements of input, then computes the standard deviation along the specified dimension(s). The GELU function is applied element-wise to the input tensor, with an option to use an approximation method. After activation, the standard deviation of the result is calculated over specified dimensions, with options to keep reduced dimensions and apply a correction factor.\nWrapper Entry Information: def gelu_std(input, dim=None, keepdim=False, correction=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension or dimensions to reduce. If None, computes over all dimensions. keepdim (bool, optional): Whether to retain the dimension(s) with size 1 after reduction. Default is False. correction (int, optional): The correction factor for standard deviation. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: GELU(x) = x * Φ(x) (when approximate is 'none')\nGELU(x) = 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3))) (when approximate is 'tanh')\nσ = √(1/(max(0, N - δN)) * Σ(x_i - x̄)^2)\nother: The function allows the use of a correction factor in the standard deviation calculation. It supports two methods for computing GELU: exact using CDF or approximate using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom flag_gems.utils.shape_utils import volume\n\n@triton.jit\ndef gelu_cdf(x):\n    # Using approximation introduces greater parity errors.\n    return tl.sigmoid(1.702 * x) * (1 + 0.044715 * x)\n\n@triton.jit\ndef gelu_approx(x):\n    return 0.5 * x * (1 + tl.tanh(0.79788456 * x * (1 + 0.044715 * x * x)))\n\n@triton.jit\ndef std_func(X, Y, M, n_elements, N, MISSING_DIM, BLOCK_N: tl.constexpr, approximate: tl.constexpr, correction: tl.constexpr):\n    # Compute mean\n    if MISSING_DIM == 0:\n        M = tl.sum(X) / n_elements\n        X = X - M\n    elif MISSING_DIM == 1:\n        M = tl.sum(X) / n_elements\n        X = X - M\n    else:\n        M = tl.sum(X) / n_elements\n        X = X - M\n\n    # Compute variance\n    if MISSING_DIM == 0:\n        var = tl.sum(tl.where(Y == 1, X * X, 0)) / (N - correction)\n    elif MISSING_DIM == 1:\n        var = tl.sum(tl.where(Y == 1, X * X, 0)) / (N - correction)\n    else:\n        var = tl.sum(tl.where(Y == 1, X * X, 0)) / (N - correction)\n\n    # Return std\n    return tl.sqrt(var)\n\ndef gelu_std(input: Tensor, dim=None, keepdim=False, correction=1, approximate='none', out=None) -> Tensor:\n    assert approximate in ['none', 'tanh']\n    assert input.is_contiguous()\n\n    if dim is None or len(dim) == input.ndim:\n        # Compute GELU over all elements\n        if approximate == 'none':\n            input = gelu_cdf(input)\n        else:\n            input = gelu_approx(input)\n        n_elements = input.numel()\n        input = input.reshape(-1)\n        std = std_func(input, None, n_elements, n_elements, 1, 0, 1, approximate, correction)\n        if not keepdim:\n            input = input.reshape(input.shape[:-1] + (1,) * input.ndim)\n        return std\n    else:\n        # Compute GELU over specified dimensions and then std\n        dim = dim if isinstance(dim, tuple) else (dim,)\n        input_gelu = input.clone()\n        for d in dim:\n            assert d >= -input.ndim and d < input.ndim, \"Invalid dim\"\n        for d in dim:\n            input_gelu = input_gelu.squeeze(d)\n        if approximate == 'none':\n            input_gelu = gelu_cdf(input_gelu)\n        else:\n            input_gelu = gelu_approx(input_gelu)\n        std = torch.std(input_gelu, dim=dim, unbiased=True, keepdim=keepdim, correction=correction)\n        return std\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs the same operation as torch.permute, which rearranges the dimensions of the input tensor according to the specified dims, but all output tensors are freshly created instead of aliasing the input.\nWrapper Entry Information: torch.permute_copy(input, dims) -> Tensor\nother: Freshly created output tensors mean that the function does not create views, so changes to the output will not affect the input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _permute_copy(input, dims):\n    # Get the shape of the input tensor\n    shape = input.shape\n    # Create a new tuple of dimensions based on the 'dims' parameter\n    new_dims = tuple(shape[i] for i in dims)\n    # Reshape the input tensor to the new dimensions\n    return input.reshape(new_dims)\n\ndef torch_permute_copy(input, dims):\n    # Call the Triton kernel _permute_copy\n    return _permute_copy(input, dims)\n\n# Test the wrapper function with provided inputs\ndef test_wrapper(func_name, *, num_args, tu_options=None):\n    args = [rand_strided((3, 4, 5), s32) for _ in range(num_args)]\n    out_torch = getattr(torch, func_name)(*args)\n    out_triton = eval(func_name)(*args)\n    assert_close(out_torch, out_triton)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the logarithmic derivative of the gamma function on input. This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nWrapper Entry Information: digamma(input, *, out=None) -> Tensor; Args: input (Tensor): the tensor to compute the digamma function on; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\digamma(x) = \\frac{d}{dx} \\ln\\left(\\Gamma\\left(x\\right)\\right) = \\frac{\\Gamma'(x)}{\\Gamma(x)}\nother: This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef digamma_triton(x):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Compute the logarithm of the absolute value of the input\n    log_abs_x = tl.log(tl.abs(x_fp32))\n    # Compute the psi function using a series expansion\n    z = log_abs_x + 0.5\n    s = tl.where(x_fp32 > 0, log_abs_x, 0.)\n    z = tl.where(x_fp32 > 0, z, 0.)\n    s += tl.math.lgamma(z + 1.)\n    s += (z - 0.5) * (1. + (1. + 4. * z) * tl.math.rsqrt(16. * z * z + 1.))\n    s += tl.where(x_fp32 > 0, 0., -tl.math.log(-x_fp32) - 1.44269504))\n    return s\n\ndef digamma(input, *, out=None):\n    return digamma_triton(input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by another tensor or number. The softmax function re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nWrapper Entry Information: def softmax_mul(input, other, dim, dtype=None, out=None) -> Tensor: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by other. Args: input (Tensor): The input tensor to apply softmax on. other (Tensor or Number): The tensor or number to multiply with the softmaxed values. dim (int): The dimension along which softmax will be computed. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is cast to dtype before the operation. Default is None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{Softmax}(\\text{input}_i) \\times \\text{other}_i\n    \\text{Softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\nother: Softmax re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_mul_kernel(input, other, output, M, stride, K, CACHE_KEY_M, CACHE_KEY_K: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n    start_m = tl.program_id(0)\n    off_hz = tl.program_id(1)\n    if BLOCK_N == 1:\n        offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n        offs_n = tl.arange(0, BLOCK_N)\n        other_offs = offs_m\n    else:\n        offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n        offs_n = tl.arange(0, BLOCK_N)\n        other_offs = offs_m[:, None] * stride + offs_n[None, :]\n    input_ptrs = input + other_offs\n    input_ptrs += off_hz * K\n    other_ptrs = other + other_offs\n    if dtype == torch.float16:\n        input_vals = tl.load(input_ptrs, mask=(offs_m[:, None] < M) & (offs_n[None, :] < K), other=0.0).to(tl.float32)\n        other_vals = tl.load(other_ptrs, mask=(offs_m[:, None] < M) & (offs_n[None, :] < K), other=0.0).to(tl.float32)\n    else:\n        input_vals = tl.load(input_ptrs, mask=(offs_m[:, None] < M) & (offs_n[None, :] < K), other=0.0)\n        other_vals = tl.load(other_ptrs, mask=(offs_m[:, None] < M) & (offs_n[None, :] < K), other=0.0)\n    max_vals = tl.max(input_vals, axis=1)\n    exp_input = tl.exp(input_vals - max_vals[:, None])\n    sum_input = tl.sum(exp_input, axis=1)\n    softmax_output = exp_input / sum_input[:, None]\n    output_ptrs = output + other_offs\n    output_ptrs += off_hz * K\n    tl.store(output_ptrs, softmax_output * other_vals, mask=(offs_m[:, None] < M) & (offs_n[None, :] < K))\n\ndef softmax_mul(input, other, dim, dtype=None, out=None) -> torch.Tensor:\n    if dtype is None:\n        dtype = input.dtype\n    if out is None:\n        out = torch.empty_like(input, dtype=dtype)\n    assert input.dim() >= 2, \"Input tensor must have at least 2 dimensions\"\n    assert other.dim() >= 2, \"Other tensor must have at least 2 dimensions\"\n    assert input.shape == other.shape, \"Input and other tensor must have the same shape\"\n    assert dim >= -input.ndim and dim < input.ndim, \"Invalid dim\"\n    N = 1\n    M = 1\n    for i in range(0, dim):\n        N *= input.shape[i]\n        M *= other.shape[i]\n    for i in range(dim + 1, input.ndim):\n        N *= input.shape[i]\n    BLOCK_M = 128\n    BLOCK_N = 128\n    if N <= 128:\n        BLOCK_M = N\n        BLOCK_N = 1\n    if N > 128:\n        BLOCK_N = 128\n    if N <= 64:\n        BLOCK_M = N\n        BLOCK_N = 1\n    if N > 2048:\n        BLOCK_M = 128\n    if N <= 2048:\n        BLOCK_M = 256\n    if N > 4096:\n        BLOCK_M = 512\n    if N <= 4096:\n        BLOCK_M = 1024\n    if N > 8192:\n        BLOCK_M = 2048\n    grid = (triton.cdiv(M, BLOCK_M), triton.cdiv(N, BLOCK_N))\n    CACHE_KEY_M = M\n    CACHE_KEY_K = N\n    softmax_mul_kernel[grid](input, other, out, M, N, N, CACHE_KEY_M, CACHE_KEY_K, BLOCK_M, BLOCK_N)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND operation between two tensors and then applies a Binomial distribution sampling based on the resulting tensor's values. First, it computes the bitwise AND of `input` and `other`. Then, the result is used as input for the Binomial distribution, with each element representing the number of trials with the probability specified in `probs` or `logits`.\nWrapper Entry Information: def bitwise_and_binomial(input: torch.Tensor, other: torch.Tensor, total_count: torch.Tensor, probs: torch.Tensor = None, logits: torch.Tensor = None) -> torch.Tensor: input (Tensor): The first input tensor of integral or Boolean type. other (Tensor): The second input tensor of integral or Boolean type. total_count (Tensor): Number of Bernoulli trials, must be broadcastable with `probs` or `logits`. probs (Tensor, optional): Event probabilities. Only one of `probs` or `logits` should be provided. logits (Tensor, optional): Event log-odds.\nMath: \\text{output} = \\text{Binomial}( \\text{bitwise\\_and}(\\text{input}, \\text{other}))\nother: The function performs a bitwise AND on the input tensors and uses the result to conduct Binomial sampling with specified probabilities or logits. The `total_count` indicates the number of Bernoulli trials, and either `probs` or `logits` must be provided for the Binomial distribution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _bitwise_and_binomial_kernel(probs, total_count, output):\n    # Sample from binomial distribution with parameters p=probs and n=total_count\n    return tl.sample_binomial(probs, total_count, output)\n\ndef bitwise_and_binomial(input: torch.Tensor, other: torch.Tensor, total_count: torch.Tensor, probs: torch.Tensor = None, logits: torch.Tensor = None) -> torch.Tensor:\n    # Check if both probs and logits are provided, which is an error condition\n    if probs is not None and logits is not None:\n        raise ValueError(\"At most one of `probs` or `logits` may be provided\")\n    \n    # Ensure total_count is broadcastable with probs or logits\n    assert total_count.shape == probs.shape or total_count.shape == logits.shape\n    \n    # Apply bitwise AND operation on input and other\n    input = input.bitwise_and(other)\n    \n    if probs is not None:\n        # Sample from binomial distribution using probs and total_count\n        return torch.distributions.binomial.Binomial(total_count, probs).sample()\n    elif logits is not None:\n        # Sample from binomial distribution using logits and total_count\n        return torch.distributions.binomial.Binomial(total_count, logits=logits).sample()\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the conversion of angles from radians to degrees and calculates the square root for each element in the input tensor. It returns a tuple where the first element is the converted degrees and the second is the square root of the input tensor elements.\nWrapper Entry Information: def rad2deg_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor with angles in radians.\nMath: \\text{out}_{i} = \\text{input}_{i} \\times (180.0 / \\pi) \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function uses torch's rad2deg and sqrt functions to perform the operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom typing import Tuple\n\n@triton.jit\ndef _rad2deg_sqrt_triton(input):\n    out1 = input * (180.0 / 3.141592653589793)\n    out2 = tl.sqrt(input)\n    return out1, out2\n\ndef rad2deg_sqrt_triton(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    if not isinstance(input, torch.Tensor):\n        input = torch.tensor(input)\n    if input.is_floating_point():\n        out1, out2 = _rad2deg_sqrt_triton(input)\n        return out1, out2\n    else:\n        raise ValueError(\"Input must be a floating-point tensor\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Bessel function of the first kind of order 1 for each element of the input tensor.\nWrapper Entry Information: bessel_j1(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Bessel function of the first kind of order :math:`1`.\nother: The function supports an optional output tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef bessel_j1_kernel(x, *, out=None):\n    # Convert input to float32\n    x = x.to(tl.float32)\n    # Compute Bessel function of the first kind of order 1\n    return tl.math.j1(x)\n\ndef bessel_j1(input, *, out=None):\n    # Wrapper function for Bessel function of the first kind of order 1\n    if out is None:\n        return bessel_j1_kernel(input)\n    else:\n        return bessel_j1_kernel(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the LU decomposition with partial pivoting of a matrix. If pivot=True, returns a permutation matrix P, a lower triangular matrix L, and an upper triangular matrix U such that A = PLU. If pivot=False and A is on GPU, computes the LU decomposition without pivoting, returning empty P, L and U such that A = LU. Supports float, double, cfloat, and cdouble dtypes, as well as batches of matrices. Outputs have the same batch dimensions as input.\nWrapper Entry Information: lu(A, *, pivot=True, out=None) -> (Tensor, Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting or no pivoting. Default: `True`. Keyword args: out (tuple, optional): output tuple of three tensors. Ignored if `None`. Default: `None`.\nMath: A = PLU where P is a permutation matrix, L is lower triangular with ones on the diagonal, U is upper triangular. If pivot=False, A = LU.\nother: LU decomposition is not unique; different platforms may yield different decompositions. Gradient computations are supported only if the matrix is full-rank.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _lu_no_pivoting_fwd_triton(\n    A,\n    L,\n    U,\n    batch,\n    m,\n    n,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    i_block = pid * BLOCK_SIZE\n    i_row = i_block + tl.arange(0, BLOCK_SIZE)\n    A = A + (i_row[:, None] * m + tl.arange(0, BLOCK_SIZE)[None, :])\n    L = L + (i_row[:, None] * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)[None, :])\n    U = U + (i_row[:, None] * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)[None, :])\n    mask_l = i_row[:, None] >= tl.arange(0, BLOCK_SIZE)[None, :]\n    mask_u = i_row[:, None] <= tl.arange(0, BLOCK_SIZE)[None, :]\n    a = tl.load(A, mask=(i_row[:, None] < m) & (tl.arange(0, BLOCK_SIZE)[None, :] < n), other=0.0)\n    zero = tl.zeros((1, 1), dtype=a.dtype)\n    for k in range(BLOCK_SIZE):\n        l = tl.where(mask_l, tl.sum(a / a[k, k] * tl.where(mask_u, U[k, k], zero)), zero)\n        tl.store(L, l, mask=mask_l)\n        u = tl.where(mask_u, a - tl.dot(L, U, allow_tf32=False), zero)\n        tl.store(U, u, mask=mask_u)\n\ndef _lu_no_pivoting_fwd(A):\n    batch, m, n = A.shape\n    L = torch.empty(batch, m, m, dtype=A.dtype, device=A.device)\n    U = torch.empty(batch, m, n, dtype=A.dtype, device=A.device)\n    if m <= 128:\n        BLOCK_SIZE = m\n    else:\n        BLOCK_SIZE = 128\n    grid = (triton.cdiv(m, BLOCK_SIZE),)\n    _lu_no_pivoting_fwd_triton[grid](\n        A,\n        L,\n        U,\n        batch,\n        m,\n        n,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return L, U\n\ndef lu(A, *, pivot=True, out=None):\n    if pivot:\n        return torch.lu(A)\n    else:\n        assert A.is_cuda, \"Input must be a CUDA tensor\"\n        if A.ndim == 2:\n            return _lu_no_pivoting_fwd(A)\n        else:\n            batch, m, n = A.shape\n            A = A.view(batch * m, n)\n            L, U = _lu_no_pivoting_fwd(A)\n            L = L.view(batch, m, m)\n            U = U.view(batch, m, n)\n            return L, torch.empty(0), U\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to each element in the input tensor, followed by computing the minimum value along the specified dimension. If no dimension is specified, it computes the minimum over all elements. The function supports two methods for computing GELU: exact ('none') and an approximation using 'tanh'.\nWrapper Entry Information: gelu_min(input, approximate='none', dim=None, keepdim=False, out=None) -> Tensor or (Tensor, LongTensor)\nMath: When approximate is 'none': GELU(x) = x * Φ(x), where Φ(x) is the Cumulative Distribution Function for Gaussian Distribution.\nWhen approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3)))\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.libdevice import erf, exp, pow, tanh\n\n@triton.jit\ndef tanh(x):\n    \"\"\"Tanh activation function\"\"\"\n    return 2 * tl.sigmoid(2 * x) - 1\n\n@triton.jit\ndef gelu(x, approximate='none'):\n    \"\"\"Gaussian Error Linear Units (GELU)\"\"\"\n    if approximate == 'none':\n        return x * 0.5 * (1.0 + erf(x / 1.41421356237))\n    elif approximate == 'tanh':\n        return 0.5 * x * (1 + tanh(tl.sqrt(2.0 / 3.141592653589793) * (x + 0.044715 * pow(x, 3)))\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n\n@triton.jit\ndef minimum(a, b):\n    \"\"\"Minimum value between a and b\"\"\"\n    return tl.math.min(a, b)\n\n@triton.jit\ndef min2(a, dim=None, keepdim=False):\n    \"\"\"Minimum value along specified dimension\"\"\"\n    return tl.reduce(a, dim, minimum, keepdim)\n\ndef gelu_min(input, approximate='none', dim=None, keepdim=False, out=None):\n    if dim is None:\n        input = input.flatten()\n        dim = 0\n    out = min2(gelu(input, approximate), dim, keepdim)\n    if isinstance(out, tuple):\n        out = type(out)(gelu(out[0], approximate), out[1])\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies an affine transformation to the input tensor followed by grid sampling. It first generates a 2D flow field (sampling grid) based on the input affine matrix `theta` using `affine_grid`. Then it uses the generated grid to sample from the input image using `grid_sample`. It supports multiple interpolation modes (such as 'bilinear', 'nearest', and 'bicubic'), different padding modes ('zeros', 'border', 'reflection'), and has an option to align corners for transformation consistency.\nWrapper Entry Information: def grid_sample_with_affine(input: torch.Tensor, theta: torch.Tensor, size: torch.Size, mode: str = 'bilinear', padding_mode: str = 'zeros', align_corners: bool = False) -> torch.Tensor: Input tensor of shape (N, C, H_{in}, W_{in}) (4D). Affine transformation matrix of shape (N, 2, 3) for 2D transformations. Target output image size as a 4D size (N, C, H_{out}, W_{out}). Interpolation mode to calculate output values, 'bilinear', 'nearest', or 'bicubic'. Default is 'bilinear'. Defines how to handle grid values outside the input range. Options: 'zeros', 'border', 'reflection'. Default is 'zeros'. If True, aligns the grid to corner pixels for transformation consistency. Default is False.\nother: The function generates an affine transformation grid and applies grid sampling to the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra.cuda.libdevice import rsqrt\nfrom .utils import calculate_settings\n\n@triton.jit\ndef affine_grid(theta, size, align_corners):\n    grid = tl.zeros((size[0], size[1], size[2], 3), dtype=tl.float32)\n    theta = theta.to(tl.float32)\n    x = tl.arange(0, size[3]).to(tl.float32)\n    y = tl.arange(0, size[2]).to(tl.float32)\n    if not align_corners:\n        x = (x + 0.5) / size[3] * 2 - 1\n        y = (y + 0.5) / size[2] * 2 - 1\n    else:\n        x = x / (size[3] - 1) * 2 - 1\n        y = y / (size[2] - 1) * 2 - 1\n    grid_x = tl.broadcast_to(tl.reshape(x, [1, 1, size[3]], grid.dtype), [size[2], size[3], 3])\n    grid_y = tl.broadcast_to(tl.reshape(y, [1, size[2], 1], grid.dtype), [size[2], size[3], 3])\n    grid = grid + grid_x\n    grid = grid + grid_y\n    theta = tl.reshape(theta, [size[0], size[1], 6])\n    N = size[0] * size[1]\n    batch_index = tl.arange(0, N) // size[1]\n    theta_batch = tl.gather(theta, batch_index, 0)\n    V = tl.matmul(theta_batch, grid)\n    return V\n\n@triton.jit\ndef trilinear_interpolate(\n        img,\n        x,\n        y,\n        z,\n        padding_mode: str,\n        C: int,\n        H: int,\n        W: int,\n        D: int,\n        grad_scale: float,\n        mode: str,\n):\n    x0 = tl.floor(x).to(tl.int32)\n    y0 = tl.floor(y).to(tl.int32)\n    z0 = tl.floor(z).to(tl.int32)\n    x1 = x0 + 1\n    y1 = y0 + 1\n    z1 = z0 + 1\n    x0 = tl.maximum(x0, 0)\n    y0 = tl.maximum(y0, 0)\n    z0 = tl.maximum(z0, 0)\n    x1 = tl.minimum(x1, W - 1)\n    y1 = tl.minimum(y1, H - 1)\n    z1 = tl.minimum(z1, D - 1)\n    w_x = x - x0\n    w_y = y - y0\n    w_z = z - z0\n    if padding_mode == 'zeros':\n        w_x = tl.where(x0 < W, w_x, 0)\n        w_y = tl.where(y0 < H, w_y, 0)\n        w_z = tl.where(z0 < D, w_z, 0)\n    elif padding_mode == 'border':\n        w_x = tl.minimum(w_x, 1)\n        w_x = tl.maximum(w_x, 0)\n        w_y = tl.minimum(w_y, 1)\n        w_y = tl.maximum(w_y, 0)\n        w_z = tl.minimum(w_z, 1)\n        w_z = tl.maximum(w_z, 0)\n    elif padding_mode == 'reflection':\n        w_x = tl.where(x0 < W, w_x, 2 * (W - 1 - x0) - w_x)\n        w_y = tl.where(y0 < H, w_y, 2 * (H - 1 - y0) - w_y)\n        w_z = tl.where(z0 < D, w_z, 2 * (D - 1 - z0) - w_z)\n        w_x = tl.minimum(w_x, 1)\n        w_x = tl.maximum(w_x, 0)\n        w_y = tl.minimum(w_y, 1)\n        w_y = tl.maximum(w_y, 0)\n        w_z = tl.minimum(w_z, 1)\n        w_z = tl.maximum(w_z, 0)\n    w_x = w_x[:, None]\n    w_y = w_y[:, None]\n    w_z = w_z[:, None]\n    i_x0 = x0 + W * y0 + W * H * z0\n    i_x1 = x1 + W * y0 + W * H * z0\n    i_y0 = x0 + W * y0 + W * H * z1\n    i_y1 = x0 + W * y1 + W * H * z0\n    i_z0 = x0 + W * y0 + W * H * z0\n    i_z1 = x0 + W * y1 + W * H * z1\n    img0 = tl.load(img + i_x0 + tl.arange(0, C), mask=i_x0 < W * H * D, other=0)\n    img1 = tl.load(img + i_x1 + tl.arange(0, C), mask=i_x1 < W * H * D, other=0)\n    img2 = tl.load(img + i_y0 + tl.arange(0, C), mask=i_y0 < W * H * D, other=0)\n    img3 = tl.load(img + i_y1 + tl.arange(0, C), mask=i_y1 < W * H * D, other=0)\n    img4 = tl.load(img + i_z0 + tl.arange(0, C), mask=i_z0 < W * H * D, other=0)\n    img5 = tl.load(img + i_z1 + tl.arange(0, C), mask=i_z1 < W * H * D, other=0)\n    img0 = img0 * (1 - w_z) + img4 * w_z\n    img1 = img1 * (1 - w_z) + img5 * w_z\n    img2 = img2 * (1 - w_z) + img6 * w_z\n    img3 = img3 * (1 - w_z) + img7 * w_z\n    img0 = img0 * (1 - w_y) + img2 * w_y\n    img1 = img1 * (1 - w_y) + img3 * w_y\n    if mode == 'bilinear':\n        img0 = img0 * (1 - w_x) + img1 * w_x\n        img1 = img2 * (1 - w_x) + img3 * w_x\n    return img0 + grad_scale, img1 + grad_scale\n\n@triton.jit\ndef trilinear_sampler(img, grid, padding_mode, align_corners, C, H, W, D, mode, grad_scale):\n    if not align_corners:\n        grid = grid / (D - 1) * 2 - 1\n    x = grid[:, :, 0]\n    y = grid[:, :, 1]\n    z = grid[:, :, 2]\n    return trilinear_interpolate(img, x, y, z, padding_mode, C, H, W, D, grad_scale, mode)\n\n@triton.jit\ndef triton_grid_sample(input, grid, theta, size, padding_mode, align_corners, mode, grad_scale):\n    N = size[0] * size[1]\n    C = input.shape[1]\n    H = input.shape[2]\n    W = input.shape[3]\n    D = grid.shape[3]\n    input = input.reshape(N, C, H, W)\n    grid = grid.reshape(N, H, W, D)\n    output = trilinear_sampler(input, grid, padding_mode, align_corners, C, H, W, D, mode, grad_scale)\n    output = output.reshape(size)\n    return output\n\ndef grid_sample_with_affine_triton(input: torch.Tensor, theta: torch.Tensor, size: torch.Size, mode: str = 'bilinear', padding_mode: str = 'zeros', align_corners: bool = False) -> torch.Tensor:\n    grid = affine_grid(theta, size, align_corners)\n    return triton_grid_sample(input, grid, theta, size, padding_mode, align_corners, mode, 0)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Moore-Penrose pseudoinverse of a matrix using Singular Value Decomposition (SVD). It decomposes the input matrix A into its singular value components, inverts the non-zero singular values above a certain threshold to avoid numerical instability, and reconstructs the pseudoinverse using these components. Supports input of float, double, cfloat, and cdouble dtypes, and can handle batches of matrices.\nWrapper Entry Information: def pseudoinverse_svd(A, *, full_matrices=True, rcond=1e-15, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Input tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n\nKeyword args:\n    full_matrices (bool, optional): If `True` (default), compute the full SVD. If `False`, compute the reduced SVD.\n    rcond (float, optional): Relative condition number threshold. Singular values smaller than `rcond * largest_singular_value` are set to zero. Default: `1e-15`.\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A^{+} = V^{\\mathrm{H}} \\Sigma^{+} U^{\\mathrm{H}}; \\sigma_i^{+} = \\begin{cases} \\dfrac{1}{\\sigma_i}, & \\text{if } \\sigma_i > \\text{rcond} \\times \\sigma_{\\max} \\\\ 0, & \\text{otherwise} \\end{cases}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Handles batches of matrices\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _pinv_svd_dag_cuda(\n    U, S, V, rcond, m, n, bdim, full_matrices, swap_uv: tl.constexpr, BLOCK: tl.constexpr\n):\n    pid = tl.program_id(0)\n    if bdim > 1:\n        pid += tl.program_id(1) * tl.num_programs(0)\n        bdim = 1\n\n    col_offset = pid * BLOCK\n    cols = tl.arange(0, BLOCK)\n    mask = cols < n\n\n    if full_matrices:\n        row_offset = tl.arange(0, BLOCK)\n        rows = tl.arange(0, BLOCK)\n        full_mask = rows[:, None] < m\n        mask = mask[None, :] & full_mask\n    else:\n        row_offset = col_offset\n\n    u = tl.load(U + col_offset * m + row_offset, mask, other=0.0).to(tl.float32)\n    if not swap_uv:\n        v = tl.load(V + col_offset * m + row_offset, mask, other=0.0).to(tl.float32)\n    else:\n        v = tl.load(V + row_offset * n + col_offset, mask, other=0.0).to(tl.float32)\n\n    s = tl.load(S + col_offset + tl.arange(0, BLOCK), mask=cols < n, other=0.0).to(\n        tl.float32\n    )\n    s = tl.where(tl.abs(s) > rcond, 1.0 / s, 0.0)\n\n    s = s.to(v.dtype)\n    v = v.to(tl.float32)\n    u = u.to(tl.float32)\n\n    w = u * s\n    if swap_uv:\n        w = tl.dot(w, v, allow_tf32=False).to(v.dtype)\n    else:\n        w = tl.dot(w, v, allow_tf32=False).to(u.dtype)\n\n    off = (col_offset + tl.arange(0, BLOCK)[None, :]) * m + (row_offset + tl.arange(0, BLOCK)[:, None])\n    mask = (col_offset + tl.arange(0, BLOCK)[None, :]) < n\n    mask &= (row_offset + tl.arange(0, BLOCK)[:, None]) < m\n\n    tl.store(U + off, w, mask=mask)\n\ndef _pinv_svd_cuda(a, rcond, full_matrices, out):\n    a = a.contiguous()\n    if a.ndim == 2:\n        a = a.unsqueeze(0)\n    bdim = a.ndim - 2\n    a = a.view(a.shape[:bdim] + (a.shape[-2] * a.shape[-1],))\n    m, n = a.shape[-2:]\n    s = min(m, n)\n    out = torch.empty(a.shape[-2:] if out is None else out.shape, device=a.device, dtype=a.dtype)\n    full_matrices = full_matrices and m >= n\n\n    if a.dtype in (torch.cfloat, torch.cdouble):\n        a = torch.linalg.cholesky(a).to(torch.float32)\n        a = torch.triangular_solve(a, torch.conj(a).transpose(-2, -1), upper=True)[0]\n    else:\n        a, _, _ = torch.svd(a, full_matrices=False)\n\n    if a.dtype in (torch.float32, torch.float64):\n        s = torch.full((s,), 1.0, device=a.device, dtype=a.dtype)\n        s = torch.index_fill_(s, 0, 0, 0)\n    else:\n        s = torch.full((s,), 1.0 + 0j, device=a.device, dtype=a.dtype)\n        s = torch.index_fill_(s, 0, 0 + 0j, 0 + 0j)\n\n    rcond = rcond * s[0]\n    s = torch.where(tl.abs(s) > rcond, 1.0 / s, 0.0)\n\n    if a.dtype in (torch.float32, torch.float64):\n        out = torch.diag_embed(s)\n    else:\n        out = torch.diag_embed(s.to(torch.complex64))\n    return out.view(a.shape[:bdim] + out.shape[-2:])\n\ndef pseudoinverse_svd(A, *, full_matrices=True, rcond=1e-15, out=None) -> Tensor:\n    if A.is_floating_point():\n        if A.is_cuda:\n            return _pinv_svd_cuda(A, rcond, full_matrices, out)\n        elif A.is_cpu:\n            raise NotImplementedError(\"SVD pseudoinverse is not supported on CPU.\")\n        else:\n            raise RuntimeError(\"Invalid device for tensor.\")\n    else:\n        raise RuntimeError(\"Pseudoinverse is only defined for floating point tensors.\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the exponential function to each element in the input tensor and then computes the mean value of the result along the specified dimension or over all elements if no dimension is specified.\nWrapper Entry Information: def exp_mean(input, dim=None, keepdim=False, dtype=None, out=None) -> Tensor\nMath: The combined operation is defined as: out = mean(e^{input}) where the exponential function is defined as: y_{i} = e^{x_{i}}\nother: The function first applies the exponential function to each element of the input tensor and then computes the mean of these exponential values. The function allows specifying dimensions to reduce, whether to keep dimensions, and the data type of the output.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef exp_mean_kernel(x, mean, N, stride, BLOCK_SIZE: tl.constexpr):\n    # Get the index of the current thread\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n\n    # Load elements from global memory\n    x_block_ptr = x + offsets\n    x_values = tl.load(x_block_ptr, mask=mask, other=0.0)\n\n    # Compute exponential values\n    x_exp = tl.exp(x_values)\n\n    # Compute the sum of exponential values\n    x_sum = tl.sum(x_exp, axis=0)\n\n    # Write the sum to global memory\n    if pid == 0:\n        mean[0] = x_sum\n\n    # Load the sum again (to avoid bank conflict)\n    x_sum = tl.load(mean)\n\n    # Compute the mean\n    mean_value = x_sum / N\n    tl.store(mean + stride, mean_value)\n\ndef exp_mean(input, dim=None, keepdim=False, dtype=None, out=None) -> torch.Tensor:\n    if dtype is None:\n        dtype = input.dtype\n\n    if out is None:\n        out = torch.empty(input.shape, dtype=dtype, device=input.device)\n    elif out.dtype != dtype:\n        raise RuntimeError(\"exp_mean: expected dtype to be {} but got {}\".format(dtype, out.dtype))\n\n    if dim is None or len(dim) == input.ndim:\n        input = input.flatten()\n        out = out.flatten()\n        N = input.numel()\n        mean = torch.empty([1], dtype=dtype, device=input.device)\n        grid = lambda meta: (1,)\n    else:\n        shape = list(input.shape)\n        dim = [d % input.ndim for d in dim]\n        input = dim_compress(input, dim)\n        N = 1\n        for i in dim:\n            N *= shape[i]\n            shape[i] = 1\n        out = out.view(shape)\n        mean = torch.empty(shape, dtype=dtype, device=input.device)\n        grid = lambda meta: (triton.cdiv(N, meta[\"BLOCK_SIZE\"]),)\n\n    exp_mean_kernel[grid](input, mean, N, out.numel())\n    if not keepdim:\n        out = out.squeeze(dim)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a rank-k approximation of a matrix using its Singular Value Decomposition (SVD). The function retains the top-k singular values and corresponding singular vectors from the SVD of A to form the approximation Ak. This low-rank approximation minimizes the Frobenius norm of the difference between A and Ak among all rank-k matrices. Supports input of float, double, cfloat, and cdouble dtypes, and batches of matrices.\nWrapper Entry Information: def low_rank_svd_approximation(A, k, *, full_matrices=True, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    k (int): Rank of the approximation (must satisfy `1 <= k <= min(m, n)`).\n    full_matrices (bool, optional): Controls whether to compute the full or reduced SVD. Default: `True`.\n\nKeyword args:\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A \\approx A_k = U_k \\Sigma_k V_k^{\\text{H}}; U_k \\in \\mathbb{K}^{m \\times k}; \\Sigma_k \\in \\mathbb{R}^{k \\times k}; V_k^{\\text{H}} \\in \\mathbb{K}^{k \\times n}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Batches of matrices are supported.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _low_rank_svd_approximation(\n    A,\n    U,\n    S,\n    V,\n    stride_a_batch,\n    stride_a_m,\n    stride_a_n,\n    stride_u_batch,\n    stride_u_m,\n    stride_u_k,\n    stride_s_batch,\n    stride_s_k,\n    stride_v_batch,\n    stride_v_k,\n    stride_v_n,\n    k,\n    full_matrices: tl.constexpr,\n    batch_shape,\n    m,\n    n,\n    bmm_m,\n    bmm_k,\n    bmm_n,\n    dot_k,\n    dot_n,\n    dot_m,\n    output_dtype: tl.constexpr,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n):\n    pid_m = tl.program_id(axis=0)\n    pid_batch = tl.program_id(axis=1)\n    offset_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offset_n = tl.arange(0, BLOCK_SIZE_N)\n    offset_k = tl.arange(0, BLOCK_SIZE_K)\n    batch_offset_a = pid_batch * stride_a_batch\n    batch_offset_u = pid_batch * stride_u_batch\n    batch_offset_s = pid_batch * stride_s_batch\n    batch_offset_v = pid_batch * stride_v_batch\n    offset_mask_m = offset_m < m\n    offset_mask_n = offset_n < n\n    offset_mask_k = offset_k < k\n\n    a_ptrs = (\n        A\n        + batch_offset_a\n        + (offset_m[:, None] * stride_a_m + offset_k[None, :] * stride_a_n)\n    )\n    u_ptrs = (\n        U\n        + batch_offset_u\n        + (offset_m[:, None] * stride_u_m + offset_k[None, :] * stride_u_k)\n    )\n    s_ptrs = S + batch_offset_s + offset_k\n    v_ptrs = (\n        V\n        + batch_offset_v\n        + (offset_k[:, None] * stride_v_k + offset_n[None, :] * stride_v_n)\n    )\n\n    if full_matrices:\n        A = tl.load(a_ptrs, mask=offset_mask_m[:, None] & offset_mask_k[None, :])\n        U = tl.load(u_ptrs, mask=offset_mask_m[:, None] & offset_mask_k[None, :])\n        V = tl.load(v_ptrs, mask=offset_mask_k[:, None] & offset_mask_n[None, :])\n    else:\n        A = tl.load(a_ptrs, mask=offset_mask_m[:, None] & offset_mask_k[None, :])\n        U = tl.load(u_ptrs, mask=offset_mask_m[:, None] & offset_mask_k[None, :])\n        V = tl.load(v_ptrs, mask=offset_mask_k[:, None] & offset_mask_n[None, :])\n\n    Sigma = tl.load(s_ptrs, mask=offset_mask_k).to(tl.float32)\n    zero = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    A = A.to(output_dtype)\n    Sigma = Sigma.to(output_dtype)\n    U = U.to(output_dtype)\n    V = V.to(output_dtype)\n\n    U, Sigma, V = tl.svd(A, full_matrices=full_matrices)\n\n    U = U.to(output_dtype)\n    Sigma = Sigma.to(output_dtype)\n    V = V.to(output_dtype)\n\n    for i in range(0, tl.cdiv(n, BLOCK_SIZE_N)):\n        v_chunk_ptrs = (\n            V\n            + batch_offset_v\n            + (offset_k[:, None] * stride_v_k + (offset_n + i * BLOCK_SIZE_N)[None, :] * stride_v_n)\n        )\n        v_chunk = tl.load(v_chunk_ptrs, mask=offset_mask_k[:, None] & ((offset_n + i * BLOCK_SIZE_N)[None, :] < n))\n        zero[:, i * BLOCK_SIZE_N:(i + 1) * BLOCK_SIZE_N] = v_chunk\n    V = zero\n\n    S = Sigma\n\n    tl.store(u_ptrs, U, mask=offset_mask_m[:, None] & offset_mask_k[None, :])\n    tl.store(s_ptrs, S, mask=offset_mask_k)\n    tl.store(v_ptrs, V, mask=offset_mask_k[:, None] & offset_mask_n[None, :])\n\n\ndef low_rank_svd_approximation(A, k, *, full_matrices=True, out=None) -> torch.Tensor:\n    batch_shape, m, n = A.shape\n    batch_dim = batch_shape.numel()\n    A = A.reshape(batch_dim, m, n)\n    if out is None:\n        U = torch.empty_like(A, dtype=A.dtype)\n        S = torch.empty((batch_dim, k), dtype=torch.float32, device=A.device)\n        V = torch.empty_like(A, dtype=A.dtype)\n    else:\n        U, S, V = out\n    bmm_m, bmm_k = (1, k) if full_matrices else (m, k)\n    bmm_k, bmm_n = k, n\n    dot_k, dot_n = k, 1\n    dot_m, dot_k = 1, k\n    _low_rank_svd_approximation[(batch_dim,)](\n        A,\n        U,\n        S,\n        V,\n        A.stride(0),\n        A.stride(1),\n        A.stride(2),\n        U.stride(0),\n        U.stride(1),\n        U.stride(2),\n        S.stride(0),\n        S.stride(1),\n        V.stride(0),\n        V.stride(1),\n        V.stride(2),\n        k,\n        full_matrices,\n        batch_shape,\n        m,\n        n,\n        bmm_m,\n        bmm_k,\n        bmm_n,\n        dot_k,\n        dot_n,\n        dot_m,\n        A.dtype,\n        BLOCK_SIZE_M=triton.next_power_of_2(m),\n        BLOCK_SIZE_N=triton.next_power_of_2(n),\n        BLOCK_SIZE_K=triton.next_power_of_2(k),\n        num_warps=8,\n    )\n    return U, S, V\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the minimum value of each row of the input tensor in the given dimension dim, along with the index location of each minimum value found. If keepdim is True, the output tensors retain the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned. The function can also compare two tensors element-wise and return a tensor with the minimum values.\nWrapper Entry Information: min(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) Args: input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Keyword args: out (tuple, optional): the tuple of two output tensors (min, min_indices)\nother: If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_func(x, y):\n    return tl.minimum(x, y)\n\n@triton.jit\ndef min_dim(x, dim):\n    return tl.min(x, dim)\n\n@triton.jit\ndef min_keepdim(x, dim, keepdim):\n    return tl.min(x, dim, keepdim)\n\ndef min(input, dim, keepdim=False, *, out=None):\n    if isinstance(input, torch.Tensor) and isinstance(other, torch.Tensor):\n        return min_func(input, other)\n    elif isinstance(input, torch.Tensor):\n        return min_dim(input, dim)\n    elif isinstance(keepdim, bool):\n        return min_keepdim(input, dim, keepdim)\n    else:\n        raise ValueError(\"Unsupported input types for min function\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a symmetric matrix multiplication by multiplying matrix `A` with its transpose, scales the result by `alpha`, adds it to matrix `C` scaled by `beta`, and returns the sum of the absolute values of the resulting matrix.\nWrapper Entry Information: symmetric_mm_and_abs_sum(A: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor\nArgs:\n    A (Tensor): Input matrix of shape `(n, m)` for which the symmetric product with its transpose is calculated.\n    C (Tensor): Matrix of the same shape as `alpha * torch.mm(A, A.T)` to accumulate the scaled result.\n    alpha (float): Scaling factor for the matrix product.\n    beta (float): Scaling factor for matrix `C`.\nReturns:\n    Tensor: Scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nMath: 1. `C = alpha * torch.mm(A, A.T) + beta * C`; 2. `asum = torch.sum(torch.abs(C))`\nother: Returns a scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _symmetric_matmul_and_abs_sum_kernel(\n    A,\n    C,\n    M,\n    N,\n    lda,\n    ldc,\n    alpha,\n    beta,\n    PLACEHOLDER_1,\n    PLACEHOLDER_2,\n    PLACEHOLDER_3,\n    PLACEHOLDER_4,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n):\n    pid_m = tl.program_id(0)\n    pid_n = tl.program_id(1)\n    m_offset = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)[:, None]\n    n_offset = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)[None, :]\n    A = A + (m_offset * lda + n_offset)\n    C = C + (m_offset * ldc + n_offset)\n    sum_ = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, tl.cdiv(N, BLOCK_SIZE_N)):\n        a = tl.load(A, mask=(m_offset < M) & (n_offset < N), other=0.0)\n        c = tl.load(C, mask=(m_offset < M) & (n_offset < N), other=0.0)\n        a = tl.trans(a)\n        c = tl.trans(c)\n        sum_ += alpha * tl.dot(a, a, allow_tf32=False) + beta * c\n        A += BLOCK_SIZE_N\n        C += BLOCK_SIZE_N\n    sum_ = tl.where((m_offset < M) & (n_offset < N), sum_, 0.0)\n    tl.store(C, sum_, mask=(m_offset < M) & (n_offset < N))\n\n\ndef triton_symmetric_mm_and_abs_sum(A, C, alpha, beta):\n    trans_a = torch.t(A)\n    out = torch.mm(trans_a, A)\n    out *= alpha\n    out = out.to(C.dtype)\n    orig_c = C.clone()\n    C *= beta\n    M, N = out.shape\n    asum = torch.abs(out + C).sum()\n    grid = lambda META: (\n        triton.cdiv(M, META[\"BLOCK_SIZE_M\"]),\n        triton.cdiv(N, META[\"BLOCK_SIZE_N\"]),\n    )\n    _symmetric_matmul_and_abs_sum_kernel[grid](\n        A,\n        C,\n        M,\n        N,\n        trans_a.stride(0),\n        C.stride(0),\n        alpha,\n        beta,\n        orig_c,\n        out,\n        asum,\n        trans_a,\n        BLOCK_SIZE_M=64,\n        BLOCK_SIZE_N=64,\n    )\n    asum += torch.abs(C - orig_c).sum()\n    return asum\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using LU decomposition. The function performs LU decomposition on a given square matrix A and calculates its determinant. It supports matrices over real or complex numbers and can handle batch dimensions. The determinant is computed as the product of the diagonal elements of the upper triangular matrix U from the LU decomposition, adjusted by the sign of the permutation matrix P if pivoting is used. The function assumes A is invertible and supports float, double, cfloat, and cdouble dtypes.\nWrapper Entry Information: determinant_lu(A, *, pivot=True, out=None) -> Tensor; A (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`. out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\det(A) = \\det(P) \\cdot \\prod_{i=1}^{n} U_{ii}; When pivot=False: \\det(A) = \\prod_{i=1}^{n} U_{ii}\nother: This method assumes that A is invertible. If A is singular, the determinant will be zero, and the function may return `inf` or `nan` due to division by zero or numerical instability.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _determinant_lu_triton(a, stride_za, stride_ma, stride_na, n, full_pivoting, **meta):\n    \"\"\"Compute the LU decomposition of a matrix.\"\"\"\n    # The computation is implemented in a single block to allow for shared memory usage.\n    pid = tl.program_id(0)\n    # a is of shape (batch, M, N)\n    batch = a.shape[0]\n    m = a.shape[1]\n    n = a.shape[2]\n    a = a.view(batch, m * n)\n    grid_m = (m + meta[\"BLOCK_SIZE_M\"] - 1) // meta[\"BLOCK_SIZE_M\"]\n    grid_n = (n + meta[\"BLOCK_SIZE_N\"] - 1) // meta[\"BLOCK_SIZE_N\"]\n    # This block is responsible for the rows.\n    r = pid * meta[\"BLOCK_SIZE_M\"] + tl.arange(0, meta[\"BLOCK_SIZE_M\"])\n    # This block is responsible for the columns.\n    c = tl.arange(0, meta[\"BLOCK_SIZE_N\"])\n    # The stride necessary to jump one block to the next.\n    stride_rm = meta[\"BLOCK_SIZE_M\"] * grid_n\n    # The stride necessary to jump one element to the next.\n    stride_m = meta[\"BLOCK_SIZE_M\"]\n    stride_n = meta[\"BLOCK_SIZE_N\"]\n    # The base element is the top left of the block.\n    base = r[:, None] * stride_rm + c[None, :] * stride_m\n    # The base pointer is the address of the base element.\n    block_ptr = a + base\n    # Load the block into SRAM.\n    block = tl.load(block_ptr, mask=(r[:, None] < m) & (c[None, :] < n), other=0.0)\n    # The determinant of the block.\n    det = 1.0\n    # The pivot indices.\n    row_indices = r\n    col_indices = c\n    # The parity of the pivot indices.\n    parity = 0\n    if full_pivoting:\n        for i in range(n):\n            # The index of the row containing the element with maximum absolute value.\n            j = tl.argmax(tl.abs(block), axis=1)\n            # Swap the rows to bring the element with maximum absolute value to the current position.\n            block = tl.where(j[:, None] == c[None, :], block, tl.swap(block, 0, j)[:, :])\n            # The row index of the element with maximum absolute value.\n            j = j[:, None]\n            row_indices, j = tl.swap(row_indices, 0, j)\n            row_indices = row_indices[:, None]\n            # The column index of the element with maximum absolute value.\n            j = c[None, :]\n            col_indices, j = tl.swap(col_indices, 1, j)\n            col_indices = col_indices[:, None]\n            # The parity of the number of row swaps.\n            parity ^= (row_indices[:, 0] != r) & (col_indices[0, :] != c)\n            # The element with maximum absolute value.\n            x = tl.max(tl.abs(block), axis=1)\n            # The stride necessary to jump one column to the next.\n            stride_n = stride_ma // m\n            # The column index of the element with maximum absolute value.\n            c_ = c\n            # Load the column into SRAM.\n            col_ptr = a + j * stride_n + c_\n            col = tl.load(col_ptr, mask=(j < m) & (c_ < n), other=0.0)\n            # Replace the block with the column.\n            block = tl.where(c_ == j, col, block)\n            # The determinant is the product of the diagonal elements.\n            det *= tl.diagonal(block, 0, 0, 1)[0]\n            # The stride necessary to jump one row to the next.\n            stride_m = 1\n            # Move to the next block.\n            block = tl.advance(block, (0, 1))\n            r += meta[\"BLOCK_SIZE_M\"]\n            row_indices += meta[\"BLOCK_SIZE_M\"]\n    else:\n        for i in range(n):\n            # The element on the diagonal.\n            x = tl.diagonal(block, 0, 0, 1)[0]\n            # The stride necessary to jump one row to the next.\n            stride_m = 1\n            # Move to the next block.\n            block = tl.advance(block, (0, 1))\n            r += meta[\"BLOCK_SIZE_M\"]\n            row_indices += meta[\"BLOCK_SIZE_M\"]\n            # The determinant is the product of the diagonal elements.\n            det *= x\n    # The determinant is the product of the diagonal elements.\n    # Adjust the sign of the determinant if the number of row swaps is odd.\n    if parity:\n        det = -det\n    return det\n\ndef determinant_lu(A: torch.Tensor, *, pivot: bool = True, out: Optional[torch.Tensor] = None) -> torch.Tensor:\n    \"\"\"Compute the LU decomposition of a matrix.\"\"\"\n    # The input matrix must be at least 2D.\n    if A.dim() < 2:\n        raise ValueError(\"A must be at least 2D\")\n    # The input matrix must be square.\n    if A.shape[-1] != A.shape[-2]:\n        raise ValueError(\"A must be square\")\n    # The output tensor is optional.\n    if out is None:\n        out = torch.empty_like(A)\n    else:\n        out = out.to(A)\n    # The output tensor must be 1D.\n    if out.dim() != 1:\n        raise ValueError(\"out must be 1D\")\n    # The output tensor must be of the same batch dimension as the input matrix.\n    if A.shape[:-2] != out.shape[:-1]:\n        raise ValueError(\"out must be of the same batch dimension as A\")\n    # The LU decomposition is computed in place.\n    A = A.view(-1, A.shape[-2], A.shape[-1])\n    out = out.view(-1)\n    # The number of batch dimensions.\n    batch_dim = A.shape[0]\n    # The dimensions of the matrix to operate on.\n    m, n = A.shape[1], A.shape[2]\n    # The maximum number of stages is determined by the number of blocks that can fit in the L1 cache.\n    max_stages = int(2 * (16384 // (m * m * meta[\"BLOCK_SIZE_N\"])))\n    # The number of stages is the minimum of the maximum number of stages and the number of rows.\n    num_stages = min(max_stages, m)\n    # The number of warps is determined by the number of columns.\n    num_warps = min(max(1, triton.next_power_of_2(n)), 16)\n    # The determinant is computed for each batch element.\n    for i in range(batch_dim):\n        # The determinant of the current batch element.\n        out[i] = _determinant_lu_triton(A[i], stride_za=A.stride(0), stride_ma=A.stride(1), stride_na=A.stride(2), n=n, full_pivoting=pivot, num_stages=num_stages, num_warps=num_warps)\n    # The determinant of the original input matrix.\n    out = out.view(A.shape[:-2])\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by a Tanh activation function. This combined operation is useful for introducing non-linearity after a linear transformation, helping to capture complex relationships in the data.\nWrapper Entry Information: def tanh_linear(input, weight, bias=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None.\nMath: The combined operation is defined as: out = tanh(linear(input, weight, bias)) where the linear transformation is applied as y = xA^T + b and Tanh activation is applied element-wise as: Tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))\nother: A linear transformation followed by a Tanh activation helps capture complex relationships by introducing non-linearity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef tanh_linear_kernel(\n    input_ptr,\n    weight_ptr,\n    bias_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_ptr += offsets\n    weight_ptr += offsets\n    output_ptr += offsets\n\n    input = tl.load(input_ptr, mask=mask, other=0.0).to(tl.float32)\n    weight = tl.load(weight_ptr, mask=mask, other=0.0).to(tl.float32)\n    bias = tl.load(bias_ptr + offsets, mask=mask, other=0.0).to(tl.float32)\n\n    output = tl.dot(input, weight, allow_tf32=False) + bias\n    output = tl.tanh(output)\n    tl.store(output_ptr, output, mask=mask)\n\ndef tanh_linear(input, weight, bias=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert weight.is_contiguous()\n    assert bias is None or bias.is_contiguous()\n\n    output = torch.empty_like(input)\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    with torch.cuda.device(input.device):\n        tanh_linear_kernel[grid](input, weight, bias, output, n_elements, BLOCK_SIZE=1024)\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the sum of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: def sum(input, dim, keepdim=False, *, dtype=None) -> Tensor; input (Tensor): the input tensor.; dim (int or tuple of ints, optional): the dimension or dimensions to reduce.; keepdim (bool): whether the output tensor has :attr:`dim` retained or not.; dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\nother: If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import logging\nimport torch\nimport triton\nimport triton.language as tl\n\ntry:\n    from triton.language.extra.cuda.libdevice import sum as _sum\nexcept ImportError:\n    try:\n        from triton.language.math import sum as _sum\n    except ImportError:\n        from triton.language.libdevice import sum as _sum\n\n@triton.jit\ndef _sum(x):\n    return x\n\ndef sum(input, dim, keepdim=False, *, dtype=None):\n    logging.debug(\"GEMS SUM\")\n    if dtype is None:\n        dtype = input.dtype\n    if isinstance(dim, (list, tuple)):\n        logging.debug(\"GEMS SUM LIST\")\n        out = input\n        for d in dim:\n            out = sum(out, d, keepdim=True)\n        if not keepdim:\n            out = out.squeeze(dim)\n        return out\n    else:\n        logging.debug(\"GEMS SUM DIM\")\n        shape = list(input.shape)\n        if dim is None:\n            out = input.view(-1)\n            return _sum(out, axis=0, dtype=dtype)\n        else:\n            keepdim = min(shape[dim], 1)\n            n = input.sum(axis=dim, keepdim=True, dtype=dtype)\n            if not keepdim:\n                n = n.squeeze(dim)\n            return n\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Creates a one-dimensional tensor of size 'steps' whose values are evenly spaced from base^start to base^end, inclusive, on a logarithmic scale with a specified base. The tensor values are generated in a logarithmic progression from base^start to base^end using the specified number of steps.\nWrapper Entry Information: logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n    base (float, optional): base of the logarithm function. Default: 10.0.\n\nKeyword arguments:\n    out (Tensor, optional): the output tensor.\n    dtype (torch.dtype, optional): the data type to perform the computation in. Default: if None, uses the global default dtype (see torch.get_default_dtype()) when both start and end are real, and corresponding complex dtype when either is complex.\n    layout (torch.layout, optional): the desired layout of returned Tensor. Default: torch.strided.\n    device (torch.device, optional): the desired device of returned tensor. Default: if None, uses the current device for the default tensor type (see torch.set_default_device). device will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.\nMath: (\text{base}^{\text{start}}, \text{base}^{(\text{start} + \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \\ldots, \text{base}^{(\text{start} + (\text{steps} - 2) * \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \text{base}^{\text{end}})\nother: From PyTorch 1.11, the 'steps' argument is required. Use steps=100 to restore the previous behavior. The function allows specifying various properties of the output tensor such as dtype, layout, and device.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _logspace(start, end, steps, base, out, exp_fn, dtype):\n    # Initialize index\n    i = 0\n    # Loop through each step\n    while i < steps:\n        # Calculate exponent\n        exp = start + i * (end - start) / (steps - 1)\n        # Calculate value and cast to specified dtype\n        out[i] = exp_fn(exp).to(dtype)\n        # Increment index\n        i += 1\n\ndef logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False):\n    # Wrapper function to call the Triton kernel\n    return _logspace_wrapper(\n        start, end, steps, base, out, dtype, layout, device, requires_grad\n    )\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the triangular system of linear equations Ax = b, where A is a triangular matrix. Then, adds a scaled version of the vector y to the solution x. The operations performed are: 1. Solve the triangular system Ax = b using torch.linalg.solve_triangular with A as an upper triangular matrix. 2. Add the scaled vector alpha * y to the solution x.\nWrapper Entry Information: def solve_and_add_scaled_vector(A: torch.Tensor, b: torch.Tensor, y: torch.Tensor, alpha: float) -> torch.Tensor: A (Tensor): A triangular matrix of shape `(n, n)`. b (Tensor): Right-hand side vector or matrix of shape `(n,)` or `(n, k)`. y (Tensor): Vector to be scaled and added, must have shape `(n,)` or broadcastable to `(n,)`. alpha (float): Scaling factor for the vector y.\nMath: x = torch.linalg.solve_triangular(A, b, upper=True)\nx += alpha * y\nother: The function assumes A is an upper triangular matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef solve_and_add_scaled_vector_tri(A, b, y, n, k, alpha):\n    # Triton kernel to solve triangular system and add scaled vector\n    pid = tl.program_id(0)\n    if k == 1:\n        b = b.reshape(n)\n        y = y.reshape(n)\n        x = tl.arange(0, n)\n        mask = x < n\n        a = tl.load(A + x)\n        c = tl.load(b + x, mask=mask)\n        x = tl.where(mask, c / a, 0.0)\n        x = x.to(tl.float32)\n        y = y.to(tl.float32)\n        x = x + alpha * y\n        tl.store(b + x, x, mask=mask)\n    else:\n        b = b.reshape(n, k)\n        y = y.reshape(n, 1)\n        x = tl.arange(0, n)\n        mask = x[:, None] < n\n        a = tl.load(A + x * k + (k - 1), mask=mask)\n        c = tl.load(b + x * k, mask=mask)\n        x = tl.where(mask, c / a, 0.0)\n        x = x.to(tl.float32)\n        y = y.to(tl.float32)\n        x = x + alpha * y\n        tl.store(b + x * k, x, mask=mask)\n\ndef solve_and_add_scaled_vector_triton(A: torch.Tensor, b: torch.Tensor, y: torch.Tensor, alpha: float) -> torch.Tensor:\n    # Wrapper function for Triton kernel\n    n, k = b.shape\n    grid = (triton.cdiv(n, 1),)\n    if k == 1:\n        y = y.reshape(n)\n    else:\n        y = y.reshape(n, 1)\n    solve_and_add_scaled_vector_tri[grid](A, b, y, n, k, alpha)\n    return b\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by pixel shuffle upscaling to rearrange the spatial dimensions. This function sequentially applies a 2D convolution operation and then rearranges the elements of the convolution output to increase the spatial resolution by the upscale_factor.\nWrapper Entry Information: def pixel_shuffle_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, upscale_factor=2) -> torch.Tensor: Input tensor of shape (minibatch, in_channels, iH, iW). Convolution filter tensor of shape (out_channels, in_channels/groups, kH, kW). Optional bias tensor of shape (out_channels). Stride of the convolving kernel. Padding added to all four sides of the input. Spacing between kernel elements. Number of blocked connections from input channels to output channels. Factor by which to increase spatial resolution.\nother: The function first applies a 2D convolution and then uses pixel shuffle to upscale the spatial dimensions by the given upscale_factor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom ..utils import calculate_settings\n\n@triton.autotune(\n    configs=calculate_settings(num_warps=7),\n    key=['kernel_size', 'in_channels', 'out_channels', 'batch', 'feat_size'],\n)\n@triton.jit\ndef pixel_shuffle_conv2d_triton(\n    input_pointer, weight_pointer, bias_pointer, output_pointer,\n    batch, feat_size, in_channels, out_channels, \n    input_stride_0, input_stride_1, \n    weight_stride_0, weight_stride_1, weight_stride_2, \n    bias_stride, \n    output_stride_0, output_stride_1, \n    stride, padding, kernel_size, upscale_factor, groups, \n    NUM_WARPS: tl.constexpr, \n    BLOCK_SIZE_BATCH_FEAT: tl.constexpr, \n    BLOCK_SIZE_CHANNEL: tl.constexpr, \n    BLOCK_SIZE_OUTPUT: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(feat_size, BLOCK_SIZE_BATCH_FEAT)\n    num_pid_n = tl.cdiv(in_channels, BLOCK_SIZE_CHANNEL)\n    num_pid_in_group = GROUP_SIZE_BATCH * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_BATCH\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_BATCH)\n    pid_m = first_pid_m + ((pid % num_pid_in_group) % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    input_m_offset = (pid_m * BLOCK_SIZE_BATCH_FEAT + tl.arange(0, BLOCK_SIZE_BATCH_FEAT))[:, None]\n    input_n_offset = (pid_n * BLOCK_SIZE_CHANNEL + tl.arange(0, BLOCK_SIZE_CHANNEL))[None, :]\n    input_offset = input_m_offset * input_stride_0 + input_n_offset * input_stride_1\n\n    weight_m_offset = tl.arange(0, BLOCK_SIZE_OUTPUT)[:, None]\n    weight_n_offset = tl.arange(0, BLOCK_SIZE_CHANNEL)[None, :]\n    weight_offset = weight_m_offset * weight_stride_0 + weight_n_offset * weight_stride_1\n\n    bias_offset = tl.arange(0, BLOCK_SIZE_OUTPUT)\n\n    output_m_offset = (pid_m * BLOCK_SIZE_BATCH_FEAT + tl.arange(0, BLOCK_SIZE_BATCH_FEAT) // upscale_factor)[:, None]\n    output_n_offset = (pid_n * BLOCK_SIZE_CHANNEL + tl.arange(0, BLOCK_SIZE_CHANNEL))[None, :] // upscale_factor\n    output_offset = output_m_offset * output_stride_0 + output_n_offset * output_stride_1\n\n    accumulator = tl.zeros((BLOCK_SIZE_BATCH_FEAT, BLOCK_SIZE_OUTPUT), dtype=tl.float32)\n    for k in range(tl.cdiv(kernel_size, BLOCK_SIZE_CHANNEL)):\n        input_pointer_offset = input_pointer + input_offset + k * weight_stride_2\n        weight_pointer_offset = weight_pointer + weight_offset + k * BLOCK_SIZE_CHANNEL * BLOCK_SIZE_CHANNEL\n        input = tl.load(input_pointer_offset, mask=(input_m_offset < feat_size) & (input_n_offset < in_channels), other=0.0)\n        weight = tl.load(weight_pointer_offset, mask=(weight_m_offset < kernel_size) & (weight_n_offset < in_channels), other=0.0)\n        accumulator += tl.dot(input, weight)\n\n    if bias_pointer is not None:\n        bias_pointer_offset = bias_pointer + bias_offset\n        bias = tl.load(bias_pointer_offset, mask=bias_offset < out_channels, other=0.0)\n        accumulator += bias\n\n    output_pointer_offset = output_pointer + output_offset\n    tl.store(output_pointer_offset, accumulator, mask=(output_m_offset < feat_size) & (output_n_offset < in_channels))\n\ndef pixel_shuffle_conv2d_triton_wrapper(\n    x: torch.Tensor, \n    weight: torch.Tensor, \n    bias: torch.Tensor = None, \n    stride: int = 1, \n    padding: int = 0, \n    upscale_factor: int = 2, \n    groups: int = 1\n) -> torch.Tensor:\n    batch, in_channels, feat_size, _ = x.shape\n    out_channels, _, kernel_size, _ = weight.shape\n    assert (in_channels * groups == weight.shape[1] * weight.shape[2])\n    assert (in_channels % groups == 0)\n    assert (kernel_size == weight.shape[2])\n    assert (kernel_size in {3, 5, 7})\n\n    output = torch.empty((batch, out_channels, feat_size, feat_size), device=x.device, dtype=x.dtype)\n    grid = lambda META: (triton.cdiv(in_channels, META['BLOCK_SIZE_CHANNEL']) * triton.cdiv(feat_size, META['BLOCK_SIZE_BATCH_FEAT']), )\n    pixel_shuffle_conv2d_triton[grid](\n        x, weight, bias, output,\n        batch, feat_size, in_channels, out_channels,\n        x.stride(0), x.stride(1),\n        weight.stride(0), weight.stride(1), weight.stride(2),\n        bias.stride(0) if bias is not None else 0,\n        output.stride(0), output.stride(1),\n        stride, padding, kernel_size, upscale_factor, groups\n    )\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product `y = alpha * torch.mv(A, x) + beta * y` and then returns the dot product `torch.dot(y, x)`. The function first computes a scaled matrix-vector product and updates `y`, then calculates the dot product of the updated `y` with `x`. It requires an input matrix `A` of shape `(n, m)`, an input vector `x` of shape `(m,)`, and a target vector `y` of shape `(n,)` that is modified in-place. The scalar `alpha` is a multiplier for `torch.mv(A, x)`, while `beta` is a multiplier for `y`.\nWrapper Entry Information: def matrix_vector_dot(A: Tensor, x: Tensor, y: Tensor, alpha: float, beta: float) -> Tensor: \nArgs:\n    A (Tensor): The input matrix of shape `(n, m)`.\n    x (Tensor): The input vector of shape `(m,)`.\n    y (Tensor): The target vector to be modified, of shape `(n,)`.\n    alpha (float): Scalar multiplier for `torch.mv(A, x)`.\n    beta (float): Scalar multiplier for `y`.\nMath: y = alpha * torch.mv(A, x) + beta * y; result = torch.dot(y, x)\nother: The function modifies the `y` vector in-place and calculates a dot product after the update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matrix_vector_dot_kernel(A, x, y, alpha, beta):\n    # Convert inputs to float32\n    x_fp32 = x.to(tl.float32)\n    y_fp32 = y.to(tl.float32)\n    \n    # Compute matrix-vector product and update y\n    y_fp32 = alpha * tl.dot(A, x_fp32) + beta * y_fp32\n    \n    # Compute dot product of updated y and x\n    result = tl.dot(y_fp32, x_fp32)\n    \n    return result\n\ndef matrix_vector_dot_triton(A: torch.Tensor, x: torch.Tensor, y: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    # Ensure inputs are on CUDA device\n    assert A.is_cuda and x.is_cuda and y.is_cuda\n    # Call the Triton kernel\n    return matrix_vector_dot_kernel(A, x, y, alpha, beta)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Gaussian Error Linear Units (GELU) activation on the input tensor, then returns the minimum value along the specified dimension(s) or over all elements if no dimension is specified. The function supports two methods for computing GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: min_gelu(input, dim=None, keepdim=False, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. If ``None``, returns the minimum of all elements. keepdim (bool, optional): Whether the output tensor retains :attr:`dim` as size 1. Default is ``False``. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out = min(GELU(input))\n\nGELU(x) = x * Φ(x) if approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3))) if approximate is 'tanh'\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_helpers\nfrom torch._inductor.triton_heuristics import reduction\nfrom torch._inductor.codecache import AsyncCompile\n\n_gaussian_pdf_normalization = 1 / (math.sqrt(2 * math.pi))\n\n@triton.jit\ndef _triton_gaussian_cdf(x):\n    # Using approximation introduces greater parity errors.\n    # return tl.sigmoid(1.702 * x) * 0.5\n    return tl.math.erf(x / 1.41421356237) * 0.5 + 0.5\n\n@triton.jit\ndef _triton_gaussian_pdf(x):\n    return (tl.exp(-0.5 * x * x) * _gaussian_pdf_normalization)\n\n@triton.jit\ndef _triton_gaussian_gelu(x, approximate: tl.constexpr):\n    if approximate == \"tanh\":\n        # Using tanh introduces greater parity errors.\n        # return 0.5 * x * (1 + _triton_gaussian_cdf(x))\n        return 0.5 * x * (1 + tl.tanh(0.79788456 * x * (1 + 0.044715 * x * x)))\n    else:\n        return x * _triton_gaussian_cdf(x)\n\n@triton.jit\ndef min_gelu_kernel(\n    inp,\n    out,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(inp + offsets, mask=mask)\n    x = _triton_gaussian_gelu(x, approximate=\"tanh\")\n    tl.store(out + offsets, x, mask=mask)\n\n AsyncCompile(\n        min_gelu_kernel,\n        signature={0: \"*fp32\", 1: \"*fp32\", 2: \"i64\"},\n        device=0,\n        constants={3: 1024},\n    ).wait()\n\ndef min_gelu(\n    input: Tensor,\n    dim: Optional[int] = None,\n    keepdim: Optional[bool] = False,\n    approximate: Optional[str] = \"none\",\n    out: Optional[Tensor] = None,\n) -> Tensor:\n    if dim is None or approximate == \"tanh\":\n        if approximate == \"tanh\":\n            input = input.float()\n        output = torch.min(gelu(input, approximate=approximate))\n        if not keepdim:\n            output = output.squeeze(dim)\n        return output\n\n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype)\n    else:\n        assert out.shape == input.shape\n\n    assert input.is_contiguous()\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    min_gelu_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Takes the power of each element in input with exponent and returns a tensor with the result. exponent can be either a single float number or a Tensor with the same number of elements as input. If exponent is a scalar value, the operation applied is out_i = x_i ^ exponent. If exponent is a tensor, the operation applied is out_i = x_i ^ exponent_i. When exponent is a tensor, the shapes of input and exponent must be broadcastable.\nWrapper Entry Information: pow(input, exponent, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. exponent (float or tensor): the exponent value; Keyword args: out (Tensor, optional): the output tensor.\nMath: out_i = x_i ^ exponent (for scalar exponent)\nout_i = x_i ^ exponent_i (for tensor exponent)\nother: The operation supports both scalar and tensor exponents. When exponent is a tensor, its shape must be broadcastable with the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import logging\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef pow_kernel(x, y, EXP):\n    return tl.libdevice.pow(x, y) if isinstance(EXP, tl.tensor) else tl.libdevice.pow(x, EXP)\n\ndef pow(input, exponent, *, out=None):\n    logging.debug(\"GEMS POW\")\n    if out == None:\n        if isinstance(exponent, torch.Tensor):\n            assert exponent.is_floating_point()\n            exponent = exponent.to(input.dtype)\n            out = pow_kernel(input, exponent, EXP=exponent)\n        else:\n            assert isinstance(exponent, float)\n            out = pow_kernel(input, exponent, EXP=exponent)\n    else:\n        if isinstance(exponent, torch.Tensor):\n            assert exponent.is_floating_point()\n            exponent = exponent.to(input.dtype)\n            pow_kernel(input, exponent, EXP=exponent, out=out)\n        else:\n            assert isinstance(exponent, float)\n            pow_kernel(input, exponent, EXP=exponent, out=out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by max pooling and then applies the ReLU activation function element-wise to the pooled result. This combined operation is often used in convolutional neural networks (CNNs) for feature extraction, downsampling, and adding non-linearity.\nWrapper Entry Information: relu_max_pool2d_conv2d(input, weight, bias=None, conv_stride=1, conv_padding=0, conv_dilation=1, conv_groups=1, pool_kernel_size=2, pool_stride=None, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False) -> Tensor: input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`. weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`. bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None. conv_stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. conv_padding (int, tuple, or string, optional): Padding added to all sides of the input in convolution. Default: 0. conv_dilation (int or tuple, optional): The spacing between kernel elements in convolution. Default: 1. conv_groups (int, optional): Number of blocked connections from input channels to output channels in convolution. Default: 1. pool_kernel_size (int or tuple): The size of the pooling region in max pooling. pool_stride (int or tuple, optional): The stride of the pooling operation. Default: `pool_kernel_size`. pool_padding (int or tuple, optional): Padding added to all sides of the input in max pooling. Default: 0. pool_dilation (int or tuple, optional): The stride between elements within a sliding window in max pooling. Default: 1. pool_ceil_mode (bool, optional): If True, uses `ceil` instead of `floor` to compute output shape. Default: False. inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: \n    \\text{out} = \\text{ReLU}(\\text{MaxPool2D}(\\text{conv2d}(\\text{input})))\n\nwhere the ReLU function is applied element-wise as:\n\n    \\text{ReLU}(x) = \\max(0, x)\nother: The function is typically used in CNNs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_max_pool2d_conv2d_triton(\n    input, weight, bias, stride, padding, dilation, groups, pool_size, pool_stride, pool_padding, pool_dilation, pool_ceil_mode, inplace\n):\n    input_stride_0 = input.stride(0)\n    input_stride_1 = input.stride(1)\n    input_stride_2 = input.stride(2)\n    input_stride_3 = input.stride(3)\n    weight_stride_0 = weight.stride(0)\n    weight_stride_1 = weight.stride(1)\n    weight_stride_2 = weight.stride(2)\n    weight_stride_3 = weight.stride(3)\n    if bias is not None:\n        bias_stride_0 = bias.stride(0)\n    else:\n        bias_stride_0 = 0\n    stride_0 = stride[0]\n    stride_1 = stride[1]\n    padding_0 = padding[0]\n    padding_1 = padding[1]\n    dilation_0 = dilation[0]\n    dilation_1 = dilation[1]\n    groups_0 = groups\n    in_channels = weight.shape[1]\n    in_channels_1 = in_channels * dilation_0 * dilation_1\n    out_channels = weight.shape[0]\n    pool_size_0 = pool_size[0]\n    pool_size_1 = pool_size[1]\n    if pool_stride is None:\n        pool_stride_0 = pool_size_0\n        pool_stride_1 = pool_size_1\n    else:\n        pool_stride_0 = pool_stride[0]\n        pool_stride_1 = pool_stride[1]\n    pool_padding_0 = pool_padding[0]\n    pool_padding_1 = pool_padding[1]\n    pool_dilation_0 = pool_dilation[0]\n    pool_dilation_1 = pool_dilation[1]\n    iH = input.shape[2]\n    iW = input.shape[3]\n    oH = triton.cdiv(iH + padding_0 * 2 - dilation_0 * (pool_size_0 - 1) - pool_padding_0 * 2, pool_stride_0)\n    oW = triton.cdiv(iW + padding_1 * 2 - dilation_1 * (pool_size_1 - 1) - pool_padding_1 * 2, pool_stride_1)\n    pid_n = tl.program_id(0)\n    pid_c = tl.program_id(1)\n    pid_h = tl.program_id(2)\n    pid_w = tl.program_id(3)\n    offset_n = pid_n\n    offset_c = (pid_c * groups_0 + tl.arange(0, groups_0)) % out_channels\n    offset_h = tl.arange(0, pool_size_0)[None, :] + pid_h * pool_stride_0 - pool_padding_0\n    offset_w = tl.arange(0, pool_size_1)[:, None] + pid_w * pool_stride_1 - pool_padding_1\n    offset_im_h = (pid_h * pool_stride_0 - pool_padding_0 + pool_dilation_0 * tl.arange(0, pool_size_0)[:, None]) * input_stride_2\n    offset_im_w = (pid_w * pool_stride_1 - pool_padding_1 + pool_dilation_1 * tl.arange(0, pool_size_1)[None, :]) * input_stride_3\n    offset_im = offset_n * input_stride_0 + offset_c[:, None] * input_stride_1 + offset_im_h + offset_im_w\n    offset_w_1 = pid_c * weight_stride_0 + offset_c[:, None] * weight_stride_1 + (tl.arange(0, dilation_0)[:, None] * weight_stride_2 + tl.arange(0, dilation_1)[None, :] * weight_stride_3)\n    w = tl.load(weight + offset_w_1)\n    if bias is not None:\n        offset_b = pid_c * bias_stride_0\n        b = tl.load(bias + offset_b)\n    else:\n        b = 0\n    mask_c = offset_c < out_channels\n    mask_h = offset_h >= 0 & (offset_h < iH + padding_0 * 2)\n    mask_w = offset_w >= 0 & (offset_w < iW + padding_1 * 2)\n    mask_hw = mask_h[:, None] & mask_w[None, :]\n    mask_im = offset_h[None, :] < iH + padding_0 * 2\n    mask_im &= offset_w[:, None] < iW + padding_1 * 2\n    mask = mask_c & mask_hw\n    mask_im = mask_im & mask_hw\n    a = tl.load(input + offset_im, mask=mask_im, other=0)\n    a = tl.dot(w, a)\n    a += b\n    a = tl.where(mask, a, 0)\n    offset_pool_h = pid_h * pool_stride_0 - pool_padding_0\n    offset_pool_w = pid_w * pool_stride_1 - pool_padding_1\n    offset_pool_h_1 = offset_pool_h + tl.arange(0, pool_size_0)\n    offset_pool_w_1 = offset_pool_w + tl.arange(0, pool_size_1)\n    mask_pool_h = offset_pool_h_1[:, None] >= 0 & (offset_pool_h_1[:, None] < iH + padding_0 * 2)\n    mask_pool_w = offset_pool_w_1[None, :] >= 0 & (offset_pool_w_1[None, :] < iW + padding_1 * 2)\n    mask_pool = mask_pool_h & mask_pool_w\n    a = tl.where(mask_pool, a, float(\"-inf\"))\n    if pool_ceil_mode:\n        c = tl.max(a, axis=(1, 2))\n    else:\n        c = tl.max(a, axis=(1, 2))\n    offset_relu = offset_n * oH * oW + (pid_h * pool_size_0 + tl.arange(0, pool_size_0)[:, None]) * oW + (pid_w * pool_size_1 + tl.arange(0, pool_size_1)[None, :])\n    if inplace:\n        tl.store(input + offset_relu, c, mask=mask_c)\n    else:\n        offset_relu = offset_n * oH * oW + pid_h * pool_size_0 * oW + pid_w * pool_size_1 + tl.arange(0, pool_size_0)[:, None] * oW + tl.arange(0, pool_size_1)[None, :]\n        tl.store(input + offset_relu, c, mask=mask_c)\n    return\n\ndef relu_max_pool2d_conv2d(input, weight, bias=None, conv_stride=1, conv_padding=0, conv_dilation=1, conv_groups=1, pool_kernel_size=2, pool_stride=None, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False):\n    if input.dtype is torch.float16:\n        return relu_max_pool2d_conv2d_triton(input, weight, bias, conv_stride, conv_padding, conv_dilation, conv_groups, pool_kernel_size, pool_stride, pool_padding, pool_dilation, pool_ceil_mode, inplace)\n    else:\n        raise Exception(\"only support float16\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the error function of the input tensor. The error function is used in probability, statistics, and partial differential equations describing diffusion.\nWrapper Entry Information: erf(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\mathrm{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\nother: The function outputs a tensor with values representing the error function of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef erf_kernel(input, out):\n    # Convert input to float32\n    input_fp32 = input.to(tl.float32)\n    # Compute the error function\n    output = tl.erf(input_fp32)\n    # Write the result to the output tensor\n    tl.store(out, output)\n\ndef erf(input, *, out=None):\n    # Determine if input is a number or a tensor\n    if isinstance(input, (float, int)):\n        input = torch.tensor(input)\n    # Ensure input is a tensor\n    assert isinstance(input, torch.Tensor)\n    # Create an output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    # Call the Triton kernel for error function computation\n    erf_kernel[(1,)](input, out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the sigmoid of the input tensor element-wise. The sigmoid function is a common activation function used in neural networks, which maps any real-valued number into the range (0, 1).\nWrapper Entry Information: sigmoid(input, *, out=None) -> Tensor\nMath: The sigmoid function is defined as: sigmoid(x) = 1 / (1 + exp(-x))\nother: Alias for torch.special.expit.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(x):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Compute sigmoid using the expit function from torch.special\n    return torch.special.expit(x_fp32)\n\ndef sigmoid(input, *, out=None):\n    # Wrapper function for sigmoid operation\n    if out == None:\n        # Call the Triton kernel if output is not provided\n        return sigmoid_kernel(input)\n    else:\n        # Ensure input and output are on the same device\n        assert input.device == out.device\n        # Call the Triton kernel with output tensor\n        return sigmoid_kernel(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Unit (GELU) activation function element-wise to the input tensor. The function can be computed exactly or approximately using a tanh-based formula depending on the 'approximate' argument.\nWrapper Entry Information: gelu(input, approximate='none') -> Tensor\nMath: When approximate is 'none': GELU(x) = x * Φ(x), where Φ(x) is the Cumulative Distribution Function for Gaussian Distribution. When approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(√(2/π) * (x + 0.044715 * x^3)))\nother: See Gaussian Error Linear Units (GELUs) https://arxiv.org/abs/1606.08415\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import math\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef tanh(x):\n    # Tanh is just a scaled sigmoid\n    return 2 * tl.sigmoid(2 * x) - 1\n\n@triton.jit\ndef gelu_approximation(x):\n    # 0.044715 = sqrt(2 / pi)\n    return 0.5 * x * (1 + tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * x * x * x))\n\n@triton.jit\ndef gelu_exact(x):\n    return x * 0.5 * (1.0 + tl.math.erf(x / math.sqrt(2.0)))\n\ndef gelu(input, approximate='none'):\n    if approximate == 'tanh':\n        return gelu_approximation(input)\n    elif approximate == 'none':\n        return gelu_exact(input)\n    else:\n        raise ValueError(f\"Invalid value for approximate: {approximate}\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: linalg.det(A, *, out=None) -> Tensor; A (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions; out (Tensor, optional): output tensor. Ignored if None. Default: None.\nother: :func:`torch.linalg.slogdet` computes the sign and natural logarithm of the absolute value of the determinant of square matrices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _det(A):\n    # Implementation details omitted for brevity\n    pass\n\ndef det(A, *, out=None):\n    # Wrapper function for computing the determinant of a square matrix using Triton\n    if A.is_floating_point():\n        if A.dtype in (torch.float32, torch.float64):\n            # For float32 and float64, use default grid and stream\n            return _det(A, grid=A.shape, stream=None)\n        elif A.dtype in (torch.complex64, torch.complex128):\n            # For complex64 and complex128, compute the determinant of the matrix's absolute value\n            return torch.prod(torch.abs(A), dim=(-2, -1)).to(A)\n    else:\n        # Raise an error if the input tensor is not of floating point type\n        raise RuntimeError(\"torch.det only supports floating-point inputs\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, and dropout.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout(input1, input2, normalized_shape, dropout_p=0.1, eps=1e-5, training=True, approximate='none', *, out=None) -> Tensor; input1 (Tensor): First input tensor for bmm, of shape (B, N, M), where B is the batch size; input2 (Tensor): Second input tensor for bmm, of shape (B, M, P); normalized_shape (int or list or torch.Size): Input shape from an expected input of size (B, N, P). This is the shape over which RMS normalization is applied; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1; eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5; training (bool, optional): Apply dropout if True. Default: True; approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given two input tensors X and Y, this function computes: \\[ \\begin{align*} Z_1 &= \\text{bmm}(X, Y) \\\\ Z_2 &= \\text{RMSNorm}(Z_1, \\epsilon) \\\\ Z_3 &= \\text{GELU}(Z_2) \\\\ Z &= \\text{Dropout}(Z_3, p) \\end{align*} \\] where: \\- \\text{bmm}(X, Y) performs batch matrix multiplication. \\- \\text{RMSNorm}(Z_1, \\epsilon) = \\frac{Z_1}{\\sqrt{\\text{mean}(Z_1^2, \\text{dim}=\\text{last}) + \\epsilon}} \\times \\gamma, where \\gamma is a learnable parameter (if `elementwise_affine=True`). \\- \\text{GELU}(Z_2) applies the Gaussian Error Linear Unit activation function element-wise. \\- \\text{Dropout}(Z_3, p) randomly zeroes elements of Z_3 with probability p.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the shape of the last dimension(s) of the output tensor over which to compute the RMS.\n- The `GELU` activation is applied element-wise to the normalized output.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch.autograd.function import Function\nfrom .triton_utils import get_kernel_meta, has_triton\n\n@triton.jit\ndef _silu_and_mul(x, y):\n    # Silu activation function\n    x = tl.fdiv(x, (1 + tl.exp(-x)))\n    # Element-wise multiplication\n    return x * y\n\n@triton.jit\ndef _silu(x):\n    # Silu activation function\n    return tl.fdiv(x, (1 + tl.exp(-x)))\n\n@triton.jit\ndef _linear(x, weight, bias):\n    # Linear layer computation\n    return tl.dot(x, weight, out_dtype=x.dtype) + bias\n\n@triton.jit\ndef _layer_norm(x, weight, bias, eps):\n    # Layer normalization\n    mean = tl.mean(x, axis=-1, keepdims=True)\n    x = tl.where(x >= mean, x, mean)\n    var = tl.sum((x - mean) * (x - mean), axis=-1, keepdims=True) / x.shape[-1]\n    rstd = 1 / tl.sqrt(var + eps)\n    x_hat = (x - mean) * rstd\n    return x_hat * weight + bias\n\n@triton.jit\ndef _dropout(x, p, seed, offset):\n    # Dropout\n    random = tl.rand(seed, offset)\n    return tl.where(random > p, x / (1 - p), 0.0)\n\n@triton.jit\ndef _bmm_rmsnorm_gelu_dropout_a(x, y, weight, ln_weight, ln_bias, dropout_p, seed, eps, training, approximate):\n    # BMM, RMSNorm, GELU, and Dropout operation\n    batch, seq, _ = x.shape\n    out = torch.empty((batch, seq, y.shape[2]), dtype=x.dtype, device=x.device)\n    offset = tl.arange(0, 256)\n    trans_y = tl.trans(y)\n    for i in range(0, batch):\n        for j in range(0, seq, 256):\n            p = j + offset\n            mask = p < seq\n            a = tl.load(x + i * seq + p, mask=mask)\n            b = tl.load(trans_y + j * 256 + (p % 256), mask=mask)\n            c = tl.dot(a, b, out_dtype=a.dtype)\n            d = _layer_norm(c, ln_weight, ln_bias, eps)\n            if approximate == \"tanh\":\n                e = 0.5 * d * (1 + tl.tanh(_silu(d)))\n            else:\n                e = _silu_and_mul(d, d)\n            if training:\n                out_offset = i * seq * y.shape[2] + j * 256\n                o = out.view(batch * seq, y.shape[2])\n                o_ptr = o + out_offset + offset\n                tl.store(o_ptr, e, mask=(offset < (seq * y.shape[2]) - out_offset))\n            else:\n                f = _dropout(e, dropout_p, seed, i)\n                out_offset = i * seq * y.shape[2] + j * 256\n                o = out.view(batch * seq, y.shape[2])\n                o_ptr = o + out_offset + offset\n                tl.store(o_ptr, f, mask=(offset < (seq * y.shape[2]) - out_offset))\n    return out\n\ndef _bmm_rmsnorm_gelu_dropout(\n    x: Tensor,\n    y: Tensor,\n    normalized_shape: int,\n    dropout_p: float = 0.1,\n    eps: float = 1e-5,\n    training: bool = True,\n    approximate: str = \"none\",\n    out: Tensor = None,\n) -> Tensor:\n    # Wrapper function for the Triton kernel\n    if out is None:\n        out = torch.empty(\n            (x.shape[0], x.shape[1], y.shape[2]), dtype=x.dtype, device=x.device\n        )\n    if approximate not in (\"none\", \"tanh\"):\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    if x.shape[0] != out.shape[0] or x.shape[1] != out.shape[1] or y.shape[2] != out.shape[2]:\n        raise ValueError(\"Shape of tensors must match the operation\")\n    if dropout_p < 0 or dropout_p > 1:\n        raise ValueError(\"Dropout probability must be between 0 and 1\")\n    if not isinstance(normalized_shape, int):\n        raise ValueError(\"Only integer value is allowed for normalized_shape\")\n    if not has_triton():\n        raise RuntimeError(\"Triton kernel requires triton to be installed\")\n    seed = torch.empty((), dtype=torch.int32, device=x.device).random_(0, 2**31)\n    M = 4096\n    N = 4096\n    K = 256\n    BLOCK_SIZE_M: tl.constexpr = 32\n    BLOCK_SIZE_N: tl.constexpr = 64\n    BLOCK_SIZE_K: tl.constexpr = 128\n    GROUP_SIZE_M: tl.constexpr = 8\n    if normalized_shape > K:\n        raise ValueError(\"normalized_shape must be less than or equal to 2048\")\n    with torch.cuda.device(x.device.index):\n        out = _bmm_rmsnorm_gelu_dropout_a(\n            x,\n            y,\n            weight=None,\n            ln_weight=torch.ones(normalized_shape, dtype=x.dtype, device=x.device),\n            ln_bias=torch.zeros(normalized_shape, dtype=x.dtype, device=x.device),\n            dropout_p=dropout_p,\n            seed=seed,\n            eps=eps,\n            training=training,\n            approximate=approximate,\n            num_warps=4,\n            num_stages=2,\n        )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the floor of the elements of the input, the largest integer less than or equal to each element. For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: floor(input, *, out=None) -> Tensor\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\left\\lfloor \\text{input}_{i} \\right\\rfloor\nother: For integer inputs, the function returns a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef floor_kernel(x):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Calculate floor value\n    x_floor = tl.math.floor(x_fp32)\n    # Convert result back to original input type\n    return x_floor.to(x.dtype)\n\ndef floor(input, *, out=None):\n    # Ensure input is a tensor\n    assert isinstance(input, torch.Tensor), \"Input must be a tensor\"\n    # Call Triton kernel for floor operation\n    return floor_kernel(input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1). The shape of the tensor is defined by the variable argument size.\nWrapper Entry Information: rand(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor. Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling\n    out (Tensor, optional): the output tensor.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor. Default: if ``None``, uses a global default (see :func:`torch.set_default_dtype`).\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor. Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor. Default: if ``None``, uses the current device for the default tensor type (see :func:`torch.set_default_device`). :attr:`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in the pinned memory. Works only for CPU tensors. Default: ``False``.\nother: The function can take a variable number of arguments to define the shape of the tensor. It supports optional parameters for generator, output tensor, data type, layout, device, autograd recording, and pinned memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef rand(*size, dtype=tl.float32, device='cuda'):\n    return tl.rand(*size, dtype=dtype, device=device)\n\ndef rand(*size, dtype=None, layout=None, device=None, pin_memory=None):\n    return rand(*size, dtype=dtype, device=device)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a system of linear equations with complex Hermitian or real symmetric positive-definite lhs given its Cholesky decomposition. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if :math:`A` or :math:`B` is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: cholesky_solve(B, L, upper=False, *, out=None) -> Tensor; B (Tensor): right-hand side tensor of shape (*, n, k) where * is zero or more batch dimensions; L (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions consisting of lower or upper triangular Cholesky decompositions of symmetric or Hermitian positive-definite matrices; upper (bool, optional): flag that indicates whether L is lower triangular or upper triangular. Default: False; out (Tensor, optional): output tensor. Ignored if None. Default: None\nMath: A = LL^{\\text{H}}; AX = B\nother: Supports float, double, cfloat, cdouble dtypes; Handles batches of matrices; Uses Cholesky decomposition\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _cholesky_solve(\n    B, L, upper, batch_shape, n, k, stride_bat, stride_b_m, stride_b_n, stride_l_m, stride_l_n, **meta\n):\n    # compute indices\n    i_m = tl.arange(0, n)\n    i_n = tl.arange(0, k)\n\n    # get elements of B and L\n    if upper:\n        # B\n        b_bat = tl.broadcast_to(tl.arange(0, batch_shape[0]).reshape((batch_shape[0], 1)), (batch_shape[0], k))\n        b_idx = b_bat * stride_bat + i_n * stride_b_n + i_m[:, None] * stride_b_m\n        b = tl.load(B + b_idx, mask=(i_n[None, :] < i_m[:, None]) & (i_m[:, None] < n), other=0.0)\n\n        l_bat = tl.broadcast_to(tl.arange(0, batch_shape[0]).reshape((batch_shape[0], 1)), (batch_shape[0], n))\n        l_idx = l_bat * stride_bat + i_m[:, None] * stride_l_m + i_n[None, :] * stride_l_n\n        l = tl.load(L + l_idx, mask=(i_m[:, None] < n) & (i_n[None, :] < n), other=0.0)\n        l = tl.conj(l)\n    else:\n        # B\n        b_bat = tl.broadcast_to(tl.arange(0, batch_shape[0]).reshape((batch_shape[0], 1)), (batch_shape[0], k))\n        b_idx = b_bat * stride_bat + i_m[:, None] * stride_b_m + i_n[None, :] * stride_b_n\n        b = tl.load(B + b_idx, mask=(i_m[:, None] < i_n[None, :]) & (i_n[None, :] < n), other=0.0)\n\n        l_bat = tl.broadcast_to(tl.arange(0, batch_shape[0]).reshape((batch_shape[0], 1)), (batch_shape[0], n))\n        l_idx = l_bat * stride_bat + i_n[None, :] * stride_l_n + i_m[:, None] * stride_l_m\n        l = tl.load(L + l_idx, mask=(i_n[None, :] < n) & (i_m[:, None] < n), other=0.0)\n\n    # compute\n    if meta[\"dtype\"] in (tl.float32, tl.cfloat):\n        b = b.float32()\n        l = l.float32()\n        c = tl.dot(b.to(l), tl.conj(l).to(l), allow_tf32=True)\n    else:\n        b = b.to(l.dtype)\n        c = tl.dot(b, tl.conj(l).to(l), allow_tf32=True)\n\n    # store\n    c_bat = tl.broadcast_to(tl.arange(0, batch_shape[0]).reshape((batch_shape[0], 1)), (batch_shape[0], k))\n    c_idx = c_bat * stride_bat + i_n[None, :] * stride_b_n + i_m[:, None] * stride_b_m\n    tl.store(B + c_idx, c, mask=(i_n[None, :] < i_m[:, None]) & (i_m[:, None] < n))\n\n\ndef cholesky_solve(b, L, upper=False, out=None):\n    b = b.contiguous()\n    L = L.contiguous()\n\n    if out is None:\n        c = torch.empty_like(b)\n    else:\n        c = out\n\n    batch_shape = b.shape[:-2]\n    n = b.shape[-2]\n    k = b.shape[-1]\n    assert L.shape[-1] == L.shape[-2] == n, \"L must be n-by-n\"\n    assert b.shape[-2:] == L.shape[-2:], \"b and L must be broadcastable in their last two dimensions\"\n\n    if len(batch_shape) > 0:\n        b = b.reshape(-1, n, k)\n        L = L.reshape(-1, n, n)\n        c = c.reshape(-1, n, k)\n        n_batch = batch_shape[0]\n        grid = lambda meta: (triton.cdiv(n, meta[\"BLOCK_SIZE_N\"]) * triton.cdiv(k, meta[\"BLOCK_SIZE_K\"]), n_batch)\n        _cholesky_solve[grid](b, L, upper, batch_shape, n, k, *b.stride(), *L.stride(), **b.dtype.meta)\n        c = c.reshape(*batch_shape, n, k)\n    else:\n        grid = lambda meta: (triton.cdiv(n, meta[\"BLOCK_SIZE_N\"]), triton.cdiv(k, meta[\"BLOCK_SIZE_K\"]))\n        _cholesky_solve[grid](b, L, upper, batch_shape, n, k, *b.stride(), *L.stride(), **b.dtype.meta)\n    return c\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or number, then subtracts another tensor or number from the result, scaled by a given alpha. This operation is performed element-wise.\nWrapper Entry Information: def mul_sub(input, other_mul, other_sub, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other_mul (Tensor or Number): The tensor or number to multiply with `input`. other_sub (Tensor or Number): The tensor or number to subtract from the multiplication result. alpha (Number, optional): The multiplier for :attr:`other_sub`. Default is 1. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = (\\text{input}_i \\times \\text{other\\_mul}_i) - \\text{alpha} \\times \\text{other\\_sub}_i\nother: The function allows for element-wise operations and supports both tensor and scalar inputs for multiplication and subtraction. The output can be stored in a specified tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _mul_sub_fwd(\n    a_ptr, b_ptr, c_ptr, d_ptr, out_ptr, n_elements,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    c = tl.load(c_ptr + offsets, mask=mask)\n    d = tl.load(d_ptr + offsets, mask=mask)\n    x = a * b\n    y = c * d\n    out = x - y\n    tl.store(out_ptr + offsets, out, mask=mask)\n\ndef mul_sub(input, other_mul, other_sub, alpha=1, out=None) -> torch.Tensor:\n    assert input.is_contiguous()\n    assert other_mul.is_contiguous()\n    assert other_sub.is_contiguous()\n    if out == None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    n_elements = input.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    _mul_sub_fwd[grid](input, other_mul, other_sub, other_sub, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a compact representation of the LDL factorization of a Hermitian or symmetric (possibly indefinite) matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. When A is complex valued it can be Hermitian (hermitian=True) or symmetric (hermitian=False). The factorization is of the form A = L D L^T. If hermitian is True then transpose operation is the conjugate transpose. L (or U) and D are stored in compact form in LD. They follow the format specified by LAPACK's sytrf function. These tensors may be used in torch.linalg.ldl_solve to solve linear systems.\nWrapper Entry Information: linalg.ldl_factor(A, *, hermitian=False, out=None) -> (Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of symmetric or Hermitian matrices.\n\nKeyword args:\n    hermitian (bool, optional): whether to consider the input to be Hermitian or symmetric. For real-valued matrices, this switch has no effect. Default: `False`.\n    out (tuple, optional): tuple of two tensors to write the output to. Ignored if `None`. Default: `None`.\n\nReturns:\n    A named tuple `(LD, pivots)`.\nMath: A = L D L^T\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.ldl_factor_ex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom torch.linalg import _bmm, _bmm_ex\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._inductor.triton_heuristics import linalg\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef _triton_ldl_kernel(LD, A, stride, n, k, pivots, info, hermitian, BLOCK_SIZE: tl.constexpr):\n    # The algorithm is based on the algorithm 6.31 in \"Handbook of Linear Algebra\" by Hogben.\n    pid = tl.program_id(0)\n    i = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = i < n\n\n    # Step 1: Compute L\n    # Reset offsets\n    offset_l = k * stride\n    offset_a = k * stride + i\n    # Compute l = a / d\n    l = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n    if hermitian:\n        l = tl.where(i == k, 0., l)\n    else:\n        l = tl.where(i >= k, 0., l)\n    d = tl.load(LD + offset_l, mask, other=0).to(tl.float32)\n    l = l / d\n\n    # Step 2: Compute d\n    if hermitian:\n        offset_a = k * stride + i\n        a = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n        d = a - tl.sum(l * tl.load(LD + offset_l + i, mask, other=0), 0)\n    else:\n        offset_a = k * stride + i + 1\n        a = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n        d = a - tl.sum(l * tl.load(LD + offset_l + i + 1, mask, other=0), 0)\n    # Step 3: Write back L and D\n    # Store l\n    tl.store(LD + offset_l, l, mask=mask)\n    # Store d\n    tl.store(LD + offset_l + i, d, mask=mask)\n\n    # Step 4: Compute U\n    # Reset offsets\n    offset_u = (k + 1) * stride\n    offset_a = (k + 1) * stride + i + 1\n    # Compute u = a / d\n    u = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n    d = tl.load(LD + offset_l + i + 1, mask, other=0).to(tl.float32)\n    u = u / d\n    # Store u\n    tl.store(LD + offset_u, u, mask=mask)\n\n    # Step 5: Compute D\n    if hermitian:\n        offset_a = i + 1 + stride * (k + 1)\n        a = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n        d = a - tl.sum(tl.load(LD + offset_u + 1, mask, other=0) * tl.load(LD + offset_l + i + 1, mask, other=0), 0)\n    else:\n        offset_a = i + 1 + stride * (k + 1)\n        a = tl.load(A + offset_a, mask, other=0).to(tl.float32)\n        d = a - tl.sum(tl.load(LD + offset_u, mask, other=0) * tl.load(LD + offset_l, mask, other=0), 0)\n    # Step 6: Write back D\n    tl.store(LD + offset_l + i + 1, d, mask=mask)\n\ndef _ldl_factor(A: Tensor, *, hermitian: bool = False, out: Optional[Tuple[Tensor, Tensor]] = None) -> Tuple[Tensor, Tensor]:\n    strides = A.stride()\n    n = A.shape[-1]\n    if len(A.shape) < 2:\n        raise ValueError(\"Expected input tensor to have at least 2 dimensions, but got {} dimensions instead\".format(len(A.shape)))\n    if A.shape[-1] != A.shape[-2]:\n        raise ValueError(\"Expected a square matrix, but got shape {}\".format(A.shape))\n    if out is None:\n        out = (torch.empty_like(A, dtype=A.dtype, device=A.device, requires_grad=False), torch.empty(A.shape[-1], dtype=torch.int32, device=A.device))\n    elif out[0].shape != (A.shape[-1], A.shape[-1]):\n        raise ValueError(\"Expected the first element of out to be a tensor of shape {}, but got {}\".format((A.shape[-1], A.shape[-1]), out[0].shape))\n    elif out[1].shape != (A.shape[-1],):\n        raise ValueError(\"Expected the second element of out to be a tensor of shape {}, but got {}\".format((A.shape[-1],), out[1].shape))\n    elif out[0].dtype != A.dtype:\n        raise ValueError(\"Expected the first element of out to be a tensor of dtype {}, but got {}\".format(A.dtype, out[0].dtype))\n    elif out[0].device != A.device:\n        raise ValueError(\"Expected the first element of out to be a tensor on device {}, but got {}\".format(A.device, out[0].device))\n    elif out[1].device != A.device:\n        raise ValueError(\"Expected the second element of out to be a tensor on device {}, but got {}\".format(A.device, out[1].device))\n    ld, pivots, info = out\n    ld = ld.fill_(0)\n    pivots = pivots.fill_(0)\n    info = info.fill_(0)\n\n    block_size = triton_helpers.next_power_of_2(n)\n    if block_size > 128:\n        block_size = 128\n\n    grid = lambda META: (triton.cdiv(n, META['BLOCK_SIZE']), )\n    with torch.cuda.device(A.device):\n        _triton_ldl_kernel[grid](ld, A, *strides, n, n - 1, pivots, info, hermitian, BLOCK_SIZE=block_size)\n    # Check for errors\n    if (info == 0).all():\n        return out\n    else:\n        raise RuntimeError(\"LDL factorization failed\")\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the absolute value of each element in the input tensor.\nWrapper Entry Information: abs(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = |\\text{input}_{i}|\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef abs(input):\n    return tl.abs(input)\n\ndef abs(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    return abs(input) if input.is_floating_point() else abs(input).to(input.dtype)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or a number, supporting broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nWrapper Entry Information: mul(input, other, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    other (Tensor or Number) - the tensor or number to multiply input by.\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_i = \\text{input}_i \\times \\text{other}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mul_kernel(x_ptr, y_ptr, output_ptr, n_elements,\n               BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x * y\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef mul(input, other, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    assert input.is_broadcastable_with(other), \"The shapes of the `input` and `other` tensor must be broadcastable\"\n    in_casted = input.to(dtype=common_dtype(input, other))\n    other_casted = other.to(dtype=common_dtype(input, other))\n    n_elements = out.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n    mul_kernel[grid](in_casted, other_casted, out, n_elements, BLOCK_SIZE=1024)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a softmax function to all slices along the specified dimension, re-scaling them so that the elements lie in the range [0, 1] and sum to 1.\nWrapper Entry Information: def softmax(input, dim, dtype=None) -> Tensor: input (Tensor): input; dim (int): A dimension along which softmax will be computed.; dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None.\nMath: Softmax(x_i) = exp(x_i) / sum_j exp(x_j)\nother: This function doesn't work directly with NLLLoss, which expects the Log to be computed between the Softmax and itself. Use log_softmax instead (it's faster and has better numerical properties).\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(x, y, x_max, exp_x, sum_x, stride, n_elements, XBLOCK: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * XBLOCK\n    offsets = block_start + tl.arange(0, XBLOCK)\n    mask = offsets < n_elements\n\n    # 1. Find the max value of each slice\n    x_max = tl.max(tl.load(x + offsets * stride, mask=mask), axis=0)\n\n    # 2. Compute exp(x - x_max)\n    tl.store(exp_x + offsets, tl.exp(tl.load(x + offsets * stride, mask=mask) - x_max), mask=mask)\n\n    # 3. Compute the sum of exp(x - x_max)\n    sum_x = tl.sum(tl.load(exp_x + offsets, mask=mask), axis=0)\n\n    # 4. Compute the softmax\n    softmax_res = tl.load(exp_x + offsets, mask=mask) / sum_x\n\n    # 5. Store the result\n    tl.store(y + offsets * stride, softmax_res, mask=mask)\n\ndef softmax(x, dim=None, dtype=None):\n    if dim is None:\n        dim = -1\n    if dtype is None:\n        dtype = x.dtype\n\n    shape = x.shape\n    x = x.contiguous()\n\n    n_elements = x.numel()\n    stride = x.stride()\n    output = torch.empty_like(x, dtype=dtype)\n\n    grid = lambda meta: (triton.cdiv(n_elements, meta['XBLOCK']), )\n\n    softmax_kernel[grid](x, output, torch.zeros(1, dtype=torch.float32, device=x.device),\n                         torch.zeros(1, dtype=torch.float32, device=x.device), 0., n_elements, XBLOCK=1024)\n\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Leaky ReLU activation function element-wise to the input tensor. The function is defined as LeakyReLU(x) = max(0, x) + negative_slope * min(0, x), where negative_slope is a small constant that allows a small, non-zero gradient when the unit is not active.\nWrapper Entry Information: leaky_relu(input, negative_slope=0.01, inplace=False) -> Tensor\nMath: LeakyReLU(x) = max(0, x) + negative_slope * min(0, x)\nother: See torch.nn.LeakyReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef leaky_relu_kernel(x, negative_slope):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Compute LeakyReLU\n    return tl.where(x_fp32 >= 0, x_fp32, negative_slope * x_fp32)\n\ndef leaky_relu(input, negative_slope=0.01, inplace=False):\n    if inplace:\n        input.mul_(leaky_relu_kernel(input, negative_slope))\n        return input\n    else:\n        return leaky_relu_kernel(input, negative_slope)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the inverse of a square matrix using LU decomposition. Given a square invertible matrix A, it computes the inverse A^{-1} by performing LU decomposition and solving linear systems involving triangular matrices. Supports inputs of 'float', 'double', 'cfloat', and 'cdouble' dtypes, as well as batches of matrices.\nWrapper Entry Information: invert_matrix_lu(A, *, pivot=True, out=None) -> Tensor\nMath: A = P L U\nA^{-1} = U^{-1} L^{-1} P\nY = L^{-1} P\nA^{-1} = U^{-1} Y\nother: The function allows computing the inverse with or without pivoting (partial pivoting by default). It can handle batches of matrices, and an output tensor can be specified which will be ignored if set to None.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\nfrom flag_gems.utils.shape_utils import volume\n\n# This kernel is based on:\n# https://github.com/haichuan-li/lu_inverse/blob/master/lu_inverse.cu\n@triton.jit\ndef invert_matrix_lu_kernel(\n    # Inputs\n    A,  # shape is (batch, n, n)\n    pivots,  # shape is (batch, n)\n    # Output\n    A_inv,  # shape is (batch, n, n)\n    # Meta-params\n    n: tl.constexpr,\n    num_stages: tl.constexpr,\n    num_warps: tl.constexpr,\n):\n    # The computation is 2 * n^3 / 6 flops\n    pid = tl.program_id(0)\n    # each program handles n / num_warps rows\n    row_start = tl.program_id(0) * (n // num_warps)\n    rows = row_start + tl.arange(0, n // num_warps)\n    # The column indices are handled by the 1D block of threads\n    cols = tl.arange(0, tl.num_programs(1))\n    # Load A(r, c)\n    a = tl.load(A + pid * n * n + rows[:, None] * n + cols[None, :])\n    # The elements of the row are handled by the 1D block of threads\n    row = tl.load(A + pid * n * n + rows[:, None] * n + cols[None, :])\n    # Load P(r, c)\n    p = tl.load(pivots + pid * n + rows, mask=rows < n, other=0)\n    # P is a permutation matrix, so it can be loaded as int\n    p = p.to(tl.int32)\n    # Compute L(r, c) = I * P(r, c)\n    # The first column is handled by the block of threads\n    col = tl.load(p + cols, mask=cols < n, other=0)\n    col = col.to(tl.int32)\n    # A(r, c) = A(r, c) * P(r, c)\n    a = tl.where(col[None, :] == rows[:, None], a, 0)\n    # Load U(r, c)\n    u = tl.load(A + pid * n * n + rows[:, None] * n + cols[None, :])\n    # Forward sweep: compute L(r, c)\n    for k in range(row_start, row_start + n // num_warps):\n        # Multiply A(r, :) by U(k, k)^{-1}\n        a = a - tl.dot(row, u.T)\n        # Swap A(r, :) and A(k, :)\n        a = tl.where(k == rows[:, None], u, tl.where(rows[:, None] == k, a, 0))\n        # Load next U(k, :)\n        u = tl.load(A + pid * n * n + k * n + cols[None, :])\n    # Normalize L(r, c) = L(r, c) * U(k, k)^{-1}\n    a = a / u\n    # Store L(r, c)\n    tl.store(A_inv + pid * n * n + rows[:, None] * n + cols[None, :], a)\n\ndef invert_matrix_lu(A, *, pivot=True, out=None):\n    \"\"\"\n    Computes the inverse of a square matrix.\n\n    Args:\n        A (Tensor): the square matrix, shape must be [..., n, n]\n        pivot (bool, optional): whether to use partial pivoting. Default: True\n        out (Tensor, optional): the output inverse, if not given, a new tensor is created\n\n    Returns:\n        Tensor: the inverse of A\n    \"\"\"\n    A = A.contiguous()\n    assert A.dim() >= 2\n    n = A.size(-1)\n    assert A.size(-2) == n\n    # Allocates output.\n    if out is None:\n        A_inv = torch.empty_like(A)\n    else:\n        A_inv = out\n        assert A_inv.shape == A.shape\n    # reshaped A and A_inv to be 2D tensors for easy indexing\n    A = A.reshape(-1, n, n)\n    A_inv = A_inv.reshape(-1, n, n)\n    # The kernel is called with grid=(A.size(0),)\n    if pivot:\n        pivots = torch.empty((A.size(0), n), dtype=torch.int32, device=A.device)\n        lu_with_pivoting_kernel[A.size(0)](\n            A, pivots, n=n, num_stages=4, num_warps=4\n        )\n        invert_matrix_lu_kernel[A.size(0)](\n            A, pivots, A_inv, n=n, num_stages=4, num_warps=4\n        )\n    else:\n        lu_no_pivoting_kernel[A.size(0)](A, A_inv, n=n, num_stages=4, num_warps=4)\n    # flatten the output if the input was 2D\n    if A_inv.dim() == 3 and A.dim() == 2:\n        A_inv = A_inv.reshape(A_inv.shape[0] * A_inv.shape[1], A_inv.shape[2])\n    return A_inv\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Calculates the standard deviation over the specified dimensions of the input tensor. The dim argument can specify a single dimension, a list of dimensions, or None to reduce over all dimensions. If keepdim is set to True, the output tensor retains the reduced dimensions as size 1; otherwise, these dimensions are removed. The correction parameter adjusts the calculation for the difference between sample size and degrees of freedom, defaulting to Bessel's correction with correction=1.\nWrapper Entry Information: def std(input, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. correction (int): difference between the sample size and sample degrees of freedom. Defaults to `Bessel's correction`, correction=1. keepdim (bool): whether the output tensor has dim retained or not. out (Tensor, optional): the output tensor.\nMath: \\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The standard deviation function has undergone a change in version 2.0, where the argument previously called unbiased has been renamed to correction. Bessel's correction link: https://en.wikipedia.org/wiki/Bessel%27s_correction\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom .utils import calculate_settings\n\n@triton.jit\ndef triton_std(x, N, correction, keepdim, BLOCK_SIZE: tl.constexpr):\n    # Calculate the mean of the block\n    mean = tl.sum(x, axis=0) / N\n    # Compute the variance\n    variance = tl.sum((x - mean) * (x - mean), axis=0) / (N - correction)\n    # Return the standard deviation\n    return tl.sqrt(variance, axis=0) if keepdim else tl.sqrt(variance)\n\ndef std(input: Tensor, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor:\n    # Ensure input is a triton tensor\n    if not isinstance(input, Tensor):\n        input = torch.as_tensor(input)\n    # Check if input is empty\n    if input.numel() == 0:\n        return input\n    # Prepare output tensor\n    if out is None:\n        out = torch.empty(input.shape, dtype=input.dtype, device=input.device)\n    else:\n        out.copy_(input)\n    # Calculate settings for triton kernel\n    N, BLOCK_SIZE, num_warps = calculate_settings(input, dim, correction)\n    # Call the triton kernel\n    triton_std[(1,)](\n        input, N, correction, keepdim, BLOCK_SIZE=BLOCK_SIZE, num_warps=num_warps, out=out\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the lower triangular part of matrix `A` with matrix `B`, scales the result by `alpha`, and then scales the final output by `beta`. The operations are as follows:\n1. Perform matrix multiplication between the lower triangular part of `A` (denoted as `torch.tril(A)`) and `B`, and scale the result by `alpha`.\n2. Scale the resulting matrix from step 1 by `beta` to obtain the final result.\nWrapper Entry Information: def tril_mm_and_scale(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float) -> torch.Tensor: A (Tensor): A 2D matrix to be multiplied, of shape (n, n). B (Tensor): A matrix to be multiplied with the lower triangular part of A, of shape (n, p). alpha (float): Scaling factor for the initial matrix multiplication result. beta (float): Scaling factor for the final result.\nMath: B = alpha * torch.mm(torch.tril(A), B)\nC = beta * B\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _tril_mm_and_scale_kernel(A, B, alpha, beta):\n    # Triton kernel to perform lower triangular matrix multiplication and scaling\n    pass\n\ndef tril_mm_and_scale(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    # Wrapper function for the Triton kernel\n    assert A.is_cuda and B.is_cuda\n    n, _ = A.shape\n    _, p = B.shape\n    C = torch.empty((n, p), device=A.device, dtype=A.dtype)\n    grid = lambda META: (triton.cdiv(n, META[\"BLOCK_SIZE\"]), 1)\n    _tril_mm_and_scale_kernel[grid](A, B, alpha, beta)\n    return C\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a square system of linear equations with a unique solution. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if the inputs are batches of matrices then the output has the same batch dimensions. Assumes that matrix A is invertible.\nWrapper Entry Information: A (Tensor), B (Tensor), *, left (bool, optional), out (Tensor, optional)\nMath: AX = B; XA = B\nother: This function computes `X = A.inverse() @ B` in a faster and more numerically stable way than performing the computations separately. When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see `torch.linalg.solve_ex`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\ndef generate_wrapper(func_name: str, signature: str, const_args: str, backend: str, device: str):\n    wrapper = f\"def {func_name}({signature}):\\n\"\n    wrapper += f\"    args = [A, B]\\n\"\n    wrapper += \"    for idx, arg in enumerate(args):\\n\"\n    wrapper += \"        if isinstance(arg, torch.Tensor):\\n\"\n    wrapper += \"            args[idx] = arg\\n\"\n    wrapper += \"        else:\\n\"\n    wrapper += \"            args[idx] = torch.tensor(arg)\\n\"\n    wrapper += f\"    if {const_args}:\\n\"\n    wrapper += \"        A, B = args\\n\"\n    wrapper += \"        return torch.{func_name}(A, B, left={left}, out={out})\\n\"\n    wrapper += \"    else:\\n\"\n    wrapper += \"        A, B = args\\n\"\n    wrapper += \"        return torch.{func_name}(A, B, left={left})\\n\"\n    return wrapper\n\n@triton.jit\ndef linalg_solve_kernel(\n    A,\n    B,\n    stride_za,\n    stride_ha,\n    stride_ma,\n    stride_ak,\n    stride_zb,\n    stride_hb,\n    stride_mb,\n    stride_kb,\n    stride_zx,\n    stride_hx,\n    stride_mx,\n    n,\n    k,\n    ONE,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n    LEFT: tl.constexpr,\n):\n    \"\"\"\n    Compute the solution of a square system of linear equations with a unique solution.\n    Args:\n        A: The input matrix A of shape (n, n) or (batch, n, n)\n        B: The input matrix B of shape (n, 1) or (batch, n, 1)\n        stride_za, stride_ha, stride_ma, stride_ak: Stride for accessing A\n        stride_zb, stride_hb, stride_mb, stride_kb: Stride for accessing B\n        stride_zx, stride_hx, stride_mx: Stride for accessing X\n        n: Size of the square matrix\n        k: Dummy parameter for kernel reuse\n        ONE: Tensor of value 1 to allow for division\n        BLOCK_SIZE_M: Block size for the inner most loop\n        BLOCK_SIZE_N: Block size for the middle loop\n        BLOCK_SIZE_K: Block size for the outer loop\n        GROUP_SIZE_M: Group size for the inner most loop\n        LEFT: Whether to solve AX = B or XA = B\n    Returns:\n        X: The solution matrix of shape (n, 1) or (batch, n, 1)\n    \"\"\"\n    # Program ids\n    pid_z = tl.program_id(axis=0)\n    if len(A.shape) == 4:\n        pid_h = tl.program_id(axis=1)\n        A += pid_z * stride_za + pid_h * stride_ha\n        B += pid_z * stride_zb + pid_h * stride_hb\n    else:\n        A += pid_z * stride_za\n        B += pid_z * stride_zb\n    # Create thread ids\n    #拓扑排序\n    # Inner most loop tile\n    tile_m = tl.arange(0, BLOCK_SIZE_M)\n    tile_n = tl.arange(0, BLOCK_SIZE_N)\n    # Middle loop tile\n    tile_k = tl.arange(0, BLOCK_SIZE_K)\n    # Loop over k\n    for kk in range(0, k, BLOCK_SIZE_K):\n        # Create range for accessing memory\n        rk = kk + tile_k\n        # Load A tiles\n        a = tl.load(\n            A + (tile_m[:, None] * stride_ma + rk[None, :] * stride_ak),\n            mask=(tile_m[:, None] < n) & (rk[None, :] < k),\n            other=0.0,\n        )\n        if LEFT:\n            # Load B tiles\n            b = tl.load(\n                B + (tile_m[:, None] * stride_mb + tile_n[None, :] * stride_kb),\n                mask=(tile_m[:, None] < n) & (tile_n[None, :] < 1),\n                other=0.0,\n            )\n            # Matmul\n            c = tl.dot(a, b, allow_tf32=False)\n            # Store result\n            tl.store(\n                B + (tile_m[:, None] * stride_mx + tile_n[None, :] * stride_k),\n                c,\n                mask=(tile_m[:, None] < n) & (tile_n[None, :] < 1),\n            )\n        else:\n            # Load B tiles\n            b = tl.load(\n                B + (tile_n[:, None] * stride_kb + rk[None, :] * stride_mb),\n                mask=(tile_n[:, None] < n) & (rk[None, :] < k),\n                other=0.0,\n            )\n            # Matmul\n            c = tl.dot(b, a, allow_tf32=False)\n            # Store result\n            tl.store(\n                B + (tile_n[:, None] * stride_mx + tile_m[None, :] * stride_k),\n                c,\n                mask=(tile_n[:, None] < n) & (tile_m[None, :] < 1),\n            )\n    # Compute 1/k\n    k_rec = tl.math.rsqrt(kk + 1)\n    # Normalize\n    mask = tile_m[:, None] < n\n    x = tl.load(\n        B + tile_m[:, None] * stride_mx, mask=mask, other=0.0\n    )  # Loading stored result\n    x *= ONE * k_rec\n    tl.store(\n        B + tile_m[:, None] * stride_mx, x, mask=mask\n    )  # Overwriting stored result\n\ndef get_kernel_signature(args, kwargs):\n    sig = \"\"\n    for a in args:\n        if isinstance(a, torch.Tensor):\n            sig += f\"{a.ndim} \"\n        else:\n            sig += \"0 \"\n    sig = sig.strip()\n    const_args = False\n    if kwargs.get(\"left\") is not None:\n        const_args = True\n        sig += \" 1\"\n    else:\n        sig += \" 0\"\n    if kwargs.get(\"out\") is not None:\n        const_args = True\n        sig += \" 1\"\n    else:\n        sig += \" 0\"\n    return sig, const_args\n\nfunc_name = \"linalg_solve\"\nbackend = \"CUDA\"\ndevice = \"CUDA\"\nconst_args, left, out = False, False, False\nsignature, const_args = get_kernel_signature([torch.randn(3, 3, device=\"cuda\"), torch.randn(3, 1, device=\"cuda\")], {})\nwrapper = generate_wrapper(func_name, signature, const_args, backend, device)\nprint(wrapper)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Airy function Ai for each element of the input tensor.\nWrapper Entry Information: airy_ai(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Airy function :math:`\\text{Ai}\\left(\\text{input}\\right)`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef airy_ai_kernel(x, *, out):\n    # Convert input to float32\n    x_fp32 = x.to(tl.float32)\n    # Compute Airy function Ai\n    y_fp32 = tl.airy_ai(x_fp32)\n    # Write result to output\n    tl.store(out, y_fp32)\n\ndef airy_ai(input, *, out=None):\n    # Ensure input is a tensor\n    if not isinstance(input, torch.Tensor):\n        input = torch.tensor(input)\n    # Ensure output is a tensor\n    if out is not None and not isinstance(out, torch.Tensor):\n        out = torch.tensor(out)\n    # Call Triton kernel\n    airy_ai_kernel(input, out=out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Tests if each element of the input tensor has its sign bit set or not. It handles signed zeros, so negative zero (-0) returns True.\nWrapper Entry Information: signbit(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nother: signbit handles signed zeros, so negative zero (-0) returns True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import logging\nimport torch\nimport triton\nimport triton.language as tl\n\ntry:\n    from triton.language.extra.cuda.libdevice import signbit as _signbit\nexcept ImportError:\n    try:\n        from triton.language.math import signbit as _signbit\n    except ImportError:\n        from triton.language.libdevice import signbit as _signbit\n\n@triton.jit\ndef signbit(input):\n    return _signbit(input)\n\ndef signbit(input, *, out=None):\n    logging.debug(\"GEMS SIGNBIT\")\n    if out == None:\n        return signbit(input)\n    else:\n        return signbit(input, out=out)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a scaled matrix-matrix product, then calculates the dot product of the first two rows of the resulting matrix. First, it multiplies matrix A and B using the scalar alpha and then adds the scaled version of matrix C using scalar beta. Finally, it computes the dot product of the first two rows of the updated matrix C.\nWrapper Entry Information: def matrix_multiply_and_row_dot(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float, C: torch.Tensor) -> torch.Tensor: A (Tensor): First input matrix of shape `(n, m)`. B (Tensor): Second input matrix of shape `(m, p)`. alpha (float): Scalar multiplier for the matrix-matrix product. beta (float): Scalar multiplier for the input matrix `C`. C (Tensor): Output matrix of shape `(n, p)` where the results are added.\nMath: 1. `C = alpha * torch.mm(A, B) + beta * C`; 2. `result = torch.dot(C[0], C[1])`\nother: Assumes `C` has at least two rows for the dot product to be computed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _kernel(A, B, C, alpha, beta):\n    # Triton kernel to perform matrix multiplication and scaling\n    pid = tl.program_id(0)\n    if pid == 0:\n        return _matrix_multiply_and_row_dot(A, B, C, alpha, beta)\n    elif pid == 1:\n        return _another_function(A, B, C)\n    else:\n        return torch.tensor(0.0)\n\ndef _wrapper(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    # Wrapper function to call the Triton kernel\n    assert A.shape[1] == B.shape[0], \"Incompatible dimensions for matrix multiplication\"\n    assert A.is_contiguous(), \"Matrix A must be contiguous\"\n    assert B.is_contiguous(), \"Matrix B must be contiguous\"\n    assert C.is_contiguous(), \"Matrix C must be contiguous\"\n    assert A.shape[0] >= 2, \"Matrix A must have at least two rows for the dot product\"\n    return _kernel(A, B, C, alpha, beta)\n\ndef matrix_multiply_and_row_dot(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float, C: torch.Tensor) -> torch.Tensor:\n    # Function to perform matrix multiplication and row dot product\n    assert A.shape[1] == B.shape[0], \"Incompatible dimensions for matrix multiplication\"\n    batch_shape = broadcast_shapes(A.shape[:-2], B.shape[:-2])\n    A = A.reshape(-1, A.shape[-2], A.shape[-1])\n    B = B.reshape(-1, B.shape[-2], B.shape[-1])\n    C = C.reshape(-1, C.shape[-2], C.shape[-1])\n    res = torch.empty(A.shape[:-1] + (C.shape[-1],), dtype=A.dtype, device=A.device)\n    n_elements = res.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    alpha = promote_to_tensor(alpha, dtype=A.dtype, device=A.device)\n    beta = promote_to_tensor(beta, dtype=A.dtype, device=A.device)\n    _wrapper[grid](A, B, C, alpha, beta)\n    return res.reshape(batch_shape + res.shape[-2:])\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the n-th derivative of the digamma function on input. The function is implemented for nonnegative integers n >= 0.\nWrapper Entry Information: def polygamma(n, input, *, out=None) -> Tensor: n (int): the order of the polygamma function; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\psi^{(n)}(x) = \\frac{d^{(n)}}{dx^{(n)}} \\psi(x)\nother: Implemented only for nonnegative integers n >= 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel for psi_0\n@triton.jit\ndef psi_0(x):\n    # Series expansion for psi_0\n    z = 1 / x\n    z2 = z * z\n    p0 = -2.04032302807999361610816136837999495689\n    p1 = 17.71471779056776769434974223782708387338\n    p2 = -130.6034684919584829667723217191678042073\n    p3 = 799.3667853443463732494604627849650549617\n    p4 = -4834.26036513770832598028708861743773318\n    p5 = 29928.5856737691169133629973153428987003\n    p6 = -182397.3878349161369794714314099849480493\n    p7 = 1130312.732979746669294495695199393285148\n    p8 = -7141640.093676381276964387946614740114025\n    p9 = 46164447.82113179358605296108986937975944\n    p10 = -299291441.4438294132792231903621171536439\n    p11 = -1.999999999999999105824114791346849253857e-08\n    return (p0 + z * (p1 + z * (p2 + z * (p3 + z * (p4 + z * (p5 + z * (p6 + z * (p7 + z * (p8 + z * (p9 + z * (p10 + 11.0 * z * p11)))))))))) / (z2 * (1.0 + z))\n\n# Triton kernel for derivatives of psi\n@triton.jit\ndef derivatives_of_psi(n, x):\n    # Recursive calculation for higher derivatives of psi\n    if n == 0:\n        return psi_0(x)\n    else:\n        z = 1 / x\n        z2 = z * z\n        return (-n * derivatives_of_psi(n - 1, x) + psi_0(x) - 0.5 * (n - 1) * (n - 1) * z2) / z2\n\n# Wrapper function for polygamma\ndef polygamma(n, input, *, out=None) -> torch.Tensor:\n    # Ensure input is a tensor\n    if not isinstance(input, torch.Tensor):\n        input = torch.tensor(input)\n    # Compute polygamma using Triton\n    return derivatives_of_psi(n, input)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Exponential Linear Unit (ELU) activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with ELU.\nWrapper Entry Information: def elu_linear(input, weight, bias=None, alpha=1.0, inplace=False) -> Tensor: input (Tensor): The input tensor for the linear layer. weight (Tensor): The weight tensor for the linear transformation. bias (Tensor, optional): The bias tensor for the linear transformation. Default: None. alpha (float, optional): The \\(\\alpha\\) parameter for the ELU function. Default: 1.0. inplace (bool, optional): Whether to apply ELU in-place. Default: False.\nMath: \\text{out} = \\text{ELU}(\\text{Linear}(x))\n\n\\text{ELU}(x) = \\begin{cases}\n    x, & \\text{ if } x > 0\\\\\n    \\alpha * (\\exp(x) - 1), & \\text{ if } x \\leq 0\n\\end{cases}\nother: The function integrates linear transformation and ELU activation. The ELU activation applies element-wise to incorporate non-linearity after linear mapping.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import exp2\n\n@triton.jit\ndef elu_linear_fwd_fused(\n    X,\n    W,\n    B,\n    Y,\n    alpha,\n    stride_x_m,\n    stride_x_k,\n    stride_w_k,\n    stride_w_n,\n    stride_y_m,\n    stride_y_n,\n    n,\n    m,\n    k,\n    BLOCK_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    BLOCK_K: tl.constexpr,\n    GROUP_M: tl.constexpr,\n    EVEN_K: tl.constexpr,\n    BIAS: tl.constexpr,\n    INPLACE: tl.constexpr,\n):\n    start_m = tl.program_id(0)\n    off_alpha = tl.program_id(1)\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices\n    # for rows (resp. col) of C\n    rm = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = tl.arange(0, BLOCK_N)\n    # even_k = k % (BLOCK_K * GROUP_M) == 0\n    # we only pre-compute some indices when we know k is divisible by BLOCK_K * GROUP_M\n    if EVEN_K:\n        rk = tl.arange(0, BLOCK_K)\n        # the next lines are vectorized operations which means that we will get BLOCK_M * BLOCK_N * BLOCK_K results\n        # in BLOCK_M * BLOCK_N blocks of size BLOCK_K. This is how we vectorize to improve performance\n        x = tl.load(X + rm[:, None] * stride_x_m + rk[None, :] * stride_x_k)\n        w = tl.load(W + rk[:, None] * stride_w_k + rn[None, :] * stride_w_n)\n    else:\n        rk = tl.arange(0, BLOCK_K * GROUP_M)\n        # split the computation in GROUP_M smaller computation blocks of size k // GROUP_M\n        x = tl.load(\n            X + rm[:, None] * stride_x_m + (rk // GROUP_M) * stride_x_k,\n            mask=rk < k,\n            other=0,\n        )\n        w = tl.load(\n            W + (rk[:, None] // GROUP_M) * stride_w_k + rn[None, :] * stride_w_n,\n            mask=rk[:, None] < k,\n            other=0,\n        )\n    # matmul\n    y = tl.dot(x, w)\n    # add bias\n    if BIAS:\n        b = tl.load(B + rn, mask=rn < n)\n        y += b[None, :]\n    # apply elu\n    y = elu(y, alpha)\n    # write back\n    if INPLACE:\n        tl.store(Y + rm[:, None] * stride_y_m + rn[None, :] * stride_y_n, y)\n    else:\n        tl.store(Y + rm[:, None] * stride_y_m + rn[None, :] * stride_y_n, y, mask=rm < m and rn < n)\n\n\ndef elu(x, alpha=1.0):\n    return tl.where(x > 0, x, alpha * (exp2(x) - 1))\n\n\n@triton.autotune(\n    configs=[\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 64, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 32}, num_stages=4, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 64, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 64, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 32}, num_stages=4, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 64, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 32, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 32, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 32, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 128, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 128, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 128, \"BLOCK_K\": 128, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 64, \"BLOCK_K\": 128, \"GROUP_M\": 8, \"BATCH\": 32}, num_stages=4, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 64, \"BLOCK_N\": 256, \"BLOCK_K\": 128, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 64, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 64, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 128, \"BLOCK_K\": 64, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 256, \"BLOCK_N\": 64, \"BLOCK_K\": 64, \"GROUP_M\": 8, \"BATCH\": 32}, num_stages=4, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 64, \"BLOCK_N\": 256, \"BLOCK_K\": 64, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=3, num_warps=8\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=2, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 128, \"BLOCK_N\": 256, \"BLOCK_K\": 32, \"GROUP_M\": 8, \"BATCH\": 16}, num_stages=2, num_warps=4\n        ),\n        triton.Config(\n            {\"BLOCK_M\": 2", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between two input tensors `x1` and `x2` after normalizing both tensors. Normalization is performed along the specified dimension, followed by pairwise distance calculation.\nWrapper Entry Information: def fused_pairwise_distance_normalize(x1: torch.Tensor, x2: torch.Tensor, p_norm: float = 2.0, eps_norm: float = 1e-12, eps_distance: float = 1e-6, keepdim: bool = False) -> torch.Tensor\nArgs:\n    x1 (Tensor): First input tensor.\n    x2 (Tensor): Second input tensor.\n    p_norm (float, optional): The exponent value in the norm for normalization. Default: 2.\n    eps_norm (float, optional): Small value to avoid division by zero during normalization. Default: 1e-12.\n    eps_distance (float, optional): Small value to avoid division by zero in distance calculation. Default: 1e-6.\n    keepdim (bool, optional): If `True`, retains the last dimension in the output. Default: `False`.\nother: Normalization is performed along the specified dimension. Small values `eps_norm` and `eps_distance` are used to avoid division by zero during normalization and distance calculation, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_pairwise_distance_normalize_kernel(\n    x1_ptr, x2_ptr, out_ptr, N, D, ridx_stride, cidx_stride, embed_stride, n_pairs, p_norm, eps_norm, eps_distance, BLOCK_SIZE: tl.constexpr\n):\n    ridx = tl.program_id(0)\n    cidx = tl.program_id(1)\n\n    x1_ptr = x1_ptr + ridx * ridx_stride\n    x2_ptr = x2_ptr + cidx * cidx_stride\n    out_ptr = out_ptr + (ridx * D + cidx) * embed_stride\n\n    embed_idx = tl.arange(0, BLOCK_SIZE)\n    mask = embed_idx < D\n\n    x1 = tl.load(x1_ptr + embed_idx, mask=mask, other=0).to(tl.float32)\n    x2 = tl.load(x2_ptr + embed_idx, mask=mask, other=0).to(tl.float32)\n\n    # Normalize x1 and x2\n    norm_x1 = tl.math.pow(tl.math.abs(x1), p_norm).sum(axis=0)\n    norm_x1 = tl.math.pow(norm_x1 + eps_norm, 1.0 / p_norm)\n    x1 = x1 / norm_x1\n\n    norm_x2 = tl.math.pow(tl.math.abs(x2), p_norm).sum(axis=0)\n    norm_x2 = tl.math.pow(norm_x2 + eps_norm, 1.0 / p_norm)\n    x2 = x2 / norm_x2\n\n    # Compute distance\n    distance = x1 - x2\n    distance = tl.math.pow(tl.math.abs(distance), p_norm).sum(axis=0)\n    distance = tl.math.pow(distance + eps_distance, 1.0 / p_norm)\n\n    # Write distance to output\n    tl.store(out_ptr, distance)\n\ndef fused_pairwise_distance_normalize(x1: torch.Tensor, x2: torch.Tensor, p_norm: float = 2.0, eps_norm: float = 1e-12, eps_distance: float = 1e-6, keepdim: bool = False) -> torch.Tensor:\n    assert x1.dim() == 2\n    assert x2.dim() == 2\n    assert x1.size(1) == x2.size(1)\n\n    D = x1.size(1)\n    n_pairs = x1.size(0) * x2.size(0)\n    out = torch.empty(n_pairs, dtype=torch.float32, device=x1.device)\n\n    BLOCK_SIZE = triton.next_power_of_2(D)\n    grid = (x1.size(0), x2.size(0))\n\n    fused_pairwise_distance_normalize_kernel[grid](\n        x1, x2, out, D, D, x1.stride(0), x2.stride(0), out.stride(0), n_pairs, p_norm, eps_norm, eps_distance, BLOCK_SIZE\n    )\n\n    if not keepdim:\n        out = out.view(x1.size(0), x2.size(0))\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements the Adam optimization algorithm, which is an adaptive learning rate optimization algorithm designed for training deep neural networks. It computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients. The algorithm can optionally use the AMSGrad variant, apply weight decay, and maximize the objective function. It supports various implementation optimizations like foreach and fused implementations for performance improvements on CUDA.\nWrapper Entry Information: def Adam(params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False, foreach=None, maximize=False, capturable=False, differentiable=False, fused=None) -> Optimizer\nMath: m_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t; v_t = \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t; \\widehat{m_t} = m_t/(1-\\beta_1^t); \\widehat{v_t} = v_t/(1-\\beta_2^t); \\theta_t = \\theta_{t-1} - \\gamma \\widehat{m_t}/(\\sqrt{\\widehat{v_t}} + \\epsilon)\nother: The foreach and fused implementations are typically faster than the for-loop, single-tensor implementation. The algorithm is based on the paper 'Adam: A Method for Stochastic Optimization'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import functools\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef adam_fused(\n    p, grad, m, v, h, lr, beta1, beta2, eps, wd, bias_correction, max_mode\n):\n    # Compute bias-corrected first and second moment estimates\n    m = m * beta1 + grad\n    v = v * beta2 + grad * grad\n    if bias_correction:\n        m_hat = m / (1 - beta1)\n        v_hat = v / (1 - beta2)\n    else:\n        m_hat = m\n        v_hat = v\n    # Update the parameters\n    if wd != 0:\n        p = p * (1 - lr * wd)\n    if max_mode:\n        p = p - lr * m_hat / (tl.sqrt(v_hat) + eps)\n    else:\n        p = p + lr * m_hat / (tl.sqrt(v_hat) + eps)\n    # Store the updated moments and state\n    h[0] = m\n    h[1] = v\n    h[2] = p\n\ndef _adam(params, grads, moment1, moment2, state, lr, beta1, beta2, eps, wd, amsgrad,\n           bias_correction, foreach, max_mode, out_params):\n    # Get the number of parameters and their strides\n    n_tensors = moment1.shape[0]\n    tensor_strides = moment1.stride(0)\n    # Define a function to perform the Adam update for a single parameter\n    def _single_tensor_adam(param, grad, m, v, state, lr, beta1, beta2, eps, wd, amsgrad,\n                            bias_correction, max_mode):\n        # Load the state for the parameter\n        m_ptr = state + 3 * param * tensor_strides\n        v_ptr = state + 3 * param * tensor_strides + 1\n        h_ptr = state + 3 * param * tensor_strides + 2\n        # Load the moments and state\n        m = tl.load(m_ptr).to(tl.float32)\n        v = tl.load(v_ptr).to(tl.float32)\n        if amsgrad:\n            h = tl.load(h_ptr).to(tl.float32)\n        # Compute the Adam update\n        adam_fused(\n            param, grad, m, v, (m_ptr, v_ptr, h_ptr), lr, beta1, beta2, eps, wd, bias_correction,\n            max_mode\n        )\n    # Define a function to perform the Adam update for a batch of parameters\n    def _foreach_adam(param, grad, m, v, state, lr, beta1, beta2, eps, wd, amsgrad, bias_correction,\n                      max_mode):\n        # Compute the Adam update using the foreach implementation\n        adam_fused(\n            param, grad, m, v, state, lr, beta1, beta2, eps, wd, bias_correction, max_mode\n        )\n    # Determine whether to use the foreach implementation\n    if foreach and n_tensors > 1024:\n        _foreach_adam = functools.partial(_foreach_adam, lr=lr, beta1=beta1, beta2=beta2, eps=eps,\n                                          wd=wd, amsgrad=amsgrad, bias_correction=bias_correction,\n                                          max_mode=max_mode)\n        triton.foreach(_foreach_adam, params, grads, moment1, moment2, state)\n    else:\n        # Apply the Adam update to each parameter\n        for i, (param, grad, m, v, h) in enumerate(zip(params, grads, moment1, moment2, state)):\n            _single_tensor_adam(\n                param, grad, m, v, h, lr, beta1, beta2, eps, wd, amsgrad, bias_correction, max_mode\n            )\n    # Return the updated parameters if requested\n    if out_params is not None:\n        out_params.copy_(params)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining horizontal stacking (hstack) and element-wise division. The function first horizontally stacks a sequence of tensors and then divides each element of the resulting tensor by the corresponding element of a divisor tensor, with optional rounding modes.\nWrapper Entry Information: fused_hstack_div(tensors, divisor, *, rounding_mode=None, out=None) -> Tensor\n\n- **tensors** (sequence of Tensors): Sequence of tensors to be horizontally stacked. The tensors must have compatible shapes for stacking.\n- **divisor** (Tensor or Number): The tensor or number to divide the stacked tensor by. Must be broadcastable to the shape of the stacked tensor.\n- **rounding_mode** (str, optional): Type of rounding applied to the result:\n  - `None`: Default behavior. Performs no rounding and, if both `input` and `divisor` are integer types, promotes the inputs to the default scalar type. Equivalent to true division in Python (`/` operator).\n  - `'trunc'`: Rounds the results of the division towards zero.\n  - `'floor'`: Rounds the results of the division down.\n\n  Default: `None`.\n\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given a sequence of tensors [X_1, X_2, \\dots, X_n] and a divisor tensor D, the function computes:\n\n1. **Horizontal Stacking:**\n\n\\[\nX = \\text{hstack}(X_1, X_2, \\dots, X_n)\n\\]\n\n2. **Element-wise Division:**\n\n\\[\nY = \\frac{X}{D}\n\\]\nother: - The tensors in `tensors` must have shapes that are compatible for horizontal stacking, i.e., the dimensions except for the stacking dimension must be the same.\n- The `divisor` tensor must be broadcastable to the shape of the stacked tensor.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _hstack_div_kernel(Z, Y, X, M, N, C, divisor, rounding_mode, **meta):\n    c = tl.program_id(0)\n    if c < C:\n        y = tl.arange(0, M)\n        x = tl.arange(0, N)\n        mask = y[:, None] * N + x[None, :] < M * N\n        div = tl.load(divisor + c).to(tl.float32)\n        if rounding_mode == \"trunc\":\n            result = tl.sum((mask * (X + y[:, None] * N + x[None, :]).to(tl.float32) / div), 1)\n        elif rounding_mode == \"floor\":\n            result = tl.sum((mask * (X + y[:, None] * N + x[None, :]).to(tl.float32) / div), 1) + 0.5\n        elif rounding_mode is None:\n            result = tl.sum((mask * (X + y[:, None] * N + x[None, :]).to(tl.float32) / div), 1)\n        tl.store(Y + c * M + y, result)\n\ndef fused_hstack_div(tensors, divisor, *, rounding_mode=None, out=None):\n    if len(tensors) == 0:\n        raise RuntimeError(\"torch.hstack_div: expected a non-empty TensorList\")\n\n    if out is None:\n        out = torch.empty_like(tensors[0], dtype=tensors[0].dtype, device=tensors[0].device)\n    else:\n        assert out.shape == tensors[0].shape and out.device == tensors[0].device\n\n    if len(tensors) == 1:\n        if isinstance(divisor, torch.Tensor):\n            assert divisor.ndim == 0, \"when len(tensors) == 1, divisor must be a number\"\n            return torch.tensor(tensors[0] / divisor, device=tensors[0].device, dtype=tensors[0].dtype)\n        else:\n            return torch.tensor(tensors[0] / divisor, device=tensors[0].device, dtype=tensors[0].dtype)\n\n    M = out.numel() // out.shape[-1]\n    N = out.shape[-1]\n    C = len(tensors)\n\n    grid = (C,)\n    with torch.cuda.device(tensors[0].device):\n        _hstack_div_kernel[grid](M, N, C, divisor, rounding_mode)\n\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Broadcasts the given tensors according to broadcasting semantics. This function takes multiple tensors as input and broadcasts them to have the same shape. Broadcasting refers to expanding the dimensions of tensors as necessary to make them compatible for element-wise operations. The broadcasted tensors share the same memory location for their elements, leading to potential issues with in-place operations.\nWrapper Entry Information: broadcast_tensors(*tensors) -> List of Tensors: *tensors (Args: any number of tensors of the same type) -> Example: x = torch.arange(3).view(1, 3), y = torch.arange(2).view(2, 1), a, b = torch.broadcast_tensors(x, y), a.size() == torch.Size([2, 3]), a == tensor([[0, 1, 2],[0, 1, 2]])\nother: More than one element of a broadcasted tensor may refer to a single memory location. In-place operations may result in incorrect behavior. If writing to tensors is needed, clone them first.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nfrom typing import List\n\n\ndef broadcast_tensors(*tensors) -> List[torch.Tensor]:\n    return torch.broadcast_tensors(*tensors)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor, followed by applying the rectified linear unit (ReLU) activation function element-wise on the result. This operation first applies a 2D convolution over the input tensor using the specified filters, and then applies ReLU activation to the convolution result, setting all negative values to zero.\nWrapper Entry Information: relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, inplace=False) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1. inplace (bool, optional): If True, will perform ReLU operation in-place. Default: False.\nMath: The operation is defined as: \\text{out} = \\text{ReLU}(\\text{conv2d}(\\text{input})), where \\text{ReLU}(x) = \\max(0, x).\nother: Returns:\n    Tensor: A tensor resulting from the 2D convolution followed by ReLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra.cuda.libdevice import relu\n\n@triton.jit\ndef relu_conv2d_kernel(\n    input, weight, bias, stride, padding, output, n, c, h, w, k, Y, X, stride_n, stride_c, stride_h, stride_w, stride_k, stride_Y, stride_X, stride_bias, S, P, GROUPS, inplace: tl.constexpr\n):\n    pid = tl.program_id(0)\n    # compute output index\n    y = tl.arange(0, Y)[None, :] + pid * stride_Y\n    x = tl.arange(0, X)[:, None] + tl.program_id(1) * stride_X\n    n_idx = (y // S) * P + (x // P)\n    c_idx = ((y % S) * P + (x % P)) // (h * w)\n    k_idx = ((y % S) * P + (x % P)) % (h * w)\n    # compute input index\n    input_n_idx = n_idx // stride_n\n    input_c_idx = c_idx * GROUPS\n    input_h_idx = (k_idx // stride_w) % h\n    input_w_idx = k_idx % w\n    # compute weight index\n    weight_c_idx = c_idx\n    weight_k_idx = k_idx\n    # compute\n    if inplace:\n        input_ptrs = input + input_n_idx * stride_n + (input_c_idx + tl.arange(0, GROUPS)) * stride_c + input_h_idx * stride_h + input_w_idx * stride_w\n        input_val = tl.load(input_ptrs, mask=(input_n_idx < n) & (input_c_idx + tl.arange(0, GROUPS) < c) & (input_h_idx < h) & (input_w_idx < w), other=0)\n        weight_ptrs = weight + weight_c_idx * stride_k + weight_k_idx\n        weight_val = tl.load(weight_ptrs, mask=(weight_c_idx < c // GROUPS) & (weight_k_idx < k), other=0)\n        acc = tl.sum(input_val * weight_val, 0)\n    else:\n        acc = tl.zeros([1], dtype=tl.float32)\n        input_ptrs = input + input_n_idx * stride_n + input_c_idx * stride_c + (input_h_idx * stride_h + input_w_idx * stride_w)[None, :]\n        weight_ptrs = weight + weight_c_idx * stride_k + weight_k_idx[:, None]\n        mask_n = input_n_idx < n\n        mask_c = (input_c_idx + tl.arange(0, GROUPS)) < c\n        mask_k = weight_k_idx < k\n        mask_h = input_h_idx < h\n        mask_w = input_w_idx < w\n        mask = mask_n & mask_c & (mask_k[:, None] & mask_h & mask_w)\n        input_val = tl.load(input_ptrs, mask=mask, other=0)\n        weight_val = tl.load(weight_ptrs, mask=mask_k[:, None] & mask_k[:, None], other=0)\n        acc += tl.sum(input_val * weight_val, 0)\n    if bias is not None:\n        bias_ptrs = bias + c_idx * stride_bias\n        bias_val = tl.load(bias_ptrs, mask=(c_idx < c // GROUPS), other=0)\n        acc += bias_val\n    acc = relu(acc)\n    output_ptrs = output + n_idx * stride_n + (c_idx + tl.arange(0, GROUPS)) * stride_c + input_h_idx * stride_h + input_w_idx * stride_w\n    tl.store(output_ptrs, acc, mask=(n_idx < n) & (c_idx + tl.arange(0, GROUPS) < c) & (input_h_idx < h) & (input_w_idx < w))\n\n\ndef relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, inplace=False):\n    if type(stride) == int:\n        stride = (stride, stride)\n    if type(padding) == int:\n        padding = (padding, padding)\n    if type(dilation) == int:\n        dilation = (dilation, dilation)\n    batch, in_channels, height, width = input.shape\n    out_channels, channels, kernel_height, kernel_width = weight.shape\n    assert channels * groups == in_channels\n    assert out_channels % groups == 0\n    out_channels_per_group = out_channels // groups\n    assert (kernel_height == 1) & (kernel_width == 1)\n    assert (height - kernel_height + 2 * padding[0]) % stride[0] == 0\n    assert (width - kernel_width + 2 * padding[1]) % stride[1] == 0\n    output_height = (height - kernel_height + 2 * padding[0]) // stride[0] + 1\n    output_width = (width - kernel_width + 2 * padding[1]) // stride[1] + 1\n    output = torch.empty((batch, out_channels, output_height, output_width), dtype=input.dtype, device=input.device)\n    grid = lambda META: (triton.cdiv(output_height, META[\"Y\"]), triton.cdiv(output_width, META[\"X\"]))\n    with torch.cuda.device(input.device):\n        relu_conv2d_kernel[grid](\n            input,\n            weight,\n            bias,\n            stride,\n            padding,\n            output,\n            batch,\n            in_channels,\n            height,\n            width,\n            out_channels_per_group,\n            output_height,\n            output_width,\n            batch.stride(0),\n            batch.stride(1),\n            batch.stride(2),\n            batch.stride(3),\n            weight.stride(0),\n            weight.stride(1),\n            weight.stride(2),\n            weight.stride(3),\n            output.stride(0),\n            output.stride(1),\n            output.stride(2),\n            output.stride(3),\n            bias.stride(0) if bias is not None else 0,\n            stride[0],\n            padding[0],\n            groups,\n            inplace,\n        )\n    return output\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of the elements of the input tensor.\nWrapper Entry Information: log(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_{i} = \\log_{e} (x_{i})\nother: The function computes the natural logarithm (base e) of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef log(input):\n    return tl.math.log(input)\n\ndef log(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.is_contiguous()\n    if input.dtype.is_fp64():\n        out = log(input, out=out)\n    elif input.dtype.is_fp32():\n        out = log(input.to(tl.float32), out=out).to(tl.float16)\n    else:\n        pass\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a 2D adaptive average pooling over an input signal composed of several input planes. The output is of size H x W, for any input size. The number of output features is equal to the number of input planes. The target output size of the image can be a tuple (H, W) or a single H for a square image H x H. H and W can be either an int, or None which means the size will be the same as that of the input.\nWrapper Entry Information: def adaptive_avg_pool2d(output_size) -> Tensor\nArgs:\n    output_size: the target output size (single integer or double-integer tuple)\n\nShape:\n    - Input: (N, C, H_in, W_in) or (C, H_in, W_in)\n    - Output: (N, C, S_0, S_1) or (C, S_0, S_1), where S=output_size\nother: The target output size can be a single integer for square images or a tuple for rectangular dimensions. H and W can be None to retain input dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom ..utils.shape_utils import volume\n\n# Triton kernel for 2D adaptive average pooling\n@triton.jit\ndef adaptive_avg_pool2d_kernel(\n    X,\n    Y,\n    stride_s_0_x,\n    stride_s_1_x,\n    stride_s_0_y,\n    stride_s_1_y,\n    S_0,\n    S_1,\n    N,\n    C,\n    HS,\n    WS,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid_nc = tl.program_id(0)\n    pid_c = pid_nc % C\n    pid_n = pid_nc // C\n    # compute offset\n    offset_n = pid_n * N * C + pid_c\n    offset_y = (\n        offset_n * S_0 * S_1\n        + tl.arange(0, BLOCK_SIZE)[:, None] * S_1\n        + tl.arange(0, BLOCK_SIZE)[None, :]\n    )\n    offset_x_block = (\n        offset_n * stride_s_0_x * stride_s_1_x\n        + tl.arange(0, BLOCK_SIZE)[:, None] * stride_s_0_x * WS\n        + tl.arange(0, BLOCK_SIZE)[None, :] * stride_s_1_x\n    )\n\n    # compute x block ptr\n    x_block_ptr = X + offset_x_block\n    # compute y ptr\n    y_ptr = Y + offset_y\n\n    # do not compute for out of boundary\n    x_mask = (pid_n < N) & (pid_c < C)\n\n    # for average pooling, we accumulate in fp32\n    accum = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n\n    for i in range(tl.cdiv(HS, BLOCK_SIZE)):\n        for j in range(tl.cdiv(WS, BLOCK_SIZE)):\n            # compute mask\n            mask = (\n                (i * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)[:, None] < HS)\n                & (j * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)[None, :] < WS)\n                & x_mask\n            )\n            # boundary check on feature map\n            x = tl.load(x_block_ptr + i * BLOCK_SIZE * stride_s_0_x * stride_s_1_x + j * BLOCK_SIZE * stride_s_0_x * stride_s_1_x, mask=mask, other=0.0)\n            accum += x\n\n            # move to the next src block\n            x_block_ptr += BLOCK_SIZE * stride_s_0_x * stride_s_1_x\n\n        # write back\n        if x_mask:\n            tl.store(y_ptr, accum / (HS * WS), mask=(tl.arange(0, BLOCK_SIZE)[:, None] < S_0) & (tl.arange(0, BLOCK_SIZE)[None, :] < S_1))\n            y_ptr += S_0 * S_1\n\n# Wrapper function for calling the Triton kernel\ndef adaptive_avg_pool2d(output_size) -> Tensor:\n    def wrapper(x):\n        assert x.dim() == 4 or x.dim() == 3, \"only accept 3d or 4d tensor\"\n        if x.dim() == 3:\n            x = x.unsqueeze(0)\n        N, C, H, W = x.shape\n        if isinstance(output_size, int):\n            output_size = (output_size, output_size)\n        assert isinstance(output_size, tuple) and len(output_size) == 2, \"invalid output size\"\n        s0, s1 = output_size\n        assert s0 is not None and s1 is not None, \"square matrix is not supported\"\n        y = torch.empty((N, C, s0, s1), dtype=x.dtype, device=x.device)\n        # check if kernel exists, if not, compile\n        kernel, num_warps = get_kernel(\"adaptive_avg_pool2d\", x.dtype, BLOCK_SIZE=s0)\n        # launch kernel\n        grid = (N * C,)\n        adaptive_avg_pool2d_kernel[grid](\n            x,\n            y,\n            stride_s_0_x=H,\n            stride_s_1_x=W,\n            stride_s_0_y=s0,\n            stride_s_1_y=s1,\n            S_0=s0,\n            S_1=s1,\n            N=N,\n            C=C,\n            HS=H,\n            WS=W,\n            BLOCK_SIZE=s0,\n            num_warps=num_warps,\n        )\n        return y.squeeze(0) if N == 1 and C == 1 else y\n    return wrapper\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Converts a float model to a dynamic quantized model by replacing specified modules with their dynamic weight-only quantized versions. Provides simple usage with a dtype argument (either float16 or qint8), and fine-grained control with qconfig and mapping parameters. The process is performed in-place if specified, transforming the original model.\nWrapper Entry Information: quantize_dynamic(model, qconfig_spec=None, inplace=False, mapping=None) -> Model\nArgs:\n    model: input model\n    qconfig_spec: Either a dictionary mapping submodule names/types to quantization configurations or a set of types/names for dynamic quantization\n    inplace: carry out model transformations in-place, mutating the original module\n    mapping: maps submodule types to dynamically quantized versions\nother: Dynamic quantization is typically performed on layers with large weight sizes such as Linear and RNN variants. The qconfig_spec can be a dictionary mapping submodule types or names to quantization configurations, or a set specifying which submodules to apply dynamic quantization to. If qconfig is provided, it overrides dtype.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nfrom torch.quantization import default_dynamic_qconfig\nfrom .quantize import _is_weight_only_quantizable\n\ndef quantize_dynamic(\n    model: torch._C._dynamo.guards.GuardsT,\n    qconfig_spec: torch._C._dynamo.guards.GuardsT = None,\n    inplace: torch._C._dynamo.guards.GuardsT = False,\n    mapping: torch._C._dynamo.guards.GuardsT = None,\n) -> torch._C._dynamo.guards.GuardsT:\n    \"\"\"\n    Converts a float model to a dynamic quantized model, optionally replacing specified modules with their dynamic weight-only quantized versions.\n\n    Args:\n        model (Model): The input model to quantize.\n        qconfig_spec (Union[Dict[str, QConfig], Set[str]], optional): Specification for quantization configurations. Defaults to None.\n        inplace (bool, optional): Whether to perform the quantization in place. Defaults to False.\n        mapping (Dict[Type, Type], optional): A dictionary mapping module types to their dynamic weight-only quantized counterparts. Defaults to None.\n\n    Returns:\n        Model: The quantized model.\n    \"\"\"\n    from torch.quantization import quantize_dynamic as _quantize_dynamic\n\n    return _quantize_dynamic(\n        model, qconfig_spec, inplace, mapping=mapping or _dynamic_wo_qconfig_mapping()\n    )\n\ndef _dynamic_wo_qconfig_mapping() -> dict:\n    from torch.ao.quantization import (\n        DynamicQuantLinear,\n        DynamicQuantEmbedding,\n        DynamicQuantLSTM,\n        DynamicQuantGRU,\n        DynamicQuantRNN,\n    )\n\n    return {\n        torch.nn.Linear: DynamicQuantLinear,\n        torch.nn.Embedding: DynamicQuantEmbedding,\n        torch.nn.LSTM: DynamicQuantLSTM,\n        torch.nn.GRU: DynamicQuantGRU,\n        torch.nn.RNN: DynamicQuantRNN,\n    }\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image using specified filters and an optional bias, then adds another tensor or scalar to the convolution result, scaled by alpha. The input tensor shape is (minibatch, in_channels, iH, iW), and the weight tensor shape is (out_channels, in_channels / groups, kH, kW). The function also allows for setting the stride, padding, dilation, groups, and an optional output tensor.\nWrapper Entry Information: conv2d_add(input, weight, bias=None, other=None, stride=1, padding=0, dilation=1, groups=1, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. other (Tensor or Number, optional): The tensor or number to add to the convolution result. Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple (sH, sW). Default: 1. padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple (padH, padW). Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of groups to split the input into, must divide in_channels and out_channels. Default: 1. alpha (Number, optional): The multiplier for other. Default: 1. out (Tensor, optional): The output tensor.\nMath: \\text{out} = \\text{conv2d}(\\text{input}, \\text{weight}) + \\alpha \\times \\text{other}\nother: The 'groups' argument must divide both in_channels and out_channels. Padding can be specified as 'valid', 'same', a single number, or a tuple. The output tensor shape depends on convolution parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.ops.conv2d import conv2d, conv2d_add\nfrom triton.ops import conv2d as ref_conv2d\n\n@triton.jit\ndef conv2d_add_triton(x, w, b, other, stride, padding, groups, alpha, dot_out):\n    # Ensure x and w are 4D tensors\n    assert x.dim() == 4 and w.dim() == 4\n    # Get input and filter dimensions\n    B, inC, iH, iW = x.shape\n    outC, wC, kH, kW = w.shape\n    # Calculate padding size\n    padH = (kH - 1) * padding + 1\n    padW = (kW - 1) * padding + 1\n    # Ensure groups divide input and filter channels\n    assert inC % groups == 0 and outC % groups == 0\n    # Calculate output dimensions\n    outH = (iH + 2 * padH - kH) // stride + 1\n    outW = (iW + 2 * padW - kW) // stride + 1\n    # Reshape input and weights for convolution\n    x = x.view(B * groups, inC // groups, iH, iW)\n    w = w.view(outC, inC // groups, kH, kW)\n    # Prepare output tensor\n    tl.static_assert((B * groups) % 32 == 0, \"batch size must be divisible by 32\")\n    tl.static_assert((inC // groups) % 32 == 0, \"in channel must be divisible by 32\")\n    tl.static_assert((outC // groups) % 32 == 0, \"out channel must be divisible by 32\")\n    dot_out = dot_out.view(B * groups, outC // groups, outH, outW)\n    # Call the conv2d_triton kernel\n    conv2d_triton(x, w, b, stride, padding, groups, dot_out)\n    # Apply bias and add other tensor\n    dot_out += b\n    dot_out = dot_out.to(x.dtype)\n    dot_out += other * alpha\n\ndef conv2d_add_triton_wrapper(x, w, b=None, other=None, stride=1, padding=0, groups=1, alpha=1):\n    # Ensure input dimensions are correct\n    assert x.dim() == 4 and w.dim() == 4\n    B, inC, iH, iW = x.shape\n    outC, wC, kH, kW = w.shape\n    # Prepare output tensor\n    padH = (kH - 1) * padding + 1\n    padW = (kW - 1) * padding + 1\n    outH = (iH + 2 * padH - kH) // stride + 1\n    outW = (iW + 2 * padW - kW) // stride + 1\n    dot_out = torch.empty((B, outC, outH, outW), device=x.device, dtype=x.dtype)\n    # Call the Triton kernel\n    conv2d_add_triton(x, w, b, other, stride, padding, groups, alpha, dot_out)\n    return dot_out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function torch.fft.ifftshift is the inverse of torch.fft.fftshift. It rearranges the elements of the input tensor, which is in FFT order, such that the zero-frequency component is moved back to the original position. This is useful for preparing data for inverse FFT operations. The function can rearrange specified dimensions or all dimensions by default.\nWrapper Entry Information: ifftshift(input, dim=None) -> Tensor\n\nArgs:\n    input (Tensor): the tensor in FFT order\n    dim (int, Tuple[int], optional): The dimensions to rearrange.\n        Only dimensions specified here will be rearranged, any other dimensions\n        will be left in their original order.\n        Default: All dimensions of input.\nother: Inverse of torch.fft.fftshift.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.triton_heuristics import grid\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef ifftshift_(x, stride, N, dim=0):\n    # Calculate the shift amount, which is half the size of the dimension\n    shift = tl.where(N % 2 == 0, N // 2, N // 2 - 1)\n    # Create a range of indices for the dimension\n    idx = tl.arange(0, N)\n    # Apply the ifftshift logic\n    return tl.where(idx < shift, idx + stride * (N - shift), idx - stride * (shift + 1))\n\n@triton.jit\ndef ifftshift(x, stride, N, dim=0):\n    # Determine if the dimension is negative and adjust if necessary\n    if dim < 0:\n        dim += len(N)\n    # Calculate the new shape and strides\n    new_shape = list(x.shape)\n    new_strides = list(x.stride())\n    new_shape[dim] = N\n    new_strides[dim] = stride\n    # Apply the ifftshift_ function and return the result\n    return ifftshift_(x, stride, N, dim).view(new_shape, new_strides)\n\ndef ifftshift(input, dim=None):\n    # Determine the input shape and strides\n    shape = input.shape\n    strides = input.stride()\n    if dim is None:\n        # Flatten the input and apply ifftshift\n        input = input.reshape(-1)\n        N = shape[-1]\n        return ifftshift(input, strides[-1], N, -1).reshape(shape)\n    else:\n        # Ensure dim is a list for uniform processing\n        dim = dim if isinstance(dim, list) else [dim]\n        # Calculate the product of dimensions not being shifted\n        prod = 1\n        for i in range(len(shape)):\n            if i not in dim:\n                prod *= shape[i]\n        # Apply ifftshift to each block of the specified dimension\n        for d in dim:\n            N = shape[d]\n            orig = input.view(prod, shape[d], *shape[d + 1 :])\n            shifted = ifftshift(orig, strides[d], N, 1)\n            input = shifted.reshape(prod, *shape[d + 1 :])\n        return input\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sign bit check and the bitwise AND operation on the input tensors. `signbit` checks if the sign bit of each element in `input` is set, returning True for negative values, including -0. `bitwise_and` computes the bitwise AND between `input` and `other`, with the tensors needing to be of integral or boolean types.\nWrapper Entry Information: def signbit_bitwise_and(input: torch.Tensor, other: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    Args:\n        input (Tensor): The input tensor.\n        other (Tensor): The second tensor for bitwise AND, should be of integral or boolean types.\n    Example:\n        >>> a = torch.tensor([0.7, -1.2, 0., 2.3])\n        >>> b = torch.tensor([1, 0, 1, 1], dtype=torch.int8)\n        >>> signbit_result, bitwise_and_result = signbit_bitwise_and(a, b)\n        >>> signbit_result\n        tensor([False, True, False, False])\n        >>> bitwise_and_result\n        tensor([0, 0, 0, 0], dtype=torch.int8)\nother: The tensors need to be of integral or boolean types for the bitwise AND operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom typing import Tuple\n\n@triton.jit\ndef _signbit_bitwise_and(input, other):\n    return _signbit(input.to(tl.float32)), input.to(tl.int64) & other\n\ndef signbit_bitwise_and(input: Tensor, other: Tensor) -> Tuple[Tensor, Tensor]:\n    if input.is_floating_point() and other.is_floating_point():\n        raise RuntimeError(\"At least one of the inputs must be of integral type\")\n    if input.dtype == torch.bool:\n        input = input.to(torch.int64)\n    if other.dtype == torch.bool:\n        other = other.to(torch.int64)\n    return _signbit_bitwise_and(input, other)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise repeat interleave and log-softmax activation. First, the input tensor is repeated along the specified dimension according to the values in 'repeats'. Then, a log-softmax activation is applied to the repeated tensor along the specified dimension. This function is differentiable and supports autograd for gradient computation, making it useful for backpropagation in neural networks.\nWrapper Entry Information: fused_repeat_interleave_log_softmax(input, repeats, dim=None, *, output_size=None, dtype=None, out=None) -> Tensor\nMath: Given an input tensor X and repeats r, the function computes: 1. Repeat Interleave: The input tensor is repeated along the specified dimension: Y = repeat_interleave(X, r, dim). 2. Log-Softmax Activation: The log-softmax function is applied to the repeated tensor along the specified dimension: Z_i = log( exp(Y_i) / sum_j exp(Y_j) ) where the summation is over the specified dimension.\nother: The 'repeats' parameter controls how many times each element is repeated along the specified dimension. The 'dim' parameter specifies the dimension along which to repeat and apply log-softmax. If 'dim' is None, the input is flattened before repeating. All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom flag_gems.utils.shape_utils import volume\n\ndef cfggen():\n    block_m = [1, 2, 4, 8]\n    configs = [\n        triton.Config({\"BLOCK_M\": m}, num_warps=4) for m in block_m\n    ]\n    return configs\n\n@triton.jit\ndef logsumexp(x, y):\n    m = tl.maximum(x, y)\n    s = tl.where(x == m, y - m, tl.log(tl.exp(x - m) + tl.exp(y - m)))\n    return m + s\n\n@triton.jit\ndef fused_repeat_interleave_log_softmax_kernel(\n    input_ptr,\n    output_ptr,\n    repeats_ptr,\n    input_n_elements,\n    output_n_elements,\n    repeats_size,\n    input_stride,\n    output_stride,\n    repeats_stride,\n    BLOCK_M: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    if pid * BLOCK_M >= repeats_size:\n        return\n    offset = pid * BLOCK_M + tl.arange(0, BLOCK_M)\n    mask = offset < repeats_size\n\n    input_block_ptr = tl.make_block_ptr(\n        base=input_ptr,\n        shape=(input_n_elements, ),\n        strides=(input_stride, ),\n        offsets=(0, ),\n        block_shape=(1, ),\n        order=(0, ),\n    )\n    output_block_ptr = tl.make_block_ptr(\n        base=output_ptr,\n        shape=(output_n_elements, ),\n        strides=(output_stride, ),\n        offsets=(0, ),\n        block_shape=(1, ),\n        order=(0, ),\n    )\n    repeats = tl.load(repeats_ptr + offset, mask=mask)\n\n    for i in range(repeats):\n        x = tl.load(input_block_ptr, boundary_check=(0, ))\n        x = x.to(tl.float32)\n        x = tl.where(repeats_ptr + offset == 0, x, -float(\"inf\"))\n        x = logsumexp(x, tl.load(output_block_ptr, boundary_check=(0, )))\n        tl.store(output_block_ptr, x.to(output_ptr.dtype.element_ty),\n                 boundary_check=(0, ))\n        input_block_ptr = tl.advance(input_block_ptr, (1, ))\n        output_block_ptr = tl.advance(output_block_ptr, (1, ))\n\ndef fused_repeat_interleave_log_softmax(\n    input: Tensor,\n    repeats: Tensor,\n    dim: int = None,\n    output_size: int = None,\n    dtype: None = None,\n    out: None = None\n) -> Tensor:\n    if dtype is None:\n        dtype = input.dtype\n    if out is None:\n        out = torch.empty_like(input, dtype=dtype)\n    else:\n        assert out.dtype == dtype\n\n    if dim is None or input.ndim == 1:\n        input = input.flatten()\n        dim = 0\n    else:\n        assert 0 <= dim < input.ndim, \"Invalid dim\"\n    \n    assert repeats.ndim == 1, \"Repeats should be a 1D vector\"\n    assert input.shape[dim] == repeats.shape[0], \"Input and repeats shape should align\"\n\n    input_stride = list(input.stride())\n    repeats_size = repeats.numel()\n    output_stride = list(out.stride())\n    input_n_elements = volume(input.shape) // input.shape[dim]\n    output_n_elements = volume(out.shape) // out.shape[dim]\n\n    grid = lambda meta: (triton.cdiv(repeats_size, meta[\"BLOCK_M\"]), )\n\n    fused_repeat_interleave_log_softmax_kernel[grid](\n        input,\n        out,\n        repeats,\n        input_n_elements,\n        output_n_elements,\n        repeats_size,\n        input_stride[dim],\n        output_stride[dim],\n        repeats.stride(0),\n    )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Cholesky decomposition of a complex Hermitian or real symmetric positive-definite matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: def linalg.cholesky(A, *, upper=False, out=None) -> Tensor\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions\n                consisting of symmetric or Hermitian positive-definite matrices.\n\nKeyword args:\n    upper (bool, optional): whether to return an upper triangular matrix.\n        The tensor returned with upper=True is the conjugate transpose of the tensor\n        returned with upper=False.\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A = LL^{\\text{H}} where L is a lower triangular matrix with real positive diagonal and L^{\\text{H}} is the conjugate transpose when L is complex, and the transpose when L is real-valued.\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.cholesky_ex. Raises RuntimeError if the A matrix or any matrix in a batched A is not Hermitian (resp. symmetric) positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.utils import instance_descriptor\nfrom torch._inductor import triton_helpers\n\n@triton.jit\ndef linalg_cholesky_kernel(\n    a_ptr,\n    a_strides,\n    n,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    a_ptr += pid * a_strides[0]\n    a_stride_1 = a_strides[1]\n    a_stride_2 = a_strides[2]\n\n    if BLOCK_SIZE == 128:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        a2 = tl.load(a_ptr + 0 * a_stride_1 + 1 * a_stride_2)\n        a3 = tl.load(a_ptr + 0 * a_stride_1 + 2 * a_stride_2)\n        a4 = tl.load(a_ptr + 0 * a_stride_1 + 3 * a_stride_2)\n        a5 = tl.load(a_ptr + 0 * a_stride_1 + 4 * a_stride_2)\n        a6 = tl.load(a_ptr + 0 * a_stride_1 + 5 * a_stride_2)\n        a7 = tl.load(a_ptr + 0 * a_stride_1 + 6 * a_stride_2)\n        a8 = tl.load(a_ptr + 0 * a_stride_1 + 7 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n        tl.store(a_ptr + 1 * a_stride_1 + 1 * a_stride_2, a2)\n        tl.store(a_ptr + 2 * a_stride_1 + 2 * a_stride_2, a3)\n        tl.store(a_ptr + 3 * a_stride_1 + 3 * a_stride_2, a4)\n        tl.store(a_ptr + 4 * a_stride_1 + 4 * a_stride_2, a5)\n        tl.store(a_ptr + 5 * a_stride_1 + 5 * a_stride_2, a6)\n        tl.store(a_ptr + 6 * a_stride_1 + 6 * a_stride_2, a7)\n        tl.store(a_ptr + 7 * a_stride_1 + 7 * a_stride_2, a8)\n    elif BLOCK_SIZE == 64:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        a2 = tl.load(a_ptr + 0 * a_stride_1 + 1 * a_stride_2)\n        a3 = tl.load(a_ptr + 0 * a_stride_1 + 2 * a_stride_2)\n        a4 = tl.load(a_ptr + 0 * a_stride_1 + 3 * a_stride_2)\n        a5 = tl.load(a_ptr + 0 * a_stride_1 + 4 * a_stride_2)\n        a6 = tl.load(a_ptr + 0 * a_stride_1 + 5 * a_stride_2)\n        a7 = tl.load(a_ptr + 0 * a_stride_1 + 6 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n        tl.store(a_ptr + 1 * a_stride_1 + 1 * a_stride_2, a2)\n        tl.store(a_ptr + 2 * a_stride_1 + 2 * a_stride_2, a3)\n        tl.store(a_ptr + 3 * a_stride_1 + 3 * a_stride_2, a4)\n        tl.store(a_ptr + 4 * a_stride_1 + 4 * a_stride_2, a5)\n        tl.store(a_ptr + 5 * a_stride_1 + 5 * a_stride_2, a6)\n        tl.store(a_ptr + 6 * a_stride_1 + 6 * a_stride_2, a7)\n    elif BLOCK_SIZE == 32:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        a2 = tl.load(a_ptr + 1 * a_stride_1 + 1 * a_stride_2)\n        a3 = tl.load(a_ptr + 2 * a_stride_1 + 2 * a_stride_2)\n        a4 = tl.load(a_ptr + 3 * a_stride_1 + 3 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n        tl.store(a_ptr + 1 * a_stride_1 + 1 * a_stride_2, a2)\n        tl.store(a_ptr + 2 * a_stride_1 + 2 * a_stride_2, a3)\n        tl.store(a_ptr + 3 * a_stride_1 + 3 * a_stride_2, a4)\n    elif BLOCK_SIZE == 16:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        a2 = tl.load(a_ptr + 1 * a_stride_1 + 1 * a_stride_2)\n        a3 = tl.load(a_ptr + 2 * a_stride_1 + 2 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n        tl.store(a_ptr + 1 * a_stride_1 + 1 * a_stride_2, a2)\n        tl.store(a_ptr + 2 * a_stride_1 + 2 * a_stride_2, a3)\n    elif BLOCK_SIZE == 8:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        a2 = tl.load(a_ptr + 1 * a_stride_1 + 1 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n        tl.store(a_ptr + 1 * a_stride_1 + 1 * a_stride_2, a2)\n    elif BLOCK_SIZE == 4:\n        a1 = tl.load(a_ptr + 0 * a_stride_1 + 0 * a_stride_2)\n        tl.store(a_ptr + 0 * a_stride_1 + 0 * a_stride_2, a1)\n\ndef linalg_cholesky(a, *, upper=False, out=None):\n    a = a.contiguous()\n    assert a.ndim >= 2\n    n = a.shape[-1]\n    assert n <= 128, \"GEMS CHOL only supports n <= 128\"\n    batch_shape = a.shape[:-2]\n    if out is None:\n        out = torch.empty_like(a)\n    else:\n        out = out.contiguous()\n    assert out.shape == a.shape\n    full_batch_stride = out.stride()[:-2]\n    for bpid in range(len(full_batch_stride)):\n        a_stride_0 = out.stride(-2)\n        a_stride_1 = out.stride(-1)\n        a1 = triton_helpers.promote_to_tensor(a_stride_0)\n        a2 = triton_helpers.promote_to_tensor(a_stride_1)\n        BLOCK_SIZE = triton.cdiv(n, a1)\n        if a2 != 0:\n            BLOCK_SIZE = min(BLOCK_SIZE, triton.cdiv(n, a2))\n        if BLOCK_SIZE >= 1:\n            linalg_cholesky_kernel[(n,)](\n                out,\n                (a_stride_0, a_stride_1),\n                n,\n                BLOCK_SIZE=BLOCK_SIZE,\n            )\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with the scalar value 1, with the same size as the input tensor. It mirrors the properties of the input in terms of dtype, layout, device, and memory format unless specified otherwise. The function does not support the 'out' keyword as of version 0.4, and equivalent operation needs an alternative approach.\nWrapper Entry Information: ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor; input (Tensor): the size of :attr:`input` will determine size of the output tensor.; dtype (torch.dtype, optional): the desired data type of returned Tensor. Default: if None, defaults to the dtype of :attr:`input`.; layout (torch.layout, optional): the desired layout of returned tensor. Default: if None, defaults to the layout of :attr:`input`.; device (torch.device, optional): the desired device of returned tensor. Default: if None, defaults to the device of :attr:`input`.; requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.; memory_format (torch.memory_format, optional): the desired memory format of returned Tensor. Default: torch.preserve_format.\nother: Function does not support an 'out' keyword as of version 0.4. Use torch.ones for similar functionality if 'out' keyword is needed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format):\n    return tl.full_like(input, 1, dtype=dtype, layout=layout, device=device, requires_grad=requires_grad, memory_format=memory_format)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function `torch.cuda.amp.autocast` is deprecated and replaced by `torch.amp.autocast(\"cuda\", args...)`. It allows scripts to run in mixed precision, improving performance while maintaining accuracy. `autocast` serves as a context manager or decorator, wrapping the forward pass(es) of a network and any related loss computations. Tensors can be any type when entering an autocast region, and it is not necessary to manually cast models or inputs to `half()` or `bfloat16()`. The function selects op-specific data types for operations within an autocast region. Backward operations should not be run under autocast, as they execute in the same data type chosen for the corresponding forward operations.\nWrapper Entry Information: autocast(device_type, enabled=True, dtype=None, cache_enabled=True) -> ContextManager\nother: Deprecated in favor of torch.amp.autocast(\"cuda\"). Recommended to use for forward pass and loss computation only. Avoid using for backward passes. State is thread-local. Can be nested with `autocast(enabled=False)` to force a subregion to run in a specific dtype. The use of autocast in a new thread requires invoking the context manager or decorator in that thread.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _autocast_triton(device_type, enabled, dtype, cache_enabled, expr, kwargs):\n    if isinstance(expr, str):\n        return exec(expr, kwargs)\n    else:\n        return expr(**kwargs)\n\ndef autocast(device_type=\"cuda\", enabled=True, dtype=None, cache_enabled=True):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            with torch.cuda.amp.autocast(device_type, enabled, dtype, cache_enabled):\n                return fn(*args, **kwargs)\n\n        return wrapper\n    return decorator\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the elements of the input. Unlike NumPy's reciprocal, this function supports integral inputs by promoting them to the default scalar type.\nWrapper Entry Information: reciprocal(input, *, out=None) -> Tensor; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\text{input}_{i}}\nother: Integral inputs to reciprocal are automatically promoted to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef reciprocal_kernel(x):\n    # Convert input to float32 and compute the reciprocal\n    x = x.to(tl.float32)\n    return 1 / x\n\ndef reciprocal(input, *, out=None):\n    # Wrapper function for the reciprocal kernel\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape and out.dtype == input.dtype\n    # Call the Triton kernel for reciprocal calculation\n    reciprocal_kernel[(input,)](out)\n    return out\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine of each element in the input tensor, followed by determining the sign bit for each cosine result, indicating if it is positive or negative.\nWrapper Entry Information: def cos_signbit(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor for which the cosine and sign bit are computed.\nMath: \\text{cos\\_result} = \\cos(\\text{input}) \\text{sign\\_bit} = \\text{signbit}(\\text{cos\\_result})\nother: Returns a tuple containing the cosine of each element and a boolean tensor indicating the sign bit of each cosine result.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom typing import Tuple\n\n@triton.jit\ndef cos_signbit_kernel(input, cos_result, signbit):\n    # Convert input to float32\n    input_fp32 = input.to(tl.float32)\n    # Compute cosine of the input\n    cos_result_fp32 = tl.cos(input_fp32)\n    # Store the cosine result\n    tl.store(cos_result, cos_result_fp32)\n    # Compute the sign bit of the cosine result\n    signbit_result = tl.signbit(cos_result_fp32)\n    # Store the sign bit result\n    tl.store(signbit, signbit_result)\n\ndef cos_signbit(input: Tensor) -> Tuple[Tensor, Tensor]:\n    # Ensure input is a float tensor\n    if input.dtype.is_fp64():\n        input = input.to(tl.float32)\n    # Prepare output tensors\n    cos_result = torch.empty(input.shape, device=input.device, dtype=torch.float32)\n    signbit = torch.empty(input.shape, device=input.device, dtype=torch.bool)\n    # Call the Triton kernel\n    cos_signbit_kernel[(1,)](input, cos_result, signbit)\n    return cos_result, signbit\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the spectral norm (operator norm induced by the Euclidean vector norm) of a square matrix using its eigenvalues. The spectral norm is the largest absolute value among the eigenvalues of a matrix. It supports inputs of float, double, cfloat, and cdouble dtypes and handles batches of matrices.\nWrapper Entry Information: spectral_norm_eig(A, *, out=None) -> Tensor\nA (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\nout (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\|A\\|_2 = \\max \\{ |\\lambda| : \\lambda \\text{ is an eigenvalue of } A \\}\nother: For normal matrices (where A A^{H} = A^{H} A), the spectral norm equals the largest absolute eigenvalue.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\ndef get_triton_function(dtype):\n    # Kernel for float32\n    if dtype == torch.float32:\n        @triton.jit\n        def triton_function(A, out):\n            # Compute the spectral norm using eigenvalues\n            lambda_max = tl.max(tl.abs(eig(A)))\n            tl.store(out, lambda_max)\n        return triton_function\n    # Kernel for float64\n    elif dtype == torch.float64:\n        @triton.jit\n        def triton_function(A, out):\n            # Compute the spectral norm using eigenvalues\n            lambda_max = tl.max(tl.abs(eig(A)))\n            tl.store(out, lambda_max)\n        return triton_function\n    # Kernel for complex64\n    elif dtype == torch.complex64:\n        @triton.jit\n        def triton_function(A, out):\n            # Compute the spectral norm using eigenvalues\n            lambda_max = tl.max(tl.abs(eig(A)))\n            tl.store(out, lambda_max)\n        return triton_function\n    # Kernel for complex128\n    elif dtype == torch.complex128:\n        @triton.jit\n        def triton_function(A, out):\n            # Compute the spectral norm using eigenvalues\n            lambda_max = tl.max(tl.abs(eig(A)))\n            tl.store(out, lambda_max)\n        return triton_function\n    else:\n        assert False\n\n@torch.inference_mode()\ndef spectral_norm_eig(A, *, out=None):\n    # Function to compute the spectral norm of a matrix using its eigenvalues\n    layout = A.layout\n    device = A.device\n    dtype = A.dtype\n    if dtype in (torch.float32, torch.float64, torch.complex64, torch.complex128):\n        if out is None:\n            out = torch.empty([], dtype=dtype, device=device)\n        else:\n            assert out.shape == () and out.dtype == dtype and out.device == device\n        triton_function = get_triton_function(dtype)\n        n = A.shape[-1]\n        # Reshape A for Triton kernel\n        A = A.reshape([-1, n, n])\n        batch_shape = A.shape[:-2]\n        A = A.reshape([volume(batch_shape), n, n])\n        M = A.shape[0]\n        grid = (M, )\n        triton_function[grid](A, out)\n        out = out.reshape(batch_shape)\n        return out\n    else:\n        assert dtype in (torch.float32, torch.float64, torch.complex64, torch.complex128)\n", "label": ""}
{"prompt": "<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the N dimensional discrete Fourier transform of the input tensor. It returns all positive and negative frequency terms, even though for real inputs, half of these values are redundant. Supports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or greater, but only for powers of 2 signal length in every transformed dimension.\nWrapper Entry Information: fftn(input, s=None, dim=None, norm=None, *, out=None) -> Tensor; input (Tensor): the input tensor; s (Tuple[int], optional): Signal size in the transformed dimensions. If given, each dimension dim[i] will either be zero-padded or trimmed to the length s[i] before computing the FFT. If a length -1 is specified, no padding is done in that dimension. Default: s = [input.size(d) for d in dim]; dim (Tuple[int], optional): Dimensions to be transformed. Default: all dimensions, or the last len(s) dimensions if s is given.; norm (str, optional): Normalization mode. For the forward transform (fftn), these correspond to: 'forward' - normalize by 1/n; 'backward' - no normalization; 'ortho' - normalize by 1/sqrt(n) (making the FFT orthonormal) Where n = prod(s) is the logical FFT size. Calling the backward transform (ifftn) with the same normalization mode will apply an overall normalization of 1/n between the two transforms. This is required to make ifftn the exact inverse. Default is 'backward' (no normalization).; out (Tensor, optional): the output tensor.\nother: The Fourier domain representation of any real signal satisfies the Hermitian property. torch.fft.rfftn returns the more compact one-sided representation where only the positive frequencies of the last dimension are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.<|im_end|>\n<|im_start|>assistant\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch.fft import _utils\nfrom flag_gems.utils.shape_utils import volume\n\ndef _signature(out, input, s, dim, norm):\n    return (out, input, s, dim, norm)\n\n@triton.jit\ndef _rfftn_forward(x, s, norm, x_stride, x_batch_stride, x_last_stride, output, b, d, n,\n                   OUTPUT_TYPE: tl.constexpr, X_STRIDED: tl.constexpr, BATCHED: tl.constexpr,\n                   STRIDED_BATCH: tl.constexpr, CONJUGATE: tl.constexpr, NORM_NEEDED: tl.constexpr,\n                   LAST_DIM_POW2: tl.constexpr, MIDDLE_DIM_POW2: tl.constexpr,\n                   PRECOMPUTE_PHASE: tl.constexpr, REVERSE_FIRST_PASS: tl.constexpr,\n                   ALLOW_TF32: tl.constexpr):\n    batch_pid = tl.program_id(0)\n    middle_dim_pid = tl.program_id(1)\n    first_pass_pid = tl.program_id(2)\n    last_dim = n\n    middle_dim = d\n    if BATCHED:\n        x_batch_stride = x_batch_stride.to(tl.int64)\n        x_batch_offset = batch_pid * x_batch_stride\n        tl.static_print(\"batch_pid\", batch_pid, \"x_batch_stride\", x_batch_stride,\n                        \"x_batch_offset\", x_batch_offset)\n    else:\n        x_batch_offset = 0\n    if MIDDLE_DIM_POW2:\n        x_middle_stride = tl.cdiv(middle_dim, 2) * 2 * x_last_stride\n    else:\n        x_middle_stride = middle_dim * x_last_stride\n    x_middle_offset = middle_dim_pid * x_middle_stride\n    tl.static_print(\"x_middle_stride\", x_middle_stride, \"x_middle_offset\", x_middle_offset)\n    if LAST_DIM_POW2:\n        x_last_stride = 2 * x_last_stride\n        x_last_offset = first_pass_pid * 2 * x_last_stride\n    else:\n        x_last_stride = x_last_stride\n        x_last_offset = first_pass_pid * x_last_stride\n    tl.static_print(\"x_last_stride\", x_last_stride, \"x_last_offset\", x_last_offset)\n    x_offset = x_batch_offset + x_middle_offset + x_last_offset\n    tl.static_print(\"x_offset\", x_offset)\n    if X_STRIDED:\n        x = tl.load(x + x_offset, eviction_policy='evict_last')\n    else:\n        x = tl.load(x + x_offset)\n    tl.static_print(\"x\", x)\n    if CONJUGATE:\n        x = tl.conj(x)\n    if PRECOMPUTE_PHASE:\n        if LAST_DIM_POW2:\n            w = tl.exp(\n                tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[:, None]\n        else:\n            w = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[:, None]\n        if MIDDLE_DIM_POW2:\n            if LAST_DIM_POW2:\n                v = tl.exp(tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[None,\n                                                                                               :]\n            else:\n                v = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[None, :]\n        else:\n            if LAST_DIM_POW2:\n                v = tl.exp(tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[None,\n                                                                                               :]\n            else:\n                v = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim))[None, :]\n    else:\n        if LAST_DIM_POW2:\n            w = tl.exp(\n                tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[:, None]\n        else:\n            w = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[:, None]\n        if MIDDLE_DIM_POW2:\n            if LAST_DIM_POW2:\n                v = tl.exp(tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[None,\n                                                                                                            :]\n            else:\n                v = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[None, :]\n        else:\n            if LAST_DIM_POW2:\n                v = tl.exp(tl.arange(0, 2 * last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[None,\n                                                                                                            :]\n            else:\n                v = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (-2j * tl.pi / last_dim)).to(OUTPUT_TYPE)[None, :]\n    if LAST_DIM_POW2:\n        if REVERSE_FIRST_PASS:\n            x = tl.dot(w[1:last_dim // 2 + 1, :] * x, v[0:last_dim // 2 + 1, :])\n        else:\n            x = tl.dot(w[0:last_dim // 2 + 1, :] * x, v[0:last_dim // 2 + 1, :])\n    else:\n        if REVERSE_FIRST_PASS:\n            x = tl.dot(w[0:last_dim, :] * x, v[0:last_dim, :])\n        else:\n            x = tl.dot(w[0:last_dim, :] * x, v[0:last_dim, :])\n    if NORM_NEEDED:\n        if LAST_DIM_POW2:\n            x = x / last_dim\n        else:\n            x = x / last_dim\n    if BATCHED:\n        output_offset = batch_pid * b * d * n\n    else:\n        output_offset = 0\n    output_offset = output_offset + middle_dim_pid * n * b + first_pass_pid * b + b // 2\n    tl.static_print(\"output_offset\", output_offset)\n    tl.store(output + output_offset, x)\n\n@triton.jit\ndef _ifftn_forward(x, s, norm, x_stride, x_batch_stride, x_last_stride, output, b, d, n,\n                   OUTPUT_TYPE: tl.constexpr, X_STRIDED: tl.constexpr, BATCHED: tl.constexpr,\n                   STRIDED_BATCH: tl.constexpr, CONJUGATE: tl.constexpr, NORM_NEEDED: tl.constexpr,\n                   LAST_DIM_POW2: tl.constexpr, MIDDLE_DIM_POW2: tl.constexpr,\n                   PRECOMPUTE_PHASE: tl.constexpr, REVERSE_FIRST_PASS: tl.constexpr,\n                   ALLOW_TF32: tl.constexpr):\n    batch_pid = tl.program_id(0)\n    middle_dim_pid = tl.program_id(1)\n    first_pass_pid = tl.program_id(2)\n    last_dim = n\n    middle_dim = d\n    if BATCHED:\n        x_batch_stride = x_batch_stride.to(tl.int64)\n        x_batch_offset = batch_pid * x_batch_stride\n        tl.static_print(\"batch_pid\", batch_pid, \"x_batch_stride\", x_batch_stride,\n                        \"x_batch_offset\", x_batch_offset)\n    else:\n        x_batch_offset = 0\n    if MIDDLE_DIM_POW2:\n        x_middle_stride = tl.cdiv(middle_dim, 2) * 2 * x_last_stride\n    else:\n        x_middle_stride = middle_dim * x_last_stride\n    x_middle_offset = middle_dim_pid * x_middle_stride\n    tl.static_print(\"x_middle_stride\", x_middle_stride, \"x_middle_offset\", x_middle_offset)\n    if LAST_DIM_POW2:\n        x_last_stride = 2 * x_last_stride\n        x_last_offset = first_pass_pid * 2 * x_last_stride\n    else:\n        x_last_stride = x_last_stride\n        x_last_offset = first_pass_pid * x_last_stride\n    tl.static_print(\"x_last_stride\", x_last_stride, \"x_last_offset\", x_last_offset)\n    x_offset = x_batch_offset + x_middle_offset + x_last_offset\n    tl.static_print(\"x_offset\", x_offset)\n    if X_STRIDED:\n        x = tl.load(x + x_offset, eviction_policy='evict_last')\n    else:\n        x = tl.load(x + x_offset)\n    tl.static_print(\"x\", x)\n    if CONJUGATE:\n        x = tl.conj(x)\n    if PRECOMPUTE_PHASE:\n        if LAST_DIM_POW2:\n            w = tl.exp(\n                tl.arange(0, 2 * last_dim).to(tl.float32) * (2j * tl.pi / last_dim))[:, None]\n        else:\n            w = tl.exp(tl.arange(0, last_dim).to(tl.float32) * (2j * tl.pi / last_dim))[:, None]\n        if MIDDLE_DIM_POW2:\n            if LAST_DIM_POW2:\n                v = tl.exp(tl.arange(0, 2 * last_dim).to(tl.float32) * (", "label": ""}
