{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, dropout, and subtraction. The function takes three input tensors, performs batch matrix multiplication on the first two, applies RMS normalization, GELU activation, and dropout, and finally subtracts the third tensor from the result.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout_sub(input1, input2, other, normalized_shape, dropout_p=0.5, training=True, approximate='none', eps=1e-5, *, out=None) -> Tensor. Args: input1 (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size. input2 (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P). other (Tensor): Tensor to subtract from the result after dropout, must be broadcastable to the shape of the output. normalized_shape (int or list or torch.Size): Shape over which RMS normalization is applied, typically the size of the last dimension P. dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.5. training (bool, optional): Apply dropout if True. Default: True. approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'. eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5. out (Tensor, optional): Output tensor. Ignored if None. Default: None. Shape: - Input1: (B, N, M), Input2: (B, M, P), Other: broadcastable to (B, N, P). Output: (B, N, P).\nMath: Given input tensors X, Y, and O, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nZ_{\\text{norm}} &= \\text{RMSNorm}(Z, \\epsilon) \\\\\nG &= \\text{GELU}(Z_{\\text{norm}}) \\\\\nD &= \\text{Dropout}(G, p) \\\\\nY &= D - O\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{RMSNorm}(Z, \\epsilon) = \\frac{Z}{\\sqrt{\\text{mean}(Z^2, \\text{dim}=-1) + \\epsilon}} applies Root Mean Square Layer Normalization over the last dimension.\n- \\text{GELU}(Z_{\\text{norm}}) applies the Gaussian Error Linear Unit activation function element-wise.\n- \\text{Dropout}(G, p) randomly zeroes elements of G with probability p.\n- D - O subtracts tensor O from D, where O must be broadcastable to the shape of D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the dimensions over which to compute the RMS. For an output of shape `(B, N, P)`, setting `normalized_shape=P` applies normalization over the last dimension.\n- The `other` tensor must be broadcastable to the shape of the output tensor after dropout.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the normalized output.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, dropout, and subtraction. The function takes three input tensors, performs batch matrix multiplication on the first two, applies RMS normalization, GELU activation, and dropout, and finally subtracts the third tensor from the result.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout_sub(input1, input2, other, normalized_shape, dropout_p=0.5, training=True, approximate='none', eps=1e-5, *, out=None) -> Tensor. Args: input1 (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size. input2 (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P). other (Tensor): Tensor to subtract from the result after dropout, must be broadcastable to the shape of the output. normalized_shape (int or list or torch.Size): Shape over which RMS normalization is applied, typically the size of the last dimension P. dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.5. training (bool, optional): Apply dropout if True. Default: True. approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'. eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5. out (Tensor, optional): Output tensor. Ignored if None. Default: None. Shape: - Input1: (B, N, M), Input2: (B, M, P), Other: broadcastable to (B, N, P). Output: (B, N, P).\nMath: Given input tensors X, Y, and O, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nZ_{\\text{norm}} &= \\text{RMSNorm}(Z, \\epsilon) \\\\\nG &= \\text{GELU}(Z_{\\text{norm}}) \\\\\nD &= \\text{Dropout}(G, p) \\\\\nY &= D - O\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{RMSNorm}(Z, \\epsilon) = \\frac{Z}{\\sqrt{\\text{mean}(Z^2, \\text{dim}=-1) + \\epsilon}} applies Root Mean Square Layer Normalization over the last dimension.\n- \\text{GELU}(Z_{\\text{norm}}) applies the Gaussian Error Linear Unit activation function element-wise.\n- \\text{Dropout}(G, p) randomly zeroes elements of G with probability p.\n- D - O subtracts tensor O from D, where O must be broadcastable to the shape of D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the dimensions over which to compute the RMS. For an output of shape `(B, N, P)`, setting `normalized_shape=P` applies normalization over the last dimension.\n- The `other` tensor must be broadcastable to the shape of the output tensor after dropout.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the normalized output.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_bmm_rmsnorm_gelu_dropout_sub_kernel(\n    output_ptr, input1_ptr, input2_ptr, other_ptr, weight_ptr, stride1, stride2, stride3, stride4, stride5, \n    B, N, M, P, dropout_p, training, eps, seed, BLOCK_SIZE: tl.constexpr\n):\n    # Compute the batch matrix multiplication\n    row_idx = tl.program_id(0)\n    col_idx = tl.program_id(1)\n    \n    if row_idx >= B or col_idx >= N:\n        return\n\n    # Initialize pointers\n    input1_row_start_ptr = input1_ptr + row_idx * stride1 + col_idx * stride2\n    input2_col_start_ptr = input2_ptr + row_idx * stride3\n    output_row_start_ptr = output_ptr + row_idx * stride4 + col_idx * stride5\n    other_row_start_ptr = other_ptr + row_idx * stride4 + col_idx * stride5\n\n    # Initialize accumulators\n    acc = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for m in range(0, M, BLOCK_SIZE):\n        cols = m + tl.arange(0, BLOCK_SIZE)\n        mask = cols < M\n        input1_vals = tl.load(input1_row_start_ptr + cols * stride2, mask=mask, other=0.0)\n        input2_vals = tl.load(input2_col_start_ptr + cols * stride3, mask=mask, other=0.0)\n        acc += input1_vals * input2_vals\n\n    # Store the result of the batch matrix multiplication\n    tl.store(output_row_start_ptr, acc, mask=tl.arange(0, BLOCK_SIZE) < P)\n\n    # Perform RMS normalization\n    square_sum = tl.sum(acc * acc, axis=0)\n    rms = tl.sqrt(square_sum / P + eps)\n    normed = acc / rms\n\n    # Apply GELU activation\n    if approximate == 'none':\n        normed = 0.5 * normed * (1.0 + tl.math.erf(normed / tl.sqrt(2.0)))\n    elif approximate == 'tanh':\n        normed = normed * 0.5 * (1.0 + tl.tanh(0.7978845608028654 * (normed + 0.044715 * normed * normed * normed)))\n\n    # Apply dropout\n    if training:\n        rng = tl.rand(seed, row_idx * N + col_idx)\n        mask = rng > dropout_p\n        normed = tl.where(mask, normed, 0.0)\n        normed /= (1.0 - dropout_p)\n\n    # Subtract the other tensor\n    other_vals = tl.load(other_row_start_ptr, mask=tl.arange(0, BLOCK_SIZE) < P, other=0.0)\n    result = normed - other_vals\n\n    # Store the final result\n    tl.store(output_row_start_ptr, result, mask=tl.arange(0, BLOCK_SIZE) < P)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_bmm_rmsnorm_gelu_dropout_sub(input1, input2, other, normalized_shape, dropout_p=0.5, training=True, approximate='none', eps=1e-5, out=None):\n    B, N, M = input1.shape\n    _, _, P = input2.shape\n\n    if out is None:\n        out = torch.empty((B, N, P), device=input1.device, dtype=input1.dtype)\n\n    # Ensure the shapes are compatible\n    assert input1.shape == (B, N, M), f\"input1 shape must be (B, N, M), got {input1.shape}\"\n    assert input2.shape == (B, M, P), f\"input2 shape must be (B, M, P), got {input2.shape}\"\n    assert other.shape == (B, N, P) or other.shape == (1, N, P) or other.shape == (B, 1, P) or other.shape == (1, 1, P), f\"other shape must be broadcastable to (B, N, P), got {other.shape}\"\n\n    # Ensure the normalized shape is correct\n    if isinstance(normalized_shape, int):\n        normalized_shape = [normalized_shape]\n    assert normalized_shape == [P], f\"normalized_shape must be [P], got {normalized_shape}\"\n\n    # Ensure the approximate parameter is valid\n    assert approximate in ['none', 'tanh'], f\"approximate must be 'none' or 'tanh', got {approximate}\"\n\n    # Seed for dropout\n    seed = torch.randint(0, 2**32, (1,), device=input1.device).item()\n\n    # Call the Triton kernel\n    grid = (B, N)\n    block = (P, 1, 1)\n    fused_bmm_rmsnorm_gelu_dropout_sub_kernel[grid, block](\n        out, input1, input2, other, torch.ones(P, device=input1.device), \n        input1.stride(0), input1.stride(1), input2.stride(0), input2.stride(1), \n        B, N, M, P, dropout_p, training, eps, seed, BLOCK_SIZE=P\n    )\n\n    return out\n\nimport torch\n\n# Test case\nB, N, M, P = 2, 3, 4, 5\ninput1 = torch.randn(B, N, M, device='cuda')\ninput2 = torch.randn(B, M, P, device='cuda')\nother = torch.randn(B, N, P, device='cuda')\n\n# Triton implementation\noutput_triton = fused_bmm_rmsnorm_gelu_dropout_sub(input1, input2, other, normalized_shape=P, dropout_p=0.5, training=True, approximate='none', eps=1e-5)\n\n# PyTorch implementation\noutput_pytorch = torch.bmm(input1, input2)\noutput_pytorch = torch.nn.functional.layer_norm(output_pytorch, (P,), eps=1e-5)\noutput_pytorch = torch.nn.functional.gelu(output_pytorch)\noutput_pytorch = torch.nn.functional.dropout(output_pytorch, p=0.5, training=True)\noutput_pytorch = output_pytorch - other\n\n# Compare the results\nprint(\"Triton output:\", output_triton)\nprint(\"PyTorch output:\", output_pytorch)\nprint(\"Difference:\", torch.abs(output_triton - output_pytorch).max())\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Divides each element of the input tensor by the corresponding element of the other tensor, supporting broadcasting, type promotion, and handling integer, float, and complex inputs. Rounding behavior can be controlled with the rounding_mode parameter.\nWrapper Entry Information: div(input, other, *, rounding_mode=None, out=None) -> Tensor; input (Tensor): the dividend; other (Tensor or Number): the divisor; rounding_mode (str, optional): Type of rounding applied to the result; out (Tensor, optional): the output tensor\nMath: \\text{out}_i = \\frac{\\text{input}_i}{\\text{other}_i}\nother: By default, performs a 'true' division like Python 3. Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs. Always promotes integer types to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a set of kernels for the 'where' operation. There are four kernels depending on the types of 'it' and 'other': (1) both are tensors, (2) 'it' is a tensor and 'other' is a scalar, (3) 'it' is a scalar and 'other' is a tensor, and (4) both are scalars. Each kernel computes the result based on the condition provided. There is also a wrapper function 'where' that selects the appropriate kernel to execute based on the input types. Each kernel takes a pointer to the condition data, the input data, a pointer to the output data, the number of elements to process, and a block size as parameters. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function for when both 'it' and 'other' are tensors.\n@triton.jit\ndef where_tensor_tensor_kernel(condititon_ptr, self_ptr, other_ptr, out_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    condition = tl.load(condititon_ptr + offset, mask=mask)\n    self = tl.load(self_ptr + offset, mask=mask)\n    other = tl.load(other_ptr + offset, mask=mask)\n    out = tl.where(condition, self, other)\n    tl.store(out_ptr + offset, out, mask=mask)\n\n# Kernel function for when 'it' is a tensor and 'other' is a scalar.\n@triton.jit\ndef where_tensor_scalar_kernel(condititon_ptr, self_ptr, other, out_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    condition = tl.load(condititon_ptr + offset, mask=mask)\n    self = tl.load(self_ptr + offset, mask=mask)\n    out = tl.where(condition, self, other)\n    tl.store(out_ptr + offset, out, mask=mask)\n\n# Kernel function for when 'it' is a scalar and 'other' is a tensor.\n@triton.jit\ndef where_scalar_tensor_kernel(condititon_ptr, it, other_ptr, out_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    condition = tl.load(condititon_ptr + offset, mask=mask)\n    other = tl.load(other_ptr + offset, mask=mask)\n    out = tl.where(condition, it, other)\n    tl.store(out_ptr + offset, out, mask=mask)\n\n# Kernel function for when both 'it' and 'other' are scalars.\n@triton.jit\ndef where_scalar_scalar_kernel(condititon_ptr, it, other, out_ptr, n_elements, BLOCK_SIZE: tl.constexpr):    \n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    condition = tl.load(condititon_ptr + offset, mask=mask)\n    out = tl.where(condition, it, other)\n    tl.store(out_ptr + offset, out, mask=mask)\n\n# Function to select and call the appropriate kernel based on the types of 'it' and 'other'.\ndef where(condition, it, other):\n    out = torch.empty_like(condition).to(torch.float)\n    n_elements = condition.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    if isinstance(it, torch.Tensor) and isinstance(other, torch.Tensor):\n        where_tensor_tensor_kernel[(grid_size, 1, 1)](condition, it, other, out, n_elements, block_size)\n        return out\n    elif isinstance(it, torch.Tensor):\n        where_tensor_scalar_kernel[(grid_size, 1, 1)](condition, it, other, out, n_elements, block_size)\n        return out\n    elif isinstance(other, torch.Tensor):\n        where_scalar_tensor_kernel[(grid_size, 1, 1)](condition, it, other, out, n_elements, block_size)\n        return out\n    else:\n        where_scalar_scalar_kernel[(grid_size, 1, 1)](condition, it, other, out, n_elements, block_size)\n        return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Divides each element of the input tensor by the corresponding element of the other tensor, supporting broadcasting, type promotion, and handling integer, float, and complex inputs. Rounding behavior can be controlled with the rounding_mode parameter.\nWrapper Entry Information: div(input, other, *, rounding_mode=None, out=None) -> Tensor; input (Tensor): the dividend; other (Tensor or Number): the divisor; rounding_mode (str, optional): Type of rounding applied to the result; out (Tensor, optional): the output tensor\nMath: \\text{out}_i = \\frac{\\text{input}_i}{\\text{other}_i}\nother: By default, performs a 'true' division like Python 3. Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs. Always promotes integer types to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Helper function to determine the block size\ndef get_block_size(n_elements):\n    return triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n\n# Helper function to determine the grid size\ndef get_grid_size(n_elements, block_size):\n    return triton.cdiv(n_elements, block_size)\n\n# Kernel function for when both 'input' and 'other' are tensors.\n@triton.jit\ndef div_tensor_tensor_kernel(input_ptr, other_ptr, out_ptr, n_elements, block_size: tl.constexpr, rounding_mode: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < n_elements\n    input_val = tl.load(input_ptr + offsets, mask=mask)\n    other_val = tl.load(other_ptr + offsets, mask=mask)\n    \n    if rounding_mode == 0:  # 'true' division\n        out_val = input_val / other_val\n    elif rounding_mode == 1:  # 'floor' division\n        out_val = tl.floor(input_val / other_val)\n    elif rounding_mode == 2:  # 'trunc' division\n        out_val = tl.trunc(input_val / other_val)\n    \n    tl.store(out_ptr + offsets, out_val, mask=mask)\n\n# Kernel function for when 'input' is a tensor and 'other' is a scalar.\n@triton.jit\ndef div_tensor_scalar_kernel(input_ptr, other, out_ptr, n_elements, block_size: tl.constexpr, rounding_mode: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < n_elements\n    input_val = tl.load(input_ptr + offsets, mask=mask)\n    \n    if rounding_mode == 0:  # 'true' division\n        out_val = input_val / other\n    elif rounding_mode == 1:  # 'floor' division\n        out_val = tl.floor(input_val / other)\n    elif rounding_mode == 2:  # 'trunc' division\n        out_val = tl.trunc(input_val / other)\n    \n    tl.store(out_ptr + offsets, out_val, mask=mask)\n\n# Kernel function for when 'input' is a scalar and 'other' is a tensor.\n@triton.jit\ndef div_scalar_tensor_kernel(input, other_ptr, out_ptr, n_elements, block_size: tl.constexpr, rounding_mode: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < n_elements\n    other_val = tl.load(other_ptr + offsets, mask=mask)\n    \n    if rounding_mode == 0:  # 'true' division\n        out_val = input / other_val\n    elif rounding_mode == 1:  # 'floor' division\n        out_val = tl.floor(input / other_val)\n    elif rounding_mode == 2:  # 'trunc' division\n        out_val = tl.trunc(input / other_val)\n    \n    tl.store(out_ptr + offsets, out_val, mask=mask)\n\n# Wrapper function to select and call the appropriate kernel based on the input types.\ndef div(input, other, *, rounding_mode=None, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    \n    n_elements = input.numel()\n    block_size = get_block_size(n_elements)\n    grid_size = get_grid_size(n_elements, block_size)\n    \n    rounding_mode_map = {\n        None: 0,\n        'floor': 1,\n        'trunc': 2\n    }\n    \n    rounding_mode = rounding_mode_map.get(rounding_mode, 0)\n    \n    if isinstance(input, torch.Tensor) and isinstance(other, torch.Tensor):\n        div_tensor_tensor_kernel[(grid_size, 1, 1)](input, other, out, n_elements, block_size, rounding_mode)\n    elif isinstance(input, torch.Tensor):\n        div_tensor_scalar_kernel[(grid_size, 1, 1)](input, other, out, n_elements, block_size, rounding_mode)\n    elif isinstance(other, torch.Tensor):\n        div_scalar_tensor_kernel[(grid_size, 1, 1)](input, other, out, n_elements, block_size, rounding_mode)\n    else:\n        raise ValueError(\"At least one of 'input' or 'other' must be a tensor.\")\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the sigmoid activation function element-wise to the result. This ensures that the convolutional output values are scaled between 0 and 1.\nWrapper Entry Information: sigmoid_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, out=None) -> Tensor\nArgs:\ninput (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\nweight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\nbias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None.\nstride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\npadding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\ndilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\ngroups (int, optional): Number of groups to split the input into. Default: 1.\nout (Tensor, optional): The output tensor.\nMath: \\text{out} = \\sigma(\\text{conv2d}(\\text{input}, \\text{weight})) where \\sigma(x) = \\frac{1}{1 + e^{-x}} is the sigmoid function.\nother: The function combines 2D convolution and sigmoid activation, ensuring output values are between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the sigmoid activation function element-wise to the result. This ensures that the convolutional output values are scaled between 0 and 1.\nWrapper Entry Information: sigmoid_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, out=None) -> Tensor\nArgs:\ninput (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\nweight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\nbias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None.\nstride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\npadding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\ndilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\ngroups (int, optional): Number of groups to split the input into. Default: 1.\nout (Tensor, optional): The output tensor.\nMath: \\text{out} = \\sigma(\\text{conv2d}(\\text{input}, \\text{weight})) where \\sigma(x) = \\frac{1}{1 + e^{-x}} is the sigmoid function.\nother: The function combines 2D convolution and sigmoid activation, ensuring output values are between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for 2D convolution followed by sigmoid activation\n@triton.jit\ndef sigmoid_conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    stride_h, stride_w, padding_h, padding_w, dilation_h, dilation_w,\n    in_channels, out_channels, in_h, in_w, kernel_h, kernel_w, groups,\n    BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr, BLOCK_SIZE_C: tl.constexpr\n):\n    \"\"\"\n    Applies a 2D convolution followed by the sigmoid activation function.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    weight_ptr : tl.tensor\n        Pointer to the weight tensor in global memory.\n    bias_ptr : tl.tensor\n        Pointer to the bias tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    stride_h, stride_w : int\n        Stride of the convolution kernel in height and width.\n    padding_h, padding_w : int\n        Padding on both sides of the input in height and width.\n    dilation_h, dilation_w : int\n        Dilation of the convolution kernel in height and width.\n    in_channels, out_channels : int\n        Number of input and output channels.\n    in_h, in_w : int\n        Height and width of the input tensor.\n    kernel_h, kernel_w : int\n        Height and width of the convolution kernel.\n    groups : int\n        Number of groups to split the input into.\n    BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C : tl.constexpr\n        Block sizes for the Triton grid in height, width, and channels.\n    \"\"\"\n    batch_id = tl.program_id(0)\n    block_h = tl.program_id(1) * BLOCK_SIZE_H\n    block_w = tl.program_id(2) * BLOCK_SIZE_W\n\n    offsets_h = block_h + tl.arange(0, BLOCK_SIZE_H)\n    offsets_w = block_w + tl.arange(0, BLOCK_SIZE_W)\n    offsets_c = tl.arange(0, BLOCK_SIZE_C)\n\n    mask_h = (offsets_h < (in_h + 2 * padding_h - (kernel_h - 1) * dilation_h) // stride_h)\n    mask_w = (offsets_w < (in_w + 2 * padding_w - (kernel_w - 1) * dilation_w) // stride_w)\n    mask_c = (offsets_c < in_channels)\n\n    result = tl.zeros((BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C), dtype=tl.float32)\n\n    for k_h in range(kernel_h):\n        for k_w in range(kernel_w):\n            input_h = (offsets_h * stride_h - padding_h + k_h * dilation_h)\n            input_w = (offsets_w * stride_w - padding_w + k_w * dilation_w)\n            input_mask_h = (input_h >= 0) & (input_h < in_h)\n            input_mask_w = (input_w >= 0) & (input_w < in_w)\n            input_mask = input_mask_h & input_mask_w & mask_h & mask_w & mask_c\n\n            input_val = tl.load(\n                input_ptr + batch_id * in_channels * in_h * in_w + offsets_c * in_h * in_w + input_h * in_w + input_w,\n                mask=input_mask, other=0.0\n            )\n\n            weight_val = tl.load(\n                weight_ptr + offsets_c * kernel_h * kernel_w + k_h * kernel_w + k_w,\n                mask=mask_c, other=0.0\n            )\n\n            result += input_val * weight_val\n\n    if bias_ptr is not None:\n        bias_val = tl.load(bias_ptr + offsets_c, mask=mask_c, other=0.0)\n        result += bias_val\n\n    result = 1 / (1 + tl.exp(-result))\n\n    output_mask = mask_h[:, None] & mask_w[None, :] & mask_c[None, None, :]\n    tl.store(\n        output_ptr + batch_id * out_channels * (in_h + 2 * padding_h - (kernel_h - 1) * dilation_h) // stride_h * (in_w + 2 * padding_w - (kernel_w - 1) * dilation_w) // stride_w + offsets_h * (in_w + 2 * padding_w - (kernel_w - 1) * dilation_w) // stride_w + offsets_w,\n        result, mask=output_mask\n    )\n\n# Wrapper function for the Triton kernel\ndef sigmoid_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, out=None):\n    \"\"\"\n    Applies a 2D convolution followed by the sigmoid activation function.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        The input tensor of shape `(minibatch, in_channels, iH, iW)`.\n    weight : torch.Tensor\n        The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\n    bias : torch.Tensor, optional\n        Optional bias tensor of shape `(out_channels)`. Default: None.\n    stride : int or tuple, optional\n        The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\n    padding : int, tuple, or string, optional\n        Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\n    dilation : int or tuple, optional\n        The spacing between kernel elements. Default: 1.\n    groups : int, optional\n        Number of groups to split the input into. Default: 1.\n    out : torch.Tensor, optional\n        The output tensor.\n\n    Returns:\n    --------\n    torch.Tensor\n        The output tensor of shape `(minibatch, out_channels, oH, oW)`.\n\n    Math:\n    \\text{out} = \\sigma(\\text{conv2d}(\\text{input}, \\text{weight})) where \\sigma(x) = \\frac{1}{1 + e^{-x}} is the sigmoid function.\n    \"\"\"\n    if isinstance(stride, int):\n        stride = (stride, stride)\n    if isinstance(padding, int):\n        padding = (padding, padding)\n    if isinstance(dilation, int):\n        dilation = (dilation, dilation)\n\n    minibatch, in_channels, in_h, in_w = input.shape\n    out_channels, in_channels_per_group, kernel_h, kernel_w = weight.shape\n\n    if bias is not None:\n        assert bias.shape == (out_channels,), \"Bias shape must be (out_channels,)\"\n\n    out_h = (in_h + 2 * padding[0] - (kernel_h - 1) * dilation[0]) // stride[0]\n    out_w = (in_w + 2 * padding[1] - (kernel_w - 1) * dilation[1]) // stride[1]\n\n    if out is None:\n        out = torch.empty((minibatch, out_channels, out_h, out_w), device=input.device, dtype=input.dtype)\n\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n    BLOCK_SIZE_C = 16\n\n    grid = (minibatch, (out_h + BLOCK_SIZE_H - 1) // BLOCK_SIZE_H, (out_w + BLOCK_SIZE_W - 1) // BLOCK_SIZE_W)\n\n    sigmoid_conv2d_kernel[grid](\n        input, weight, bias, out,\n        stride[0], stride[1], padding[0], padding[1], dilation[0], dilation[1],\n        in_channels, out_channels, in_h, in_w, kernel_h, kernel_w, groups,\n        BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves multiple linear systems with the same coefficient matrix using LU decomposition. Given a square matrix A and multiple right-hand side vectors B, this function computes the solutions X to the linear systems A X = B by performing the LU decomposition of A and reusing it to solve for multiple right-hand sides efficiently. Supports batch dimensions.\nWrapper Entry Information: def solve_multiple_lu(A, Bs, *, pivot=True, out=None) -> Tensor\n\n    - **A** (Tensor): Coefficient matrix of shape `(*, n, n)`, where `*` is zero or more batch dimensions.\n    - **Bs** (Tensor): Right-hand side tensor of shape `(*, n, k)`, where `k` is the number of right-hand sides.\n    - **pivot** (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`.\n    - **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: LU Decomposition:\nA = P L U\n- P is a permutation matrix.\n- L is a lower triangular matrix with unit diagonal elements.\n- U is an upper triangular matrix.\nSolving Linear Systems:\nFor each b_i in B, compute x_i by:\n- Apply permutation: b'_i = P^T b_i\n- Solve L y_i = b'_i\n- Solve U x_i = y_i\nother: This function efficiently reuses the LU decomposition of A to solve multiple linear systems with different right-hand sides. If `pivot=False`, no permutation is applied. Supports batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create kernels that compute the upper triangular part of matrices. The 'triu_kernel' function takes 7 parameters: input matrix pointer (X), output matrix pointer (Y), number of rows (M), number of columns (N), diagonal offset (diagonal), row block size (M_BLOCK_SIZE), and column block size (N_BLOCK_SIZE). It computes the upper triangular elements for a 2D matrix. The 'triu_batch_kernel' function takes 8 parameters: input matrix batch pointer (X), output matrix batch pointer (Y), number of matrices (batch), number of elements in each matrix (MN), number of columns (N), diagonal offset (diagonal), batch block size (BATCH_BLOCK_SIZE), and matrix element block size (MN_BLOCK_SIZE). It computes the upper triangular elements for a batch of matrices. The 'triu' function handles input tensors of 2D or higher dimensions, calling the appropriate kernel based on the tensor dimensions. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the upper triangular part of a 2D matrix\n@triton.jit\ndef triu_kernel(\n    X,  # Pointer to the input matrix\n    Y,  # Pointer to the output matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    diagonal,  # Diagonal offset\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    X += row * N\n    Y += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        x = tl.load(X + cols, mask, other=0.0)\n        y = tl.where(row + diagonal <= cols, x, 0.0)\n        tl.store(Y + cols, y, mask=mask)\n\n# Triton kernel to compute the upper triangular part for batched matrices\n@triton.jit\ndef triu_batch_kernel(\n    X,  # Pointer to the input matrix batch\n    Y,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    MN,  # Number of elements in each matrix (flattened)\n    N,  # Number of columns in each matrix\n    diagonal,  # Diagonal offset\n    BATCH_BLOCK_SIZE: tl.constexpr,  # Block size for batch processing\n    MN_BLOCK_SIZE: tl.constexpr,  # Block size for elements within a matrix\n):\n    batch_id = tl.program_id(0)\n    mn_id = tl.program_id(1)\n    row = batch_id * BATCH_BLOCK_SIZE + tl.arange(0, BATCH_BLOCK_SIZE)[:, None]\n    batch_mask = row < batch\n    X += row * MN\n    Y += row * MN\n\n    cols = mn_id * MN_BLOCK_SIZE + tl.arange(0, MN_BLOCK_SIZE)[None, :]\n    mn_mask = cols < MN\n    mask = batch_mask and mn_mask\n    x = tl.load(X + cols, mask, other=0.0)\n    m = cols // N\n    n = cols % N\n    y = tl.where(m + diagonal <= n, x, 0.0)\n    tl.store(Y + cols, y, mask=mask)\n\n# Function to compute the upper triangular part of a matrix or batch of matrices\ndef triu(A, diagonal=0):\n    A = A.contiguous()\n    out = torch.empty_like(A)\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    M, N = A.shape[-2:]\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            triu_kernel[grid](A, out, M, N, diagonal, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            batch = int(torch.numel(A) / M / N)\n            B = A.view(batch, -1)\n            grid = lambda meta: (\n                triton.cdiv(batch, meta[\"BATCH_BLOCK_SIZE\"]),\n                triton.cdiv(M * N, meta[\"MN_BLOCK_SIZE\"]),\n            )\n            triu_batch_kernel[grid](B, out, batch, M * N, N, diagonal, BATCH_BLOCK_SIZE=32, MN_BLOCK_SIZE=8)\n            out = out.view(A.shape)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves multiple linear systems with the same coefficient matrix using LU decomposition. Given a square matrix A and multiple right-hand side vectors B, this function computes the solutions X to the linear systems A X = B by performing the LU decomposition of A and reusing it to solve for multiple right-hand sides efficiently. Supports batch dimensions.\nWrapper Entry Information: def solve_multiple_lu(A, Bs, *, pivot=True, out=None) -> Tensor\n\n    - **A** (Tensor): Coefficient matrix of shape `(*, n, n)`, where `*` is zero or more batch dimensions.\n    - **Bs** (Tensor): Right-hand side tensor of shape `(*, n, k)`, where `k` is the number of right-hand sides.\n    - **pivot** (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`.\n    - **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: LU Decomposition:\nA = P L U\n- P is a permutation matrix.\n- L is a lower triangular matrix with unit diagonal elements.\n- U is an upper triangular matrix.\nSolving Linear Systems:\nFor each b_i in B, compute x_i by:\n- Apply permutation: b'_i = P^T b_i\n- Solve L y_i = b'_i\n- Solve U x_i = y_i\nother: This function efficiently reuses the LU decomposition of A to solve multiple linear systems with different right-hand sides. If `pivot=False`, no permutation is applied. Supports batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to perform LU decomposition and solve multiple linear systems\n@triton.jit\ndef solve_multiple_lu_kernel(\n    A,  # Pointer to the coefficient matrix\n    Bs,  # Pointer to the right-hand side tensor\n    X,  # Pointer to the output tensor\n    batch,  # Number of batch elements\n    n,  # Size of the square matrix\n    k,  # Number of right-hand sides\n    pivot,  # Whether to use pivoting\n    BLOCK_SIZE: tl.constexpr,  # Block size for matrix operations\n):\n    pid = tl.program_id(0)\n    batch_id = pid // (n // BLOCK_SIZE)\n    row_id = (pid % (n // BLOCK_SIZE)) * BLOCK_SIZE\n\n    # Load the matrix A and Bs for the current batch\n    A_batch = A + batch_id * n * n\n    Bs_batch = Bs + batch_id * n * k\n    X_batch = X + batch_id * n * k\n\n    # Perform LU decomposition\n    if pivot:\n        P, L, U = lu_decomposition_with_pivoting(A_batch, n, BLOCK_SIZE)\n    else:\n        L, U = lu_decomposition_without_pivoting(A_batch, n, BLOCK_SIZE)\n        P = None\n\n    # Solve for each right-hand side\n    for i in range(k):\n        b = Bs_batch + i * n\n        x = X_batch + i * n\n\n        # Apply permutation if pivoting is used\n        if pivot:\n            b_permuted = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n            for j in range(n // BLOCK_SIZE):\n                b_permuted[j * BLOCK_SIZE:(j + 1) * BLOCK_SIZE] = P[j * BLOCK_SIZE:(j + 1) * BLOCK_SIZE] @ b[j * BLOCK_SIZE:(j + 1) * BLOCK_SIZE]\n            b = b_permuted\n\n        # Solve L y = b\n        y = forward_substitution(L, b, n, BLOCK_SIZE)\n\n        # Solve U x = y\n        x = backward_substitution(U, y, n, BLOCK_SIZE)\n\n        # Store the result\n        tl.store(x, X_batch + i * n)\n\n# Helper function to perform LU decomposition with pivoting\n@triton.jit\ndef lu_decomposition_with_pivoting(A, n, BLOCK_SIZE):\n    P = tl.eye(n, dtype=tl.int32)\n    L = tl.zeros((n, n), dtype=tl.float32)\n    U = A.clone()\n\n    for i in range(n):\n        max_val = -1e9\n        max_row = i\n        for j in range(i, n):\n            if U[j, i] > max_val:\n                max_val = U[j, i]\n                max_row = j\n\n        # Swap rows in U and P\n        U[[i, max_row], :] = U[[max_row, i], :]\n        P[[i, max_row], :] = P[[max_row, i], :]\n\n        # Update L\n        L[i, i] = 1.0\n        for j in range(i + 1, n):\n            L[j, i] = U[j, i] / U[i, i]\n            U[j, i:n] -= L[j, i] * U[i, i:n]\n\n    return P, L, U\n\n# Helper function to perform LU decomposition without pivoting\n@triton.jit\ndef lu_decomposition_without_pivoting(A, n, BLOCK_SIZE):\n    L = tl.zeros((n, n), dtype=tl.float32)\n    U = A.clone()\n\n    for i in range(n):\n        L[i, i] = 1.0\n        for j in range(i + 1, n):\n            L[j, i] = U[j, i] / U[i, i]\n            U[j, i:n] -= L[j, i] * U[i, i:n]\n\n    return L, U\n\n# Helper function to perform forward substitution\n@triton.jit\ndef forward_substitution(L, b, n, BLOCK_SIZE):\n    y = tl.zeros((n,), dtype=tl.float32)\n    for i in range(n):\n        y[i] = b[i]\n        for j in range(i):\n            y[i] -= L[i, j] * y[j]\n        y[i] /= L[i, i]\n    return y\n\n# Helper function to perform backward substitution\n@triton.jit\ndef backward_substitution(U, y, n, BLOCK_SIZE):\n    x = tl.zeros((n,), dtype=tl.float32)\n    for i in range(n - 1, -1, -1):\n        x[i] = y[i]\n        for j in range(i + 1, n):\n            x[i] -= U[i, j] * x[j]\n        x[i] /= U[i, i]\n    return x\n\n# Python wrapper function\ndef solve_multiple_lu(A, Bs, *, pivot=True, out=None):\n    A = A.contiguous()\n    Bs = Bs.contiguous()\n    batch = A.shape[:-2]\n    n = A.shape[-1]\n    k = Bs.shape[-1]\n\n    if out is None:\n        out = torch.empty_like(Bs)\n\n    assert A.shape[-2] == n, \"A must be a square matrix\"\n    assert Bs.shape[-2] == n, \"Bs must have the same number of rows as A\"\n    assert A.shape[:-2] == Bs.shape[:-2], \"A and Bs must have the same batch dimensions\"\n\n    with torch.cuda.device(A.device):\n        grid = lambda meta: (triton.cdiv(batch.numel() * n, meta[\"BLOCK_SIZE\"]),)\n        solve_multiple_lu_kernel[grid](A, Bs, out, batch.numel(), n, k, pivot, BLOCK_SIZE=32)\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the hyperbolic tangent of the elements of the input tensor.\nWrapper Entry Information: tanh(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\tanh(\\text{input}_{i})\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the hyperbolic tangent of the elements of the input tensor.\nWrapper Entry Information: tanh(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\tanh(\\text{input}_{i})\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef tanh_kernel(\n    input_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the block id\n    pid = tl.program_id(axis=0)\n    # Compute the start and end indices for this block\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load the input elements\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Compute the hyperbolic tangent\n    output_elements = tl.tanh(input_elements)\n    # Store the results\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\ndef tanh(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor shape must match input tensor shape'\n    \n    # Get the number of elements in the input tensor\n    n_elements = input.numel()\n    \n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n    \n    # Launch the Triton kernel\n    grid = (triton.cdiv(n_elements, BLOCK_SIZE),)\n    tanh_kernel[grid](\n        input_ptr=input, output_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit (ReLU) function to each element in input, and then computes the square root of the result. This function ensures all negative values in input are set to zero before applying the square root.\nWrapper Entry Information: def relu_sqrt(input, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor. inplace (bool, optional): If True, modifies input in-place (if possible). Default is False. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{\\max(0, \\text{input}_i)}\nother: The function modifies input in-place if inplace is set to True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit (ReLU) function to each element in input, and then computes the square root of the result. This function ensures all negative values in input are set to zero before applying the square root.\nWrapper Entry Information: def relu_sqrt(input, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor. inplace (bool, optional): If True, modifies input in-place (if possible). Default is False. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{\\max(0, \\text{input}_i)}\nother: The function modifies input in-place if inplace is set to True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to apply ReLU and then square root to each element in the tensor\n@triton.jit\ndef relu_sqrt_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load elements from the input tensor\n    input_values = tl.load(input_ptr + offsets, mask=mask)\n\n    # Apply ReLU and then square root\n    output_values = tl.sqrt(tl.max(input_values, 0.0))\n\n    # Store the result in the output tensor\n    tl.store(output_ptr + offsets, output_values, mask=mask)\n\n# Wrapper function to launch the Triton kernel and apply ReLU and square root\ndef relu_sqrt(input, inplace=False, out=None) -> torch.Tensor:\n    if inplace and out is not None:\n        raise ValueError(\"Cannot specify both 'inplace=True' and 'out' at the same time.\")\n    \n    if inplace:\n        out = input\n    elif out is None:\n        out = torch.empty_like(input)\n    \n    n_elements = input.numel()\n    block_size = 1024  # Adjust block size as needed\n    grid_size = (n_elements + block_size - 1) // block_size\n\n    # Launch the Triton kernel\n    relu_sqrt_kernel[(grid_size,)](input, out, n_elements, BLOCK_SIZE=block_size)\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the square-root of the elements of the input tensor. It computes the square root element-wise.\nWrapper Entry Information: sqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function can handle negative inputs, resulting in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the square-root of the elements of the input tensor. It computes the square root element-wise.\nWrapper Entry Information: sqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function can handle negative inputs, resulting in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef sqrt_kernel(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)\n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(input, *, out=None):\n    # Create an output tensor 'out' if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size for the kernel\n    block_size = 1024  # Common block size for good performance\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    sqrt_kernel[(grid_size, 1, 1)](input, out, n_elements, block_size)\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the sigmoid (logistic) function to each element in the input and then computes the indices of the maximum values along the specified dimension or over all elements if no dimension is specified. If dim is not specified, it returns the index of the maximum value in the flattened tensor.\nWrapper Entry Information: sigmoid_argmax(input, dim=None, keepdim=False) -> LongTensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. Default is None, which computes the argmax over all elements. keepdim (bool, optional): Whether the output tensor has :attr:`dim` retained or not. Default is False.\nMath: sigmoid(x) = 1 / (1 + e^{-x})\nother: The function uses PyTorch tensor operations and returns a LongTensor containing indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the sigmoid (logistic) function to each element in the input and then computes the indices of the maximum values along the specified dimension or over all elements if no dimension is specified. If dim is not specified, it returns the index of the maximum value in the flattened tensor.\nWrapper Entry Information: sigmoid_argmax(input, dim=None, keepdim=False) -> LongTensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. Default is None, which computes the argmax over all elements. keepdim (bool, optional): Whether the output tensor has :attr:`dim` retained or not. Default is False.\nMath: sigmoid(x) = 1 / (1 + e^{-x})\nother: The function uses PyTorch tensor operations and returns a LongTensor containing indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid(x):\n    return 1 / (1 + tl.exp(-x))\n\n@triton.jit\ndef sigmoid_argmax_kernel(output_ptr, input_ptr, input_row_stride, input_col_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_rows * n_cols\n\n    input_offsets = input_ptr + offsets * input_col_stride\n    input_vals = tl.load(input_offsets, mask=mask, other=-float('inf'))\n\n    # Apply sigmoid function\n    sigmoid_vals = sigmoid(input_vals)\n\n    # Find the maximum value and its index\n    max_val, max_idx = tl.max_argmax(sigmoid_vals, axis=0, mask=mask)\n\n    # Write the index back to the output tensor\n    output_offsets = output_ptr + pid\n    tl.store(output_offsets, max_idx, mask=mask)\n\ndef sigmoid_argmax(input, dim=None, keepdim=False):\n    if dim is None:\n        # Flatten the tensor and find the argmax\n        input_flattened = input.flatten()\n        max_idx = torch.argmax(input_flattened.sigmoid())\n        return max_idx.item()\n\n    # Ensure dim is within the valid range\n    if dim < 0:\n        dim = input.dim() + dim\n\n    # Compute the shape of the output tensor\n    output_shape = list(input.shape)\n    if not keepdim:\n        output_shape.pop(dim)\n\n    # Allocate the output tensor\n    output = torch.empty(output_shape, dtype=torch.int64, device=input.device)\n\n    # Determine the block size\n    BLOCK_SIZE = 1024\n\n    # Determine the number of programs\n    n_rows = input.shape[dim]\n    n_cols = input.numel() // n_rows\n\n    # Launch the kernel\n    grid = (n_rows, 1, 1)\n    sigmoid_argmax_kernel[grid](\n        output,\n        input,\n        input.stride(dim),\n        input.stride(0),\n        n_rows,\n        n_cols,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n\n# Example usage\ninput_tensor = torch.randn(4, 5, device='cuda')\nresult = sigmoid_argmax(input_tensor, dim=1, keepdim=True)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`. The operation is defined as: out_i = input_i - alpha * other_i. Supports broadcasting to a common shape, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: sub(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to subtract from input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: out_i = input_i - alpha * other_i\nother: Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`. The operation is defined as: out_i = input_i - alpha * other_i. Supports broadcasting to a common shape, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: sub(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to subtract from input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: out_i = input_i - alpha * other_i\nother: Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for element-wise subtraction\n@triton.jit\ndef sub_kernel(\n    input_ptr, other_ptr, output_ptr, alpha, n_elements, input_stride, other_stride, output_stride,\n    BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    A kernel to perform element-wise subtraction of two tensors, scaled by alpha.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_ptr: Pointer to the other tensor.\n    - output_ptr: Pointer to the output tensor.\n    - alpha: The multiplier for the other tensor.\n    - n_elements: Total number of elements in the tensors.\n    - input_stride: Stride of the input tensor.\n    - other_stride: Stride of the other tensor.\n    - output_stride: Stride of the output tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_offsets = input_stride * offsets\n    other_offsets = other_stride * offsets\n    output_offsets = output_stride * offsets\n    \n    input_val = tl.load(input_ptr + input_offsets, mask=mask)\n    other_val = tl.load(other_ptr + other_offsets, mask=mask)\n    output_val = input_val - alpha * other_val\n    tl.store(output_ptr + output_offsets, output_val, mask=mask)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef sub(input, other, *, alpha=1, out=None):\n    \"\"\"\n    Subtracts :attr:`other`, scaled by :attr:`alpha`, from :attr:`input`.\n    The operation is defined as: out_i = input_i - alpha * other_i.\n    Supports broadcasting to a common shape, type promotion, and works with integer, float, and complex inputs.\n    \n    Parameters:\n    - input (Tensor): The input tensor.\n    - other (Tensor or Number): The tensor or number to subtract from input.\n    - alpha (Number): The multiplier for other.\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - Tensor: The resulting tensor after performing the subtraction.\n    \"\"\"\n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n    \n    # Ensure other is a tensor\n    if not isinstance(other, torch.Tensor):\n        other = torch.tensor(other, dtype=input.dtype, device=input.device)\n    \n    # Broadcast input and other to a common shape\n    input, other = torch.broadcast_tensors(input, other)\n    \n    # Ensure out has the same shape as input and other\n    if out.shape != input.shape:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n    \n    # Determine strides and number of elements\n    n_elements = input.numel()\n    input_stride = input.stride(0)\n    other_stride = other.stride(0)\n    output_stride = out.stride(0)\n    \n    # Determine block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Launch the Triton kernel\n    sub_kernel[(grid_size, 1, 1)](\n        input, other, out, alpha, n_elements, input_stride, other_stride, output_stride, block_size\n    )\n    \n    return out\n\n# Example tensors\ninput = torch.tensor([1.0, 2.0, 3.0], dtype=torch.float32, device='cuda')\nother = torch.tensor([0.5, 0.5, 0.5], dtype=torch.float32, device='cuda')\n\n# Perform the subtraction\nresult = sub(input, other, alpha=2.0)\n\nprint(result)  # Output: tensor([0.0, 1.0, 2.0], device='cuda:0')\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes output using input values and pixel locations from grid, supporting spatial (4-D) and volumetric (5-D) input. Interpolates output value at specified grid positions using nearest or bilinear interpolation. Grid values are normalized within [-1, 1] range, and values outside are handled by padding_mode. Often used with affine_grid to build Spatial Transformer Networks.\nWrapper Entry Information: def grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=False) -> Tensor\nother: Note: NaN values in grid are interpreted as -1. align_corners=True changes sampled grid positions with image resolution. Default for align_corners changed to False since version 1.2.0. bicubic mode implemented using cubic convolution algorithm with alpha=-0.75; other packages might use different alpha values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a kernel called ones_kernel that initializes a tensor with 1.0 values on the GPU. The kernel takes three arguments: output_ptr (the GPU memory pointer to the output tensor), n_elements (the total number of elements to process), and BLOCK_SIZE (a compile-time constant specifying the size of each thread block). The ones function wraps this kernel to accept standard tensor creation parameters like size, dtype, and device, computes the necessary grid size, and then launches the kernel on the GPU. import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel that sets all elements in the output tensor to 1.0\n@triton.jit\ndef ones_kernel(\n    output_ptr,  # Pointer to the output tensor in GPU memory\n    n_elements,  # Total number of elements to process\n    BLOCK_SIZE: tl.constexpr,  # Size of each block of threads\n):\n    pid = tl.program_id(axis=0)  # Get the block index\n    block_start = pid * BLOCK_SIZE  # Calculate the start index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Calculate offsets for each thread\n    mask = offsets < n_elements  # Mask to ensure we don't write out of bounds\n    tl.store(output_ptr + offsets, 1.0, mask=mask)  # Store 1.0 in all valid positions\n\n# Function to initialize a tensor of given size with ones using the Triton kernel\ndef ones(size, *, dtype=None, layout=None, device=None, pin_memory=None):\n    if dtype is None:\n        dtype = torch.get_default_dtype()  # Use default PyTorch dtype if none provided\n    if device is None:\n        device = torch.device(\"cuda\")  # Default to CUDA device\n\n    out = torch.empty(size, device=device, dtype=dtype)  # Create an empty tensor\n    N = volume(size)  # Calculate the total number of elements\n    grid_fn = lambda meta: (triton.cdiv(N, meta[\"BLOCK_SIZE\"]),)  # Determine the grid size\n    with torch.cuda.device(device):\n        ones_kernel[grid_fn](out, N, BLOCK_SIZE=1024)  # Launch the Triton kernel\n    return out  # Return the initialized tensor\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes output using input values and pixel locations from grid, supporting spatial (4-D) and volumetric (5-D) input. Interpolates output value at specified grid positions using nearest or bilinear interpolation. Grid values are normalized within [-1, 1] range, and values outside are handled by padding_mode. Often used with affine_grid to build Spatial Transformer Networks.\nWrapper Entry Information: def grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=False) -> Tensor\nother: Note: NaN values in grid are interpreted as -1. align_corners=True changes sampled grid positions with image resolution. Default for align_corners changed to False since version 1.2.0. bicubic mode implemented using cubic convolution algorithm with alpha=-0.75; other packages might use different alpha values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for grid sampling\n@triton.jit\ndef grid_sample_kernel(\n    input_ptr,  # Pointer to the input tensor in GPU memory\n    grid_ptr,  # Pointer to the grid tensor in GPU memory\n    output_ptr,  # Pointer to the output tensor in GPU memory\n    input_shape,  # Shape of the input tensor (N, C, H, W) or (N, C, D, H, W)\n    grid_shape,  # Shape of the grid tensor (N, H_out, W_out, 2) or (N, D_out, H_out, W_out, 3)\n    output_shape,  # Shape of the output tensor (N, C, H_out, W_out) or (N, C, D_out, H_out, W_out)\n    mode,  # Interpolation mode: 'bilinear', 'nearest', 'bicubic'\n    padding_mode,  # Padding mode: 'zeros', 'border', 'reflection'\n    align_corners,  # Whether to align corners\n    BLOCK_SIZE: tl.constexpr  # Size of each block of threads\n):\n    pid = tl.program_id(axis=0)  # Get the block index\n    batch, channels, *input_spatial = input_shape\n    batch, *grid_spatial, _ = grid_shape\n    batch, channels, *output_spatial = output_shape\n    n_elements = batch * channels * volume(output_spatial)\n    block_start = pid * BLOCK_SIZE  # Calculate the start index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Calculate offsets for each thread\n    mask = offsets < n_elements  # Mask to ensure we don't write out of bounds\n\n    # Flatten the output tensor indices\n    flat_indices = tl.arange(0, BLOCK_SIZE) + block_start\n    flat_indices = flat_indices[mask]\n\n    # Unflatten the output tensor indices\n    batch_indices = flat_indices // (channels * volume(output_spatial))\n    channel_indices = (flat_indices % (channels * volume(output_spatial))) // volume(output_spatial)\n    spatial_indices = flat_indices % volume(output_spatial)\n\n    # Compute the grid indices\n    grid_indices = tl.zeros((BLOCK_SIZE, len(grid_spatial)), dtype=tl.int32)\n    for i in range(len(grid_spatial)):\n        grid_indices[:, i] = spatial_indices // volume(output_spatial[i+1:])\n        spatial_indices = spatial_indices % volume(output_spatial[i+1:])\n\n    # Load the grid values\n    grid_values = tl.load(grid_ptr + batch_indices * volume(grid_spatial) + tl.arange(0, len(grid_spatial)) * volume(grid_spatial[1:]), mask=mask)\n\n    # Handle NaN values in the grid\n    grid_values = tl.where(tl.isnan(grid_values), -1.0, grid_values)\n\n    # Normalize grid values to [-1, 1] and convert to input tensor indices\n    input_indices = tl.zeros((BLOCK_SIZE, len(grid_spatial)), dtype=tl.float32)\n    for i in range(len(grid_spatial)):\n        if align_corners:\n            input_indices[:, i] = ((grid_values[:, i] + 1) / 2) * (input_spatial[i] - 1)\n        else:\n            input_indices[:, i] = ((grid_values[:, i] + 1) / 2) * input_spatial[i] - 0.5\n\n    # Perform interpolation\n    if mode == 'nearest':\n        input_indices = tl.round(input_indices).to(tl.int32)\n        input_indices = tl.where(input_indices < 0, 0, input_indices)\n        input_indices = tl.where(input_indices >= input_spatial, input_spatial - 1, input_indices)\n        input_indices = input_indices + batch_indices * volume(input_spatial) + channel_indices * volume(input_spatial)\n        output_values = tl.load(input_ptr + input_indices, mask=mask)\n    elif mode == 'bilinear':\n        # Bilinear interpolation\n        x0 = tl.floor(input_indices[:, 0]).to(tl.int32)\n        x1 = x0 + 1\n        y0 = tl.floor(input_indices[:, 1]).to(tl.int32)\n        y1 = y0 + 1\n\n        x0 = tl.where(x0 < 0, 0, x0)\n        x1 = tl.where(x1 >= input_spatial[0], input_spatial[0] - 1, x1)\n        y0 = tl.where(y0 < 0, 0, y0)\n        y1 = tl.where(y1 >= input_spatial[1], input_spatial[1] - 1, y1)\n\n        q11 = tl.load(input_ptr + batch_indices * volume(input_spatial) + channel_indices * volume(input_spatial) + x0 * input_spatial[1] + y0, mask=mask)\n        q12 = tl.load(input_ptr + batch_indices * volume(input_spatial) + channel_indices * volume(input_spatial) + x0 * input_spatial[1] + y1, mask=mask)\n        q21 = tl.load(input_ptr + batch_indices * volume(input_spatial) + channel_indices * volume(input_spatial) + x1 * input_spatial[1] + y0, mask=mask)\n        q22 = tl.load(input_ptr + batch_indices * volume(input_spatial) + channel_indices * volume(input_spatial) + x1 * input_spatial[1] + y1, mask=mask)\n\n        wa = (x1 - input_indices[:, 0]) * (y1 - input_indices[:, 1])\n        wb = (x1 - input_indices[:, 0]) * (input_indices[:, 1] - y0)\n        wc = (input_indices[:, 0] - x0) * (y1 - input_indices[:, 1])\n        wd = (input_indices[:, 0] - x0) * (input_indices[:, 1] - y0)\n\n        output_values = wa * q11 + wb * q12 + wc * q21 + wd * q22\n    elif mode == 'bicubic':\n        # Bicubic interpolation (simplified for brevity)\n        raise NotImplementedError(\"Bicubic interpolation is not implemented in this kernel.\")\n\n    # Apply padding mode\n    if padding_mode == 'zeros':\n        output_values = tl.where((input_indices < 0) | (input_indices >= input_spatial), 0.0, output_values)\n    elif padding_mode == 'border':\n        input_indices = tl.where(input_indices < 0, 0, input_indices)\n        input_indices = tl.where(input_indices >= input_spatial, input_spatial - 1, input_indices)\n    elif padding_mode == 'reflection':\n        input_indices = tl.where(input_indices < 0, -2 * input_indices, input_indices)\n        input_indices = tl.where(input_indices >= input_spatial, 2 * input_spatial - 2 - input_indices, input_indices)\n\n    # Store the output values\n    tl.store(output_ptr + flat_indices, output_values, mask=mask)\n\n# Function to perform grid sampling using the Triton kernel\ndef grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=False) -> torch.Tensor:\n    if input.dim() not in [4, 5]:\n        raise ValueError(\"Input tensor must be 4D (N, C, H, W) or 5D (N, C, D, H, W).\")\n    if grid.dim() not in [4, 5]:\n        raise ValueError(\"Grid tensor must be 4D (N, H_out, W_out, 2) or 5D (N, D_out, H_out, W_out, 3).\")\n\n    input_shape = input.shape\n    grid_shape = grid.shape\n    output_shape = input_shape[:2] + grid_shape[1:-1]\n\n    output = torch.empty(output_shape, device=input.device, dtype=input.dtype)\n\n    n_elements = volume(output_shape)\n    grid_fn = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n\n    with torch.cuda.device(input.device):\n        grid_sample_kernel[grid_fn](\n            input.data_ptr(),\n            grid.data_ptr(),\n            output.data_ptr(),\n            input_shape,\n            grid_shape,\n            output_shape,\n            mode,\n            padding_mode,\n            align_corners,\n            BLOCK_SIZE=1024\n        )\n\n    return output\n\n# Helper function to compute the volume of a tensor shape\ndef volume(shape):\n    return torch.prod(torch.tensor(shape)).item()\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the singular value decomposition (SVD) of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned decomposition is a named tuple (U, S, Vh) which corresponds to U, S, V^{H} above. The singular values are returned in descending order. The parameter full_matrices chooses between the full (default) and reduced SVD. The driver kwarg may be used in CUDA with a cuSOLVER backend to choose the algorithm used to compute the SVD. The choice of a driver is a trade-off between accuracy and speed.\nWrapper Entry Information: def linalg.svd(A, full_matrices=True, *, driver=None, out=None) -> (Tensor, Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    full_matrices (bool, optional): controls whether to compute the full or reduced SVD, and consequently, the shape of the returned tensors `U` and `Vh`. Default: `True`.\n\nKeyword args:\n    driver (str, optional): name of the cuSOLVER method to be used. This keyword argument only works on CUDA inputs. Available options are: `None`, `gesvd`, `gesvdj`, and `gesvda`. Default: `None`.\n    out (tuple, optional): output tuple of three tensors. Ignored if `None`.\nMath: A = U \\operatorname{diag}(S) V^{\\text{H}} \\mathrlap{\\qquad U \\in \\mathbb{K}^{m \\times m}, S \\in \\mathbb{R}^k, V \\in \\mathbb{K}^{n \\times n}}\nother: Differences with numpy.linalg.svd: Unlike numpy.linalg.svd, this function always returns a tuple of three tensors and it doesn't support compute_uv argument. Please use torch.linalg.svdvals, which computes only the singular values, instead of compute_uv=False. When full_matrices=True, the gradients with respect to U[..., :, min(m, n):] and Vh[..., min(m, n):, :] will be ignored, as those vectors can be arbitrary bases of the corresponding subspaces. The returned tensors U and V are not unique, nor are they continuous with respect to A. Gradients computed using U or Vh will only be finite when A does not have repeated singular values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the singular value decomposition (SVD) of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned decomposition is a named tuple (U, S, Vh) which corresponds to U, S, V^{H} above. The singular values are returned in descending order. The parameter full_matrices chooses between the full (default) and reduced SVD. The driver kwarg may be used in CUDA with a cuSOLVER backend to choose the algorithm used to compute the SVD. The choice of a driver is a trade-off between accuracy and speed.\nWrapper Entry Information: def linalg.svd(A, full_matrices=True, *, driver=None, out=None) -> (Tensor, Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    full_matrices (bool, optional): controls whether to compute the full or reduced SVD, and consequently, the shape of the returned tensors `U` and `Vh`. Default: `True`.\n\nKeyword args:\n    driver (str, optional): name of the cuSOLVER method to be used. This keyword argument only works on CUDA inputs. Available options are: `None`, `gesvd`, `gesvdj`, and `gesvda`. Default: `None`.\n    out (tuple, optional): output tuple of three tensors. Ignored if `None`.\nMath: A = U \\operatorname{diag}(S) V^{\\text{H}} \\mathrlap{\\qquad U \\in \\mathbb{K}^{m \\times m}, S \\in \\mathbb{R}^k, V \\in \\mathbb{K}^{n \\times n}}\nother: Differences with numpy.linalg.svd: Unlike numpy.linalg.svd, this function always returns a tuple of three tensors and it doesn't support compute_uv argument. Please use torch.linalg.svdvals, which computes only the singular values, instead of compute_uv=False. When full_matrices=True, the gradients with respect to U[..., :, min(m, n):] and Vh[..., min(m, n):, :] will be ignored, as those vectors can be arbitrary bases of the corresponding subspaces. The returned tensors U and V are not unique, nor are they continuous with respect to A. Gradients computed using U or Vh will only be finite when A does not have repeated singular values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport triton.cudalib as cu\n\n@triton.jit\ndef svd_kernel(A_ptr, U_ptr, S_ptr, Vh_ptr, m, n, batch_size, full_matrices, driver, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    if pid < batch_size:\n        # Compute the SVD using cuSOLVER\n        A = tl.load(A_ptr + pid * m * n, mask=tl.arange(0, m * n) < m * n, other=0.0)\n        A = A.to(tl.float32)  # Ensure the data type is compatible with cuSOLVER\n\n        # Allocate memory for U, S, and Vh\n        U = tl.zeros((m, m), dtype=tl.float32) if full_matrices else tl.zeros((m, min(m, n)), dtype=tl.float32)\n        S = tl.zeros((min(m, n),), dtype=tl.float32)\n        Vh = tl.zeros((n, n), dtype=tl.float32) if full_matrices else tl.zeros((min(m, n), n), dtype=tl.float32)\n\n        # Call cuSOLVER SVD\n        cu.svd(A, U, S, Vh, driver=driver)\n\n        # Store the results\n        tl.store(U_ptr + pid * m * m, U, mask=tl.arange(0, m * m) < m * m)\n        tl.store(S_ptr + pid * min(m, n), S, mask=tl.arange(0, min(m, n)) < min(m, n))\n        tl.store(Vh_ptr + pid * n * n, Vh, mask=tl.arange(0, n * n) < n * n)\n\nimport torch\nimport triton\nimport triton.runtime.driver as driver\n\ndef linalg_svd(A, full_matrices=True, *, driver=None, out=None):\n    # Validate input\n    if not isinstance(A, torch.Tensor):\n        raise ValueError(\"Input A must be a torch.Tensor\")\n    if A.dtype not in [torch.float32, torch.float64, torch.complex64, torch.complex128]:\n        raise ValueError(\"Input A must be of type float, double, cfloat, or cdouble\")\n    \n    # Determine batch size and matrix dimensions\n    batch_size = A.shape[:-2] if A.dim() > 2 else (1,)\n    m, n = A.shape[-2:]\n    \n    # Allocate output tensors\n    if out is None:\n        U_shape = (*batch_size, m, m) if full_matrices else (*batch_size, m, min(m, n))\n        S_shape = (*batch_size, min(m, n))\n        Vh_shape = (*batch_size, n, n) if full_matrices else (*batch_size, min(m, n), n)\n        U = torch.empty(U_shape, dtype=A.dtype, device=A.device)\n        S = torch.empty(S_shape, dtype=torch.float32 if A.dtype in [torch.float32, torch.complex64] else torch.float64, device=A.device)\n        Vh = torch.empty(Vh_shape, dtype=A.dtype, device=A.device)\n    else:\n        U, S, Vh = out\n        if U.shape != U_shape or S.shape != S_shape or Vh.shape != Vh_shape:\n            raise ValueError(\"Output tensors must have the correct shape\")\n    \n    # Determine grid configuration\n    grid = (batch_size, 1, 1)\n    \n    # Call the Triton kernel\n    svd_kernel[grid](\n        A.data_ptr(), U.data_ptr(), S.data_ptr(), Vh.data_ptr(),\n        m, n, batch_size, full_matrices, driver,\n        BLOCK_SIZE=1024\n    )\n    \n    return U, S, Vh\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the zeroth order modified Bessel function of the first kind for each element of the input tensor.\nWrapper Entry Information: i0(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = I_0(\\text{input}_{i}) = \\sum_{k=0}^{\\infty} \\frac{(\\text{input}_{i}^2/4)^k}{(k!)^2}\nother: The function calculates the zeroth order modified Bessel function of the first kind, which is a special mathematical function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the zeroth order modified Bessel function of the first kind for each element of the input tensor.\nWrapper Entry Information: i0(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = I_0(\\text{input}_{i}) = \\sum_{k=0}^{\\infty} \\frac{(\\text{input}_{i}^2/4)^k}{(k!)^2}\nother: The function calculates the zeroth order modified Bessel function of the first kind, which is a special mathematical function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef i0_kernel(\n    input_ptr,\n    output_ptr,\n    size,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < size\n\n    input_val = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n\n    # Initialize the output with 1.0 (the first term of the series)\n    output_val = tl.full((BLOCK_SIZE,), 1.0, dtype=tl.float32)\n\n    # Compute the series sum\n    k = 0\n    while True:\n        term = (input_val * input_val / 4.0) ** k / (tl.math.factorial(k) * tl.math.factorial(k))\n        output_val += term\n        k += 1\n        if tl.all(term < 1e-6, axis=0):\n            break\n\n    tl.store(output_ptr + offsets, output_val, mask=mask)\n\ndef i0(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Ensure the input tensor is on the GPU\n    input = input.to(device)\n    \n    # Determine the size of the input tensor\n    size = input.numel()\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.shape == input.shape, \"Output tensor shape must match input tensor shape\"\n        assert out.is_cuda, \"Output tensor must be on the same device as the input tensor\"\n    \n    # Determine the block size for parallel execution\n    BLOCK_SIZE = triton.next_power_of_2(size)\n    \n    # Launch the Triton kernel\n    grid = (triton.cdiv(size, BLOCK_SIZE),)\n    i0_kernel[grid](\n        input_ptr=input, output_ptr=out, size=size, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the square-root of each of the elements of the input tensor.\nWrapper Entry Information: rsqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\sqrt{\\text{input}_{i}}}\nother: Note: The function will return 'nan' for negative input values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the square-root of each of the elements of the input tensor.\nWrapper Entry Information: rsqrt(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\sqrt{\\text{input}_{i}}}\nother: Note: The function will return 'nan' for negative input values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef rsqrt_kernel(\n    input_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the current program ID\n    pid = tl.program_id(axis=0)\n    # Compute the start and end indices for the current block\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load the input elements with masking\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Compute the reciprocal of the square-root\n    output_elements = 1.0 / tl.sqrt(input_elements)\n    # Store the output elements with masking\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\ndef rsqrt(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Get the number of elements in the input tensor\n    n_elements = input.numel()\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.shape == input.shape, \"Output tensor must have the same shape as the input tensor\"\n        assert out.is_cuda, \"Output tensor must be on the same device as the input tensor\"\n    \n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, \"Input tensor must be on the GPU\"\n    \n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n    \n    # Launch the Triton kernel\n    rsqrt_kernel[(n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        input_ptr=input, output_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by batch normalization, ReLU activation, and dropout. Sequentially applies conv2d, batch normalization for stabilizing training and reducing internal covariate shift, ReLU activation function, and dropout where some elements of the tensor are randomly zeroed with probability `p`.\nWrapper Entry Information: dropout_relu_batch_norm_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, p=0.5, training=True, inplace=False) -> torch.Tensor; Args: input (Tensor): Input tensor of shape \\(N, C_{in}, H, W\\). weight (Tensor): Convolution filters of shape \\(C_{out}, C_{in} / \\text{groups}, kH, kW\\). bias (Tensor, optional): Bias tensor of shape \\(C_{out}\\). Default is None. stride (int or tuple, optional): Stride of the convolution. Default: 1 padding (int, tuple, or str, optional): Implicit padding on both sides of the input. Default: 0 dilation (int or tuple, optional): Spacing between kernel elements. Default: 1 groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1 p (float, optional): Probability of an element to be zeroed in dropout. Default: 0.5 training (bool, optional): If True, applies dropout during training. Default: True inplace (bool, optional): If True, performs the operation in-place. Default: False\nother: Output tensor is returned after applying conv2d, batch normalization, ReLU, and dropout.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement dropout operations. The `apply_dropout` kernel takes 4 parameters: input (the data to apply dropout on), drop_p (probability of dropping an element), seed (for random number generation), and offset (to generate the mask). It returns the input with elements randomly zeroed out. The `apply_dropout_grad` kernel also takes 4 parameters: output_grad (gradients of the output), drop_p, seed, and offset, and returns the gradient of dropout. The `dropout_forward_kernel` and `dropout_backward_kernel` are triton kernels that perform the forward and backward passes of dropout, respectively. They take pointers to input/output data, size of the data, drop probability, seed, and block size as parameters. import triton\nimport triton.language as tl\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Input with elements randomly zeroed out.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef apply_dropout_grad(output_grad, drop_p, seed, offset):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad: Output gradients. The output gradients must be\n            loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Gradient of dropout.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, output_grad / (1 - drop_p))\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_forward_kernel(\n    input_pointer, output_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input_pointer: Pointer to the input to perform dropout on.\n            The input must be of shape [size].\n        output_pointer: Pointer to a container the result is written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    input = tl.load(input_pointer + offset, mask=mask)\n    output = apply_dropout(input, drop_p, seed, offset)\n    tl.store(output_pointer + offset, output, mask=mask)\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_backward_kernel(\n    output_grad_pointer, input_grad_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad_pointer: Pointer to dropout's output gradients.\n            The output gradients must be of shape [size].\n        input_grad_pointer: Pointer to a container the input's gradients are written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element used in dropout.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    output_grad = tl.load(output_grad_pointer + offset, mask=mask)\n    input_grad = apply_dropout_grad(output_grad, drop_p, seed, offset)\n    tl.store(input_grad_pointer + offset, input_grad, mask=mask)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by batch normalization, ReLU activation, and dropout. Sequentially applies conv2d, batch normalization for stabilizing training and reducing internal covariate shift, ReLU activation function, and dropout where some elements of the tensor are randomly zeroed with probability `p`.\nWrapper Entry Information: dropout_relu_batch_norm_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, p=0.5, training=True, inplace=False) -> torch.Tensor; Args: input (Tensor): Input tensor of shape \\(N, C_{in}, H, W\\). weight (Tensor): Convolution filters of shape \\(C_{out}, C_{in} / \\text{groups}, kH, kW\\). bias (Tensor, optional): Bias tensor of shape \\(C_{out}\\). Default is None. stride (int or tuple, optional): Stride of the convolution. Default: 1 padding (int, tuple, or str, optional): Implicit padding on both sides of the input. Default: 0 dilation (int or tuple, optional): Spacing between kernel elements. Default: 1 groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1 p (float, optional): Probability of an element to be zeroed in dropout. Default: 0.5 training (bool, optional): If True, applies dropout during training. Default: True inplace (bool, optional): If True, performs the operation in-place. Default: False\nother: Output tensor is returned after applying conv2d, batch normalization, ReLU, and dropout.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for 2D convolution\n@triton.jit\ndef conv2d_kernel(\n    input_ptr, weight_ptr, output_ptr, bias_ptr, stride, padding, dilation, groups,\n    N, C_in, H, W, C_out, kH, kW, stride_h, stride_w, padding_h, padding_w, dilation_h, dilation_w,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    n = pid // (H * W)\n    h = (pid % (H * W)) // W\n    w = (pid % (H * W)) % W\n\n    # Load input and weight\n    input = tl.load(input_ptr + n * C_in * H * W + tl.arange(0, C_in) * H * W + h * W + w)\n    weight = tl.load(weight_ptr + tl.arange(0, C_out) * (C_in // groups) * kH * kW)\n\n    # Perform convolution\n    output = tl.zeros((C_out,), dtype=tl.float32)\n    for g in range(groups):\n        for kh in range(kH):\n            for kw in range(kW):\n                input_patch = tl.load(input_ptr + n * C_in * H * W + (g * (C_in // groups) + tl.arange(0, C_in // groups)) * H * W + (h + kh * dilation_h - padding_h) * W + (w + kw * dilation_w - padding_w)\n                output += tl.dot(input_patch, weight[g * (C_in // groups) * kH * kW + kh * kW + kw])\n\n    # Add bias\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr)\n        output += bias\n\n    # Store output\n    tl.store(output_ptr + n * C_out * H * W + h * W + w, output)\n\n# Triton kernel for batch normalization\n@triton.jit\ndef batch_norm_kernel(\n    input_ptr, output_ptr, gamma_ptr, beta_ptr, eps,\n    N, C, H, W,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    n = pid // (H * W)\n    h = (pid % (H * W)) // W\n    w = (pid % (H * W)) % W\n\n    # Load input\n    input = tl.load(input_ptr + n * C * H * W + h * W + w)\n\n    # Load gamma and beta\n    gamma = tl.load(gamma_ptr)\n    beta = tl.load(beta_ptr)\n\n    # Compute mean and variance\n    mean = tl.mean(input, axis=1)\n    var = tl.var(input, axis=1)\n\n    # Normalize\n    normalized = (input - mean) / tl.sqrt(var + eps)\n\n    # Scale and shift\n    output = normalized * gamma + beta\n\n    # Store output\n    tl.store(output_ptr + n * C * H * W + h * W + w, output)\n\n# Triton kernel for ReLU activation\n@triton.jit\ndef relu_kernel(\n    input_ptr, output_ptr,\n    N, C, H, W,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    n = pid // (H * W)\n    h = (pid % (H * W)) // W\n    w = (pid % (H * W)) % W\n\n    # Load input\n    input = tl.load(input_ptr + n * C * H * W + h * W + w)\n\n    # Apply ReLU\n    output = tl.where(input > 0, input, 0)\n\n    # Store output\n    tl.store(output_ptr + n * C * H * W + h * W + w, output)\n\n# Triton kernel for dropout\n@triton.jit\ndef dropout_kernel(\n    input_ptr, output_ptr, p, seed, size,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    input = tl.load(input_ptr + offset, mask=mask)\n    random = tl.rand(seed, offset)\n    output = tl.where(random < p, 0, input / (1 - p))\n\n    tl.store(output_ptr + offset, output, mask=mask)\n\n# Combined Triton kernel for conv2d, batch norm, ReLU, and dropout\n@triton.jit\ndef combined_kernel(\n    input_ptr, weight_ptr, bias_ptr, gamma_ptr, beta_ptr, output_ptr, p, seed,\n    stride, padding, dilation, groups, eps,\n    N, C_in, H, W, C_out, kH, kW, stride_h, stride_w, padding_h, padding_w, dilation_h, dilation_w,\n    size,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr, BLOCK_SIZE: tl.constexpr,\n):\n    # Convolution\n    conv_output = tl.zeros((N, C_out, H, W), dtype=tl.float32)\n    conv2d_kernel(\n        input_ptr, weight_ptr, conv_output, bias_ptr, stride, padding, dilation, groups,\n        N, C_in, H, W, C_out, kH, kW, stride_h, stride_w, padding_h, padding_w, dilation_h, dilation_w,\n        BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W\n    )\n\n    # Batch normalization\n    bn_output = tl.zeros((N, C_out, H, W), dtype=tl.float32)\n    batch_norm_kernel(\n        conv_output, bn_output, gamma_ptr, beta_ptr, eps,\n        N, C_out, H, W,\n        BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W\n    )\n\n    # ReLU\n    relu_output = tl.zeros((N, C_out, H, W), dtype=tl.float32)\n    relu_kernel(\n        bn_output, relu_output,\n        N, C_out, H, W,\n        BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W\n    )\n\n    # Dropout\n    dropout_kernel(\n        relu_output, output_ptr, p, seed, size,\n        BLOCK_SIZE\n    )\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, log-softmax activation, and dropout. The function first performs matrix-vector multiplication on the input matrix and vector. The result is then passed through a log-softmax activation function along the specified dimension. Finally, dropout is applied to the output of the log-softmax operation.\nWrapper Entry Information: fused_mv_logsoftmax_dropout(input, vec, p=0.5, training=True, inplace=False, dim=0, *, out=None) -> Tensor\nMath: Given an input matrix A \u2208 \u211d^(n \u00d7 m) and a vector v \u2208 \u211d^m, the function computes:\n\nz = A * v\ns = log(exp(z) / \u2211_j exp(z_j))\ny = Dropout(s, p)\n\nwhere log(exp(z) / \u2211_j exp(z_j)) is the log-softmax function applied along dimension `dim`, and Dropout(s, p) randomly zeroes elements of s with probability p.\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication: the number of columns in `input` must match the size of `vec`.\n- The `dim` argument in `log_softmax` specifies the dimension along which the log-softmax is computed. Since `z` is a 1-D tensor of shape `(n,)`, `dim` should be `0` or `-1`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, log-softmax activation, and dropout. The function first performs matrix-vector multiplication on the input matrix and vector. The result is then passed through a log-softmax activation function along the specified dimension. Finally, dropout is applied to the output of the log-softmax operation.\nWrapper Entry Information: fused_mv_logsoftmax_dropout(input, vec, p=0.5, training=True, inplace=False, dim=0, *, out=None) -> Tensor\nMath: Given an input matrix A \u2208 \u211d^(n \u00d7 m) and a vector v \u2208 \u211d^m, the function computes:\n\nz = A * v\ns = log(exp(z) / \u2211_j exp(z_j))\ny = Dropout(s, p)\n\nwhere log(exp(z) / \u2211_j exp(z_j)) is the log-softmax function applied along dimension `dim`, and Dropout(s, p) randomly zeroes elements of s with probability p.\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication: the number of columns in `input` must match the size of `vec`.\n- The `dim` argument in `log_softmax` specifies the dimension along which the log-softmax is computed. Since `z` is a 1-D tensor of shape `(n,)`, `dim` should be `0` or `-1`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_mv_logsoftmax_dropout_kernel(\n    input_ptr, vec_ptr, output_ptr, dropout_mask_ptr, dropout_prob, training, n, m, seed, stride_input_n, stride_input_m, stride_vec_m, stride_output_n, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    batch_start = pid * BLOCK_SIZE\n    batch_end = batch_start + BLOCK_SIZE\n\n    # Matrix-vector multiplication\n    z = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(m):\n        input_chunk = tl.load(input_ptr + batch_start * stride_input_n + i * stride_input_m, mask=batch_start + tl.arange(0, BLOCK_SIZE) < n, other=0.0)\n        vec_chunk = tl.load(vec_ptr + i * stride_vec_m)\n        z += input_chunk * vec_chunk\n\n    # Log-softmax\n    z_max = tl.max(z, axis=0)\n    z = z - z_max\n    exp_z = tl.exp(z)\n    sum_exp_z = tl.sum(exp_z, axis=0)\n    log_softmax = z - tl.log(sum_exp_z)\n\n    # Dropout\n    if training:\n        dropout_mask = tl.rand(seed, pid) < (1 - dropout_prob)\n        log_softmax = tl.where(dropout_mask, log_softmax / (1 - dropout_prob), -float('inf'))\n\n    # Store the result\n    tl.store(output_ptr + batch_start * stride_output_n, log_softmax, mask=batch_start + tl.arange(0, BLOCK_SIZE) < n)\n    if training:\n        tl.store(dropout_mask_ptr + batch_start * stride_output_n, dropout_mask, mask=batch_start + tl.arange(0, BLOCK_SIZE) < n)\n\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.heuristics({\n    'BLOCK_SIZE': lambda *args, **meta: triton.next_power_of_2(args[0].shape[0]),\n})\n@triton.jit\ndef fused_mv_logsoftmax_dropout(\n    input, vec, p=0.5, training=True, inplace=False, dim=0, *, out=None\n):\n    assert dim in [0, -1], \"dim must be 0 or -1\"\n    assert input.dim() == 2, \"input must be a 2D tensor\"\n    assert vec.dim() == 1, \"vec must be a 1D tensor\"\n    assert input.size(1) == vec.size(0), \"input and vec must be compatible for matrix-vector multiplication\"\n\n    n, m = input.shape\n    if out is None:\n        out = torch.empty_like(input) if inplace else torch.empty((n,), dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == (n,), \"out must have shape (n,)\"\n\n    dropout_mask = torch.empty((n,), dtype=torch.bool, device=input.device) if training else None\n\n    grid = (triton.cdiv(n, 1024),)\n    fused_mv_logsoftmax_dropout_kernel[grid](\n        input, vec, out, dropout_mask, p, training, n, m, torch.randint(0, 2**32, (1,), device=input.device).item(),\n        input.stride(0), input.stride(1), vec.stride(0), out.stride(0), 1024\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number 'other', scaled by 'alpha', to the 'input' tensor. Supports broadcasting to a common shape, type promotion, and accepts integer, float, and complex inputs.\nWrapper Entry Information: add(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to add to input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: \\text{{out}}_i = \\text{{input}}_i + \\text{{alpha}} \\times \\text{{other}}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number 'other', scaled by 'alpha', to the 'input' tensor. Supports broadcasting to a common shape, type promotion, and accepts integer, float, and complex inputs.\nWrapper Entry Information: add(input, other, *, alpha=1, out=None) -> Tensor; input (Tensor): the input tensor.; other (Tensor or Number): the tensor or number to add to input.; alpha (Number): the multiplier for other.; out (Tensor, optional): the output tensor.\nMath: \\text{{out}}_i = \\text{{input}}_i + \\text{{alpha}} \\times \\text{{other}}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for adding a tensor or number to another tensor\n@triton.jit\ndef add_kernel(\n    input_ptr, other_ptr, output_ptr, alpha, \n    input_shape, other_shape, output_shape,\n    input_strides, other_strides, output_strides,\n    input_numel, other_numel, output_numel,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < output_numel\n\n    # Calculate the linear indices for input and other based on broadcasting\n    input_indices = tl.zeros((BLOCK_SIZE,), dtype=tl.int32)\n    other_indices = tl.zeros((BLOCK_SIZE,), dtype=tl.int32)\n    for dim in range(len(output_shape)):\n        input_indices += (offsets // output_strides[dim]) % input_shape[dim] * input_strides[dim]\n        other_indices += (offsets // output_strides[dim]) % other_shape[dim] * other_strides[dim]\n\n    # Load the data\n    input_data = tl.load(input_ptr + input_indices, mask=mask)\n    other_data = tl.load(other_ptr + other_indices, mask=mask)\n\n    # Perform the addition\n    result = input_data + alpha * other_data\n\n    # Store the result\n    tl.store(output_ptr + offsets, result, mask=mask)\n\ndef add(input, other, *, alpha=1, out=None):\n    \"\"\"\n    Adds the tensor or number 'other', scaled by 'alpha', to the 'input' tensor.\n    Supports broadcasting to a common shape, type promotion, and accepts integer, float, and complex inputs.\n    \n    Parameters:\n    - input (Tensor): The input tensor.\n    - other (Tensor or Number): The tensor or number to add to input.\n    - alpha (Number): The multiplier for other.\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - Tensor: The resulting tensor after performing the addition.\n    \"\"\"\n    # Determine the output tensor\n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == input.shape, \"Output tensor shape must match input tensor shape\"\n\n    # Convert alpha to the appropriate tensor type\n    alpha = torch.tensor(alpha, dtype=input.dtype, device=input.device)\n\n    # Determine the shapes and strides for broadcasting\n    input_shape = input.shape\n    other_shape = other.shape if isinstance(other, torch.Tensor) else (1,)\n    output_shape = torch.broadcast_shapes(input_shape, other_shape)\n\n    input_strides = input.stride()\n    other_strides = other.stride() if isinstance(other, torch.Tensor) else (0,)\n    output_strides = out.stride()\n\n    input_numel = input.numel()\n    other_numel = other.numel() if isinstance(other, torch.Tensor) else 1\n    output_numel = out.numel()\n\n    # Determine the block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(output_numel)))\n    grid_size = triton.cdiv(output_numel, block_size)\n\n    # Launch the Triton kernel\n    add_kernel[(grid_size, 1, 1)](\n        input.data_ptr(), other.data_ptr() if isinstance(other, torch.Tensor) else other.item(),\n        out.data_ptr(), alpha.item(),\n        input_shape, other_shape, output_shape,\n        input_strides, other_strides, output_strides,\n        input_numel, other_numel, output_numel,\n        BLOCK_SIZE=block_size\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies 2D Convolution, followed by Layer Normalization and SiLU activation to the input tensor `x`. Sequentially performs convolution on `x`, then applies layer normalization on the convolution output, followed by SiLU activation applied element-wise.\nWrapper Entry Information: fused_silu_layer_norm_conv2d(x: torch.Tensor, weight: torch.Tensor, conv_weight: torch.Tensor, conv_bias: torch.Tensor = None, conv_stride: int = 1, conv_padding: int = 0, conv_dilation: int = 1, conv_groups: int = 1, ln_eps: float = 1e-5) -> torch.Tensor\n\nArgs:\n    x (Tensor): Input tensor for convolution, normalization, and activation.\n    weight (Tensor): Learnable weight of size matching normalized output dimensions for LayerNorm.\n    conv_weight (Tensor): Convolution kernel tensor of appropriate dimensions.\n    conv_bias (Tensor, optional): Convolution bias tensor. Default: ``None``.\n    conv_stride (int, optional): Stride of convolution. Default: 1.\n    conv_padding (int, optional): Padding added to both sides of input. Default: 0.\n    conv_dilation (int, optional): Dilation of convolution kernel. Default: 1.\n    conv_groups (int, optional): Number of groups for convolution. Default: 1.\n    ln_eps (float, optional): Epsilon value for Layer Normalization. Default: 1e-5.\n\nExample:\n    >>> x = torch.randn(4, 3, 32, 32)\n    >>> conv_weight = torch.randn(8, 3, 3, 3)\n    >>> conv_bias = torch.zeros(8)\n    >>> weight = torch.ones(8)\n    >>> output = fused_silu_layer_norm_conv2d(x, weight, conv_weight, conv_bias, conv_stride=1, conv_padding=1)\n    >>> print(output.shape)\n    torch.Size([4, 8, 32, 32])\nother: Convolution operation parameters include stride, padding, dilation, and groups. Layer Normalization uses an epsilon value. Default values are provided for optional parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies 2D Convolution, followed by Layer Normalization and SiLU activation to the input tensor `x`. Sequentially performs convolution on `x`, then applies layer normalization on the convolution output, followed by SiLU activation applied element-wise.\nWrapper Entry Information: fused_silu_layer_norm_conv2d(x: torch.Tensor, weight: torch.Tensor, conv_weight: torch.Tensor, conv_bias: torch.Tensor = None, conv_stride: int = 1, conv_padding: int = 0, conv_dilation: int = 1, conv_groups: int = 1, ln_eps: float = 1e-5) -> torch.Tensor\n\nArgs:\n    x (Tensor): Input tensor for convolution, normalization, and activation.\n    weight (Tensor): Learnable weight of size matching normalized output dimensions for LayerNorm.\n    conv_weight (Tensor): Convolution kernel tensor of appropriate dimensions.\n    conv_bias (Tensor, optional): Convolution bias tensor. Default: ``None``.\n    conv_stride (int, optional): Stride of convolution. Default: 1.\n    conv_padding (int, optional): Padding added to both sides of input. Default: 0.\n    conv_dilation (int, optional): Dilation of convolution kernel. Default: 1.\n    conv_groups (int, optional): Number of groups for convolution. Default: 1.\n    ln_eps (float, optional): Epsilon value for Layer Normalization. Default: 1e-5.\n\nExample:\n    >>> x = torch.randn(4, 3, 32, 32)\n    >>> conv_weight = torch.randn(8, 3, 3, 3)\n    >>> conv_bias = torch.zeros(8)\n    >>> weight = torch.ones(8)\n    >>> output = fused_silu_layer_norm_conv2d(x, weight, conv_weight, conv_bias, conv_stride=1, conv_padding=1)\n    >>> print(output.shape)\n    torch.Size([4, 8, 32, 32])\nother: Convolution operation parameters include stride, padding, dilation, and groups. Layer Normalization uses an epsilon value. Default values are provided for optional parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n# Triton kernel for 2D Convolution, Layer Normalization, and SiLU Activation\n@triton.jit\ndef fused_silu_layer_norm_conv2d_kernel(\n    x, conv_weight, conv_bias, weight, output,\n    x_stride0, x_stride1, x_stride2, x_stride3,\n    conv_weight_stride0, conv_weight_stride1, conv_weight_stride2, conv_weight_stride3,\n    conv_bias_stride0,\n    weight_stride0,\n    output_stride0, output_stride1, output_stride2, output_stride3,\n    N, C, H, W, K, R, S,\n    stride, padding, dilation, groups,\n    ln_eps,\n    BLOCK_N: tl.constexpr, BLOCK_C: tl.constexpr, BLOCK_H: tl.constexpr, BLOCK_W: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    n = pid // (H * W)\n    h = (pid % (H * W)) // W\n    w = (pid % (H * W)) % W\n\n    # Compute the convolution output\n    conv_output = tl.zeros((BLOCK_C,), dtype=tl.float32)\n    for r in range(R):\n        for s in range(S):\n            for k in range(K):\n                for c in range(C // BLOCK_C):\n                    x_offset = n * x_stride0 + c * x_stride1 + (h * stride + r - padding) * x_stride2 + (w * stride + s - padding) * x_stride3\n                    conv_weight_offset = k * conv_weight_stride0 + c * conv_weight_stride1 + r * conv_weight_stride2 + s * conv_weight_stride3\n                    x_val = tl.load(x + x_offset, mask=r < R and s < S and c < C // BLOCK_C, other=0.0)\n                    conv_weight_val = tl.load(conv_weight + conv_weight_offset, mask=r < R and s < S and c < C // BLOCK_C, other=0.0)\n                    conv_output += x_val * conv_weight_val\n\n    # Add bias if provided\n    if conv_bias is not None:\n        bias_offset = k * conv_bias_stride0\n        conv_output += tl.load(conv_bias + bias_offset, mask=k < K, other=0.0)\n\n    # Layer Normalization\n    mean = tl.sum(conv_output, axis=0) / K\n    var = tl.sum((conv_output - mean) ** 2, axis=0) / K\n    normalized_output = (conv_output - mean) / tl.sqrt(var + ln_eps)\n\n    # Apply weight for Layer Normalization\n    weight_offset = k * weight_stride0\n    normalized_output *= tl.load(weight + weight_offset, mask=k < K, other=1.0)\n\n    # Apply SiLU activation\n    normalized_output = normalized_output * tl.sigmoid(normalized_output)\n\n    # Store the output\n    output_offset = n * output_stride0 + k * output_stride1 + h * output_stride2 + w * output_stride3\n    tl.store(output + output_offset, normalized_output, mask=k < K)\n\n# Wrapper function for the fused operation\n@torch.inference_mode()\ndef fused_silu_layer_norm_conv2d(\n    x: Tensor, weight: Tensor, conv_weight: Tensor, conv_bias: Tensor = None,\n    conv_stride: int = 1, conv_padding: int = 0, conv_dilation: int = 1, conv_groups: int = 1, ln_eps: float = 1e-5\n) -> Tensor:\n    \"\"\"\n    Applies 2D Convolution, followed by Layer Normalization and SiLU activation to the input tensor `x`.\n\n    Args:\n        x (Tensor): Input tensor for convolution, normalization, and activation.\n        weight (Tensor): Learnable weight of size matching normalized output dimensions for LayerNorm.\n        conv_weight (Tensor): Convolution kernel tensor of appropriate dimensions.\n        conv_bias (Tensor, optional): Convolution bias tensor. Default: ``None``.\n        conv_stride (int, optional): Stride of convolution. Default: 1.\n        conv_padding (int, optional): Padding added to both sides of input. Default: 0.\n        conv_dilation (int, optional): Dilation of convolution kernel. Default: 1.\n        conv_groups (int, optional): Number of groups for convolution. Default: 1.\n        ln_eps (float, optional): Epsilon value for Layer Normalization. Default: 1e-5.\n\n    Returns:\n        Tensor: The output tensor after applying the fused operation.\n    \"\"\"\n    N, C, H, W = x.shape\n    K, _, R, S = conv_weight.shape\n    out_channels = K\n    out_height = (H + 2 * conv_padding - R) // conv_stride + 1\n    out_width = (W + 2 * conv_padding - S) // conv_stride + 1\n\n    # Output tensor\n    output = torch.empty((N, out_channels, out_height, out_width), device=x.device, dtype=x.dtype)\n\n    # Block sizes\n    BLOCK_N = 16\n    BLOCK_C = 16\n    BLOCK_H = 16\n    BLOCK_W = 16\n\n    # Grid size\n    grid = (N * out_height * out_width,)\n\n    # Launch the kernel\n    fused_silu_layer_norm_conv2d_kernel[grid](\n        x, conv_weight, conv_bias, weight, output,\n        x.stride(0), x.stride(1), x.stride(2), x.stride(3),\n        conv_weight.stride(0), conv_weight.stride(1), conv_weight.stride(2), conv_weight.stride(3),\n        conv_bias.stride(0) if conv_bias is not None else 0,\n        weight.stride(0),\n        output.stride(0), output.stride(1), output.stride(2), output.stride(3),\n        N, C, H, W, K, R, S,\n        conv_stride, conv_padding, conv_dilation, conv_groups,\n        ln_eps,\n        BLOCK_N, BLOCK_C, BLOCK_H, BLOCK_W,\n        num_warps=4,\n        num_stages=2,\n    )\n\n    return output\n\n# Example usage\nx = torch.randn(4, 3, 32, 32)\nconv_weight = torch.randn(8, 3, 3, 3)\nconv_bias = torch.zeros(8)\nweight = torch.ones(8)\noutput = fused_silu_layer_norm_conv2d(x, weight, conv_weight, conv_bias, conv_stride=1, conv_padding=1)\nprint(output.shape)  # Expected output shape: torch.Size([4, 8, 32, 32])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining index selection and element-wise equality comparison. It selects elements from the input tensor along a specified dimension using provided indices and then performs an element-wise equality comparison between the selected elements and another tensor or scalar. The result is a boolean tensor of the same shape as the selected elements, indicating where the comparisons are true.\nWrapper Entry Information: fused_index_select_eq(input, dim, index, other, *, out=None) -> Tensor. Args: input (Tensor): The input tensor X. dim (int): The dimension along which to index. index (IntTensor or LongTensor): The indices to select along dimension dim. other (Tensor or float): The tensor or value Y to compare with the selected tensor. out (Tensor, optional): Output tensor. Ignored if None. Default: None\nMath: Given an input tensor X, dimension \text{dim}, index tensor I, and another tensor or scalar Y, the function computes:\n\n1. **Index Selection:**\n\nSelect elements from X along dimension \text{dim} using indices I:\n\n\\[\nS = \\text{index\\_select}(X, \\text{dim}, I)\n\\]\n\n2. **Element-wise Equality Comparison:**\n\nCompare the selected tensor S with Y element-wise:\n\n\\[\nO = (S == Y)\n\\]\n\nThe output tensor O is a boolean tensor of the same shape as S.\nother: - The shapes of the selected tensor S and other must be broadcastable for the element-wise comparison.\n- If other is a scalar, it is broadcasted to the shape of S.\n- The function supports autograd for gradient computation, although the output is a boolean tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an index select kernel. The kernel (index_select_kernel) takes 8 parameters: input tensor (inp), output tensor (out), number of rows (M), number of columns (N), index tensor, index length, and block dimensions (BLOCK_M, BLOCK_N) as compile-time constants. It uses triton's parallel execution to load specified indices from the input and store them in the output tensor. The associated function (index_select) manages the input's dimension adjustment, calculates grid size based on input and index, and invokes the triton kernel. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef index_select_kernel(\n    inp, out, M, N, index, index_len, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr\n):\n    # Get program ids for x and y axes\n    pid_x = tl.program_id(axis=0)\n    pid_y = tl.program_id(axis=1)\n    \n    # Calculate row and column offsets\n    rows_offsets = pid_x * BLOCK_M + tl.arange(0, BLOCK_M)[:, None]\n    rows_mask = rows_offsets < M\n    cols_offsets = pid_y * BLOCK_N + tl.arange(0, BLOCK_N)\n    cols_mask = cols_offsets < N\n\n    # Compute masks for blocks and output\n    block_mask = rows_mask & cols_mask\n    out_mask = rows_mask & (cols_offsets < index_len)\n\n    # Load indices and compute offsets\n    indices = tl.load(index + cols_offsets, mask=(cols_offsets < index_len), other=0)\n    inp_off = rows_offsets * N + indices[None, :]\n    out_off = rows_offsets * index_len + cols_offsets[None, :]\n\n    # Load selected input and store in output\n    selected = tl.load(inp + inp_off, mask=block_mask, other=0.0)\n    tl.store(out + out_off, selected, mask=out_mask)\n\n\ndef index_select(inp, dim, index):\n    assert dim >= -inp.ndim and dim < inp.ndim, \"Invalid dim\"\n    assert index.ndim <= 1, \"Index should have dimension 1 or 0\"\n    assert all((i >= 0 and i < inp.size(dim)) for i in index), \"Index out of range\"\n\n    # Adjust dimension and index\n    if index.ndim == 0:\n        index = index.unsqueeze(0)\n    dim = dim % inp.ndim\n    inp_shape = list(inp.shape)\n    index_len = index.numel()\n\n    # Compress input along the dimension\n    inp = dim_compress(inp, dim)\n    N = inp_shape[dim]\n    M = inp.numel() // N\n    out_shape = list(inp.shape)\n    out_shape[inp.ndim - 1] = index_len\n    out = torch.empty(out_shape, dtype=inp.dtype, device=inp.device)\n\n    # Define grid based on blocks\n    grid = lambda meta: (\n        triton.cdiv(M, meta[\"BLOCK_M\"]),\n        triton.cdiv(index_len, meta[\"BLOCK_N\"]),\n    )\n    \n    # Call the kernel with calculated grid\n    index_select_kernel[grid](inp, out, M, N, index, index_len)\n    \n    # Adjust output order if necessary\n    if dim != out.ndim - 1:\n        order = [i for i in range(out.ndim - 1)]\n        order.insert(dim, out.ndim - 1)\n        return out.permute(order)\n    else:\n        return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining index selection and element-wise equality comparison. It selects elements from the input tensor along a specified dimension using provided indices and then performs an element-wise equality comparison between the selected elements and another tensor or scalar. The result is a boolean tensor of the same shape as the selected elements, indicating where the comparisons are true.\nWrapper Entry Information: fused_index_select_eq(input, dim, index, other, *, out=None) -> Tensor. Args: input (Tensor): The input tensor X. dim (int): The dimension along which to index. index (IntTensor or LongTensor): The indices to select along dimension dim. other (Tensor or float): The tensor or value Y to compare with the selected tensor. out (Tensor, optional): Output tensor. Ignored if None. Default: None\nMath: Given an input tensor X, dimension \text{dim}, index tensor I, and another tensor or scalar Y, the function computes:\n\n1. **Index Selection:**\n\nSelect elements from X along dimension \text{dim} using indices I:\n\n\\[\nS = \\text{index\\_select}(X, \\text{dim}, I)\n\\]\n\n2. **Element-wise Equality Comparison:**\n\nCompare the selected tensor S with Y element-wise:\n\n\\[\nO = (S == Y)\n\\]\n\nThe output tensor O is a boolean tensor of the same shape as S.\nother: - The shapes of the selected tensor S and other must be broadcastable for the element-wise comparison.\n- If other is a scalar, it is broadcasted to the shape of S.\n- The function supports autograd for gradient computation, although the output is a boolean tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_index_select_eq_kernel(\n    inp, out, M, N, index, index_len, other, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr\n):\n    # Get program ids for x and y axes\n    pid_x = tl.program_id(axis=0)\n    pid_y = tl.program_id(axis=1)\n    \n    # Calculate row and column offsets\n    rows_offsets = pid_x * BLOCK_M + tl.arange(0, BLOCK_M)[:, None]\n    rows_mask = rows_offsets < M\n    cols_offsets = pid_y * BLOCK_N + tl.arange(0, BLOCK_N)\n    cols_mask = cols_offsets < N\n\n    # Compute masks for blocks and output\n    block_mask = rows_mask & cols_mask\n    out_mask = rows_mask & (cols_offsets < index_len)\n\n    # Load indices and compute offsets\n    indices = tl.load(index + cols_offsets, mask=(cols_offsets < index_len), other=0)\n    inp_off = rows_offsets * N + indices[None, :]\n    out_off = rows_offsets * index_len + cols_offsets[None, :]\n\n    # Load selected input and other\n    selected = tl.load(inp + inp_off, mask=block_mask, other=0.0)\n    other_val = tl.load(other, mask=cols_mask, other=0.0)\n\n    # Perform element-wise equality comparison\n    result = selected == other_val\n\n    # Store the result in the output tensor\n    tl.store(out + out_off, result, mask=out_mask)\n\ndef fused_index_select_eq(input, dim, index, other, *, out=None):\n    assert dim >= -input.ndim and dim < input.ndim, \"Invalid dim\"\n    assert index.ndim <= 1, \"Index should have dimension 1 or 0\"\n    assert all((i >= 0 and i < input.size(dim)) for i in index), \"Index out of range\"\n\n    # Adjust dimension and index\n    if index.ndim == 0:\n        index = index.unsqueeze(0)\n    dim = dim % input.ndim\n    input_shape = list(input.shape)\n    index_len = index.numel()\n\n    # Compress input along the dimension\n    input = input.permute(*[i for i in range(dim)] + [dim] + [i for i in range(dim + 1, input.ndim)])\n    N = input_shape[dim]\n    M = input.numel() // N\n    out_shape = list(input.shape)\n    out_shape[dim] = index_len\n\n    # Create output tensor if not provided\n    if out is None:\n        out = torch.empty(out_shape, dtype=torch.bool, device=input.device)\n    else:\n        assert out.shape == out_shape, \"Output tensor shape mismatch\"\n        assert out.dtype == torch.bool, \"Output tensor must be of boolean type\"\n\n    # Define grid based on blocks\n    grid = lambda meta: (\n        triton.cdiv(M, meta[\"BLOCK_M\"]),\n        triton.cdiv(index_len, meta[\"BLOCK_N\"]),\n    )\n    \n    # Call the kernel with calculated grid\n    fused_index_select_eq_kernel[grid](input, out, M, N, index, index_len, other)\n\n    # Adjust output order if necessary\n    if dim != input.ndim - 1:\n        order = [i for i in range(input.ndim - 1)]\n        order.insert(dim, input.ndim - 1)\n        out = out.permute(order)\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the indices of the maximum values of a tensor across a specified dimension. If the dimension is None, it returns the index of the maximum value in the flattened input tensor. The output tensor can retain the reduced dimension if keepdim is set to True.\nWrapper Entry Information: argmax(input, dim, keepdim=False) -> LongTensor\nArgs:\n    input (Tensor): the input tensor.\n    dim (int): the dimension to reduce. If ``None``, the argmax of the flattened input is returned.\n    keepdim (bool): whether the output tensor has :attr:`dim` retained or not.\nother: This is the second value returned by torch.max. See its documentation for the exact semantics of this method.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the indices of the maximum values of a tensor across a specified dimension. If the dimension is None, it returns the index of the maximum value in the flattened input tensor. The output tensor can retain the reduced dimension if keepdim is set to True.\nWrapper Entry Information: argmax(input, dim, keepdim=False) -> LongTensor\nArgs:\n    input (Tensor): the input tensor.\n    dim (int): the dimension to reduce. If ``None``, the argmax of the flattened input is returned.\n    keepdim (bool): whether the output tensor has :attr:`dim` retained or not.\nother: This is the second value returned by torch.max. See its documentation for the exact semantics of this method.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef argmax_kernel(\n    output_ptr,  # Pointer to the output tensor\n    input_ptr,   # Pointer to the input tensor\n    input_shape, # Shape of the input tensor\n    input_strides, # Strides of the input tensor\n    dim,         # Dimension to reduce\n    keepdim,     # Whether to keep the reduced dimension\n    n_elements,  # Number of elements in the input tensor\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Initialize the maximum value and its index\n    max_val = -float('inf')\n    max_idx = -1\n\n    for i in range(block_start, min(block_start + BLOCK_SIZE, n_elements)):\n        # Compute the linear index in the input tensor\n        linear_idx = i\n        # Compute the coordinates in the input tensor\n        coords = [0] * len(input_shape)\n        for d in range(len(input_shape) - 1, -1, -1):\n            coords[d] = linear_idx % input_shape[d]\n            linear_idx //= input_shape[d]\n\n        # Compute the index in the input tensor\n        input_idx = sum(c * s for c, s in zip(coords, input_strides))\n\n        # Load the value from the input tensor\n        value = tl.load(input_ptr + input_idx)\n\n        # Update the maximum value and its index\n        if value > max_val:\n            max_val = value\n            max_idx = coords[dim]\n\n    # Write the maximum index to the output tensor\n    if max_idx != -1:\n        output_idx = pid\n        if keepdim:\n            output_idx = output_idx * input_shape[dim] + max_idx\n        tl.store(output_ptr + output_idx, max_idx)\n\nimport torch\n\ndef argmax(input, dim=None, keepdim=False):\n    # Flatten the input tensor if dim is None\n    if dim is None:\n        input = input.flatten()\n        dim = 0\n\n    # Get the shape and strides of the input tensor\n    input_shape = input.shape\n    input_strides = input.stride()\n\n    # Compute the number of elements in the input tensor\n    n_elements = input.numel()\n\n    # Compute the shape of the output tensor\n    if keepdim:\n        output_shape = list(input_shape)\n        output_shape[dim] = 1\n    else:\n        output_shape = list(input_shape)\n        del output_shape[dim]\n\n    # Allocate the output tensor\n    output = torch.empty(output_shape, dtype=torch.long, device=input.device)\n\n    # Determine the block size\n    BLOCK_SIZE = 1024\n\n    # Compute the number of blocks\n    n_blocks = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n\n    # Enqueue the kernel\n    argmax_kernel[(n_blocks,)](\n        output,\n        input,\n        input_shape,\n        input_strides,\n        dim,\n        keepdim,\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n\n# Example 1: argmax along a specified dimension\ninput_tensor = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32, device='cuda')\noutput_tensor = argmax(input_tensor, dim=1)\nprint(output_tensor)  # Expected output: tensor([[2], [2]])\n\n# Example 2: argmax of the flattened input tensor\ninput_tensor = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32, device='cuda')\noutput_tensor = argmax(input_tensor, dim=None)\nprint(output_tensor)  # Expected output: tensor(5)\n\n# Example 3: argmax with keepdim=True\ninput_tensor = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32, device='cuda')\noutput_tensor = argmax(input_tensor, dim=1, keepdim=True)\nprint(output_tensor)  # Expected output: tensor([[2], [2]])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using LU decomposition. Given matrix `A`, this function performs LU decomposition and then solves for `x` in `L @ U @ x = b`, where `P`, `L`, and `U` are derived from the LU decomposition.\nWrapper Entry Information: def fused_lu_solve(A: Tensor, b: Tensor) -> Tensor: A: The input matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n,)`.\nMath: Solves `Ax = b` using LU decomposition, where `A = P @ L @ U` and `L @ U @ x = b`.\nother: The function uses LU decomposition to solve linear equations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel that computes Y = A[IDX, :]^T @ X + BIAS for a dense matrix A with Z rows and N columns. The kernel takes pointers to matrices Y, A, X, and IDX, matrix dimensions M and N, cache keys CACHE_KEY_M and CACHE_KEY_N, stride_am for pointer increment, and meta-parameters BATCHSIZE, SPARSITY_BIN, BLOCK_M, and BLOCK_N. The kernel is called by a function that computes y = weight[idx, :]^T @ x, where x is the input tensor, weight is the weight matrix, idx is the indices, and sparsity_bin is an integer representing the sparsity bin. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef gather_transposed_gemv_flag_atomicadd_kernel(\n    Y,  # Pointers to matrices\n    A,\n    X,\n    IDX,\n    # Matrix dimensions\n    M,\n    N,\n    CACHE_KEY_M,\n    CACHE_KEY_N,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_am,\n    # Meta-parameters\n    BATCHSIZE: tl.constexpr,\n    SPARSITY_BIN: tl.constexpr,\n    BLOCK_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    \"\"\"\n    Kernel for computing Y = A[IDX, :]^T @ X + BIAS, where A is a dense matrix\n    with Z rows and N columns. We also batch across the batch dimension of the input X.\n    We will not check that the indices are valid, for performance reason.\n    - Input X has shape (BATCHSIZE, M)\n    - Weight has shape (Z, N)\n    - IDX has shape (M), where M is the number of non-zero rows in A\n    - Bias has shape (N)\n    - Output has shape (BATCHSIZE, N)\n    \"\"\"\n    start_m = tl.program_id(0)\n    start_n = tl.program_id(1)\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices for rows (resp. col) of A\n    rm = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\n    IDX = IDX + rm\n    idx = tl.load(IDX, mask=rm < M, other=0) > 0\n    A = A + (rm[:, None] * stride_am + rn[None, :])\n    X = X + rm\n    Y = Y + rn\n    \n    if BATCHSIZE == 1:\n        a = tl.load(A, mask=idx[:, None], other=0.0)\n        x0 = tl.load(X)#, mask=idx, other=0.0) # if flag_gemv is correct, this will be unnecessary.\n        acc0 = tl.sum(a.to(tl.float32) * x0.to(tl.float32)[:, None], 0)\n\n    # rematerialize rm and rn to save registers\n    rn = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    tl.atomic_add(Y, acc0, mask=rn < N)\n    \ndef gather_transposed_gemv_flag_3d(\n    x: torch.Tensor,\n    weight: torch.Tensor,\n    idx: torch.Tensor,\n    sparsity_bin: int\n) -> torch.Tensor:\n    \"\"\"\n    Compute y = weight[idx, :]^T @ x.\n    :param x: input tensor\n    :param weight: weight matrix\n    :param idx: indices\n    :return: result tensor\n    \"\"\"\n    Z, N = weight.shape\n    beam_width, seq_len, _ = x.shape\n    assert x.shape[2] == Z\n    x = x.contiguous()\n    if weight.stride(1) > 1:\n        weight = weight.contiguous()\n\n    output = torch.empty(\n        beam_width,\n        seq_len,\n        N,\n        device=x.device,\n        dtype=torch.float32,\n    )\n\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (\n        triton.cdiv(Z, META[\"BLOCK_M\"]),\n        triton.cdiv(N, META[\"BLOCK_N\"]),\n    )  # noqa\n\n    kernel = gather_transposed_gemv_flag_atomicadd_kernel\n    kernel[grid](\n        output,  # data ptrs\n        weight,\n        x,\n        idx,\n        Z,  # shapes\n        N,\n        Z // 128,  # key for triton cache (limit number of compilations)\n        N // 32,\n        weight.stride(0),  # strides\n        beam_width,  # can't use kwargs because auto-tuner requires args\n        sparsity_bin,\n    )\n    return output# .to(dtype=weight.dtype)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using LU decomposition. Given matrix `A`, this function performs LU decomposition and then solves for `x` in `L @ U @ x = b`, where `P`, `L`, and `U` are derived from the LU decomposition.\nWrapper Entry Information: def fused_lu_solve(A: Tensor, b: Tensor) -> Tensor: A: The input matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n,)`.\nMath: Solves `Ax = b` using LU decomposition, where `A = P @ L @ U` and `L @ U @ x = b`.\nother: The function uses LU decomposition to solve linear equations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for LU decomposition and solving the linear system\n@triton.jit\ndef lu_solve_kernel(\n    A,  # Pointer to matrix A\n    b,  # Pointer to vector b\n    x,  # Pointer to output vector x\n    n,  # Size of the matrix (n x n)\n    BLOCK_SIZE: tl.constexpr,  # Block size for parallelization\n):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n\n    # Load the block of A and b\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n\n\n    # Load A and b for the current block\n    A_block = tl.load(A + offsets[:, None] * n + offsets[None, :], mask=mask[:, None] & mask[None, :], other=0.0)\n    b_block = tl.load(b + offsets, mask=mask, other=0.0)\n\n    # Perform LU decomposition on the block\n    for i in range(BLOCK_SIZE):\n        pivot = A_block[i, i]\n        for j in range(i + 1, BLOCK_SIZE):\n            factor = A_block[j, i] / pivot\n            A_block[j, i] = factor\n            for k in range(i + 1, BLOCK_SIZE):\n                A_block[j, k] -= factor * A_block[i, k]\n            b_block[j] -= factor * b_block[i]\n\n    # Solve the system L @ U @ x = b\n    for i in range(BLOCK_SIZE):\n        for j in range(i):\n            b_block[i] -= A_block[i, j] * b_block[j]\n        b_block[i] /= A_block[i, i]\n\n    # Store the result back to x\n    tl.store(x + offsets, b_block, mask=mask)\n\n# Wrapper function for the Triton kernel\ndef fused_lu_solve(A: torch.Tensor, b: torch.Tensor) -> torch.Tensor:\n    n = A.shape[0]\n    assert A.shape == (n, n), \"Matrix A must be square\"\n    assert b.shape == (n,), \"Vector b must have shape (n,)\"\n\n    # Allocate memory for the solution vector x\n    x = torch.empty_like(b)\n\n    # Define the grid and block sizes\n    BLOCK_SIZE = 16\n    grid = (triton.cdiv(n, BLOCK_SIZE),)\n\n    # Launch the Triton kernel\n    lu_solve_kernel[grid](\n        A,  # Pointer to matrix A\n        b,  # Pointer to vector b\n        x,  # Pointer to output vector x\n        n,  # Size of the matrix (n x n)\n        BLOCK_SIZE,  # Block size for parallelization\n    )\n\n    return x\n\n# Example usage\nA = torch.tensor([[4, 3], [6, 3]], dtype=torch.float32)\nb = torch.tensor([7, 8], dtype=torch.float32)\nx = fused_lu_solve(A, b)\nprint(x)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between `x1` and `x2` using the specified norm, then normalizes the resulting distances along the specified dimension. This combined operation is useful for obtaining normalized distance values between two sets of vectors.\nWrapper Entry Information: normalize_pairwise_distance(x1, x2, p_distance=2.0, eps_distance=1e-6, keepdim=False, p_norm=2, dim_norm=1, eps_norm=1e-12) -> Tensor; x1 (Tensor): The first input tensor; x2 (Tensor): The second input tensor, must have the same shape as `x1`; p_distance (float): The norm degree for computing the pairwise distance. Default: 2.0; eps_distance (float): Small value to avoid division by zero in pairwise distance calculation. Default: 1e-6; keepdim (bool): Whether to keep the reduced dimensions in the output. Default: False; p_norm (float): The exponent value in the norm formulation for normalization. Default: 2; dim_norm (int): The dimension along which normalization is applied. Default: 1; eps_norm (float): Small value to avoid division by zero in normalization. Default: 1e-12\nMath: \\text{distance} = \\frac{\\text{pairwise\\_distance}(x1, x2)}{\\max(\\lVert \\text{pairwise\\_distance}(x1, x2) \\rVert_p, \\epsilon)}\nother: The combined operation is useful for obtaining normalized distance values between two sets of vectors.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a pairwise distance computation and its gradient. The forward kernel '_kole_dist_sq_forward' takes 8 parameters: x_ptr (input tensor pointer), dist_sq_ptr (output tensor pointer), N (number of rows), D (number of columns), xnumel (total number of elements in the output), rnumel (total number of elements in a row), XBLOCK (block size for X dimension), and RBLOCK (block size for reduction dimension). It computes the squared pairwise distances between rows of the input tensor and stores the result in the output tensor. The backward kernel '_kole_dist_sq_backward' takes 9 parameters: grad_dist_sq_ptr (gradient of the output tensor), grad_x_ptr (gradient of the input tensor), x_ptr (input tensor pointer), N, D, xnumel, rnumel, XBLOCK, and RBLOCK. It computes the gradient of the input tensor based on the gradient of the output tensor. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _kole_dist_sq_forward(x_ptr, dist_sq_ptr, N, D, xnumel, rnumel, XBLOCK: tl.constexpr, RBLOCK: tl.constexpr):\n    \"\"\"\n    outer_diff_sq = (X[:, None, :] - X[None, :, :]) ** 2  # N, N, D\n    dist_sq = torch.sum(outer_diff_sq, axis=-1)  # N, N\n\n    This function works from the output perspective.\n    The goal is to compute every pairwise distance between each row of x_ptr\n    and store this value in dist_sq_ptr for all the NxN values\n\n    xnumel = N*N\n    rnumel = D\n    \"\"\"\n    # Compute output values offset\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.expand_dims(xoffset + tl.arange(0, XBLOCK), 1)  # XBLOCK, 1\n\n    # We guard against going out of the output matrix number of elements\n    # This guard will also be used to avoid loading already computed output values\n    xmask = xindex < xnumel\n\n    # First trick:\n    # This is nice way map output values to input indexes and compute all the pairwise distances\n    # While ensuring we never go beyond the number of lines of the input matrix\n    pw_row1_index = D * (xindex // N)  # [0, ..., 0, 1, ...]\n    pw_row2_index = D * (xindex % N)  # [0, 1, ..., N-1, 0, ...]\n\n    # We allocate the memory to store the temporary values\n    acc_add = tl.full([XBLOCK, RBLOCK], 0, tl.float32)\n\n    # Dynamic reduction working per block\n    rbase = tl.expand_dims(tl.arange(0, RBLOCK), 0)  # 1, RBLOCK\n    for roffset in range(0, rnumel, RBLOCK):\n        rindex = roffset + rbase\n        rmask = rindex < rnumel  # We guard against going out of the first dimension\n\n        # Second trick\n        # We use an outer AND and outer + operations to get the current reduction indexes for\n        # the rows handled by the current block\n        mask = rmask & xmask  # XBLOCK, RBLOCK\n        in1_ptrs = pw_row1_index + rindex  # XBLOCK, RBLOCK\n        in0_ptrs = pw_row2_index + rindex  # XBLOCK, RBLOCK\n\n        data0 = tl.load(x_ptr + in1_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n        data1 = tl.load(x_ptr + in0_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n\n        # We do all the pointwise operations\n        diff = data0 - data1\n        diff_squared = diff * diff\n\n        # This line is not needed because we are sure that we are working with\n        # tensors of size [XBLOCK, RBLOCK] already\n        # diff_squared_brodcasted = tl.broadcast_to(diff_squared, [XBLOCK, RBLOCK])\n\n        # Those lines can be simplified because we mask our input values with the 0. value\n        # and (0 - 0)**2 -> 0 so it won't interfere with the accumulation\n        acc_add += diff_squared\n        # # We add to our temporary buffer\n        # # and make sure to only keep the values that has been updated\n        # tmp6 = acc_add + diff_squared\n        # acc_add = tl.where(mask, tmp6, acc_add)\n\n    # We finally reduce to get final output values\n    row_sum = tl.expand_dims(tl.sum(acc_add, 1), 1)\n    # And we write back in the global memory\n    tl.store(dist_sq_ptr + xindex, row_sum, xmask)\n\n\n@triton.jit\ndef _kole_dist_sq_backward(\n    grad_dist_sq_ptr,\n    grad_x_ptr,\n    x_ptr,\n    N,\n    D,\n    xnumel,\n    rnumel,\n    XBLOCK: tl.constexpr,\n    RBLOCK: tl.constexpr,\n):\n    \"\"\"\n    outer_diff_sq = (X[:, None, :] - X[None, :, :]) ** 2  # N, N, D\n    dist_sq = torch.sum(outer_diff_sq, axis=-1)  # N, N\n\n    We have:\n    - dy_ij/dx_lk = d/dx_lk [sum_m((x_im - x_jm)**2)]\n    - dy_ij/dx_lk = 2 * (x_lk - x_jk) if l=i\n    -             = -2 * (x_lk - x_jk) if l=j\n    -             = 0 otherwise\n\n    So for an element x_lk its gradient is:\n    - x_lk_grad = sum_i(dy_il/dx_lk * dy_il) + sum_j(dy_lj/dx_lk * dy_lj)\n    - x_lk_grad = 2 * [sum_j((x_lk - x_jk) * dy_lj) - sum_i((x_ik - x_lk) * dy_il)]\n    - x_lk_grad = 2 * [x_lk * sum(y_grad_add) - sum(x[:, k] * y_grad_add)]\n        - with y_grad_add = dy_*l + dy_l* (Dim N)\n    \"\"\"\n    xindex = tl.program_id(0) * XBLOCK\n    xoffset = xindex + tl.arange(0, XBLOCK)\n    xmask = xoffset < xnumel\n\n    x_rows_index = tl.expand_dims(xoffset // D, 0)\n    x_cols_index = tl.expand_dims(xoffset % D, 0)  # [1, XBLOCK]\n\n    y_grad_add = tl.full([RBLOCK, XBLOCK], 0, tl.float32)\n    x_y_grad_add = tl.full([RBLOCK, XBLOCK], 0, tl.float32)\n    r_range = tl.arange(0, RBLOCK)\n    for rindex in range(0, rnumel, RBLOCK):\n        roffset = tl.expand_dims(rindex + r_range, 1)  # (RBLOCK, 1)\n        rmask = roffset < rnumel\n\n        mask = rmask & tl.expand_dims(xmask, 0)\n        x_col = tl.load(x_ptr + (roffset * D + x_cols_index), mask, other=0)  # (RBLOCK, XBLOCK)\n        grad_dist_sq_row = tl.load(grad_dist_sq_ptr + x_rows_index * N + roffset, mask, other=0)  # Get lines\n        grad_dist_sq_col = tl.load(grad_dist_sq_ptr + roffset * N + x_rows_index, mask, other=0)  # Get cols\n\n        y_grad_add += grad_dist_sq_row + grad_dist_sq_col\n        x_y_grad_add += x_col * (grad_dist_sq_row + grad_dist_sq_col)\n\n    x = tl.load(x_ptr + xoffset, xmask, other=0)  # (XBLOCK,)\n\n    left = x * tl.sum(y_grad_add, 0)\n    right = tl.sum(x_y_grad_add, 0)\n    grad_x = 2 * (left - right)  # (XBLOCK,)\n\n    tl.store(grad_x_ptr + xoffset, grad_x, xmask)\n\n\nclass KoleDistSQ(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        N, D = x.shape\n\n        assert_size_stride(x, (N, D), (D, 1))\n\n        dist_sq = torch.empty_strided((N, N), (N, 1), device=\"cuda\", dtype=torch.float32)\n\n        # Working on a 1D grid\n        xnumel = N * N\n        rnumel = D\n\n        # Meta parameters heuristics\n        num_warps = 2  # I don't understand why I get worst performance when increasing this value\n        RBLOCK = min(triton.next_power_of_2(D), BLOCK_MAX_NB_THREADS)  #\n        XBLOCK = min(BLOCK_MAX_NB_THREADS // RBLOCK, triton.next_power_of_2(N))\n\n        nb_blocks = 1 + (xnumel - 1) // XBLOCK\n        g = (nb_blocks, 1, 1)\n\n        _kole_dist_sq_forward[g](\n            x,\n            dist_sq,\n            N,\n            D,\n            xnumel,\n            rnumel,\n            # Meta parameters\n            XBLOCK=XBLOCK,\n            RBLOCK=RBLOCK,\n            num_warps=num_warps,\n        )\n\n        ctx.N = N\n        ctx.D = D\n        ctx.num_warps = num_warps\n\n        ctx.save_for_backward(x)\n\n        return dist_sq\n\n    @staticmethod\n    def backward(ctx, grad_dist_sq):\n        x = ctx.saved_tensors[0]\n        N = ctx.N\n        D = ctx.D\n\n        try:\n            assert_size_stride(grad_dist_sq, (N, N), (N, 1))\n        except AssertionError:\n            grad_dist_sq = grad_dist_sq.clone()\n            assert_size_stride(grad_dist_sq, (N, N), (N, 1))\n\n        grad_x = torch.zeros(N, D, dtype=torch.float32, device=\"cuda\")\n        xnumel = N * D\n        rnumel = N\n\n        RBLOCK = min(triton.next_power_of_2(N), BLOCK_MAX_NB_THREADS)\n        XBLOCK = min(BLOCK_MAX_NB_THREADS // RBLOCK, triton.next_power_of_2(N * D))\n        nb_blocks = 1 + (xnumel - 1) // XBLOCK\n        g = (nb_blocks, 1, 1)\n\n        _kole_dist_sq_backward[g](\n            grad_dist_sq, grad_x, x, N, D, xnumel, rnumel, XBLOCK=XBLOCK, RBLOCK=RBLOCK, num_warps=ctx.num_warps\n        )\n\n        return grad_x\n\n\ndef kole_dist_sq_triton(x):\n    return KoleDistSQ.apply(x)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between `x1` and `x2` using the specified norm, then normalizes the resulting distances along the specified dimension. This combined operation is useful for obtaining normalized distance values between two sets of vectors.\nWrapper Entry Information: normalize_pairwise_distance(x1, x2, p_distance=2.0, eps_distance=1e-6, keepdim=False, p_norm=2, dim_norm=1, eps_norm=1e-12) -> Tensor; x1 (Tensor): The first input tensor; x2 (Tensor): The second input tensor, must have the same shape as `x1`; p_distance (float): The norm degree for computing the pairwise distance. Default: 2.0; eps_distance (float): Small value to avoid division by zero in pairwise distance calculation. Default: 1e-6; keepdim (bool): Whether to keep the reduced dimensions in the output. Default: False; p_norm (float): The exponent value in the norm formulation for normalization. Default: 2; dim_norm (int): The dimension along which normalization is applied. Default: 1; eps_norm (float): Small value to avoid division by zero in normalization. Default: 1e-12\nMath: \\text{distance} = \\frac{\\text{pairwise\\_distance}(x1, x2)}{\\max(\\lVert \\text{pairwise\\_distance}(x1, x2) \\rVert_p, \\epsilon)}\nother: The combined operation is useful for obtaining normalized distance values between two sets of vectors.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing pairwise distances\n@triton.jit\ndef _pairwise_distance_kernel(\n    x1_ptr, x2_ptr, dist_ptr, N, D, x1numel, x2numel, rnumel, p_distance: tl.float32, eps_distance: tl.float32,\n    XBLOCK: tl.constexpr, RBLOCK: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_start = pid * XBLOCK\n    offsets = block_start + tl.arange(0, XBLOCK)\n    mask = offsets < x1numel\n\n    row1_indices = D * (offsets // N)\n    row2_indices = D * (offsets % N)\n\n    acc = tl.zeros([XBLOCK, RBLOCK], dtype=tl.float32)\n    for roffset in range(0, rnumel, RBLOCK):\n        rindices = roffset + tl.arange(0, RBLOCK)\n        rmask = rindices < rnumel\n\n        mask = rmask & mask\n        in1_ptrs = row1_indices + rindices\n        in2_ptrs = row2_indices + rindices\n\n        data1 = tl.load(x1_ptr + in1_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n        data2 = tl.load(x2_ptr + in2_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n\n        diff = data1 - data2\n        diff_pow = tl.pow(tl.abs(diff), p_distance)\n        acc += diff_pow\n\n    row_sum = tl.sum(acc, axis=1)\n    row_sum = tl.where(mask, row_sum, 0.0)\n    row_sum = tl.where(row_sum > eps_distance, row_sum, eps_distance)\n    tl.store(dist_ptr + offsets, row_sum, mask)\n\n# Triton kernel for normalizing the distances\n@triton.jit\ndef _normalize_distances_kernel(\n    dist_ptr, norm_ptr, out_ptr, N, D, xnumel, p_norm: tl.float32, dim_norm: tl.int32, eps_norm: tl.float32,\n    XBLOCK: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_start = pid * XBLOCK\n    offsets = block_start + tl.arange(0, XBLOCK)\n    mask = offsets < xnumel\n\n    if dim_norm == 1:\n        row_indices = offsets // N\n        col_indices = offsets % N\n        row_norms = tl.zeros([XBLOCK], dtype=tl.float32)\n        for i in range(N):\n            idx = row_indices * N + i\n            row_norms += tl.pow(tl.load(dist_ptr + idx, mask, eviction_policy=\"evict_last\", other=0), p_norm)\n        row_norms = tl.pow(row_norms, 1.0 / p_norm)\n        row_norms = tl.where(row_norms > eps_norm, row_norms, eps_norm)\n        normalized = tl.load(dist_ptr + offsets, mask, eviction_policy=\"evict_last\", other=0) / row_norms\n        tl.store(out_ptr + offsets, normalized, mask)\n    else:\n        col_indices = offsets // N\n        row_indices = offsets % N\n        col_norms = tl.zeros([XBLOCK], dtype=tl.float32)\n        for i in range(N):\n            idx = i * N + col_indices\n            col_norms += tl.pow(tl.load(dist_ptr + idx, mask, eviction_policy=\"evict_last\", other=0), p_norm)\n        col_norms = tl.pow(col_norms, 1.0 / p_norm)\n        col_norms = tl.where(col_norms > eps_norm, col_norms, eps_norm)\n        normalized = tl.load(dist_ptr + offsets, mask, eviction_policy=\"evict_last\", other=0) / col_norms\n        tl.store(out_ptr + offsets, normalized, mask)\n\n# Wrapper function\ndef normalize_pairwise_distance(x1, x2, p_distance=2.0, eps_distance=1e-6, keepdim=False, p_norm=2, dim_norm=1, eps_norm=1e-12):\n    assert x1.shape == x2.shape, \"x1 and x2 must have the same shape\"\n    N, D = x1.shape\n\n    x1numel = N * N\n    x2numel = D\n    rnumel = D\n\n    # Compute pairwise distances\n    dist = torch.empty_strided((N, N), (N, 1), device=\"cuda\", dtype=torch.float32)\n    XBLOCK = min(triton.next_power_of_2(N), 1024)\n    RBLOCK = min(triton.next_power_of_2(D), 1024)\n    g = (1 + (x1numel - 1) // XBLOCK, 1, 1)\n    _pairwise_distance_kernel[g](\n        x1, x2, dist, N, D, x1numel, x2numel, rnumel, p_distance, eps_distance, XBLOCK=XBLOCK, RBLOCK=RBLOCK\n    )\n\n    # Normalize distances\n    norm = torch.empty_strided((N, N), (N, 1), device=\"cuda\", dtype=torch.float32)\n    out = torch.empty_strided((N, N), (N, 1), device=\"cuda\", dtype=torch.float32)\n    XBLOCK = min(triton.next_power_of_2(N * N), 1024)\n    g = (1 + (N * N - 1) // XBLOCK, 1, 1)\n    _normalize_distances_kernel[g](\n        dist, norm, out, N, D, N * N, p_norm, dim_norm, eps_norm, XBLOCK=XBLOCK\n    )\n\n    if not keepdim:\n        out = out.squeeze(dim_norm)\n\n    return out\n\n# Example usage\nx1 = torch.randn(10, 5, device=\"cuda\")\nx2 = torch.randn(10, 5, device=\"cuda\")\nresult = normalize_pairwise_distance(x1, x2)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a namedtuple (values, indices) where values is the maximum value of each row of the input tensor in the given dimension dim. Indices is the index location of each maximum value found (argmax). If keepdim is True, the output tensors are of the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple maximal values in a reduced row, the indices of the first maximal value are returned.\nWrapper Entry Information: max(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Default: ``False``. out (tuple, optional): the result tuple of two output tensors (max, max_indices).\nother: If there are multiple maximal values in a reduced row then the indices of the first maximal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a namedtuple (values, indices) where values is the maximum value of each row of the input tensor in the given dimension dim. Indices is the index location of each maximum value found (argmax). If keepdim is True, the output tensors are of the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple maximal values in a reduced row, the indices of the first maximal value are returned.\nWrapper Entry Information: max(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Default: ``False``. out (tuple, optional): the result tuple of two output tensors (max, max_indices).\nother: If there are multiple maximal values in a reduced row then the indices of the first maximal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef max_kernel(\n    values_ptr, indices_ptr, input_ptr, input_row_stride, n_cols, BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    \n    max_val = tl.max(row, axis=0)\n    max_idx = tl.argmax(row, axis=0)\n    \n    values_row_start_ptr = values_ptr + row_idx * input_row_stride\n    indices_row_start_ptr = indices_ptr + row_idx * input_row_stride\n    \n    values_output_ptr = values_row_start_ptr + col_offsets\n    indices_output_ptr = indices_row_start_ptr + col_offsets\n    \n    tl.store(values_output_ptr, max_val, mask=col_offsets < 1)\n    tl.store(indices_output_ptr, max_idx, mask=col_offsets < 1)\n\nimport torch\nfrom collections import namedtuple\n\ndef max(input, dim, keepdim=False, *, out=None):\n    if dim < 0:\n        dim = input.dim() + dim\n    \n    n_rows = input.size(dim)\n    n_cols = input.size(dim + 1) if dim + 1 < input.dim() else 1\n    \n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    \n    if out is None:\n        values_shape = list(input.shape)\n        indices_shape = list(input.shape)\n        if not keepdim:\n            values_shape.pop(dim)\n            indices_shape.pop(dim)\n        else:\n            values_shape[dim] = 1\n            indices_shape[dim] = 1\n        values = torch.empty(values_shape, device=input.device, dtype=input.dtype)\n        indices = torch.empty(indices_shape, device=input.device, dtype=torch.long)\n    else:\n        values, indices = out\n        assert values.shape == indices.shape, \"Output tensors must have the same shape\"\n        assert values.device == input.device, \"Output tensors must be on the same device as input\"\n    \n    max_kernel[(n_rows,)](\n        values, indices, input, input.stride(dim), n_cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return namedtuple('MaxResult', ['values', 'indices'])(values, indices)\n\n# Test case 1: Basic usage\ninput_tensor = torch.tensor([[1, 2, 3], [4, 5, 6]], device='cuda')\nresult = max(input_tensor, dim=1)\nprint(result.values)  # Expected: tensor([[3], [6]])\nprint(result.indices)  # Expected: tensor([[2], [2]])\n\n# Test case 2: keepdim=True\nresult = max(input_tensor, dim=1, keepdim=True)\nprint(result.values)  # Expected: tensor([[3], [6]])\nprint(result.indices)  # Expected: tensor([[2], [2]])\n\n# Test case 3: Negative dimension\nresult = max(input_tensor, dim=-1)\nprint(result.values)  # Expected: tensor([[3], [6]])\nprint(result.indices)  # Expected: tensor([[2], [2]])\n\n# Test case 4: Using out parameter\nout_values = torch.empty((2, 1), device='cuda', dtype=torch.float32)\nout_indices = torch.empty((2, 1), device='cuda', dtype=torch.long)\nresult = max(input_tensor, dim=1, out=(out_values, out_indices))\nprint(result.values)  # Expected: tensor([[3], [6]])\nprint(result.indices)  # Expected: tensor([[2], [2]])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by the log_softmax activation function. This combined operation is optimized to be numerically stable and efficient, applying both a linear transformation and log-softmax in one step.\nWrapper Entry Information: log_softmax_linear(input, weight, bias=None, dim=-1, dtype=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None. dim (int): The dimension along which log_softmax will be computed. Default: -1. dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation. Default: None.\nMath: \\text{out} = \\log\\left(\\frac{\\exp(\\text{linear}(\\text{input}))}{\\sum_j \\exp(\\text{linear}(\\text{input})_j)}\\right) y = xA^T + b\nother: The values along the specified dimension represent log probabilities and sum to 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a parallelized logsumexp kernel that computes the log of the sum of exponentials over a batch of input tensors, with an optional scale applied to the input tensor. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef logsumexp_fwd_kernel(\n    x,\n    z,\n    scale,\n    D: tl.constexpr,\n    B: tl.constexpr,\n    HAS_SCALE: tl.constexpr\n):\n    i_n, i_d = tl.program_id(0), tl.program_id(1)\n    o_d = i_d * B + tl.arange(0, B)\n    m_d = o_d < D\n\n    b_x = tl.load(x + i_n * D + o_d, mask=m_d, other=-float('inf'))\n    if HAS_SCALE:\n        b_x = b_x * scale\n    b_m = tl.max(b_x, 0)\n    b_z = tl.log(tl.sum(tl.exp(b_x - b_m), 0)) + b_m\n    tl.store(z + i_n * tl.cdiv(D, B) + i_d, b_z)\n\n\ndef logsumexp_fwd(\n    x,\n    scale: Optional[float] = None,\n    dtype: Optional[torch.dtype] = None\n):\n    r\"\"\"\n    Compute the logsumexp of the input tensor over the last dimension.\n\n    Args:\n        x (Tensor):\n            The input tensor of any shape.\n        scale (Optional[float]):\n            The scale applied to the input tensor. Default: `None`.\n        dtype (Optional[torch.dtype]):\n            The data type of the output tensor. Default: `None`.\n    Returns:\n        Tensor: The logsumexp of the input tensor.\n    \"\"\"\n\n    shape = x.shape\n    x = x.view(-1, shape[-1])\n    N, D = x.shape\n    B = min(triton.next_power_of_2(D), 64 * 1024)\n    ND = triton.cdiv(D, B)\n\n    z = x.new_empty(N, ND, dtype=torch.float)\n    logsumexp_fwd_kernel[(N, ND)](\n        x=x,\n        z=z,\n        scale=scale,\n        D=D,\n        B=B\n    )\n    z = z.logsumexp(-1).view(*shape[:-1])\n    if dtype is not None and dtype != torch.float:\n        z = z.to(dtype)\n    return z\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by the log_softmax activation function. This combined operation is optimized to be numerically stable and efficient, applying both a linear transformation and log-softmax in one step.\nWrapper Entry Information: log_softmax_linear(input, weight, bias=None, dim=-1, dtype=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None. dim (int): The dimension along which log_softmax will be computed. Default: -1. dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation. Default: None.\nMath: \\text{out} = \\log\\left(\\frac{\\exp(\\text{linear}(\\text{input}))}{\\sum_j \\exp(\\text{linear}(\\text{input})_j)}\\right) y = xA^T + b\nother: The values along the specified dimension represent log probabilities and sum to 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef log_softmax_linear_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    stride_input_n, stride_input_d, stride_weight_m, stride_weight_n,\n    stride_output_m, stride_output_n,\n    N, M, K, DIM,\n    USE_BIAS: tl.constexpr,\n    DIM_IS_LAST: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_size_m = tl.cdiv(M, tl.num_programs(axis=0))\n    block_start = pid * block_size_m\n    offsets_m = block_start + tl.arange(0, block_size_m)\n    offsets_n = tl.arange(0, K)\n    mask = (offsets_m < M)[:, None] & (offsets_n < K)[None, :]\n\n    # Load input and weight\n    input = tl.load(input_ptr + offsets_n[None, :] * stride_input_n, mask=mask, other=0.0)\n    weight = tl.load(weight_ptr + offsets_m[:, None] * stride_weight_m + offsets_n[None, :] * stride_weight_n, mask=mask, other=0.0)\n\n    # Compute linear transformation\n    acc = tl.zeros((block_size_m, 1), dtype=tl.float32)\n    for k in range(0, K, 32):\n        a = input[:, k:k+32]\n        b = weight[:, k:k+32]\n        acc += tl.dot(a, b.T)\n\n    # Apply bias if provided\n    if USE_BIAS:\n        bias = tl.load(bias_ptr + offsets_m, mask=offsets_m < M, other=0.0)\n        acc += bias[:, None]\n\n    # Compute log_softmax\n    max_val = tl.max(acc, axis=0)\n    numerator = acc - max_val\n    exp_num = tl.exp(numerator)\n    sum_exp = tl.sum(exp_num, axis=0)\n    log_sum_exp = tl.log(sum_exp) + max_val\n    output = numerator - log_sum_exp\n\n    # Store the result\n    tl.store(output_ptr + offsets_m[:, None] * stride_output_m + offsets_n[None, :] * stride_output_n, output, mask=mask)\n\ndef log_softmax_linear(input, weight, bias=None, dim=-1, dtype=None):\n    if dtype is not None:\n        input = input.to(dtype)\n        weight = weight.to(dtype)\n        if bias is not None:\n            bias = bias.to(dtype)\n\n    N, K = input.shape\n    M, _ = weight.shape\n\n    if dim != -1:\n        input = input.transpose(dim, -1)\n        dim = -1\n\n    output = torch.empty((N, M), device=input.device, dtype=input.dtype)\n\n    grid = (triton.cdiv(M, 128),)\n    log_softmax_linear_kernel[grid](\n        input, weight, bias if bias is not None else torch.zeros((M,), device=input.device, dtype=input.dtype),\n        output,\n        input.stride(0), input.stride(1), weight.stride(0), weight.stride(1),\n        output.stride(0), output.stride(1),\n        N, M, K, dim,\n        USE_BIAS=bias is not None,\n        DIM_IS_LAST=True\n    )\n\n    if dim != -1:\n        output = output.transpose(dim, -1)\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit function element-wise. This operation compares each element in the input tensor to zero and returns the element itself if it is greater than zero or zero otherwise. The operation can be performed in-place, modifying the input tensor directly if inplace=True.\nWrapper Entry Information: relu(input, inplace=False) -> Tensor\n\nArgs:\n    inplace: can optionally do the operation in-place. Default: False\n\nShape:\n    - Input: (*), where * means any number of dimensions.\n    - Output: (*), same shape as the input.\nMath: ReLU(x) = (x)^+ = max(0, x)\nother: See torch.nn.ReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the rectified linear unit function element-wise. This operation compares each element in the input tensor to zero and returns the element itself if it is greater than zero or zero otherwise. The operation can be performed in-place, modifying the input tensor directly if inplace=True.\nWrapper Entry Information: relu(input, inplace=False) -> Tensor\n\nArgs:\n    inplace: can optionally do the operation in-place. Default: False\n\nShape:\n    - Input: (*), where * means any number of dimensions.\n    - Output: (*), same shape as the input.\nMath: ReLU(x) = (x)^+ = max(0, x)\nother: See torch.nn.ReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for ReLU\n@triton.jit\ndef relu_kernel(output_ptr, input_ptr, size, BLOCK_SIZE: tl.constexpr):\n    # Compute the program ID in a 1D grid\n    pid = tl.program_id(0)\n    # Compute the range of elements this program should handle\n    block_start = pid * BLOCK_SIZE\n    # Create a range of offsets for the elements this program will process\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to guard memory operations against out-of-bounds accesses\n    mask = offsets < size\n    # Load the input elements into SRAM\n    x = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Apply the ReLU function\n    y = tl.where(x > 0, x, 0.0)\n    # Store the output elements back to DRAM\n    tl.store(output_ptr + offsets, y, mask=mask)\n\n# Python wrapper function for ReLU\ndef relu(input, inplace=False):\n    # Ensure the input is a torch tensor\n    if not isinstance(input, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor\")\n    \n    # Determine the size of the input tensor\n    size = input.numel()\n    \n    # Determine the block size (a power of two)\n    BLOCK_SIZE = triton.next_power_of_2(min(1024, size))\n    \n    # Determine the number of programs (blocks) needed\n    num_programs = (size + BLOCK_SIZE - 1) // BLOCK_SIZE\n    \n    # Prepare the output tensor\n    if inplace:\n        output = input\n    else:\n        output = torch.empty_like(input)\n    \n    # Call the Triton kernel\n    relu_kernel[(num_programs,)](output, input, size, BLOCK_SIZE=BLOCK_SIZE)\n    \n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the least squares problem for an overdetermined system of linear equations using QR decomposition. It computes the least squares solution x that minimizes the Euclidean 2-norm |Ax - b|_2, where A is the coefficient matrix and b is the right-hand side vector or matrix.\nWrapper Entry Information: def least_squares_qr(A, b, *, mode='reduced', out=None) -> Tensor: A (Tensor): Coefficient matrix of shape (*, m, n), where * is zero or more batch dimensions. b (Tensor): Right-hand side vector or matrix of shape (*, m) or (*, m, k), where k is the number of right-hand sides. mode (str, optional): Determines the type of QR decomposition to use. One of 'reduced' (default) or 'complete'. See torch.linalg.qr for details. out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: The QR decomposition of A is given by A = QR, where Q is a matrix with orthonormal columns and R is an upper triangular matrix. The least squares solution is x = R^{-1} Q^H b.\nother: The function utilizes QR decomposition to efficiently solve overdetermined linear systems by finding the least squares solution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a fused Mixture of Experts (MOE) kernel with parameters including pointers to tensors (a_ptr, b_ptr, c_ptr, a_scale_ptr, b_scale_ptr, topk_weights_ptr, sorted_token_ids_ptr, expert_ids_ptr, num_tokens_post_padded_ptr), matrix dimensions (N, K, EM, num_valid_tokens), strides (stride_am, stride_ak, stride_be, stride_bk, stride_bn, stride_cm, stride_cn), and meta-parameters (BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, GROUP_SIZE_M, MUL_ROUTED_WEIGHT, top_k, compute_type, use_fp8). The kernel computes a block of the output matrix C by multiplying tokens and expert matrices, taking into account token padding and expert assignment. The function `invoke_fused_moe_kernel` is used to call the `fused_moe_kernel` with appropriate parameters. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_moe_kernel(\n    a_ptr,\n    b_ptr,\n    c_ptr,\n    a_scale_ptr,\n    b_scale_ptr,\n    topk_weights_ptr,\n    sorted_token_ids_ptr,\n    expert_ids_ptr,\n    num_tokens_post_padded_ptr,\n    N,\n    K,\n    EM,\n    num_valid_tokens,\n    stride_am,\n    stride_ak,\n    stride_be,\n    stride_bk,\n    stride_bn,\n    stride_cm,\n    stride_cn,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n    MUL_ROUTED_WEIGHT: tl.constexpr,\n    top_k: tl.constexpr,\n    compute_type: tl.constexpr,\n    use_fp8: tl.constexpr,\n):\n    \"\"\"\n    Implements the fused computation for a Mixture of Experts (MOE) using\n    token and expert matrices.\n\n    Key Parameters:\n    - A: The input tensor representing tokens with shape (*, K), where '*' can\n        be any shape representing batches and K is the feature dimension of\n        each token.\n    - B: The stacked MOE weight tensor with shape (E, N, K), where E is\n        the number of experts, K is the input feature dimension, and N is\n        the output feature dimension.\n    - C: The output cache tensor with shape (M, topk, N), where M is the\n        total number of tokens post padding, topk is the number of times\n        each token is repeated, and N is the output feature dimension.\n    - sorted_token_ids: A tensor containing the sorted indices of tokens,\n        repeated topk times and arranged by the expert index they are\n        assigned to.\n    - expert_ids: A tensor containing the indices of the expert for each\n        block. It determines which expert matrix from B should be used for\n        each block in A.\n    This kernel performs the multiplication of a token by its corresponding\n    expert matrix as determined by `expert_ids`. The sorting of\n    `sorted_token_ids` by expert index and padding ensures divisibility by\n    BLOCK_SIZE_M, which is necessary to maintain consistency in block matrix\n    multiplication across different blocks processed by the same expert.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(EM, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + ((pid % num_pid_in_group) % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    num_tokens_post_padded = tl.load(num_tokens_post_padded_ptr)\n    if pid_m * BLOCK_SIZE_M >= num_tokens_post_padded:\n        return\n    offs_token_id = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_token = tl.load(sorted_token_ids_ptr + offs_token_id)\n    token_mask = offs_token < num_valid_tokens\n\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = a_ptr + (\n        offs_token[:, None] // top_k * stride_am + offs_k[None, :] * stride_ak\n    )\n\n    off_experts = tl.load(expert_ids_ptr + pid_m)\n    b_ptrs = (\n        b_ptr\n        + off_experts * stride_be\n        + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    )\n\n    if use_fp8:\n        a_scale = tl.load(a_scale_ptr)\n        b_scale = tl.load(b_scale_ptr + off_experts)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a = tl.load(\n            a_ptrs,\n            mask=token_mask[:, None] & (offs_k[None, :] < K - k * BLOCK_SIZE_K),\n            other=0.0,\n        )\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n        if use_fp8:\n            accumulator = tl.dot(a, b, acc=accumulator)\n        else:\n            accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    if MUL_ROUTED_WEIGHT:\n        moe_weight = tl.load(topk_weights_ptr + offs_token, mask=token_mask, other=0)\n        accumulator = accumulator * moe_weight[:, None]\n\n    if use_fp8:\n        accumulator = (accumulator * a_scale * b_scale).to(compute_type)\n    else:\n        accumulator = accumulator.to(compute_type)\n\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_token[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = token_mask[:, None] & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef invoke_fused_moe_kernel(\n    A: torch.Tensor,\n    B: torch.Tensor,\n    C: torch.Tensor,\n    A_scale: Optional[torch.Tensor],\n    B_scale: Optional[torch.Tensor],\n    topk_weights: torch.Tensor,\n    topk_ids: torch.Tensor,\n    sorted_token_ids: torch.Tensor,\n    expert_ids: torch.Tensor,\n    num_tokens_post_padded: torch.Tensor,\n    mul_routed_weight: bool,\n    top_k: int,\n    config: Dict[str, Any],\n    compute_type: tl.dtype,\n    use_fp8: bool,\n) -> None:\n    grid = lambda META: (\n        triton.cdiv(sorted_token_ids.shape[0], META[\"BLOCK_SIZE_M\"])\n        * triton.cdiv(B.shape[1], META[\"BLOCK_SIZE_N\"]),\n    )\n\n    fused_moe_kernel[grid](\n        A,\n        B,\n        C,\n        A_scale,\n        B_scale,\n        topk_weights,\n        sorted_token_ids,\n        expert_ids,\n        num_tokens_post_padded,\n        B.shape[1],\n        B.shape[2],\n        sorted_token_ids.shape[0],\n        topk_ids.numel(),\n        A.stride(0),\n        A.stride(1),\n        B.stride(0),\n        B.stride(2),\n        B.stride(1),\n        C.stride(1),\n        C.stride(2),\n        MUL_ROUTED_WEIGHT=mul_routed_weight,\n        top_k=top_k,\n        compute_type=compute_type,\n        use_fp8=use_fp8,\n        **config,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the least squares problem for an overdetermined system of linear equations using QR decomposition. It computes the least squares solution x that minimizes the Euclidean 2-norm |Ax - b|_2, where A is the coefficient matrix and b is the right-hand side vector or matrix.\nWrapper Entry Information: def least_squares_qr(A, b, *, mode='reduced', out=None) -> Tensor: A (Tensor): Coefficient matrix of shape (*, m, n), where * is zero or more batch dimensions. b (Tensor): Right-hand side vector or matrix of shape (*, m) or (*, m, k), where k is the number of right-hand sides. mode (str, optional): Determines the type of QR decomposition to use. One of 'reduced' (default) or 'complete'. See torch.linalg.qr for details. out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: The QR decomposition of A is given by A = QR, where Q is a matrix with orthonormal columns and R is an upper triangular matrix. The least squares solution is x = R^{-1} Q^H b.\nother: The function utilizes QR decomposition to efficiently solve overdetermined linear systems by finding the least squares solution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef least_squares_qr_kernel(\n    A_ptr,\n    b_ptr,\n    Q_ptr,\n    R_ptr,\n    x_ptr,\n    m,\n    n,\n    k,\n    stride_am,\n    stride_an,\n    stride_bk,\n    stride_bn,\n    stride_qm,\n    stride_qn,\n    stride_rn,\n    stride_rk,\n    stride_xn,\n    stride_xk,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n):\n    \"\"\"\n    Solves the least squares problem for an overdetermined system of linear equations using QR decomposition.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(m, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(n, BLOCK_SIZE_N)\n    num_pid_k = tl.cdiv(k, BLOCK_SIZE_K)\n\n    # Compute the QR decomposition\n    for i in range(n):\n        for j in range(i, n):\n            if j == i:\n                R_value = 0.0\n                for l in range(i, m):\n                    R_value += tl.load(A_ptr + l * stride_am + i * stride_an) * tl.load(A_ptr + l * stride_am + j * stride_an)\n                R_value = tl.sqrt(R_value)\n                tl.store(R_ptr + i * stride_rn + j * stride_rk, R_value)\n            else:\n                R_value = 0.0\n                for l in range(i, m):\n                    R_value += tl.load(A_ptr + l * stride_am + i * stride_an) * tl.load(A_ptr + l * stride_am + j * stride_an)\n                R_value /= tl.load(R_ptr + i * stride_rn + i * stride_rk)\n                tl.store(R_ptr + i * stride_rn + j * stride_rk, R_value)\n\n        for j in range(i + 1, m):\n            Q_value = 0.0\n            for l in range(i, n):\n                Q_value += tl.load(A_ptr + j * stride_am + l * stride_an) * tl.load(R_ptr + i * stride_rn + l * stride_rk)\n            Q_value /= tl.load(R_ptr + i * stride_rn + i * stride_rk)\n            for l in range(i, n):\n                A_value = tl.load(A_ptr + j * stride_am + l * stride_an) - Q_value * tl.load(R_ptr + i * stride_rn + l * stride_rk)\n                tl.store(A_ptr + j * stride_am + l * stride_an, A_value)\n\n    # Compute Q^H * b\n    for i in range(k):\n        for j in range(n):\n            QHb_value = 0.0\n            for l in range(m):\n                QHb_value += tl.load(A_ptr + l * stride_am + j * stride_an) * tl.load(b_ptr + l * stride_bk + i * stride_bn)\n            tl.store(Q_ptr + j * stride_qn + i * stride_qk, QHb_value)\n\n    # Solve R * x = Q^H * b\n    for i in range(n - 1, -1, -1):\n        for j in range(k):\n            x_value = tl.load(Q_ptr + i * stride_qn + j * stride_qk)\n            for l in range(i + 1, n):\n                x_value -= tl.load(R_ptr + i * stride_rn + l * stride_rk) * tl.load(x_ptr + l * stride_xn + j * stride_xk)\n            x_value /= tl.load(R_ptr + i * stride_rn + i * stride_rk)\n            tl.store(x_ptr + i * stride_xn + j * stride_xk, x_value)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef least_squares_qr(A, b, *, mode='reduced', out=None) -> torch.Tensor:\n    \"\"\"\n    Solves the least squares problem for an overdetermined system of linear equations using QR decomposition.\n    \n    Parameters:\n    - A (Tensor): Coefficient matrix of shape (*, m, n), where * is zero or more batch dimensions.\n    - b (Tensor): Right-hand side vector or matrix of shape (*, m) or (*, m, k), where k is the number of right-hand sides.\n    - mode (str, optional): Determines the type of QR decomposition to use. One of 'reduced' (default) or 'complete'.\n    - out (Tensor, optional): Output tensor. Ignored if None. Default: None.\n    \n    Returns:\n    - Tensor: The least squares solution x that minimizes the Euclidean 2-norm |Ax - b|_2.\n    \"\"\"\n    *batch, m, n = A.shape\n    *batch, m, k = b.shape if b.dim() == 3 else (*batch, m, 1)\n    \n    # Ensure A and b have the same batch dimensions\n    if len(batch) == 0:\n        A = A.unsqueeze(0)\n        b = b.unsqueeze(0)\n    \n    # Allocate output tensor\n    if out is None:\n        out = torch.empty((*batch, n, k), device=A.device, dtype=A.dtype)\n    \n    # Flatten batch dimensions\n    A = A.view(-1, m, n)\n    b = b.view(-1, m, k)\n    out = out.view(-1, n, k)\n    \n    # Compute QR decomposition\n    Q, R = torch.linalg.qr(A, mode=mode)\n    \n    # Compute Q^H * b\n    QHb = torch.matmul(Q.transpose(-2, -1), b)\n    \n    # Solve R * x = Q^H * b\n    x = torch.linalg.solve(R, QHb)\n    \n    # Copy result to output tensor\n    out.copy_(x)\n    \n    # Restore batch dimensions\n    out = out.view(*batch, n, k)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using QR decomposition. It performs QR decomposition of a square matrix A in \\mathbb{K}^{n \times n} (where \\mathbb{K} is either \\mathbb{R} or \\mathbb{C}) and computes the determinant by taking the product of the diagonal elements of R.\nWrapper Entry Information: determinant_via_qr(A, *, mode='reduced', out=None) -> Tensor\nMath: The QR decomposition of A is: A = Q R, where Q is an orthogonal/unitary matrix, R is an upper triangular matrix. The determinant is given by: \\det(A) = \\det(Q)\\cdot \\prod_{i=1}^{n} R_{ii}. For real matrices, \\det(Q) = \\pm 1. For complex matrices, |\\det(Q)| = 1.\nother: Numerical stability considerations are important, especially for ill-conditioned matrices. The function explicitly computes \\det(Q) to account for the sign. For complex matrices, the result may be complex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using QR decomposition. It performs QR decomposition of a square matrix A in \\mathbb{K}^{n \times n} (where \\mathbb{K} is either \\mathbb{R} or \\mathbb{C}) and computes the determinant by taking the product of the diagonal elements of R.\nWrapper Entry Information: determinant_via_qr(A, *, mode='reduced', out=None) -> Tensor\nMath: The QR decomposition of A is: A = Q R, where Q is an orthogonal/unitary matrix, R is an upper triangular matrix. The determinant is given by: \\det(A) = \\det(Q)\\cdot \\prod_{i=1}^{n} R_{ii}. For real matrices, \\det(Q) = \\pm 1. For complex matrices, |\\det(Q)| = 1.\nother: Numerical stability considerations are important, especially for ill-conditioned matrices. The function explicitly computes \\det(Q) to account for the sign. For complex matrices, the result may be complex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef determinant_kernel(A_ptr, Q_ptr, R_ptr, det_ptr, n, BLOCK_SIZE: tl.constexpr):\n    # The block size is the smallest power of two greater than the number of columns in `A`\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n\n    # Load the matrix A into SRAM\n    A = tl.load(A_ptr + block_start * n + tl.arange(0, BLOCK_SIZE), mask=tl.arange(0, BLOCK_SIZE) < n, other=0.0)\n\n    # Perform QR decomposition\n    Q, R = torch.linalg.qr(A)\n\n    # Store Q and R matrices\n    tl.store(Q_ptr + block_start * n + tl.arange(0, BLOCK_SIZE), Q, mask=tl.arange(0, BLOCK_SIZE) < n)\n    tl.store(R_ptr + block_start * n + tl.arange(0, BLOCK_SIZE), R, mask=tl.arange(0, BLOCK_SIZE) < n)\n\n    # Compute the determinant of Q\n    det_Q = torch.det(Q)\n\n    # Compute the determinant of R\n    det_R = 1.0\n    for i in range(n):\n        det_R *= R[i, i]\n\n    # Compute the determinant of A\n    det_A = det_Q * det_R\n\n    # Store the determinant\n    tl.store(det_ptr + block_start, det_A, mask=block_start < n)\n\nimport torch\n\ndef determinant_via_qr(A, *, mode='reduced', out=None):\n    # Ensure A is a square matrix\n    assert A.dim() == 2 and A.size(0) == A.size(1), \"A must be a square matrix\"\n    n = A.size(0)\n\n    # Allocate memory for Q, R, and det\n    Q = torch.empty_like(A)\n    R = torch.empty_like(A)\n    det = torch.empty(1, device=A.device, dtype=A.dtype)\n\n    # Define the block size\n    BLOCK_SIZE = triton.next_power_of_2(n)\n\n    # Launch the Triton kernel\n    determinant_kernel[(1,)](\n        A, Q, R, det, n,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    # Return the determinant\n    if out is not None:\n        out.copy_(det)\n        return out\n    else:\n        return det\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining tiling (repeating elements) and the exponential function. The input tensor is first repeated along each dimension according to the specified `dims` using the tiling operation, then the exponential function is applied element-wise to the resulting tensor.\nWrapper Entry Information: fused_tile_exp(input, dims, *, out=None) -> Tensor; input (Tensor): The input tensor X whose elements are to be repeated and exponentiated.; dims (tuple of int): The number of repetitions for each dimension. If `dims` has fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X and a tuple of dimensions \text{dims}, the function computes:\n1. **Tiling:**\nThe input tensor is repeated along each dimension according to the specified number of times in `dims`:\nY = tile(X, dims)\n2. **Exponential Function:**\nThe exponential function is applied element-wise to the tiled tensor:\nZ = exp(Y)\nother: The `dims` parameter controls how many times the input tensor is repeated along each dimension.\nIf `dims` specifies fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.\nThe function supports autograd for gradient computation.\nAll operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining tiling (repeating elements) and the exponential function. The input tensor is first repeated along each dimension according to the specified `dims` using the tiling operation, then the exponential function is applied element-wise to the resulting tensor.\nWrapper Entry Information: fused_tile_exp(input, dims, *, out=None) -> Tensor; input (Tensor): The input tensor X whose elements are to be repeated and exponentiated.; dims (tuple of int): The number of repetitions for each dimension. If `dims` has fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X and a tuple of dimensions \text{dims}, the function computes:\n1. **Tiling:**\nThe input tensor is repeated along each dimension according to the specified number of times in `dims`:\nY = tile(X, dims)\n2. **Exponential Function:**\nThe exponential function is applied element-wise to the tiled tensor:\nZ = exp(Y)\nother: The `dims` parameter controls how many times the input tensor is repeated along each dimension.\nIf `dims` specifies fewer dimensions than `input`, ones are prepended to `dims` until all dimensions are specified.\nThe function supports autograd for gradient computation.\nAll operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_tile_exp_kernel(\n    output_ptr,  # Pointer to the output tensor\n    input_ptr,   # Pointer to the input tensor\n    input_shape, # Shape of the input tensor\n    input_strides, # Strides of the input tensor\n    output_strides, # Strides of the output tensor\n    dims,        # Tiling dimensions\n    n_elements,  # Total number of elements in the output tensor\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the program ID\n    pid = tl.program_id(0)\n    # Calculate the range of elements this program will handle\n    block_start = pid * BLOCK_SIZE\n    block_end = min(block_start + BLOCK_SIZE, n_elements)\n    \n    # Iterate over the elements in the block\n    for i in range(block_start, block_end):\n        # Calculate the original index in the input tensor\n        original_index = 0\n        temp_i = i\n        for dim in range(len(input_shape)):\n            stride = output_strides[dim]\n            size = input_shape[dim]\n            tile = dims[dim]\n            original_index += (temp_i // (stride * tile)) % size * input_strides[dim]\n            temp_i %= stride * tile\n        \n        # Load the element from the input tensor\n        input_val = tl.load(input_ptr + original_index)\n        \n        # Apply the exponential function\n        output_val = tl.exp(input_val)\n        \n        # Store the result in the output tensor\n        tl.store(output_ptr + i, output_val)\n\ndef fused_tile_exp(input, dims, *, out=None):\n    # Ensure dims has the same number of dimensions as input\n    input_shape = input.shape\n    if len(dims) < len(input_shape):\n        dims = (1,) * (len(input_shape) - len(dims)) + dims\n    \n    # Calculate the shape of the output tensor\n    output_shape = tuple(s * d for s, d in zip(input_shape, dims))\n    \n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty(output_shape, dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == output_shape, \"Output tensor shape does not match the expected shape\"\n    \n    # Determine the strides for the input and output tensors\n    input_strides = input.stride()\n    output_strides = out.stride()\n    \n    # Determine the number of elements in the output tensor\n    n_elements = out.numel()\n    \n    # Determine the block size\n    BLOCK_SIZE = 1024  # Adjust this value based on your GPU architecture\n    \n    # Determine the number of programs (blocks) needed\n    num_programs = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n    \n    # Launch the kernel\n    fused_tile_exp_kernel[(num_programs,)](\n        out.data_ptr(),\n        input.data_ptr(),\n        input_shape,\n        input_strides,\n        output_strides,\n        dims,\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n\nimport torch\n\n# Create a simple input tensor\ninput = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32, device='cuda')\n\n# Define the tiling dimensions\ndims = (2, 3)\n\n# Call the fused_tile_exp function\noutput = fused_tile_exp(input, dims)\n\n# Print the output tensor\nprint(output)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in the input tensor, and then applies the hyperbolic tangent (tanh) function to the square-rooted values. The function returns a tensor where each element is the result of applying sqrt followed by tanh to each element of the input.\nWrapper Entry Information: def sqrt_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\sqrt{\\text{input}_{i}})\nother: Using a tensor with some negative values results in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in the input tensor, and then applies the hyperbolic tangent (tanh) function to the square-rooted values. The function returns a tensor where each element is the result of applying sqrt followed by tanh to each element of the input.\nWrapper Entry Information: def sqrt_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\sqrt{\\text{input}_{i}})\nother: Using a tensor with some negative values results in NaN for those elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute sqrt followed by tanh for elements in a tensor\n@triton.jit\ndef sqrt_tanh_kernel(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    sqrt_value = tl.sqrt(a_value.to(tl.float32))\n    # Compute the hyperbolic tangent of the square-rooted values\n    b_value = tl.tanh(sqrt_value)\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)\n\n# Function to launch the Triton kernel and compute sqrt followed by tanh\ndef sqrt_tanh(input, out=None) -> torch.Tensor:\n    # Create an output tensor 'out' if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape, \"Output tensor must have the same shape as input tensor\"\n    \n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    sqrt_tanh_kernel[(grid_size, 1, 1)](input, out, n_elements, block_size)\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over an input tensor across channels, followed by the Sigmoid Linear Unit (SiLU) activation function applied element-wise. This combined operation normalizes the input tensor and then applies a non-linear SiLU activation.\nWrapper Entry Information: silu_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor; input (Tensor): The input tensor for Batch Normalization.; running_mean (Tensor): The running mean tensor (used during evaluation).; running_var (Tensor): The running variance tensor (used during evaluation).; weight (Tensor, optional): The weight tensor for Batch Normalization scaling. Default: None.; bias (Tensor, optional): The bias tensor for Batch Normalization. Default: None.; training (bool, optional): Whether the module is in training mode. Default: False.; momentum (float, optional): Value used for the running mean and variance computation. Default: 0.1.; eps (float, optional): A small value added to the denominator for numerical stability. Default: 1e-5.\nMath: The combined operation is defined as: \\text{out} = \\text{silu}(\\text{BatchNorm}(x)), where the SiLU function is defined as: \\text{silu}(x) = x * \\sigma(x), \\text{where } \\sigma(x) = \\frac{1}{1 + \\exp(-x)}\nother: Returns: A tensor that has undergone batch normalization and SiLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over an input tensor across channels, followed by the Sigmoid Linear Unit (SiLU) activation function applied element-wise. This combined operation normalizes the input tensor and then applies a non-linear SiLU activation.\nWrapper Entry Information: silu_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor; input (Tensor): The input tensor for Batch Normalization.; running_mean (Tensor): The running mean tensor (used during evaluation).; running_var (Tensor): The running variance tensor (used during evaluation).; weight (Tensor, optional): The weight tensor for Batch Normalization scaling. Default: None.; bias (Tensor, optional): The bias tensor for Batch Normalization. Default: None.; training (bool, optional): Whether the module is in training mode. Default: False.; momentum (float, optional): Value used for the running mean and variance computation. Default: 0.1.; eps (float, optional): A small value added to the denominator for numerical stability. Default: 1e-5.\nMath: The combined operation is defined as: \\text{out} = \\text{silu}(\\text{BatchNorm}(x)), where the SiLU function is defined as: \\text{silu}(x) = x * \\sigma(x), \\text{where } \\sigma(x) = \\frac{1}{1 + \\exp(-x)}\nother: Returns: A tensor that has undergone batch normalization and SiLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for batch normalization followed by SiLU activation\n@triton.jit\ndef silu_batch_norm_kernel(\n    input_ptr,\n    output_ptr,\n    running_mean_ptr,\n    running_var_ptr,\n    weight_ptr,\n    bias_ptr,\n    input_row_stride,\n    n_cols,\n    eps,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_cols\n\n    # Load input, running mean, and running var\n    input_block = tl.load(input_ptr + pid * input_row_stride + offsets, mask=mask)\n    running_mean = tl.load(running_mean_ptr + offsets, mask=mask)\n    running_var = tl.load(running_var_ptr + offsets, mask=mask)\n\n    # Batch normalization\n    normalized = (input_block - running_mean) * tl.rsqrt(running_var + eps)\n\n    # Apply weight and bias if provided\n    if weight_ptr is not None:\n        weight = tl.load(weight_ptr + offsets, mask=mask)\n        normalized = normalized * weight\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + offsets, mask=mask)\n        normalized = normalized + bias\n\n    # SiLU activation\n    sigmoid = 1 / (1 + tl.exp(-normalized))\n    output_block = normalized * sigmoid\n\n    # Store the result\n    tl.store(output_ptr + pid * input_row_stride + offsets, output_block, mask=mask)\n\n# Wrapper function to set up and launch the kernel\n@torch.inference_mode()\ndef silu_batch_norm(input: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor, weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False, momentum: float = 0.1, eps: float = 1e-5) -> torch.Tensor:\n    \"\"\"\n    Applies Batch Normalization over an input tensor across channels, followed by the Sigmoid Linear Unit (SiLU) activation function applied element-wise.\n\n    Args:\n        input (Tensor): The input tensor for Batch Normalization.\n        running_mean (Tensor): The running mean tensor (used during evaluation).\n        running_var (Tensor): The running variance tensor (used during evaluation).\n        weight (Tensor, optional): The weight tensor for Batch Normalization scaling. Default: None.\n        bias (Tensor, optional): The bias tensor for Batch Normalization. Default: None.\n        training (bool, optional): Whether the module is in training mode. Default: False.\n        momentum (float, optional): Value used for the running mean and variance computation. Default: 0.1.\n        eps (float, optional): A small value added to the denominator for numerical stability. Default: 1e-5.\n\n    Returns:\n        Tensor: A tensor that has undergone batch normalization and SiLU activation.\n    \"\"\"\n    if training:\n        # Update running mean and variance (not implemented in this example)\n        pass\n\n    n_cols = input.shape[-1]\n    input_row_stride = input.stride(-2)\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    output = torch.empty_like(input)\n\n    grid = (input.numel() // n_cols,)\n\n    silu_batch_norm_kernel[grid](\n        input,\n        output,\n        running_mean,\n        running_var,\n        weight if weight is not None else triton.language.core.empty((0,), dtype=triton.language.core.float32),\n        bias if bias is not None else triton.language.core.empty((0,), dtype=triton.language.core.float32),\n        input_row_stride,\n        n_cols,\n        eps,\n        BLOCK_SIZE,\n        num_warps=4,\n        num_stages=2\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Fills the elements of the self tensor with a specified value by selecting the indices in the order given in the index tensor. The operation is performed along a specified dimension.\nWrapper Entry Information: index_fill_(dim, index, value) -> Tensor\n\nArgs:\n    dim (int): dimension along which to index\n    index (LongTensor): indices of :attr:`self` tensor to fill in\n    value (float): the value to fill with\n\nExample::\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 2])\n    >>> x.index_fill_(1, index, -1)\n    tensor([[-1.,  2., -1.],\n            [-1.,  5., -1.],\n            [-1.,  8., -1.]])\nother: The function modifies the tensor in-place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a kernel named 'splat' that fills a 2D block of memory with a specified float value. The kernel takes six parameters: the fill value, the output tensor, the row stride, the column stride, and two constexpr block sizes for rows and columns. The kernel calculates the memory addresses for the block and stores the fill value in the output tensor. A test function is provided to verify the kernel's functionality by comparing the output tensor to an expected result using PyTorch. import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to fill a 2D block of memory with a specified value\n@triton.jit\ndef splat(\n    f32_val,  # The value to fill the block with\n    f32_out,  # The output tensor to be filled\n    stride_row,  # The stride for rows in the output tensor\n    stride_col,  # The stride for columns in the output tensor\n    BLOCK_SIZE_ROW: tl.constexpr,  # The number of rows in the block\n    BLOCK_SIZE_COL: tl.constexpr,  # The number of columns in the block\n):\n    pid0 = tl.program_id(axis=0)  # Program ID for the row\n    x = tl.full((2, BLOCK_SIZE_COL), f32_val, dtype=tl.float32)  # Create a block filled with f32_val\n    offs_row = 2 * pid0 + tl.arange(0, 2)  # Row offsets\n    offs_col = tl.arange(0, BLOCK_SIZE_COL)  # Column offsets\n    a_ptrs = f32_out + (offs_row[:, None] * stride_row + offs_col[None, :] * stride_col)  # Calculate memory addresses\n    tl.store(a_ptrs, x)  # Store the block in the output tensor\n\n# Function to test the splat kernel\ndef test(device):\n    n_rows = 256  # Number of rows in the output tensor\n    n_cols = 512  # Number of columns in the output tensor\n    fill_value = 123.456  # The value to fill the tensor with\n    expected_result = torch.full((n_rows, n_cols), fill_value, dtype=torch.float32)  # Expected result tensor\n    output = torch.empty([n_rows, n_cols], device=device, dtype=expected_result.dtype)  # Output tensor\n    grid = lambda meta: (n_rows // 2,)  # Grid size for the kernel launch\n\n    # Launch the splat kernel\n    splat[grid](\n        fill_value,  # The value to fill the block with\n        output,  # The output tensor to be filled\n        output.stride(0),  # The stride for rows in the output tensor\n        output.stride(1),  # The stride for columns in the output tensor\n        BLOCK_SIZE_ROW=n_rows,  # The number of rows in the block\n        BLOCK_SIZE_COL=n_cols,  # The number of columns in the block\n    )\n\n    # Verify the output is as expected\n    torch.testing.assert_close(output, expected_result, rtol=0.001, atol=1e-5)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Fills the elements of the self tensor with a specified value by selecting the indices in the order given in the index tensor. The operation is performed along a specified dimension.\nWrapper Entry Information: index_fill_(dim, index, value) -> Tensor\n\nArgs:\n    dim (int): dimension along which to index\n    index (LongTensor): indices of :attr:`self` tensor to fill in\n    value (float): the value to fill with\n\nExample::\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 2])\n    >>> x.index_fill_(1, index, -1)\n    tensor([[-1.,  2., -1.],\n            [-1.,  5., -1.],\n            [-1.,  8., -1.]])\nother: The function modifies the tensor in-place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to fill elements in a tensor based on indices\n@triton.jit\ndef index_fill_kernel(\n    tensor_ptr,  # Pointer to the input/output tensor\n    index_ptr,   # Pointer to the index tensor\n    value,       # The value to fill with\n    dim,         # Dimension along which to index\n    tensor_shape_0, tensor_shape_1,  # Shape of the tensor\n    index_size,  # Size of the index tensor\n    stride_0, stride_1,  # Strides of the tensor\n    BLOCK_SIZE: tl.constexpr  # Block size for parallelization\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Iterate over the elements in the block\n    for i in range(block_start, min(block_start + BLOCK_SIZE, tensor_shape_0 * tensor_shape_1)):\n        # Calculate the row and column indices\n        row = i // tensor_shape_1\n        col = i % tensor_shape_1\n\n        # Check if the current index matches any index in the index tensor\n        for j in range(index_size):\n            index_val = tl.load(index_ptr + j)\n            if (dim == 0 and row == index_val) or (dim == 1 and col == index_val):\n                # Calculate the memory address and fill the value\n                offset = row * stride_0 + col * stride_1\n                tl.store(tensor_ptr + offset, value)\n                break\n\n# Python wrapper function to call the Triton kernel\ndef index_fill_(tensor, dim, index, value):\n    # Ensure the tensor and index are on the same device\n    device = tensor.device\n    index = index.to(device)\n\n    # Get the shape and strides of the tensor\n    tensor_shape_0, tensor_shape_1 = tensor.shape\n    stride_0, stride_1 = tensor.stride()\n\n    # Get the size of the index tensor\n    index_size = index.numel()\n\n    # Define the grid and block sizes\n    grid = lambda meta: (tensor.numel() // meta['BLOCK_SIZE'],)\n    block_size = 256\n\n    # Launch the kernel\n    index_fill_kernel[grid](\n        tensor,  # Pointer to the input/output tensor\n        index,   # Pointer to the index tensor\n        value,   # The value to fill with\n        dim,     # Dimension along which to index\n        tensor_shape_0, tensor_shape_1,  # Shape of the tensor\n        index_size,  # Size of the index tensor\n        stride_0, stride_1,  # Strides of the tensor\n        BLOCK_SIZE=block_size  # Block size for parallelization\n    )\n\n# Example usage\nif __name__ == \"__main__\":\n    x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float, device='cuda')\n    index = torch.tensor([0, 2], dtype=torch.long, device='cuda')\n    value = -1.0\n    index_fill_(x, 1, index, value)\n    print(x)\n    # Expected output:\n    # tensor([[-1.,  2., -1.],\n    #         [-1.,  5., -1.],\n    #         [-1.,  8., -1.]])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining cross-entropy loss computation, softmax activation, and layer normalization. It computes the cross-entropy loss for given logits and targets, applies softmax activation to the logits, and then applies layer normalization to the resulting probabilities.\nWrapper Entry Information: fused_cross_entropy_softmax_layernorm(logits, targets, normalized_shape, weight=None, ignore_index=-100, reduction='mean', label_smoothing=0.0, eps=1e-5, *, out=None) -> Tuple[Tensor, Tensor] - logits (Tensor): Input logits of shape (N, C) or (N, C, *), where N is the batch size and C is the number of classes. - targets (Tensor): Ground truth class indices or class probabilities. If containing class indices: shape (N) or (N, *) with values 0 <= targets_i < C. If containing class probabilities: same shape as logits and values in [0, 1]. - normalized_shape (int or list or torch.Size): Input shape over which layer normalization is applied. - weight (Tensor, optional): A manual rescaling weight given to each class. If provided, must be of size C. - ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100. - reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'. - label_smoothing (float, optional): A float in [0.0, 1.0] specifying the amount of smoothing when computing the loss. Default: 0.0. - eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5. - out (Tensor, optional): Output tensor for the normalized probabilities. Ignored if None. Default: None.\nMath: Given input logits \\mathbf{z} and target labels \\mathbf{y}, the function computes:\n\n1. **Cross-Entropy Loss:**\n\nFor target class indices:\n\n\\[\nL = -\\sum_{i=1}^N \\log\\left( \\frac{e^{z_{i, y_i}}}{\\sum_{j=1}^C e^{z_{i, j}}} \\right)\n\\]\n\nFor target class probabilities:\n\n\\[\nL = -\\sum_{i=1}^N \\sum_{j=1}^C y_{i, j} \\log\\left( \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}} \\right)\n\\]\n\n2. **Softmax Activation:**\n\n\\[\n\\mathbf{p}_{i, j} = \\text{Softmax}(z_{i, j}) = \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}}\n\\]\n\n3. **Layer Normalization:**\n\n\\[\n\\mathbf{o}_i = \\frac{\\mathbf{p}_i - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \\times \\gamma + \\beta\n\\]\n\nwhere:\n\n- \\mu_i and \\sigma_i^2 are the mean and variance of \\mathbf{p}_i over the dimensions specified by `normalized_shape`.\n- \\gamma and \\beta are learnable parameters (omitted if `elementwise_affine=False`).\n- \\epsilon is a small value added for numerical stability.\nother: - The `logits` tensor should contain raw, unnormalized scores for each class.\n- The `targets` can be class indices or class probabilities matching the shape of `logits`.\n- The `normalized_shape` argument in `layer_norm` should correspond to the dimensions over which you want to apply normalization.\n- If `elementwise_affine` parameters (`weight` and `bias`) are needed in `layer_norm`, they can be defined and passed accordingly.\n- All operations support autograd for gradient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining cross-entropy loss computation, softmax activation, and layer normalization. It computes the cross-entropy loss for given logits and targets, applies softmax activation to the logits, and then applies layer normalization to the resulting probabilities.\nWrapper Entry Information: fused_cross_entropy_softmax_layernorm(logits, targets, normalized_shape, weight=None, ignore_index=-100, reduction='mean', label_smoothing=0.0, eps=1e-5, *, out=None) -> Tuple[Tensor, Tensor] - logits (Tensor): Input logits of shape (N, C) or (N, C, *), where N is the batch size and C is the number of classes. - targets (Tensor): Ground truth class indices or class probabilities. If containing class indices: shape (N) or (N, *) with values 0 <= targets_i < C. If containing class probabilities: same shape as logits and values in [0, 1]. - normalized_shape (int or list or torch.Size): Input shape over which layer normalization is applied. - weight (Tensor, optional): A manual rescaling weight given to each class. If provided, must be of size C. - ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100. - reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'. - label_smoothing (float, optional): A float in [0.0, 1.0] specifying the amount of smoothing when computing the loss. Default: 0.0. - eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5. - out (Tensor, optional): Output tensor for the normalized probabilities. Ignored if None. Default: None.\nMath: Given input logits \\mathbf{z} and target labels \\mathbf{y}, the function computes:\n\n1. **Cross-Entropy Loss:**\n\nFor target class indices:\n\n\\[\nL = -\\sum_{i=1}^N \\log\\left( \\frac{e^{z_{i, y_i}}}{\\sum_{j=1}^C e^{z_{i, j}}} \\right)\n\\]\n\nFor target class probabilities:\n\n\\[\nL = -\\sum_{i=1}^N \\sum_{j=1}^C y_{i, j} \\log\\left( \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}} \\right)\n\\]\n\n2. **Softmax Activation:**\n\n\\[\n\\mathbf{p}_{i, j} = \\text{Softmax}(z_{i, j}) = \\frac{e^{z_{i, j}}}{\\sum_{k=1}^C e^{z_{i, k}}}\n\\]\n\n3. **Layer Normalization:**\n\n\\[\n\\mathbf{o}_i = \\frac{\\mathbf{p}_i - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \\times \\gamma + \\beta\n\\]\n\nwhere:\n\n- \\mu_i and \\sigma_i^2 are the mean and variance of \\mathbf{p}_i over the dimensions specified by `normalized_shape`.\n- \\gamma and \\beta are learnable parameters (omitted if `elementwise_affine=False`).\n- \\epsilon is a small value added for numerical stability.\nother: - The `logits` tensor should contain raw, unnormalized scores for each class.\n- The `targets` can be class indices or class probabilities matching the shape of `logits`.\n- The `normalized_shape` argument in `layer_norm` should correspond to the dimensions over which you want to apply normalization.\n- If `elementwise_affine` parameters (`weight` and `bias`) are needed in `layer_norm`, they can be defined and passed accordingly.\n- All operations support autograd for gradient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_cross_entropy_softmax_layernorm_kernel(\n    logits_ptr, targets_ptr, out_ptr, loss_ptr,\n    logits_stride0, logits_stride1, targets_stride0, targets_stride1,\n    n, c, ignore_index, label_smoothing, eps,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    batch_start = pid * BLOCK_SIZE\n    batch_end = min(batch_start + BLOCK_SIZE, n)\n\n    # Load logits and targets\n    logits = tl.zeros((BLOCK_SIZE, c), dtype=tl.float32)\n    targets = tl.zeros((BLOCK_SIZE, c), dtype=tl.float32)\n    for i in range(batch_start, batch_end):\n        for j in range(c):\n            logits[i - batch_start, j] = tl.load(logits_ptr + i * logits_stride0 + j * logits_stride1)\n            if targets_ptr is not None:\n                targets[i - batch_start, j] = tl.load(targets_ptr + i * targets_stride0 + j * targets_stride1)\n\n    # Apply label smoothing\n    if label_smoothing > 0.0:\n        targets = (1.0 - label_smoothing) * targets + label_smoothing / c\n\n    # Compute softmax\n    logits_max = tl.max(logits, axis=1)\n    logits = logits - logits_max[:, None]\n    exp_logits = tl.exp(logits)\n    sum_exp_logits = tl.sum(exp_logits, axis=1)\n    softmax_probs = exp_logits / sum_exp_logits[:, None]\n\n    # Compute cross-entropy loss\n    loss = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(batch_start, batch_end):\n        if targets_ptr is not None:\n            loss[i - batch_start] = -tl.sum(targets[i - batch_start] * tl.log(softmax_probs[i - batch_start]))\n        else:\n            target_idx = tl.load(targets_ptr + i * targets_stride0)\n            if target_idx != ignore_index:\n                loss[i - batch_start] = -tl.log(softmax_probs[i - batch_start, target_idx])\n\n    # Layer normalization\n    mean = tl.sum(softmax_probs, axis=1) / c\n    var = tl.sum((softmax_probs - mean[:, None]) ** 2, axis=1) / c\n    inv_std = 1.0 / tl.sqrt(var + eps)\n    normalized_probs = (softmax_probs - mean[:, None]) * inv_std[:, None]\n\n    # Store results\n    for i in range(batch_start, batch_end):\n        for j in range(c):\n            tl.store(out_ptr + i * logits_stride0 + j * logits_stride1, normalized_probs[i - batch_start, j])\n        tl.store(loss_ptr + i, loss[i - batch_start])\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_cross_entropy_softmax_layernorm(\n    logits, targets, normalized_shape, weight=None, ignore_index=-100, reduction='mean', label_smoothing=0.0, eps=1e-5, out=None\n):\n    # Validate inputs\n    if logits.dim() < 2:\n        raise ValueError(\"Logits must have at least 2 dimensions\")\n    if targets.dim() < 1:\n        raise ValueError(\"Targets must have at least 1 dimension\")\n    if logits.size(0) != targets.size(0):\n        raise ValueError(\"Logits and targets must have the same batch size\")\n    if targets.dim() == 1 and logits.size(1) != targets.size(1):\n        raise ValueError(\"For class indices, targets must have the same number of classes as logits\")\n    if targets.dim() > 1 and logits.shape != targets.shape:\n        raise ValueError(\"For class probabilities, targets must have the same shape as logits\")\n\n    # Prepare output tensors\n    if out is None:\n        out = torch.empty_like(logits)\n    loss = torch.empty(logits.size(0), device=logits.device, dtype=logits.dtype)\n\n    # Launch Triton kernel\n    grid = (logits.size(0),)\n    block = (128,)\n    fused_cross_entropy_softmax_layernorm_kernel[grid, block](\n        logits, targets, out, loss,\n        logits.stride(0), logits.stride(1), targets.stride(0), targets.stride(1),\n        logits.size(0), logits.size(1), ignore_index, label_smoothing, eps,\n        BLOCK_SIZE=128\n    )\n\n    # Apply reduction\n    if reduction == 'mean':\n        loss = loss.mean()\n    elif reduction == 'sum':\n        loss = loss.sum()\n\n    return out, loss\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the mean value of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. keepdim (bool): whether the output tensor has dim retained or not. dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): the output tensor.\nother: See also torch.nanmean which computes the mean value of non-NaN elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function normalizes each row of the input tensor and writes the result to the output tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, and calls the kernel function. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the mean value of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. keepdim (bool): whether the output tensor has dim retained or not. dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): the output tensor.\nother: See also torch.nanmean which computes the mean value of non-NaN elements.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_kernel(output_ptr, input_ptr, input_shape, input_strides, output_strides, reduce_dims, num_reduce_dims: tl.constexpr,\n                BLOCK_SIZE: tl.constexpr, num_stages: tl.constexpr):\n    # Calculate the total number of elements in the input tensor\n    total_elements = 1\n    for dim in range(len(input_shape)):\n        total_elements *= input_shape[dim]\n\n    # Calculate the starting index for the program\n    pid = tl.program_id(0)\n    num_programs = tl.num_programs(0)\n    start_idx = pid * BLOCK_SIZE\n    end_idx = min(start_idx + BLOCK_SIZE, total_elements)\n\n    # Initialize the sum and count for the mean calculation\n    sum_val = tl.zeros((1,), dtype=tl.float32)\n    count = 0\n\n    # Iterate over the elements in the block\n    for idx in range(start_idx, end_idx):\n        # Calculate the multi-dimensional index from the linear index\n        multi_idx = [0] * len(input_shape)\n        remaining = idx\n        for dim in range(len(input_shape) - 1, -1, -1):\n            multi_idx[dim] = remaining % input_shape[dim]\n            remaining //= input_shape[dim]\n\n        # Check if the current index is in the reduction dimensions\n        in_reduce_dim = False\n        for reduce_dim in range(num_reduce_dims):\n            if multi_idx[reduce_dims[reduce_dim]] == 0:\n                in_reduce_dim = True\n                break\n\n        if in_reduce_dim:\n            continue\n\n        # Load the element from the input tensor\n        input_offset = 0\n        for dim in range(len(input_shape)):\n            input_offset += multi_idx[dim] * input_strides[dim]\n        element = tl.load(input_ptr + input_offset)\n\n        # Accumulate the sum and count\n        sum_val += element\n        count += 1\n\n    # Calculate the mean\n    mean_val = sum_val / count\n\n    # Calculate the output index\n    output_idx = 0\n    for dim in range(len(input_shape)):\n        if dim not in reduce_dims:\n            output_idx += multi_idx[dim] * output_strides[dim]\n\n    # Store the result in the output tensor\n    tl.store(output_ptr + output_idx, mean_val)\n\ndef mean(input, dim, keepdim=False, dtype=None, out=None):\n    if dtype is not None:\n        input = input.to(dtype)\n\n    input_shape = input.shape\n    input_strides = input.stride()\n    input_numel = input.numel()\n\n    if isinstance(dim, int):\n        dim = [dim]\n    reduce_dims = dim\n    num_reduce_dims = len(reduce_dims)\n\n    # Calculate the output shape\n    output_shape = list(input_shape)\n    for d in reduce_dims:\n        if not keepdim:\n            output_shape[d] = 1\n    output_shape = [s for s in output_shape if s != 1]\n\n    # Allocate the output tensor\n    if out is None:\n        out = torch.empty(output_shape, device=input.device, dtype=input.dtype)\n    else:\n        assert out.shape == output_shape, \"Output tensor shape mismatch\"\n        assert out.device == input.device, \"Output tensor device mismatch\"\n        assert out.dtype == input.dtype, \"Output tensor dtype mismatch\"\n\n    # Calculate the output strides\n    output_strides = [0] * len(output_shape)\n    stride = 1\n    for i in range(len(output_shape) - 1, -1, -1):\n        output_strides[i] = stride\n        stride *= output_shape[i]\n\n    # Determine the block size\n    BLOCK_SIZE = 1024\n\n    # Number of software pipelining stages\n    num_stages = 4\n\n    # Launch the kernel\n    grid = (input_numel // BLOCK_SIZE + (input_numel % BLOCK_SIZE > 0),)\n    mean_kernel[grid](\n        out.data_ptr(),\n        input.data_ptr(),\n        input_shape,\n        input_strides,\n        output_strides,\n        reduce_dims,\n        num_reduce_dims,\n        BLOCK_SIZE,\n        num_stages\n    )\n\n    return out\n\n# Example usage\ninput_tensor = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32, device='cuda')\noutput_tensor = mean(input_tensor, dim=1, keepdim=True)\nprint(output_tensor)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the eigenvalue decomposition of a square matrix if it exists. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned eigenvalues are not guaranteed to be in any specific order. The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nWrapper Entry Information: def linalg.eig(A, *, out=None) -> (Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of diagonalizable matrices. Keyword args: out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = V \\operatorname{diag}(\\Lambda) V^{-1}\\mathrlap{\\qquad V \\in \\mathbb{C}^{n \\times n}, \\Lambda \\in \\mathbb{C}^n}\nother: The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the eigenvalue decomposition of a square matrix if it exists. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The returned eigenvalues are not guaranteed to be in any specific order. The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nWrapper Entry Information: def linalg.eig(A, *, out=None) -> (Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of diagonalizable matrices. Keyword args: out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = V \\operatorname{diag}(\\Lambda) V^{-1}\\mathrlap{\\qquad V \\in \\mathbb{C}^{n \\times n}, \\Lambda \\in \\mathbb{C}^n}\nother: The eigenvalues and eigenvectors of a real matrix may be complex. When inputs are on a CUDA device, this function synchronizes that device with the CPU. Assumes that A is diagonalizable. The returned eigenvectors are normalized to have norm 1. The eigenvectors of a matrix are not unique, nor are they continuous with respect to A. Gradients computed using the eigenvectors tensor will only be finite when A has distinct eigenvalues.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nimport torch.cuda as cuda\nimport torch.linalg as linalg\n\n# Triton kernel for eigenvalue decomposition\n@triton.jit\ndef eig_kernel(A_ptr, eigenvalues_ptr, eigenvectors_ptr, n, batch_size, BLOCK_SIZE: tl.constexpr):\n    # Get the batch index\n    batch_idx = tl.program_id(0)\n    if batch_idx < batch_size:\n        # Compute the offset for the current batch\n        A_offset = batch_idx * n * n\n        eigenvalues_offset = batch_idx * n\n        eigenvectors_offset = batch_idx * n * n\n\n        # Load the matrix A\n        A = tl.load(A_ptr + A_offset, (n, n))\n\n        # Compute eigenvalues and eigenvectors using cuSOLVER\n        eigenvalues, eigenvectors = linalg.eig(A)\n\n        # Store the results\n        tl.store(eigenvalues_ptr + eigenvalues_offset, eigenvalues)\n        tl.store(eigenvectors_ptr + eigenvectors_offset, eigenvectors)\n\n# Wrapper function for eigenvalue decomposition\ndef linalg_eig(A, *, out=None):\n    # Check input tensor shape and dtype\n    if A.dim() < 2 or A.shape[-2] != A.shape[-1]:\n        raise ValueError(\"Input tensor must be of shape (*, n, n) where * is zero or more batch dimensions.\")\n    if A.dtype not in [torch.float32, torch.float64, torch.complex64, torch.complex128]:\n        raise ValueError(\"Input tensor must have dtype float, double, cfloat, or cdouble.\")\n\n    # Determine batch size and matrix size\n    batch_size = A.shape[:-2] if A.dim() > 2 else 1\n    n = A.shape[-1]\n\n    # Allocate output tensors if not provided\n    if out is None:\n        eigenvalues = torch.empty(batch_size + (n,), dtype=A.dtype, device=A.device)\n        eigenvectors = torch.empty(batch_size + (n, n), dtype=A.dtype, device=A.device)\n    else:\n        eigenvalues, eigenvectors = out\n        if eigenvalues.shape != batch_size + (n,) or eigenvectors.shape != batch_size + (n, n):\n            raise ValueError(\"Output tensors must have the correct shape.\")\n        if eigenvalues.dtype != A.dtype or eigenvectors.dtype != A.dtype:\n            raise ValueError(\"Output tensors must have the same dtype as the input tensor.\")\n\n    # Determine block size\n    BLOCK_SIZE = 128\n\n    # Launch the kernel\n    grid = (batch_size, 1, 1)\n    eig_kernel[grid](A, eigenvalues, eigenvectors, n, batch_size, BLOCK_SIZE=BLOCK_SIZE)\n\n    # Synchronize the device with the CPU\n    cuda.synchronize()\n\n    return eigenvalues, eigenvectors\n\n# Example usage\nif __name__ == \"__main__\":\n    A = torch.randn(2, 3, 3, dtype=torch.float32, device=\"cuda\")\n    eigenvalues, eigenvectors = linalg_eig(A)\n    print(\"Eigenvalues:\", eigenvalues)\n    print(\"Eigenvectors:\", eigenvectors)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the logarithm of the sum of exponentials of input elements along the specified dimension. It is useful for numerical stability when computing log probabilities.\nWrapper Entry Information: def logsumexp(input, dim, keepdim=False, *, out=None) -> Tensor\nMath: logsumexp(x) = log(sum(exp(x)))\nother: Alias for torch.logsumexp.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the logarithm of the sum of exponentials of input elements along the specified dimension. It is useful for numerical stability when computing log probabilities.\nWrapper Entry Information: def logsumexp(input, dim, keepdim=False, *, out=None) -> Tensor\nMath: logsumexp(x) = log(sum(exp(x)))\nother: Alias for torch.logsumexp.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, stride_x, stride_dim, stride_out, N, BLOCK_N: tl.constexpr):\n    pid = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + pid * stride_x + rn * stride_dim\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    tl.store(OUT + pid * stride_out, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input, dim, keepdim=False, *, out=None) -> torch.Tensor:\n    assert input.is_cuda, \"Input tensor must be on a CUDA device.\"\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    if out is None:\n        out_shape = (*dims, 1) if keepdim else (*dims,)\n        out = input.new_empty(out_shape)\n    else:\n        assert out.is_cuda, \"Output tensor must be on a CUDA device.\"\n        assert out.shape == (*dims, 1) if keepdim else (*dims,), \"Output tensor shape mismatch.\"\n    \n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    \n    if keepdim:\n        out = out.view(*dims, 1)\n    else:\n        out = out.view(*dims)\n    \n    return out\n\n# Example usage\nif __name__ == \"__main__\":\n    x = torch.randn((32, 64), device='cuda')\n    result = logsumexp(x, dim=1, keepdim=True)\n    print(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining embedding lookup, element-wise addition, and tanh activation. The function retrieves embeddings from an embedding matrix using input indices, adds another tensor to these embeddings, and applies a tanh activation function to the result. It supports options for padding indices, max norm for embeddings, scaling gradients by frequency, and sparse gradients.\nWrapper Entry Information: fused_embedding_add_tanh(input_indices, weight, other, *, padding_idx=None, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, sparse=False, out=None) -> Tensor; input_indices (LongTensor): Tensor containing indices into the embedding matrix, of arbitrary shape (*); weight (Tensor): The embedding matrix of shape (V, D), where V is the number of embeddings (vocabulary size), and D is the embedding dimension; other (Tensor): Tensor to be added to the embeddings, must be broadcastable to the shape of E; padding_idx (int, optional): If specified, the entries at `padding_idx` do not contribute to the gradient; max_norm (float, optional): If given, each embedding vector with norm larger than `max_norm` is renormalized to have norm `max_norm`; norm_type (float, optional): The p-norm to compute for the `max_norm` option. Default: `2.0`; scale_grad_by_freq (bool, optional): If `True`, scale gradients by the inverse of frequency of the words in the mini-batch. Default: `False`; sparse (bool, optional): If `True`, gradient w.r.t. `weight` will be a sparse tensor. Default: `False`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given input indices \\mathbf{i}, embedding weight matrix W, and tensor O, the function computes:\n\\[\n\\begin{align*}\nE &= \\text{Embedding}(\\mathbf{i}, W) \\\\\nS &= E + O \\\\\nY &= \\tanh(S)\n\\end{align*}\n\\]\nother: - The `other` tensor must be broadcastable to the shape of the embeddings retrieved by `torch.nn.functional.embedding`.\n- All parameters related to `torch.nn.functional.embedding` are passed through to allow for options like `padding_idx`, `max_norm`, etc.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement kernels for embedding operations in neural networks. The kernels are designed to handle forward and backward passes for embeddings with options for scaling gradients by frequency and handling padding indices. The embedding_kernel has parameters: output pointer, input pointer, weights pointer, number of columns in X, and block size. The indice_freq_kernel calculates the frequency of indices with parameters: indices frequency pointer, input pointer, element count, and block size. The embedding_backward_kernel computes gradients with parameters: gradient input pointer, gradient output pointer, input indices pointer, padding index, flag for padding index, number of columns in X, and block size. Lastly, embedding_grad_scale_kernel scales the gradient based on frequency with parameters: gradient output pointer, indices frequency pointer, number of rows, number of columns in X, and block size. import torch\nimport triton\nimport triton.language as tl\n\n\n@triton.jit\ndef embedding_kernel(\n    out_ptr,  # pointer to the output\n    in_ptr,  # pointer to the input\n    weight_ptr,  # pointer to the weights\n    N: tl.constexpr,  # number of columns in X\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    out_ptr += pid * N\n    in_ptr += pid\n\n    mask = tl.arange(0, BLOCK_SIZE) < N\n    cols = tl.arange(0, BLOCK_SIZE)\n\n    row_idx = tl.load(in_ptr)\n    weight_ptr += row_idx * N\n    embedding_weight = tl.load(weight_ptr + cols, mask, other=0.0)\n    tl.store(out_ptr + cols, embedding_weight, mask)\n\n\n@triton.jit\ndef indice_freq_kernel(\n    indices_freq,\n    indices,  # pointer to the input\n    elem_cnt: tl.constexpr,  # number of columns in X\n    INDICE_BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    block_start = pid * INDICE_BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, INDICE_BLOCK_SIZE)\n    mask = offsets < elem_cnt\n\n    index_element = tl.load(indices + offsets, mask=mask)\n    tl.atomic_add(indices_freq + index_element, 1, mask=mask)\n\n\n@triton.jit(do_not_specialize=[\"padding_idx\"])\ndef embedding_backward_kernel(\n    grad_in,  # pointer to the gradient input\n    grad_out,  # pointer to the gradient output\n    indices,  # pointer to the input\n    padding_idx,  # padding_idx\n    HAS_PADDING_IDX: tl.constexpr,\n    N: tl.constexpr,  # number of columns in X\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    grad_out += pid * N\n    indices += pid\n\n    mask = tl.arange(0, BLOCK_SIZE) < N\n    cols = tl.arange(0, BLOCK_SIZE)\n\n    row_idx = tl.load(indices).to(tl.int32)\n    if not HAS_PADDING_IDX:\n        grad_in += row_idx * N\n        embedding_grad = tl.load(grad_out + cols, mask, other=0.0)\n        tl.atomic_add(grad_in + cols, embedding_grad, mask=mask)\n    else:\n        if row_idx != padding_idx:\n            grad_in += row_idx * N\n            embedding_grad = tl.load(grad_out + cols, mask, other=0.0)\n            tl.atomic_add(grad_in + cols, embedding_grad, mask=mask)\n\n\n@triton.jit(do_not_specialize=[\"n_rows\"])\ndef embedding_grad_scale_kernel(\n    grad_out,\n    indice_freq,\n    n_rows,\n    N,\n    BLOCK_SIZE: tl.constexpr,\n):\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n\n    for row_idx in range(row_start, n_rows, row_step):\n        embedding_scale = 1.0\n        indice_freq_val = tl.load(indice_freq + row_idx)\n        if indice_freq_val > 1:\n            embedding_scale = 1.0 / indice_freq_val\n\n        cols = tl.arange(0, BLOCK_SIZE)\n        mask = tl.arange(0, BLOCK_SIZE) < N\n        embedding_grad = tl.load(grad_out + row_idx * N + cols, mask=mask)\n        scaled_embedding_grad = embedding_grad * embedding_scale\n        tl.store(grad_out + row_idx * N + cols, scaled_embedding_grad, mask=mask)\n\n\nclass Embedding(torch.autograd.Function):\n    @staticmethod\n    def forward(\n        ctx, weight, indices, padding_idx=-1, scale_grad_by_freq=False, sparse=False\n    ):\n        M = math.prod(indices.shape)\n        N = weight.shape[-1]\n\n        BLOCK_SIZE = triton.next_power_of_2(N)\n        indices = indices.contiguous()\n        weight = weight.contiguous()\n        output = torch.empty(\n            (*indices.shape, N), device=indices.device, dtype=weight.dtype\n        )\n\n        with torch.cuda.device(weight.device):\n            embedding_kernel[M,](output, indices, weight, N, BLOCK_SIZE)\n\n        ctx.M = M\n        ctx.N = N\n        ctx.num_weights = weight.shape[0]\n        ctx.padding_idx = padding_idx\n        ctx.scale_grad_by_freq = scale_grad_by_freq\n        ctx.sparse = sparse\n        ctx.indices = indices\n\n        return output\n\n    @staticmethod\n    def backward(ctx, grad_outputs):\n        grad_inputs = torch.zeros(\n            (ctx.num_weights, grad_outputs.shape[-1]),\n            device=grad_outputs.device,\n            dtype=grad_outputs.dtype,\n        )\n\n        if ctx.scale_grad_by_freq:\n            indice_freq = torch.zeros(\n                (ctx.num_weights,),\n                requires_grad=False,\n                device=grad_outputs.device,\n                dtype=torch.int32,\n            )\n            INDICE_BLOCK_SIZE = 256\n            indice_grid = lambda meta: (triton.cdiv(ctx.M, INDICE_BLOCK_SIZE),)\n\n            with torch.cuda.device(grad_outputs.device):\n                indice_freq_kernel[indice_grid](\n                    indice_freq, ctx.indices, ctx.M, INDICE_BLOCK_SIZE\n                )\n        else:\n            indice_freq = None\n\n        BLOCK_SIZE = triton.next_power_of_2(ctx.N)\n\n        HAS_PADDING_IDX = ctx.padding_idx is not None\n\n        with torch.cuda.device(grad_outputs.device):\n            embedding_backward_kernel[ctx.M,](\n                grad_inputs,\n                grad_outputs,\n                ctx.indices,\n                ctx.padding_idx,\n                HAS_PADDING_IDX,\n                ctx.N,\n                BLOCK_SIZE,\n            )\n\n        if ctx.scale_grad_by_freq:\n            with torch.cuda.device(grad_outputs.device):\n                embedding_grad_scale_kernel[ctx.M,](\n                    grad_inputs, indice_freq, ctx.num_weights, ctx.N, BLOCK_SIZE\n                )\n        return grad_inputs, None, None, None, None\n\n\ndef embedding(weight, indices, padding_idx=-1, scale_grad_by_freq=False, sparse=False):\n    return Embedding.apply(weight, indices, padding_idx, scale_grad_by_freq, sparse)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining embedding lookup, element-wise addition, and tanh activation. The function retrieves embeddings from an embedding matrix using input indices, adds another tensor to these embeddings, and applies a tanh activation function to the result. It supports options for padding indices, max norm for embeddings, scaling gradients by frequency, and sparse gradients.\nWrapper Entry Information: fused_embedding_add_tanh(input_indices, weight, other, *, padding_idx=None, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, sparse=False, out=None) -> Tensor; input_indices (LongTensor): Tensor containing indices into the embedding matrix, of arbitrary shape (*); weight (Tensor): The embedding matrix of shape (V, D), where V is the number of embeddings (vocabulary size), and D is the embedding dimension; other (Tensor): Tensor to be added to the embeddings, must be broadcastable to the shape of E; padding_idx (int, optional): If specified, the entries at `padding_idx` do not contribute to the gradient; max_norm (float, optional): If given, each embedding vector with norm larger than `max_norm` is renormalized to have norm `max_norm`; norm_type (float, optional): The p-norm to compute for the `max_norm` option. Default: `2.0`; scale_grad_by_freq (bool, optional): If `True`, scale gradients by the inverse of frequency of the words in the mini-batch. Default: `False`; sparse (bool, optional): If `True`, gradient w.r.t. `weight` will be a sparse tensor. Default: `False`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given input indices \\mathbf{i}, embedding weight matrix W, and tensor O, the function computes:\n\\[\n\\begin{align*}\nE &= \\text{Embedding}(\\mathbf{i}, W) \\\\\nS &= E + O \\\\\nY &= \\tanh(S)\n\\end{align*}\n\\]\nother: - The `other` tensor must be broadcastable to the shape of the embeddings retrieved by `torch.nn.functional.embedding`.\n- All parameters related to `torch.nn.functional.embedding` are passed through to allow for options like `padding_idx`, `max_norm`, etc.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef embedding_kernel(\n    out_ptr,  # pointer to the output\n    in_ptr,  # pointer to the input indices\n    weight_ptr,  # pointer to the weights\n    other_ptr,  # pointer to the other tensor\n    N: tl.constexpr,  # number of columns in the embedding matrix\n    BLOCK_SIZE: tl.constexpr,\n    max_norm: tl.float32,  # maximum norm for renormalization\n    norm_type: tl.float32,  # p-norm type\n):\n    pid = tl.program_id(0)\n    out_ptr += pid * N\n    in_ptr += pid\n\n    mask = tl.arange(0, BLOCK_SIZE) < N\n    cols = tl.arange(0, BLOCK_SIZE)\n\n    row_idx = tl.load(in_ptr)\n    weight_ptr += row_idx * N\n    embedding_weight = tl.load(weight_ptr + cols, mask, other=0.0)\n\n    # Renormalize if max_norm is provided\n    if max_norm > 0:\n        norm = tl.norm(embedding_weight, norm_type)\n        if norm > max_norm:\n            embedding_weight = embedding_weight * (max_norm / norm)\n\n    other_value = tl.load(other_ptr + cols, mask, other=0.0)\n    sum_value = embedding_weight + other_value\n    tanh_value = tl.tanh(sum_value)\n    tl.store(out_ptr + cols, tanh_value, mask)\n\n@triton.jit\ndef embedding_backward_kernel(\n    grad_in,  # pointer to the gradient input\n    grad_out,  # pointer to the gradient output\n    indices,  # pointer to the input indices\n    other,  # pointer to the other tensor\n    padding_idx,  # padding_idx\n    max_norm: tl.float32,  # maximum norm for renormalization\n    norm_type: tl.float32,  # p-norm type\n    HAS_PADDING_IDX: tl.constexpr,\n    N: tl.constexpr,  # number of columns in the embedding matrix\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(0)\n    grad_out += pid * N\n    indices += pid\n\n    mask = tl.arange(0, BLOCK_SIZE) < N\n    cols = tl.arange(0, BLOCK_SIZE)\n\n    row_idx = tl.load(indices).to(tl.int32)\n    if not HAS_PADDING_IDX or row_idx != padding_idx:\n        grad_in += row_idx * N\n        other_value = tl.load(other + cols, mask, other=0.0)\n        embedding_grad = tl.load(grad_out + cols, mask, other=0.0)\n\n        # Renormalize if max_norm is provided\n        if max_norm > 0:\n            norm = tl.norm(embedding_grad, norm_type)\n            if norm > max_norm:\n                embedding_grad = embedding_grad * (max_norm / norm)\n\n        tl.atomic_add(grad_in + cols, embedding_grad, mask=mask)\n\nclass FusedEmbeddingAddTanh(torch.autograd.Function):\n    @staticmethod\n    def forward(\n        ctx,\n        input_indices,\n        weight,\n        other,\n        padding_idx=-1,\n        max_norm=None,\n        norm_type=2.0,\n        scale_grad_by_freq=False,\n        sparse=False,\n        out=None\n    ):\n        M = input_indices.numel()\n        N = weight.shape[-1]\n\n        BLOCK_SIZE = triton.next_power_of_2(N)\n        input_indices = input_indices.contiguous()\n        weight = weight.contiguous()\n        other = other.contiguous()\n\n        if out is None:\n            out = torch.empty(\n                (*input_indices.shape, N), device=input_indices.device, dtype=weight.dtype\n            )\n\n        with torch.cuda.device(weight.device):\n            embedding_kernel[M,](\n                out, input_indices, weight, other, N, BLOCK_SIZE, max_norm or 0, norm_type\n            )\n\n        ctx.save_for_backward(input_indices, weight, other)\n        ctx.padding_idx = padding_idx\n        ctx.max_norm = max_norm\n        ctx.norm_type = norm_type\n        ctx.scale_grad_by_freq = scale_grad_by_freq\n        ctx.sparse = sparse\n\n        return out\n\n    @staticmethod\n    def backward(ctx, grad_outputs):\n        input_indices, weight, other = ctx.saved_tensors\n        grad_inputs = torch.zeros_like(weight)\n\n        if ctx.scale_grad_by_freq:\n            indice_freq = torch.zeros(\n                (weight.shape[0],),\n                requires_grad=False,\n                device=grad_outputs.device,\n                dtype=torch.int32,\n            )\n            INDICE_BLOCK_SIZE = 256\n            indice_grid = lambda meta: (triton.cdiv(input_indices.numel(), INDICE_BLOCK_SIZE),)\n\n            with torch.cuda.device(grad_outputs.device):\n                indice_freq_kernel[indice_grid](\n                    indice_freq, input_indices, input_indices.numel(), INDICE_BLOCK_SIZE\n                )\n        else:\n            indice_freq = None\n\n        BLOCK_SIZE = triton.next_power_of_2(weight.shape[-1])\n        HAS_PADDING_IDX = ctx.padding_idx is not None\n\n        with torch.cuda.device(grad_outputs.device):\n            embedding_backward_kernel[input_indices.numel(),](\n                grad_inputs,\n                grad_outputs,\n                input_indices,\n                other,\n                ctx.padding_idx,\n                ctx.max_norm or 0,\n                ctx.norm_type,\n                HAS_PADDING_IDX,\n                weight.shape[-1],\n                BLOCK_SIZE,\n            )\n\n        if ctx.scale_grad_by_freq:\n            with torch.cuda.device(grad_outputs.device):\n                embedding_grad_scale_kernel[weight.shape[0],](\n                    grad_inputs, indice_freq, weight.shape[0], weight.shape[-1], BLOCK_SIZE\n                )\n\n        return None, grad_inputs, None, None, None, None, None, None, None\n\ndef fused_embedding_add_tanh(\n    input_indices,\n    weight,\n    other,\n    *,\n    padding_idx=None,\n    max_norm=None,\n    norm_type=2.0,\n    scale_grad_by_freq=False,\n    sparse=False,\n    out=None\n):\n    return FusedEmbeddingAddTanh.apply(\n        input_indices, weight, other, padding_idx, max_norm, norm_type, scale_grad_by_freq, sparse, out\n    )\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, sigmoid activation, and subtraction.\nWrapper Entry Information: fused_mv_sigmoid_sub(input, vec, other, alpha=1, *, out=None) -> Tensor; input (Tensor): Input matrix A of shape (n, m); vec (Tensor): Input vector \\mathbf{v} of shape (m); other (Tensor or Number): Tensor or scalar b to subtract from the sigmoid output, scaled by \\alpha; alpha (Number, optional): Scalar multiplier for other. Default: `1`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given an input matrix A, a vector \\mathbf{v}, and another tensor or scalar b, the function computes:\n\\[\n\\begin{align*}\n\\mathbf{z} &= A \\mathbf{v} \\\\\n\\mathbf{s} &= \\sigma(\\mathbf{z}) = \\frac{1}{1 + \\exp(-\\mathbf{z})} \\\\\n\\mathbf{y} &= \\mathbf{s} - \\alpha b\n\\end{align*}\n\\]\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication.\n- The `other` tensor must be broadcastable to the shape of the output from the sigmoid function.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining matrix-vector multiplication, sigmoid activation, and subtraction.\nWrapper Entry Information: fused_mv_sigmoid_sub(input, vec, other, alpha=1, *, out=None) -> Tensor; input (Tensor): Input matrix A of shape (n, m); vec (Tensor): Input vector \\mathbf{v} of shape (m); other (Tensor or Number): Tensor or scalar b to subtract from the sigmoid output, scaled by \\alpha; alpha (Number, optional): Scalar multiplier for other. Default: `1`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given an input matrix A, a vector \\mathbf{v}, and another tensor or scalar b, the function computes:\n\\[\n\\begin{align*}\n\\mathbf{z} &= A \\mathbf{v} \\\\\n\\mathbf{s} &= \\sigma(\\mathbf{z}) = \\frac{1}{1 + \\exp(-\\mathbf{z})} \\\\\n\\mathbf{y} &= \\mathbf{s} - \\alpha b\n\\end{align*}\n\\]\nother: - The shapes of `input` and `vec` must be compatible for matrix-vector multiplication.\n- The `other` tensor must be broadcastable to the shape of the output from the sigmoid function.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_mv_sigmoid_sub_kernel(\n    input_ptr,  # Pointer to the input matrix A of shape (n, m)\n    vec_ptr,    # Pointer to the input vector v of shape (m)\n    other_ptr,  # Pointer to the tensor or scalar b\n    out_ptr,    # Pointer to the output tensor\n    n,          # Number of rows in the input matrix A\n    m,          # Number of columns in the input matrix A\n    alpha,      # Scalar multiplier for other\n    BLOCK_SIZE: tl.constexpr\n):\n    # Compute the row index for the current thread\n    pid = tl.program_id(axis=0)\n    row_start = pid * BLOCK_SIZE\n\n    # Load the input matrix A and the vector v\n    input = tl.load(input_ptr + row_start * m, mask=row_start + tl.arange(0, BLOCK_SIZE) < n, other=0.0)\n    vec = tl.load(vec_ptr)\n\n    # Perform matrix-vector multiplication\n    z = tl.dot(input, vec)\n\n    # Apply the sigmoid activation\n    s = 1 / (1 + tl.exp(-z))\n\n    # Load the other tensor or scalar\n    other = tl.load(other_ptr, mask=0) * alpha\n\n    # Perform the subtraction\n    y = s - other\n\n    # Store the result\n    tl.store(out_ptr + row_start, y, mask=row_start + tl.arange(0, BLOCK_SIZE) < n)\n\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.autotune(\n    configs=[\n        triton.Config({'BLOCK_SIZE': 128}, num_warps=4),\n    ],\n    key=['n', 'm']\n)\n@triton.jit\ndef fused_mv_sigmoid_sub_kernel(\n    input_ptr,  # Pointer to the input matrix A of shape (n, m)\n    vec_ptr,    # Pointer to the input vector v of shape (m)\n    other_ptr,  # Pointer to the tensor or scalar b\n    out_ptr,    # Pointer to the output tensor\n    n,          # Number of rows in the input matrix A\n    m,          # Number of columns in the input matrix A\n    alpha,      # Scalar multiplier for other\n    BLOCK_SIZE: tl.constexpr\n):\n    # Compute the row index for the current thread\n    pid = tl.program_id(axis=0)\n    row_start = pid * BLOCK_SIZE\n\n    # Load the input matrix A and the vector v\n    input = tl.load(input_ptr + row_start * m, mask=row_start + tl.arange(0, BLOCK_SIZE) < n, other=0.0)\n    vec = tl.load(vec_ptr)\n\n    # Perform matrix-vector multiplication\n    z = tl.dot(input, vec)\n\n    # Apply the sigmoid activation\n    s = 1 / (1 + tl.exp(-z))\n\n    # Load the other tensor or scalar\n    other = tl.load(other_ptr, mask=0) * alpha\n\n    # Perform the subtraction\n    y = s - other\n\n    # Store the result\n    tl.store(out_ptr + row_start, y, mask=row_start + tl.arange(0, BLOCK_SIZE) < n)\n\ndef fused_mv_sigmoid_sub(input, vec, other, alpha=1, *, out=None):\n    # Ensure the input and vec are on the same device\n    assert input.device == vec.device, \"input and vec must be on the same device\"\n    \n    # Ensure the other tensor is a scalar or broadcastable to the output shape\n    if isinstance(other, (int, float)):\n        other = torch.tensor(other, device=input.device, dtype=input.dtype)\n    else:\n        assert other.device == input.device, \"other must be on the same device as input\"\n        assert other.shape == () or other.shape == (input.shape[0],), \"other must be a scalar or broadcastable to the output shape\"\n\n    # Ensure the shapes are compatible for matrix-vector multiplication\n    assert input.shape[1] == vec.shape[0], \"input and vec must have compatible shapes for matrix-vector multiplication\"\n\n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty(input.shape[0], device=input.device, dtype=input.dtype)\n\n    # Launch the Triton kernel\n    grid = (input.shape[0] // 128 + 1,)\n    fused_mv_sigmoid_sub_kernel[grid](\n        input, vec, other, out, input.shape[0], input.shape[1], alpha, BLOCK_SIZE=128\n    )\n\n    return out\n\n# Example inputs\ninput = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device='cuda')\nvec = torch.tensor([1.0, 1.0], device='cuda')\nother = torch.tensor(0.5, device='cuda')\nalpha = 1.0\n\n# Call the fused operation\noutput = fused_mv_sigmoid_sub(input, vec, other, alpha)\n\n# Print the output\nprint(output)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number `other`, scaled by the multiplier `alpha`, to the input tensor `input`, and then applies the Gaussian Error Linear Units (GELU) activation function to the result.\nWrapper Entry Information: def add_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{GELU}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i) where GELU is defined as: - \\text{GELU}(x) = x * \\Phi(x) when approximate is 'none', - \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3))) when approximate is 'tanh'.\nother: The GELU function is defined with two methods: an exact method using the Cumulative Distribution Function for Gaussian Distribution, and an approximate method using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the tensor or number `other`, scaled by the multiplier `alpha`, to the input tensor `input`, and then applies the Gaussian Error Linear Units (GELU) activation function to the result.\nWrapper Entry Information: def add_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{GELU}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i) where GELU is defined as: - \\text{GELU}(x) = x * \\Phi(x) when approximate is 'none', - \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3))) when approximate is 'tanh'.\nother: The GELU function is defined with two methods: an exact method using the Cumulative Distribution Function for Gaussian Distribution, and an approximate method using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for GELU using the exact method (error function)\n@triton.jit\ndef gelu_none_kernel(X, Y, alpha, OUT, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < X.shape[0]\n    x = tl.load(X + offsets, mask=mask)\n    y = tl.load(Y + offsets, mask=mask)\n    x_alpha_y = x + alpha * y\n    x_gelu = 0.5 * x_alpha_y * (1 + tl.math.erf(x_alpha_y / 1.41421356237))\n    tl.store(OUT + offsets, x_gelu, mask=mask)\n\n# Triton kernel for GELU using the tanh approximation\n@triton.jit\ndef gelu_tanh_kernel(X, Y, alpha, OUT, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < X.shape[0]\n    x = tl.load(X + offsets, mask=mask)\n    y = tl.load(Y + offsets, mask=mask)\n    x_alpha_y = x + alpha * y\n    x_gelu = 0.5 * x_alpha_y * (1 + tl.math.tanh(0.79788456 * x_alpha_y * (1 + 0.044715 * x_alpha_y * x_alpha_y)))\n    tl.store(OUT + offsets, x_gelu, mask=mask)\n\n# Wrapper function for the add_gelu operation\ndef add_gelu(input, other, alpha=1, approximate='none', out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    \n    if approximate == 'none':\n        grid = (triton.cdiv(input.numel(), 1024),)\n        gelu_none_kernel[grid](input, other, alpha, out, BLOCK_SIZE=1024)\n    elif approximate == 'tanh':\n        grid = (triton.cdiv(input.numel(), 1024),)\n        gelu_tanh_kernel[grid](input, other, alpha, out, BLOCK_SIZE=1024)\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes cosine embedding loss between two normalized tensors. This function first normalizes the inputs along the specified dimension using L2 normalization and then calculates the cosine embedding loss. The loss encourages similarity when the target is 1 and dissimilarity when the target is -1. It accepts optional parameters margin for dissimilarity control and reduction method for output aggregation.\nWrapper Entry Information: def fused_cosine_embedding_loss_with_normalization(input1: torch.Tensor, input2: torch.Tensor, target: torch.Tensor, margin: float = 0, reduction: str = 'mean') -> torch.Tensor: input1 (Tensor): First input tensor to be normalized and compared. input2 (Tensor): Second input tensor to be normalized and compared. target (Tensor): Tensor label with values 1 or -1, where 1 encourages similarity and -1 encourages dissimilarity. margin (float, optional): Margin for dissimilarity. Default: 0. reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\nother: The inputs are first L2 normalized along dimension 1 before loss calculation. The reduction parameter can be 'none', 'mean', or 'sum', with default as 'mean'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes cosine embedding loss between two normalized tensors. This function first normalizes the inputs along the specified dimension using L2 normalization and then calculates the cosine embedding loss. The loss encourages similarity when the target is 1 and dissimilarity when the target is -1. It accepts optional parameters margin for dissimilarity control and reduction method for output aggregation.\nWrapper Entry Information: def fused_cosine_embedding_loss_with_normalization(input1: torch.Tensor, input2: torch.Tensor, target: torch.Tensor, margin: float = 0, reduction: str = 'mean') -> torch.Tensor: input1 (Tensor): First input tensor to be normalized and compared. input2 (Tensor): Second input tensor to be normalized and compared. target (Tensor): Tensor label with values 1 or -1, where 1 encourages similarity and -1 encourages dissimilarity. margin (float, optional): Margin for dissimilarity. Default: 0. reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\nother: The inputs are first L2 normalized along dimension 1 before loss calculation. The reduction parameter can be 'none', 'mean', or 'sum', with default as 'mean'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef l2_normalize_kernel(input_ptr, output_ptr, n_elements, stride, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_vec = tl.load(input_ptr + offsets * stride, mask=mask)\n    \n    # Compute L2 norm\n    norm = tl.sqrt(tl.sum(input_vec * input_vec, axis=0))\n    norm = tl.where(norm == 0, 1, norm)  # Avoid division by zero\n    output_vec = input_vec / norm\n    \n    tl.store(output_ptr + offsets * stride, output_vec, mask=mask)\n\n@triton.jit\ndef cosine_embedding_loss_kernel(input1_ptr, input2_ptr, target_ptr, output_ptr, n_elements, margin, reduction, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    \n    input1_vec = tl.load(input1_ptr + offsets, mask=mask)\n    input2_vec = tl.load(input2_ptr + offsets, mask=mask)\n    target_vec = tl.load(target_ptr + offsets, mask=mask)\n    \n    # Compute cosine similarity\n    dot_product = tl.sum(input1_vec * input2_vec, axis=0)\n    norm1 = tl.sqrt(tl.sum(input1_vec * input1_vec, axis=0))\n    norm2 = tl.sqrt(tl.sum(input2_vec * input2_vec, axis=0))\n    norm1 = tl.where(norm1 == 0, 1, norm1)  # Avoid division by zero\n    norm2 = tl.where(norm2 == 0, 1, norm2)  # Avoid division by zero\n    cosine_similarity = dot_product / (norm1 * norm2)\n    \n    # Compute loss\n    loss = 1 - cosine_similarity\n    loss = tl.where(target_vec == 1, loss, tl.max(0, margin - cosine_similarity))\n    \n    if reduction == 'mean':\n        loss = tl.sum(loss) / n_elements\n    elif reduction == 'sum':\n        loss = tl.sum(loss)\n    \n    tl.store(output_ptr + offsets, loss, mask=mask)\n\nimport torch\n\ndef fused_cosine_embedding_loss_with_normalization(input1: torch.Tensor, input2: torch.Tensor, target: torch.Tensor, margin: float = 0, reduction: str = 'mean') -> torch.Tensor:\n    assert input1.shape == input2.shape, \"Input tensors must have the same shape\"\n    assert target.shape == input1.shape[:-1], \"Target tensor must have the same shape as the first dimension of input tensors\"\n    assert reduction in ['none', 'mean', 'sum'], \"Reduction must be 'none', 'mean', or 'sum'\"\n    \n    # Normalize input tensors along dimension 1\n    input1_normalized = torch.empty_like(input1)\n    input2_normalized = torch.empty_like(input2)\n    \n    grid = lambda meta: (input1.numel() // meta['BLOCK_SIZE'],)\n    l2_normalize_kernel[grid](input1, input1_normalized, input1.numel(), input1.stride(1), BLOCK_SIZE=1024)\n    l2_normalize_kernel[grid](input2, input2_normalized, input2.numel(), input2.stride(1), BLOCK_SIZE=1024)\n    \n    # Compute cosine embedding loss\n    output = torch.empty(input1.shape[:-1], device=input1.device)\n    cosine_embedding_loss_kernel[grid](input1_normalized, input2_normalized, target, output, input1.numel(), margin, reduction, BLOCK_SIZE=1024)\n    \n    if reduction == 'none':\n        return output\n    else:\n        return output.mean() if reduction == 'mean' else output.sum()\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations commonly used in transformer models, combining matrix multiplication, softmax, dropout, another matrix multiplication, layer normalization, and addition (residual connection).\nWrapper Entry Information: fused_transformer_block(input, weight1, weight2, residual, dropout_p=0.1, eps=1e-5, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_in), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_in, D_k).; weight2 (Tensor): Weight matrix of shape (D_k, D_out).; residual (Tensor): Residual tensor to be added before layer normalization, must be broadcastable to the shape of Z_4.; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1.; eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5.; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a residual tensor R, the function computes:\n\n    \\[\n    \\begin{align*}\n    Z_1 &= X W_1 \\\\\n    Z_2 &= \\text{softmax}(Z_1) \\\\\n    Z_3 &= \\text{dropout}(Z_2, p) \\\\\n    Z_4 &= Z_3 W_2 \\\\\n    Y &= \\text{LayerNorm}(Z_4 + R, \\gamma, \\beta, \\epsilon)\n    \\end{align*}\n    \\]\n\n    where:\n    - \\text{softmax}(Z) is applied along the last dimension.\n    - \\text{dropout}(Z, p) randomly zeroes elements of Z with probability p.\n    - \\text{LayerNorm} applies layer normalization with learnable parameters \\gamma and \\beta, and epsilon \\epsilon for numerical stability.\n    - R is the residual tensor added to Z_4 before layer normalization.\nother: - The dimensions of `input` and `weight1` must be compatible for matrix multiplication: the last dimension of `input` must match the first dimension of `weight1`.\n    - The output of the first matrix multiplication has shape `(*, N, D_k)`.\n    - The `softmax` is applied along the last dimension (`dim=-1`).\n    - The `dropout` is applied during training. Set `training=False` to disable dropout during evaluation.\n    - The `layer_norm` is applied over the last dimension of the input tensor.\n    - The `residual` tensor must be broadcastable to the shape of `z4`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations commonly used in transformer models, combining matrix multiplication, softmax, dropout, another matrix multiplication, layer normalization, and addition (residual connection).\nWrapper Entry Information: fused_transformer_block(input, weight1, weight2, residual, dropout_p=0.1, eps=1e-5, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_in), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_in, D_k).; weight2 (Tensor): Weight matrix of shape (D_k, D_out).; residual (Tensor): Residual tensor to be added before layer normalization, must be broadcastable to the shape of Z_4.; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1.; eps (float, optional): A value added to the denominator for numerical stability in layer normalization. Default: 1e-5.; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a residual tensor R, the function computes:\n\n    \\[\n    \\begin{align*}\n    Z_1 &= X W_1 \\\\\n    Z_2 &= \\text{softmax}(Z_1) \\\\\n    Z_3 &= \\text{dropout}(Z_2, p) \\\\\n    Z_4 &= Z_3 W_2 \\\\\n    Y &= \\text{LayerNorm}(Z_4 + R, \\gamma, \\beta, \\epsilon)\n    \\end{align*}\n    \\]\n\n    where:\n    - \\text{softmax}(Z) is applied along the last dimension.\n    - \\text{dropout}(Z, p) randomly zeroes elements of Z with probability p.\n    - \\text{LayerNorm} applies layer normalization with learnable parameters \\gamma and \\beta, and epsilon \\epsilon for numerical stability.\n    - R is the residual tensor added to Z_4 before layer normalization.\nother: - The dimensions of `input` and `weight1` must be compatible for matrix multiplication: the last dimension of `input` must match the first dimension of `weight1`.\n    - The output of the first matrix multiplication has shape `(*, N, D_k)`.\n    - The `softmax` is applied along the last dimension (`dim=-1`).\n    - The `dropout` is applied during training. Set `training=False` to disable dropout during evaluation.\n    - The `layer_norm` is applied over the last dimension of the input tensor.\n    - The `residual` tensor must be broadcastable to the shape of `z4`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef matmul_kernel(\n    A_ptr, B_ptr, C_ptr,\n    M, N, K,\n    stride_am, stride_ak,\n    stride_bk, stride_bn,\n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid = tl.program_id(0)\n    grid_m = (M + BLOCK_SIZE_M - 1) // BLOCK_SIZE_M\n    grid_n = (N + BLOCK_SIZE_N - 1) // BLOCK_SIZE_N\n    pid_m = pid // grid_n\n    pid_n = pid % grid_n\n    rm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    rn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    rk = tl.arange(0, BLOCK_SIZE_K)\n    A = A_ptr + (rm[:, None] * stride_am + rk[None, :] * stride_ak)\n    B = B_ptr + (rk[:, None] * stride_bk + rn[None, :] * stride_bn)\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(A, mask=k + rk < K, other=0.0)\n        b = tl.load(B, mask=k + rk < K, other=0.0)\n        acc += tl.dot(a, b)\n    C = C_ptr + (rm[:, None] * stride_cm + rn[None, :] * stride_cn)\n    tl.store(C, acc, mask=rm[:, None] < M & rn[None, :] < N)\n\n@triton.jit\ndef softmax_kernel(\n    X_ptr, Y_ptr,\n    N,\n    stride_x, stride_y,\n    BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    row_start_ptr = X_ptr + row_idx * stride_x\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    X = tl.load(row_start_ptr + col_offsets, mask=col_offsets < N, other=-float('inf'))\n    max_val = tl.max(X, axis=0)\n    X = X - max_val\n    exp_X = tl.exp(X)\n    sum_exp_X = tl.sum(exp_X, axis=0)\n    softmax_X = exp_X / sum_exp_X\n    Y = Y_ptr + row_idx * stride_y\n    tl.store(Y + col_offsets, softmax_X, mask=col_offsets < N)\n\n@triton.jit\ndef dropout_kernel(\n    X_ptr, Y_ptr, dropout_p,\n    N,\n    stride_x, stride_y,\n    BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    row_start_ptr = X_ptr + row_idx * stride_x\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    X = tl.load(row_start_ptr + col_offsets, mask=col_offsets < N, other=0.0)\n    mask = tl.rand() > dropout_p\n    Y = X * mask / (1 - dropout_p)\n    Y_ptr = Y_ptr + row_idx * stride_y\n    tl.store(Y_ptr + col_offsets, Y, mask=col_offsets < N)\n\n@triton.jit\ndef layer_norm_kernel(\n    X_ptr, Y_ptr, gamma_ptr, beta_ptr, eps,\n    N,\n    stride_x, stride_y, stride_gamma, stride_beta,\n    BLOCK_SIZE: tl.constexpr\n):\n    row_idx = tl.program_id(0)\n    row_start_ptr = X_ptr + row_idx * stride_x\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    X = tl.load(row_start_ptr + col_offsets, mask=col_offsets < N, other=0.0)\n    mean = tl.sum(X, axis=0) / N\n    var = tl.sum((X - mean) * (X - mean), axis=0) / N\n    norm_X = (X - mean) / tl.sqrt(var + eps)\n    gamma = tl.load(gamma_ptr + col_offsets, mask=col_offsets < N, other=1.0)\n    beta = tl.load(beta_ptr + col_offsets, mask=col_offsets < N, other=0.0)\n    Y = norm_X * gamma + beta\n    Y_ptr = Y_ptr + row_idx * stride_y\n    tl.store(Y_ptr + col_offsets, Y, mask=col_offsets < N)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of (1 + input). This function is more accurate than torch.log for small values of input.\nWrapper Entry Information: log1p(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_i = \\log_{e} (x_i + 1)\nother: This function is more accurate than torch.log for small values of input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 6 parameters: output_ptr (pointer to output tensor), input_ptr (pointer to input tensor), input_row_stride (stride of input tensor rows), output_row_stride (stride of output tensor rows), n_cols (number of columns in the input tensor), and BLOCK_SIZE (block size for processing). The function loads a row of the input tensor, computes the softmax, and stores the result in the output tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, and launches the kernel. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row o\n    # f the input matrix\n    softmax_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of (1 + input). This function is more accurate than torch.log for small values of input.\nWrapper Entry Information: log1p(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_i = \\log_{e} (x_i + 1)\nother: This function is more accurate than torch.log for small values of input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for log1p\n@triton.jit\ndef log1p_kernel(output_ptr, input_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Compute the block index\n    pid = tl.program_id(0)\n    # Compute the block start index\n    block_start = pid * BLOCK_SIZE\n    # Create a range of offsets for the current block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to filter out out-of-bounds indices\n    mask = offsets < n_elements\n    # Load the input elements\n    input_elements = tl.load(input_ptr + offsets, mask=mask)\n    # Compute log1p\n    output_elements = tl.log1p(input_elements)\n    # Store the results\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\n# Wrapper function for log1p\ndef log1p(input, *, out=None):\n    # Get the number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    # Enqueue the kernel\n    log1p_kernel[(n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        out.data_ptr(),\n        input.data_ptr(),\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over the input tensor across each channel, followed by applying the sigmoid activation function element-wise to the normalized result. This is useful for scaling the output to a range between 0 and 1 after normalization.\nWrapper Entry Information: def sigmoid_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(N, C)` or `(N, C, L)`, where `N` is batch size, `C` is the number of features or channels, and `L` is the sequence length.\n    running_mean (Tensor): The running mean of the input channels.\n    running_var (Tensor): The running variance of the input channels.\n    weight (Tensor, optional): Learnable scaling factor for each channel, typically represented as `\u03b3`. Default: None.\n    bias (Tensor, optional): Learnable shift for each channel, typically represented as `\u03b2`. Default: None.\n    training (bool, optional): If `True`, updates running statistics; if `False`, uses them for normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability. Default: 1e-5.\nMath: \\text{out} = \\sigma\\left(\\frac{\\text{input} - \\text{mean}}{\\sqrt{\\text{var} + \\epsilon}} * \\gamma + \\beta \\right) where \\sigma(x) = \\frac{1}{1 + \\exp(-x)} is the sigmoid function.\nother: The function normalizes the input tensor using batch normalization and then applies the sigmoid activation function to scale the output between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization over the input tensor across each channel, followed by applying the sigmoid activation function element-wise to the normalized result. This is useful for scaling the output to a range between 0 and 1 after normalization.\nWrapper Entry Information: def sigmoid_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(N, C)` or `(N, C, L)`, where `N` is batch size, `C` is the number of features or channels, and `L` is the sequence length.\n    running_mean (Tensor): The running mean of the input channels.\n    running_var (Tensor): The running variance of the input channels.\n    weight (Tensor, optional): Learnable scaling factor for each channel, typically represented as `\u03b3`. Default: None.\n    bias (Tensor, optional): Learnable shift for each channel, typically represented as `\u03b2`. Default: None.\n    training (bool, optional): If `True`, updates running statistics; if `False`, uses them for normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability. Default: 1e-5.\nMath: \\text{out} = \\sigma\\left(\\frac{\\text{input} - \\text{mean}}{\\sqrt{\\text{var} + \\epsilon}} * \\gamma + \\beta \\right) where \\sigma(x) = \\frac{1}{1 + \\exp(-x)} is the sigmoid function.\nother: The function normalizes the input tensor using batch normalization and then applies the sigmoid activation function to scale the output between 0 and 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef batch_norm_kernel(\n    input_ptr, running_mean_ptr, running_var_ptr, weight_ptr, bias_ptr,\n    output_ptr, N, C, L, training, momentum, eps,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_L: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    batch_size = N\n    num_channels = C\n    seq_length = L\n\n    # Compute the block indices\n    block_n = pid // (num_channels * seq_length)\n    block_c = (pid % (num_channels * seq_length)) // seq_length\n    block_l = (pid % (num_channels * seq_length)) % seq_length\n\n    # Compute the offsets for the input and output\n    input_offset = block_n * num_channels * seq_length + block_c * seq_length + block_l\n    output_offset = block_n * num_channels * seq_length + block_c * seq_length + block_l\n\n    # Load the input and running statistics\n    input = tl.load(input_ptr + input_offset)\n    running_mean = tl.load(running_mean_ptr + block_c)\n    running_var = tl.load(running_var_ptr + block_c)\n\n    # Load the weight and bias if they are provided\n    weight = tl.load(weight_ptr + block_c) if weight_ptr is not None else 1.0\n    bias = tl.load(bias_ptr + block_c) if bias_ptr is not None else 0.0\n\n    # Compute the normalized value\n    normalized = (input - running_mean) * tl.rsqrt(running_var + eps)\n    normalized = normalized * weight + bias\n\n    # Apply the sigmoid activation function\n    output = 1.0 / (1.0 + tl.exp(-normalized))\n\n    # Store the output\n    tl.store(output_ptr + output_offset, output)\n\n    # Update running statistics if in training mode\n    if training:\n        # Compute the mean and variance of the current batch\n        batch_mean = tl.sum(input, axis=1) / seq_length\n        batch_var = tl.sum((input - batch_mean) ** 2, axis=1) / seq_length\n\n        # Update the running mean and variance\n        running_mean = (1 - momentum) * running_mean + momentum * batch_mean\n        running_var = (1 - momentum) * running_var + momentum * batch_var\n\n        # Store the updated running statistics\n        tl.store(running_mean_ptr + block_c, running_mean)\n        tl.store(running_var_ptr + block_c, running_var)\n\nimport torch\nimport triton\n\ndef sigmoid_batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-5):\n    # Ensure the input is a contiguous tensor\n    input = input.contiguous()\n    N, C = input.shape[:2]\n    L = input.shape[2] if len(input.shape) == 3 else 1\n\n    # Ensure the running_mean and running_var are contiguous\n    running_mean = running_mean.contiguous()\n    running_var = running_var.contiguous()\n\n    # Ensure the weight and bias are contiguous if provided\n    if weight is not None:\n        weight = weight.contiguous()\n    if bias is not None:\n        bias = bias.contiguous()\n\n    # Allocate output tensor\n    output = torch.empty_like(input)\n\n    # Define the grid and block sizes\n    grid = (N * C * L, 1, 1)\n    block = (1, 1, 1)\n\n    # Launch the Triton kernel\n    batch_norm_kernel[grid, block](\n        input, running_mean, running_var, weight, bias,\n        output, N, C, L, training, momentum, eps,\n        BLOCK_SIZE_N=1, BLOCK_SIZE_C=1, BLOCK_SIZE_L=1\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization followed by the Hardsigmoid activation function on the input tensor `x`. This function performs batch normalization on `x` using the specified parameters and then applies Hardsigmoid activation element-wise on the normalized output.\nWrapper Entry Information: fused_hardsigmoid_batch_norm(x: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor, weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False, momentum: float = 0.1, eps: float = 1e-5, inplace: bool = False) -> torch.Tensor: Args: x (Tensor): Input tensor for batch normalization and activation. running_mean (Tensor): The running mean buffer (persistent). running_var (Tensor): The running variance buffer (persistent). weight (Tensor, optional): Learnable weight of size C for the normalized tensor. Default: ``None`` bias (Tensor, optional): Learnable bias of size C for the normalized tensor. Default: ``None`` training (bool, optional): Flag for training mode, used to update running estimates. Default: ``False`` momentum (float, optional): The value for the running mean and variance momentum. Default: ``0.1`` eps (float, optional): Small constant added to variance to improve numerical stability. Default: ``1e-5`` inplace (bool, optional): If ``True``, perform Hardsigmoid in-place. Default: ``False``\nother: The function includes optional parameters for learnable weight and bias, a training flag to update running estimates, momentum for running mean and variance, a small constant `eps` for numerical stability, and an `inplace` option for Hardsigmoid.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization followed by the Hardsigmoid activation function on the input tensor `x`. This function performs batch normalization on `x` using the specified parameters and then applies Hardsigmoid activation element-wise on the normalized output.\nWrapper Entry Information: fused_hardsigmoid_batch_norm(x: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor, weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False, momentum: float = 0.1, eps: float = 1e-5, inplace: bool = False) -> torch.Tensor: Args: x (Tensor): Input tensor for batch normalization and activation. running_mean (Tensor): The running mean buffer (persistent). running_var (Tensor): The running variance buffer (persistent). weight (Tensor, optional): Learnable weight of size C for the normalized tensor. Default: ``None`` bias (Tensor, optional): Learnable bias of size C for the normalized tensor. Default: ``None`` training (bool, optional): Flag for training mode, used to update running estimates. Default: ``False`` momentum (float, optional): The value for the running mean and variance momentum. Default: ``0.1`` eps (float, optional): Small constant added to variance to improve numerical stability. Default: ``1e-5`` inplace (bool, optional): If ``True``, perform Hardsigmoid in-place. Default: ``False``\nother: The function includes optional parameters for learnable weight and bias, a training flag to update running estimates, momentum for running mean and variance, a small constant `eps` for numerical stability, and an `inplace` option for Hardsigmoid.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef hardsigmoid(x):\n    \"\"\"\n    Applies the Hardsigmoid activation function element-wise.\n    \"\"\"\n    return tl.where(x > 3, 1, tl.where(x < -3, 0, (x + 3) / 6))\n\n@triton.jit\ndef batch_norm_and_hardsigmoid_kernel(\n    x_ptr, running_mean_ptr, running_var_ptr, weight_ptr, bias_ptr,\n    out_ptr, x_stride, out_stride, C, N, eps, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Triton kernel for batch normalization followed by Hardsigmoid activation.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n\n    x_offsets = offsets * x_stride\n    out_offsets = offsets * out_stride\n\n    x = tl.load(x_ptr + x_offsets, mask=mask, other=0.0).to(tl.float32)\n\n    # Load running mean and variance\n    running_mean = tl.load(running_mean_ptr + tl.arange(0, C)).to(tl.float32)\n    running_var = tl.load(running_var_ptr + tl.arange(0, C)).to(tl.float32)\n\n    # Load weight and bias if provided\n    if weight_ptr is not None:\n        weight = tl.load(weight_ptr + tl.arange(0, C)).to(tl.float32)\n    else:\n        weight = tl.full((C,), 1.0, dtype=tl.float32)\n\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + tl.arange(0, C)).to(tl.float32)\n    else:\n        bias = tl.full((C,), 0.0, dtype=tl.float32)\n\n    # Batch normalization\n    x_normalized = (x - running_mean) * tl.rsqrt(running_var + eps) * weight + bias\n\n    # Hardsigmoid activation\n    x_activated = hardsigmoid(x_normalized)\n\n    # Store the result\n    tl.store(out_ptr + out_offsets, x_activated, mask=mask)\n\nimport torch\n\ndef fused_hardsigmoid_batch_norm(\n    x: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor,\n    weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False,\n    momentum: float = 0.1, eps: float = 1e-5, inplace: bool = False\n) -> torch.Tensor:\n    \"\"\"\n    Applies Batch Normalization followed by the Hardsigmoid activation function on the input tensor `x`.\n    \"\"\"\n    if training:\n        # Update running mean and variance\n        batch_mean = x.mean(dim=0)\n        batch_var = x.var(dim=0, unbiased=False)\n        running_mean = (1 - momentum) * running_mean + momentum * batch_mean\n        running_var = (1 - momentum) * running_var + momentum * batch_var\n\n    if inplace:\n        out = x\n    else:\n        out = torch.empty_like(x)\n\n    # Launch the Triton kernel\n    grid = (x.numel() // 1024 + 1,)\n    batch_norm_and_hardsigmoid_kernel[grid](\n        x, running_mean, running_var, weight, bias, out,\n        x.stride(0), out.stride(0), x.size(1), x.numel(), eps, 1024\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Hurwitz zeta function, elementwise. The function calculates the sum of the series for each element in the input tensors, which represent the parameters x and q of the Hurwitz zeta function. The Riemann zeta function is a special case when q equals 1.\nWrapper Entry Information: zeta(input, other, *, out=None) -> Tensor; Args: input (Tensor): the input tensor corresponding to `x`. other (Tensor): the input tensor corresponding to `q`. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\zeta(x, q) = \\sum_{k=0}^{\\infty} \\frac{1}{(k + q)^x}\nother: The Riemann zeta function corresponds to the case when `q = 1`\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Hurwitz zeta function, elementwise. The function calculates the sum of the series for each element in the input tensors, which represent the parameters x and q of the Hurwitz zeta function. The Riemann zeta function is a special case when q equals 1.\nWrapper Entry Information: zeta(input, other, *, out=None) -> Tensor; Args: input (Tensor): the input tensor corresponding to `x`. other (Tensor): the input tensor corresponding to `q`. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\zeta(x, q) = \\sum_{k=0}^{\\infty} \\frac{1}{(k + q)^x}\nother: The Riemann zeta function corresponds to the case when `q = 1`\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef zeta_kernel(\n    x_ptr,\n    q_ptr,\n    out_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    x = tl.load(x_ptr + offsets, mask=mask)\n    q = tl.load(q_ptr + offsets, mask=mask)\n\n    # Initialize the result with zeros\n    result = tl.zeros_like(x)\n\n    # Compute the Hurwitz zeta function for each element\n    k = 0\n    while True:\n        term = tl.where(k + q > 0, 1.0 / (k + q) ** x, 0.0)\n        result += term\n        k += 1\n        if tl.all(term < 1e-10, axis=0):\n            break\n\n    tl.store(out_ptr + offsets, result, mask=mask)\n\ndef zeta(input: torch.Tensor, other: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    assert input.is_cuda and other.is_cuda, 'Input tensors must be on GPU'\n    assert input.shape == other.shape, 'Input tensors must have the same shape'\n\n    if out is None:\n        out = torch.empty_like(input).to(device)\n\n    n_elements = input.numel()\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n\n    zeta_kernel[(n_elements // BLOCK_SIZE + 1,)](\n        x_ptr=input, q_ptr=other, out_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product for a symmetric matrix `A` and a vector `x`, with scaling factors `alpha` and `beta`. Then calculates the norm of the resulting vector `y`. The operation performed is: 1. `y = alpha * torch.mv(A, x) + beta * y`, assuming `A` is symmetric. 2. `norm = torch.norm(y, p)`.\nWrapper Entry Information: def symmetric_matrix_vector_norm(A: torch.Tensor, x: torch.Tensor, alpha: float, beta: float, p: float = 2.0) -> torch.Tensor: A (Tensor): A symmetric matrix of shape `(n, n)`. x (Tensor): A vector of shape `(n,)`. alpha (float): Scalar multiplier for the matrix-vector product. beta (float): Scalar multiplier added to `y`. p (float, optional): Order of the norm. Default is 2.0 (Euclidean norm).\nMath: y = alpha * torch.mv(A, x) + beta * y\nnorm = torch.norm(y, p)\nother: Assumes `A` is symmetric.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement SmeLU activation function with two kernels: one for forward pass and one for backward pass. The forward kernel takes 5 parameters: input_pointer (pointer to input data), beta (float value for SmeLU), output_pointer (pointer to output data), n_elements (number of elements to process), and BLOCK_SIZE (block size for parallel execution). It computes the SmeLU activation and stores the result. The backward kernel also takes 5 parameters: input_pointer, beta, output_pointer, n_elements, and BLOCK_SIZE. It computes the gradient of the SmeLU activation and stores the result. Wrapper functions _smelu_triton_forward and _smelu_triton_backward are provided to call these kernels with PyTorch tensors. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _smelu_kernel_forward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU forward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    output = tl.where(x >= beta, x, 0.)\n    output = tl.where(tl.abs(x) <= beta, ((x + beta) * (x + beta)) / (4. * beta), output)\n    # Write-back output\n    tl.store(output_pointer + offsets, output, mask=mask)\n\ndef _smelu_triton_forward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU forward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Activation of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_forward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n\n@triton.jit\ndef _smelu_kernel_backward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU backward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    gradient = tl.where(x >= beta, 1., 0.)\n    gradient = tl.where(tl.abs(x) <= beta, 0.5 * (x + beta) / beta, gradient)\n    # Write-back output\n    tl.store(output_pointer + offsets, gradient, mask=mask)\n\ndef _smelu_triton_backward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU backward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Gradient of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_backward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product for a symmetric matrix `A` and a vector `x`, with scaling factors `alpha` and `beta`. Then calculates the norm of the resulting vector `y`. The operation performed is: 1. `y = alpha * torch.mv(A, x) + beta * y`, assuming `A` is symmetric. 2. `norm = torch.norm(y, p)`.\nWrapper Entry Information: def symmetric_matrix_vector_norm(A: torch.Tensor, x: torch.Tensor, alpha: float, beta: float, p: float = 2.0) -> torch.Tensor: A (Tensor): A symmetric matrix of shape `(n, n)`. x (Tensor): A vector of shape `(n,)`. alpha (float): Scalar multiplier for the matrix-vector product. beta (float): Scalar multiplier added to `y`. p (float, optional): Order of the norm. Default is 2.0 (Euclidean norm).\nMath: y = alpha * torch.mv(A, x) + beta * y\nnorm = torch.norm(y, p)\nother: Assumes `A` is symmetric.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _symmetric_matrix_vector_norm_kernel(\n    A_ptr, x_ptr, y_ptr, alpha: tl.float32, beta: tl.float32, p: tl.float32, n: tl.int32, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n\n\n    # Load x and y\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n\n    # Initialize result vector\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    # Matrix-vector product\n    for i in range(n):\n        a = tl.load(A_ptr + i * n + offsets, mask=mask)\n        result += a * x[i]\n\n    # Scale by alpha and add beta * y\n    result = alpha * result + beta * y\n\n    # Store the result back to y\n    tl.store(y_ptr + offsets, result, mask=mask)\n\n    # Compute the norm\n    norm = tl.sum(tl.abs(result) ** p, axis=0) ** (1.0 / p)\n    tl.atomic_add(y_ptr + 0, norm)\n\ndef symmetric_matrix_vector_norm(A: torch.Tensor, x: torch.Tensor, alpha: float, beta: float, p: float = 2.0) -> torch.Tensor:\n    \"\"\"\n    Computes the matrix-vector product for a symmetric matrix `A` and a vector `x`, with scaling factors `alpha` and `beta`.\n    Then calculates the norm of the resulting vector `y`.\n\n    :param A (torch.Tensor): A symmetric matrix of shape `(n, n)`.\n    :param x (torch.Tensor): A vector of shape `(n,)`.\n    :param alpha (float): Scalar multiplier for the matrix-vector product.\n    :param beta (float): Scalar multiplier added to `y`.\n    :param p (float, optional): Order of the norm. Default is 2.0 (Euclidean norm).\n    :return (torch.Tensor): The norm of the resulting vector `y`.\n    \"\"\"\n    n = A.size(0)\n    y = torch.zeros(n, device=A.device, dtype=A.dtype)\n\n    # Ensure inputs are contiguous\n    if not A.is_contiguous():\n        A = A.contiguous()\n    if not x.is_contiguous():\n        x = x.contiguous()\n    if not y.is_contiguous():\n        y = y.contiguous()\n\n    # Call the Triton kernel\n    grid = lambda meta: (triton.cdiv(n, meta['BLOCK_SIZE']),)\n    _symmetric_matrix_vector_norm_kernel[grid](\n        A, x, y, alpha, beta, p, n, BLOCK_SIZE=1024\n    )\n\n    # Return the norm of the resulting vector y\n    return torch.norm(y, p)\n\n# Example usage\nA = torch.tensor([[1.0, 0.5], [0.5, 1.0]], device='cuda')\nx = torch.tensor([1.0, 2.0], device='cuda')\nalpha = 2.0\nbeta = 1.0\np = 2.0\n\nnorm = symmetric_matrix_vector_norm(A, x, alpha, beta, p)\nprint(norm)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Softplus activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with Softplus, which is smoother than ReLU and approximates it for large values. The function is particularly designed to improve numerical stability by reverting to a linear function for values above a specified threshold.\nWrapper Entry Information: softplus_linear(input, weight, bias=None, beta=1, threshold=20) -> Tensor\nMath: The combined operation is defined as: out = Softplus(Linear(x)), where the Softplus function is defined as: Softplus(x) = (1/\u03b2) * log(1 + exp(\u03b2 * x))\nother: For values exceeding the threshold, the function helps maintain numerical stability by approximating a linear function, which enhances stability and prevents potential overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a custom softmax kernel that computes the row-wise softmax of a matrix. The kernel loads each row of the input matrix into the on-chip SRAM, performs numerical stability operations (subtracting the maximum from each row), applies exponentiation, computes the sum of the exponentiated values, and finally computes the softmax values by dividing the exponentiated values by the sum. The kernel is parallelized over the rows of the matrix, and the result is written back to global memory. A helper function 'softmax' is provided to enqueue the kernel for a given input tensor, with support for automatic block size determination and warp tuning based on the input matrix shape. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row o\n    # f the input matrix\n    softmax_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Softplus activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with Softplus, which is smoother than ReLU and approximates it for large values. The function is particularly designed to improve numerical stability by reverting to a linear function for values above a specified threshold.\nWrapper Entry Information: softplus_linear(input, weight, bias=None, beta=1, threshold=20) -> Tensor\nMath: The combined operation is defined as: out = Softplus(Linear(x)), where the Softplus function is defined as: Softplus(x) = (1/\u03b2) * log(1 + exp(\u03b2 * x))\nother: For values exceeding the threshold, the function helps maintain numerical stability by approximating a linear function, which enhances stability and prevents potential overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for the softplus_linear operation\n@triton.jit\ndef softplus_linear_kernel(\n    output_ptr, input_ptr, weight_ptr, bias_ptr, input_stride, weight_stride, output_stride,\n    n_inputs, n_outputs, beta, threshold, BLOCK_SIZE: tl.constexpr\n):\n    # Compute the linear transformation\n    pid = tl.program_id(0)\n    batch_start = pid * BLOCK_SIZE\n    batch_end = batch_start + BLOCK_SIZE\n\n    # Load the input and weight matrices\n    input_offsets = tl.arange(0, BLOCK_SIZE)\n    weight_offsets = tl.arange(0, n_outputs)\n    input_ptrs = input_ptr + batch_start * input_stride + input_offsets\n    weight_ptrs = weight_ptr + weight_offsets * weight_stride\n\n    # Load input and weight data\n    input_data = tl.load(input_ptrs, mask=input_offsets < n_inputs, other=0.0)\n    weight_data = tl.load(weight_ptrs, mask=weight_offsets < n_outputs, other=0.0)\n\n    # Compute the linear transformation\n    linear_output = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(n_inputs):\n        linear_output += input_data[i] * weight_data\n\n    # Add bias if provided\n    if bias_ptr is not None:\n        bias_data = tl.load(bias_ptr, mask=weight_offsets < n_outputs, other=0.0)\n        linear_output += bias_data\n\n    # Apply the Softplus activation\n    softplus_output = tl.where(linear_output * beta > threshold, linear_output, (1 / beta) * tl.log(1 + tl.exp(beta * linear_output)))\n\n    # Write the result back to global memory\n    output_ptrs = output_ptr + batch_start * output_stride + weight_offsets\n    tl.store(output_ptrs, softplus_output, mask=weight_offsets < n_outputs)\n\n# Wrapper function for the softplus_linear operation\ndef softplus_linear(input, weight, bias=None, beta=1, threshold=20):\n    # Validate input dimensions\n    assert input.dim() == 2, \"Input tensor must be 2D\"\n    assert weight.dim() == 2, \"Weight tensor must be 2D\"\n    assert input.size(1) == weight.size(0), \"Input and weight dimensions must match\"\n\n    # Get input and output dimensions\n    n_inputs, n_outputs = input.size(1), weight.size(1)\n    n_batches = input.size(0)\n\n    # Allocate output tensor\n    output = torch.empty((n_batches, n_outputs), device=input.device, dtype=input.dtype)\n\n    # Determine block size\n    BLOCK_SIZE = triton.next_power_of_2(n_inputs)\n\n    # Determine number of warps\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n\n    # Enqueue the kernel\n    softplus_linear_kernel[(n_batches,)](\n        output, input, weight, bias,\n        input.stride(0), weight.stride(0), output.stride(0),\n        n_inputs, n_outputs, beta, threshold,\n        num_warps=num_warps, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Reconstructs the input matrix `A` using its Singular Value Decomposition (SVD). This function combines the Singular Value Decomposition (SVD) with matrix reconstruction. Given a matrix `A`, it performs the following operations: 1. Compute the SVD of `A`: A = U \u03a3 V^H, where `U` and `Vh` are unitary matrices and `S` contains the singular values of `A`. 2. Reconstruct `A` as A_reconstructed = U \u03a3 V^H.\nWrapper Entry Information: fused_svd_reconstruct(A: Tensor) -> Tensor: The input matrix `A` of shape `(m, n)`.\nMath: A = U \u03a3 V^H\nA_reconstructed = U diag(S) V^H\nother: The function returns the reconstructed matrix `A` of shape `(m, n)`, approximating the original matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel (cos_func) that computes the cosine for each element of a given tensor A. The kernel takes four parameters: tensor pointers a (input) and b (output), n_elements (number of elements in the input), and BLOCK_SIZE (number of elements processed per block, defined as a constexpr). The cos function wraps the triton kernel launch, preparing tensors and grid/block configurations. import torch\nimport triton\nimport triton.language as tl\nimport math\n\n# Kernel function: Computes the cosine of each element in the input tensor.\n@triton.jit\ndef cos_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block and thread\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Determine which elements are valid within the block\n    mask = offset < n_elements\n    # Load elements from tensor `a` into `a_value`\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the cosine of each element in `a_value`\n    b_value = tl.cos(a_value.to(tl.float32))\n    # Store the result back to tensor `b`\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to invoke the Triton kernel and perform the computation\ndef cos(A):\n    # Prepare output tensor `B` with the same shape and type as `A`\n    B = torch.empty_like(A)\n    # Determine the total number of elements in the input tensor `A`\n    n_elements = A.numel()\n    # Calculate the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    cos_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Reconstructs the input matrix `A` using its Singular Value Decomposition (SVD). This function combines the Singular Value Decomposition (SVD) with matrix reconstruction. Given a matrix `A`, it performs the following operations: 1. Compute the SVD of `A`: A = U \u03a3 V^H, where `U` and `Vh` are unitary matrices and `S` contains the singular values of `A`. 2. Reconstruct `A` as A_reconstructed = U \u03a3 V^H.\nWrapper Entry Information: fused_svd_reconstruct(A: Tensor) -> Tensor: The input matrix `A` of shape `(m, n)`.\nMath: A = U \u03a3 V^H\nA_reconstructed = U diag(S) V^H\nother: The function returns the reconstructed matrix `A` of shape `(m, n)`, approximating the original matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Kernel function: Matrix multiplication C = A @ B\n@triton.jit\ndef matmul_kernel(\n    A, B, C, M, N, K, stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid = tl.program_id(0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_warp = BLOCK_SIZE_M * BLOCK_SIZE_N // 32\n    num_warp_m = tl.cdiv(BLOCK_SIZE_M, 32)\n    pid_m = pid // num_pid_n\n    pid_n = pid % num_pid_n\n    warp_id = pid % num_pid_in_warp\n    wm = warp_id % num_warp_m\n    wn = warp_id // num_warp_m\n\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M))[:, None] * stride_am\n    offs_ak = tl.arange(0, BLOCK_SIZE_K)[None, :] * stride_ak\n    offs_bk = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :] * stride_bk\n    offs_bn = tl.arange(0, BLOCK_SIZE_K)[:, None] * stride_bn\n    offs_cm = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M))[:, None] * stride_cm\n    offs_cn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N))[None, :] * stride_cn\n\n    A = A + (offs_am + offs_ak)\n    B = B + (offs_bk + offs_bn)\n    C = C + (offs_cm + offs_cn)\n\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(A + k * stride_ak, mask=k + offs_ak < K, other=0.0)\n        b = tl.load(B + k * stride_bk, mask=k + offs_bk < K, other=0.0)\n        acc += tl.dot(a, b)\n\n    tl.store(C, acc, mask=offs_cm < M and offs_cn < N)\n\ndef fused_svd_reconstruct(A: torch.Tensor) -> torch.Tensor:\n    # Compute the SVD of A\n    U, S, Vh = torch.linalg.svd(A, full_matrices=False)\n    \n    # Convert S to a diagonal matrix\n    S_diag = torch.diag(S)\n    \n    # Perform the matrix multiplication U @ S_diag @ Vh using Triton\n    M, K = U.shape\n    K, N = Vh.shape\n    \n    # Prepare the output tensor\n    A_reconstructed = torch.empty_like(A)\n    \n    # Determine the block sizes\n    BLOCK_SIZE_M = 16\n    BLOCK_SIZE_N = 16\n    BLOCK_SIZE_K = 16\n    \n    # Determine the grid size\n    grid = (triton.cdiv(M, BLOCK_SIZE_M) * triton.cdiv(N, BLOCK_SIZE_N),)\n    \n    # Launch the Triton kernel\n    matmul_kernel[grid](\n        U, S_diag, A_reconstructed, M, N, K,\n        U.stride(0), U.stride(1), S_diag.stride(0), S_diag.stride(1), A_reconstructed.stride(0), A_reconstructed.stride(1),\n        BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K\n    )\n    \n    # Perform the second matrix multiplication A_reconstructed @ Vh\n    M, K = A_reconstructed.shape\n    K, N = Vh.shape\n    \n    # Prepare the final output tensor\n    A_final = torch.empty_like(A)\n    \n    # Determine the grid size\n    grid = (triton.cdiv(M, BLOCK_SIZE_M) * triton.cdiv(N, BLOCK_SIZE_N),)\n    \n    # Launch the Triton kernel\n    matmul_kernel[grid](\n        A_reconstructed, Vh, A_final, M, N, K,\n        A_reconstructed.stride(0), A_reconstructed.stride(1), Vh.stride(0), Vh.stride(1), A_final.stride(0), A_final.stride(1),\n        BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K\n    )\n    \n    return A_final\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise multiplication, addition, log-softmax activation, dropout, and batch matrix multiplication.\nWrapper Entry Information: fused_mul_add_logsoftmax_dropout_bmm(input1, input2, other, mat2, p=0.5, training=True, inplace=False, dim=-1, *, out=None) -> Tensor\nMath: Given input tensors X_1, X_2, O, and M, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X_1 \\odot X_2 \\\\\nS &= Z + O \\\\\nL &= \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) \\\\\nD &= \\text{Dropout}(L, p) \\\\\nY &= \\text{bmm}(D, M)\n\\end{align*}\n\\]\n\nwhere:\n\n- X_1 and X_2 are input tensors for element-wise multiplication.\n- \\odot denotes element-wise multiplication.\n- O is a tensor or scalar to be added to Z, must be broadcastable to the shape of Z.\n- \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) is the log-softmax function applied along dimension `dim`.\n- \\text{Dropout}(L, p) randomly zeroes elements of L with probability p.\n- \\text{bmm}(D, M) performs batch matrix multiplication.\nother: - The shapes of `input1`, `input2`, and `other` must be broadcastable to each other.\n- The `mat2` tensor must have a shape compatible with the output of the dropout layer for batch matrix multiplication, i.e., `mat2` should have shape `(B, D_in, D_out)` if the dropout output has shape `(B, N, D_in)`.\n- The `log_softmax` function is applied along dimension `dim`, which should be the dimension of the features (typically `-1` for the last dimension).\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise multiplication, addition, log-softmax activation, dropout, and batch matrix multiplication.\nWrapper Entry Information: fused_mul_add_logsoftmax_dropout_bmm(input1, input2, other, mat2, p=0.5, training=True, inplace=False, dim=-1, *, out=None) -> Tensor\nMath: Given input tensors X_1, X_2, O, and M, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X_1 \\odot X_2 \\\\\nS &= Z + O \\\\\nL &= \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) \\\\\nD &= \\text{Dropout}(L, p) \\\\\nY &= \\text{bmm}(D, M)\n\\end{align*}\n\\]\n\nwhere:\n\n- X_1 and X_2 are input tensors for element-wise multiplication.\n- \\odot denotes element-wise multiplication.\n- O is a tensor or scalar to be added to Z, must be broadcastable to the shape of Z.\n- \\log\\left( \\frac{\\exp(S)}{\\sum_j \\exp(S_j)} \\right) is the log-softmax function applied along dimension `dim`.\n- \\text{Dropout}(L, p) randomly zeroes elements of L with probability p.\n- \\text{bmm}(D, M) performs batch matrix multiplication.\nother: - The shapes of `input1`, `input2`, and `other` must be broadcastable to each other.\n- The `mat2` tensor must have a shape compatible with the output of the dropout layer for batch matrix multiplication, i.e., `mat2` should have shape `(B, D_in, D_out)` if the dropout output has shape `(B, N, D_in)`.\n- The `log_softmax` function is applied along dimension `dim`, which should be the dimension of the features (typically `-1` for the last dimension).\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_mul_add_logsoftmax_dropout_bmm_kernel(\n    input1_ptr, input2_ptr, other_ptr, mat2_ptr, output_ptr,\n    input1_shape0, input1_shape1, input1_shape2, input1_stride0, input1_stride1, input1_stride2,\n    input2_shape0, input2_shape1, input2_shape2, input2_stride0, input2_stride1, input2_stride2,\n    other_shape0, other_shape1, other_shape2, other_stride0, other_stride1, other_stride2,\n    mat2_shape0, mat2_shape1, mat2_shape2, mat2_stride0, mat2_stride1, mat2_stride2,\n    output_shape0, output_shape1, output_shape2, output_stride0, output_stride1, output_stride2,\n    dropout_prob: tl.float32, dim: tl.int32, BLOCK_SIZE: tl.constexpr\n):\n    # Get the batch and feature indices\n    pid = tl.program_id(axis=0)\n    batch_idx = pid // (input1_shape1 // BLOCK_SIZE)\n    feature_idx = pid % (input1_shape1 // BLOCK_SIZE)\n    \n    # Compute the range of elements to process\n    range_start = feature_idx * BLOCK_SIZE\n    range_end = min(range_start + BLOCK_SIZE, input1_shape1)\n    \n    # Initialize the output block\n    output_block = tl.zeros((BLOCK_SIZE, mat2_shape2), dtype=tl.float32)\n    \n    # Load the input1, input2, and other blocks\n    input1_block = tl.load(input1_ptr + batch_idx * input1_stride0 + range_start * input1_stride1, mask=range_start + tl.arange(0, BLOCK_SIZE) < input1_shape1)\n    input2_block = tl.load(input2_ptr + batch_idx * input2_stride0 + range_start * input2_stride1, mask=range_start + tl.arange(0, BLOCK_SIZE) < input2_shape1)\n    other_block = tl.load(other_ptr + batch_idx * other_stride0 + range_start * other_stride1, mask=range_start + tl.arange(0, BLOCK_SIZE) < other_shape1)\n    \n    # Perform element-wise multiplication and addition\n    z_block = input1_block * input2_block\n    s_block = z_block + other_block\n    \n    # Apply log-softmax\n    s_block = s_block.to(tl.float32)\n    max_val = tl.max(s_block, axis=1)[:, None]\n    exp_s = tl.exp(s_block - max_val)\n    sum_exp_s = tl.sum(exp_s, axis=1)[:, None]\n    log_softmax_block = s_block - max_val - tl.log(sum_exp_s)\n    \n    # Apply dropout\n    if dropout_prob > 0.0 and dropout_prob < 1.0:\n        mask = tl.rand(tl.float32, (BLOCK_SIZE,)) < (1.0 - dropout_prob)\n        log_softmax_block = tl.where(mask, log_softmax_block / (1.0 - dropout_prob), 0.0)\n    \n    # Perform batch matrix multiplication\n    mat2_block = tl.load(mat2_ptr + batch_idx * mat2_stride0 + range_start * mat2_stride1, mask=range_start + tl.arange(0, BLOCK_SIZE) < mat2_shape1)\n    output_block = tl.dot(log_softmax_block, mat2_block)\n    \n    # Store the result\n    tl.store(output_ptr + batch_idx * output_stride0 + range_start * output_stride1, output_block, mask=range_start + tl.arange(0, BLOCK_SIZE) < output_shape1)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_mul_add_logsoftmax_dropout_bmm(input1, input2, other, mat2, p=0.5, training=True, inplace=False, dim=-1, *, out=None):\n    # Ensure input tensors are on the same device\n    device = input1.device\n    input1 = input1.to(device)\n    input2 = input2.to(device)\n    other = other.to(device)\n    mat2 = mat2.to(device)\n    \n    # Ensure output tensor is on the same device\n    if out is not None:\n        out = out.to(device)\n    \n    # Get the shapes and strides\n    input1_shape = input1.shape\n    input2_shape = input2.shape\n    other_shape = other.shape\n    mat2_shape = mat2.shape\n    output_shape = (input1_shape[0], input1_shape[1], mat2_shape[2])\n    \n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty(output_shape, dtype=input1.dtype, device=device)\n    \n    # Define the grid and block sizes\n    grid = (input1_shape[0] * (input1_shape[1] // 128),)\n    block = (128,)\n    \n    # Launch the Triton kernel\n    fused_mul_add_logsoftmax_dropout_bmm_kernel[grid, block](\n        input1, input2, other, mat2, out,\n        *input1_shape, *input1.stride(),\n        *input2_shape, *input2.stride(),\n        *other_shape, *other.stride(),\n        *mat2_shape, *mat2.stride(),\n        *output_shape, *out.stride(),\n        p, dim\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the element-wise SELU (Scaled Exponential Linear Unit) function to the input tensor. The SELU function is defined as scale * (max(0, x) + min(0, alpha * (exp(x) - 1))), where the constants alpha and scale are fixed values with alpha approximately 1.673 and scale approximately 1.051.\nWrapper Entry Information: selu(input, inplace=False) -> Tensor\nMath: SELU(x) = scale * (max(0,x) + min(0, alpha * (exp(x) - 1))), with alpha=1.6732632423543772848170429916717 and scale=1.0507009873554804934193349852946.\nother: See torch.nn.SELU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the element-wise SELU (Scaled Exponential Linear Unit) function to the input tensor. The SELU function is defined as scale * (max(0, x) + min(0, alpha * (exp(x) - 1))), where the constants alpha and scale are fixed values with alpha approximately 1.673 and scale approximately 1.051.\nWrapper Entry Information: selu(input, inplace=False) -> Tensor\nMath: SELU(x) = scale * (max(0,x) + min(0, alpha * (exp(x) - 1))), with alpha=1.6732632423543772848170429916717 and scale=1.0507009873554804934193349852946.\nother: See torch.nn.SELU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Constants for SELU\nalpha = 1.6732632423543772848170429916717\nscale = 1.0507009873554804934193349852946\n\n# Triton kernel for SELU\n@triton.jit\ndef _selu_kernel(X, Y, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(X + offsets, mask=mask)\n    \n    # Compute SELU\n    x_pos = tl.where(x > 0, x, 0)\n    x_neg = tl.where(x <= 0, alpha * (tl.exp(x) - 1), 0)\n    y = scale * (x_pos + x_neg)\n    \n    # Store the result\n    tl.store(Y + offsets, y, mask=mask)\n\n# Wrapper function for SELU\ndef selu(input, inplace=False):\n    assert input.is_cuda, \"Input tensor must be on a CUDA device\"\n    \n    # Determine the output tensor\n    if inplace:\n        output = input\n    else:\n        output = torch.empty_like(input)\n    \n    # Launch the kernel\n    n_elements = input.numel()\n    grid = (triton.cdiv(n_elements, 1024),)\n    _selu_kernel[grid](input, output, n_elements, BLOCK_SIZE=1024)\n    \n    return output\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random input tensor\n    x = torch.randn(1024, device='cuda')\n    \n    # Apply SELU\n    y = selu(x, inplace=False)\n    print(y)\n    \n    # Apply SELU in place\n    selu(x, inplace=True)\n    print(x)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the 2-norm of the modified `y`. The function takes a target tensor `y`, a tensor `x` to be scaled by a scalar `alpha`, and adds the scaled `x` to `y`. It then calculates and returns the 2-norm of the updated `y`.\nWrapper Entry Information: scaled_add_norm(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape `(n,)`. x (Tensor): The tensor to be scaled and added to `y`, of shape `(n,)`. alpha (float): The scalar multiplier for `x`.\nMath: y += alpha * x\nnorm = ||y||_2\nother: The function modifies the input tensor `y` in place and calculates the 2-norm using `torch.norm`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel that performs element-wise addition of two vectors. The kernel takes two pointers `x_ptr` and `y_ptr` and an integer `BLOCK_SIZE` to perform operations in parallel on blocks of data. It uses Triton primitives to load data from global memory, perform addition, and store the result back to global memory. A separate wrapper function `launch_example_kernel` is provided to configure grid dimensions and launch the kernel with two PyTorch tensors `x` and `y`. import triton\nimport torch\n\n# A sample Triton kernel function decorated with @triton.jit\n@triton.jit\ndef example_kernel(x_ptr, y_ptr, BLOCK_SIZE: int):\n    \"\"\"\n    This is a sample kernel function that takes two pointers and a block size as input.\n    It performs an element-wise addition of two vectors in parallel.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    x = tl.load(x_ptr + offset)\n    y = tl.load(y_ptr + offset)\n    tl.store(y_ptr + offset, x + y)\n\n# Wrapper function to launch the Triton kernel\ndef launch_example_kernel(x, y):\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(x.size(0), meta['BLOCK_SIZE']),)\n    example_kernel[grid](x, y, BLOCK_SIZE)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the 2-norm of the modified `y`. The function takes a target tensor `y`, a tensor `x` to be scaled by a scalar `alpha`, and adds the scaled `x` to `y`. It then calculates and returns the 2-norm of the updated `y`.\nWrapper Entry Information: scaled_add_norm(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape `(n,)`. x (Tensor): The tensor to be scaled and added to `y`, of shape `(n,)`. alpha (float): The scalar multiplier for `x`.\nMath: y += alpha * x\nnorm = ||y||_2\nother: The function modifies the input tensor `y` in place and calculates the 2-norm using `torch.norm`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport torch\nimport triton.language as tl\n\n# Triton kernel function\n@triton.jit\ndef scaled_add_kernel(y_ptr, x_ptr, alpha, n_elements, BLOCK_SIZE: int):\n    \"\"\"\n    This kernel function performs the operation y += alpha * x and is executed in parallel.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    y += alpha * x\n    tl.store(y_ptr + offsets, y, mask=mask)\n\n# Wrapper function to launch the Triton kernel\ndef scaled_add_norm(y: torch.Tensor, x: torch.Tensor, alpha: float) -> torch.Tensor:\n    \"\"\"\n    Computes y += alpha * x and returns the 2-norm of the modified y.\n    \n    Parameters:\n    y (Tensor): The target tensor to be modified, of shape (n,).\n    x (Tensor): The tensor to be scaled and added to y, of shape (n,).\n    alpha (float): The scalar multiplier for x.\n    \n    Returns:\n    Tensor: The 2-norm of the updated y.\n    \"\"\"\n    assert y.shape == x.shape, \"Tensors y and x must have the same shape.\"\n    n_elements = y.numel()\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    \n    # Launch the Triton kernel\n    scaled_add_kernel[grid](y, x, alpha, n_elements, BLOCK_SIZE)\n    \n    # Calculate and return the 2-norm of the updated y\n    norm = torch.norm(y, p=2)\n    return norm\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by applying the Leaky ReLU activation function element-wise to the result. This allows for both feature extraction and non-linear activation in one step.\nWrapper Entry Information: def leaky_relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, negative_slope=0.01, inplace=False) -> Tensor\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{LeakyReLU}(\\text{conv2d}(\\text{input}))\n\nwhere the Leaky ReLU function is applied element-wise as:\n\n.. math::\n    \\text{LeakyReLU}(x) = \\max(0, x) + \\text{negative\\_slope} \\times \\min(0, x)\nother: The function combines 2D convolution and Leaky ReLU activation in one step, allowing for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement several activation functions: tanh, relu, relu_grad, squared_relu, squared_relu_grad, leaky_relu, leaky_relu_grad, gelu, gelu_grad, smelu, and smelu_grad. Each of these kernels takes a single argument x, which is the input tensor, and returns the transformed output tensor. The relu and relu_grad functions handle the ReLU activation and its gradient respectively. Similarly, squared_relu and squared_relu_grad handle the Squared ReLU activation. Leaky ReLU and its gradient are implemented in leaky_relu and leaky_relu_grad. The gelu function implements the Gaussian Error Linear Unit activation, with gelu_grad providing its gradient. Lastly, smelu and smelu_grad implement the Smooth ReLU activation and its gradient. import triton\nimport triton.language as tl\nfrom xformers.components import Activation\n\n_kAlpha = math.sqrt(2.0 / math.pi)\n\n# A Triton implementation of the most used activations\n\n@triton.jit\ndef tanh(x):\n    # Tanh is just a scaled sigmoid\n    return 2 * tl.sigmoid(2 * x) - 1\n\n@triton.jit\ndef relu(x):\n    \"\"\"\n    ReLU_ activation function\n\n    .. _ReLU: https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html\n    \"\"\"\n    zero = 0.0\n    return tl.where(x >= 0, x, zero.to(x.dtype))\n\n@triton.jit\ndef relu_grad(x):\n    # ReLU is different from other activations\n    # in that it does not require the input to retrospectively compute its gradient\n    zero = 0.0\n    one = 1.0\n    return tl.where(x >= 0, one.to(x.dtype), zero.to(x.dtype))\n\n@triton.jit\ndef squared_relu(x):\n    \"\"\"\n    Squared ReLU activation, as proposed in the Primer_ paper.\n\n    .. _Primer: https://arxiv.org/abs/2109.08668\n    \"\"\"\n    x_ = relu(x)\n    return (x_ * x_).to(x.dtype)\n\n@triton.jit\ndef squared_relu_grad(x):\n    return tl.where(x >= 0, 2.0 * x, 0.0)\n\n@triton.jit\ndef leaky_relu(x):\n    \"\"\"\n    LeakyReLU_ activation\n\n    .. _LeakyReLU: https://pytorch.org/docs/stable/generated/torch.nn.LeakyReLU.html\n    \"\"\"\n    scale = 0.01 + 0.0\n    scale = scale.to(x.dtype)\n    return tl.where(x >= 0, x, scale * x)\n\n@triton.jit\ndef leaky_relu_grad(x):\n    min_grad = 0.01\n    max_grad = 1\n\n    min_grad = min_grad.to(x.dtype)\n    max_grad = max_grad.to(x.dtype)\n\n    return tl.where(x >= 0, max_grad, min_grad)\n\n@triton.jit\ndef gelu(x):\n    \"\"\"\n    GeLU_ activation - Gaussian error linear unit\n\n    .. _GeLU: https://arxiv.org/pdf/1606.08415.pdf\n    \"\"\"\n    return 0.5 * x * (1 + tanh(_kAlpha * (x + 0.044715 * x * x * x)))\n\n@triton.jit\ndef gelu_grad(x):\n    # CREDITS: Fast implementation proposed in\n    # https://github.com/NVIDIA/Megatron-LM/blob/main/megatron/model/fused_bias_gelu.py#L30\n    tanh_out = tanh(0.79788456 * x * (1 + 0.044715 * x * x))\n    return 0.5 * x * (\n        (1 - tanh_out * tanh_out) * (0.79788456 + 0.1070322243 * x * x)\n    ) + 0.5 * (1 + tanh_out)\n\n@triton.jit\ndef smelu(x):\n    \"\"\"\n    SmeLU_ activation -  Smooth ReLU with beta=2.0\n\n    .. _SmeLU: https://arxiv.org/pdf/2202.06499.pdf\n    \"\"\"\n    zero = 0.0\n    four = 4.0\n    two = 2.0\n    beta = two.to(x.dtype)\n\n    output = (x + beta) * (x + beta) / (four.to(x.dtype) * beta)\n    relu = tl.where(x >= beta, x, zero.to(x.dtype))\n    return tl.where(tl.abs(x) <= beta, output, relu)\n\n@triton.jit\ndef smelu_grad(x):\n    zero = 0.0\n    one = 1.0\n    two = 2.0\n    beta = two.to(x.dtype)\n\n    grad = (beta + x) / (two.to(x.dtype) * beta)\n    relu_grad = tl.where(x >= beta, one.to(x.dtype), zero.to(x.dtype))\n    return tl.where(tl.abs(x) <= beta, grad, relu_grad)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by applying the Leaky ReLU activation function element-wise to the result. This allows for both feature extraction and non-linear activation in one step.\nWrapper Entry Information: def leaky_relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, negative_slope=0.01, inplace=False) -> Tensor\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{LeakyReLU}(\\text{conv2d}(\\text{input}))\n\nwhere the Leaky ReLU function is applied element-wise as:\n\n.. math::\n    \\text{LeakyReLU}(x) = \\max(0, x) + \\text{negative\\_slope} \\times \\min(0, x)\nother: The function combines 2D convolution and Leaky ReLU activation in one step, allowing for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef leaky_relu(x, negative_slope):\n    \"\"\"\n    LeakyReLU activation function\n    \"\"\"\n    zero = 0.0\n    return tl.where(x >= 0, x, negative_slope * x)\n\n@triton.jit\ndef conv2d_leaky_relu_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    stride, padding, dilation, groups,\n    input_shape, weight_shape, output_shape,\n    negative_slope,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    num_blocks = (output_shape[0] * output_shape[1] * output_shape[2] * output_shape[3]) // (BLOCK_SIZE_N * BLOCK_SIZE_C * BLOCK_SIZE_H * BLOCK_SIZE_W)\n    pid_n = pid // (num_blocks // output_shape[0])\n    pid = pid % (num_blocks // output_shape[0])\n    pid_c = pid // (num_blocks // (output_shape[0] * output_shape[1]))\n    pid = pid % (num_blocks // (output_shape[0] * output_shape[1]))\n    pid_h = pid // (num_blocks // (output_shape[0] * output_shape[1] * output_shape[2]))\n    pid_w = pid % (num_blocks // (output_shape[0] * output_shape[1] * output_shape[2]))\n\n    input_block_ptr = tl.make_block_ptr(\n        base=input_ptr,\n        shape=input_shape,\n        strides=(input_shape[1] * input_shape[2] * input_shape[3], input_shape[2] * input_shape[3], input_shape[3], 1),\n        offsets=(pid_n, pid_c, pid_h * stride[0] - padding[0], pid_w * stride[1] - padding[1]),\n        block_shape=(BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W),\n        order=(0, 1, 2, 3)\n    )\n\n    weight_block_ptr = tl.make_block_ptr(\n        base=weight_ptr,\n        shape=weight_shape,\n        strides=(weight_shape[1] * weight_shape[2] * weight_shape[3], weight_shape[2] * weight_shape[3], weight_shape[3], 1),\n        offsets=(0, 0, 0, 0),\n        block_shape=(BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W, 1),\n        order=(0, 1, 2, 3)\n    )\n\n    output_block_ptr = tl.make_block_ptr(\n        base=output_ptr,\n        shape=output_shape,\n        strides=(output_shape[1] * output_shape[2] * output_shape[3], output_shape[2] * output_shape[3], output_shape[3], 1),\n        offsets=(pid_n, pid_c, pid_h, pid_w),\n        block_shape=(BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W),\n        order=(0, 1, 2, 3)\n    )\n\n    output = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W), dtype=tl.float32)\n\n    for i in range(weight_shape[2]):\n        for j in range(weight_shape[3]):\n            input_block = tl.load(input_block_ptr)\n            weight_block = tl.load(weight_block_ptr)\n            output += input_block * weight_block\n            input_block_ptr = tl.advance(input_block_ptr, (0, 0, dilation[0], dilation[1]))\n            weight_block_ptr = tl.advance(weight_block_ptr, (0, 0, 1, 1))\n\n    if bias_ptr is not None:\n        bias_block = tl.load(bias_ptr)\n        output += bias_block\n\n    output = leaky_relu(output, negative_slope)\n    tl.store(output_block_ptr, output)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef leaky_relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, negative_slope=0.01, inplace=False):\n    if not isinstance(stride, (tuple, list)):\n        stride = (stride, stride)\n    if not isinstance(padding, (tuple, list)):\n        padding = (padding, padding)\n    if not isinstance(dilation, (tuple, list)):\n        dilation = (dilation, dilation)\n\n    N, C, H, W = input.shape\n    K, C_in, R, S = weight.shape\n    assert C_in * groups == C, \"Input channels must match weight channels * groups\"\n    assert K % groups == 0, \"Output channels must be divisible by groups\"\n\n    H_out = (H + 2 * padding[0] - dilation[0] * (R - 1) - 1) // stride[0] + 1\n    W_out = (W + 2 * padding[1] - dilation[1] * (S - 1) - 1) // stride[1] + 1\n\n    output_shape = (N, K, H_out, W_out)\n    output = torch.empty(output_shape, device=input.device, dtype=input.dtype)\n\n    grid = (triton.cdiv(N * K * H_out * W_out, BLOCK_SIZE_N * BLOCK_SIZE_C * BLOCK_SIZE_H * BLOCK_SIZE_W),)\n    conv2d_leaky_relu_kernel[grid](\n        input, weight, bias, output,\n        stride, padding, dilation, groups,\n        input.shape, weight.shape, output.shape,\n        negative_slope,\n        BLOCK_SIZE_N=16, BLOCK_SIZE_C=16, BLOCK_SIZE_H=16, BLOCK_SIZE_W=16\n    )\n\n    if inplace:\n        input.copy_(output)\n        return input\n    else:\n        return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in :attr:`input`, and then applies the exponential function to the square-rooted values. The combined operation is defined as: out_i = e^(sqrt(input_i))\nWrapper Entry Information: def sqrt_exp(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: out_i = e^(sqrt(input_i))\nother: N/A\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the square root of each element in :attr:`input`, and then applies the exponential function to the square-rooted values. The combined operation is defined as: out_i = e^(sqrt(input_i))\nWrapper Entry Information: def sqrt_exp(input, out=None) -> Tensor: input (Tensor): The input tensor. out (Tensor, optional): The output tensor.\nMath: out_i = e^(sqrt(input_i))\nother: N/A\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute the square root and then apply the exponential function\n@triton.jit\ndef sqrt_exp_kernel(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    sqrt_value = tl.sqrt(a_value.to(tl.float32))\n    # Apply the exponential function to the square-rooted values\n    exp_value = tl.exp(sqrt_value)\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, exp_value, mask=mask)\n\n# Wrapper function to launch the Triton kernel and compute the square root and exponential\ndef sqrt_exp(input, out=None) -> torch.Tensor:\n    # Create an output tensor 'out' if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    sqrt_exp_kernel[(grid_size, 1, 1)](input, out, n_elements, block_size)\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the cosine function element-wise to the input tensor, followed by a 1D average pooling. The function first computes the cosine of each element in the input tensor, then applies 1D average pooling over the resulting tensor with the specified kernel size, stride, padding, ceil mode, and padding inclusion.\nWrapper Entry Information: def cos_avg_pool1d(input: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, ceil_mode: bool = False, count_include_pad: bool = True) -> torch.Tensor\n    \n    input (Tensor): The input tensor of shape (minibatch, in_channels, iW).\n    kernel_size (int): Size of the pooling window.\n    stride (int, optional): Stride of the pooling window. Defaults to `kernel_size`.\n    padding (int, optional): Zero-padding added to both sides of the input. Default is 0.\n    ceil_mode (bool, optional): If True, uses ceil instead of floor to compute the output shape. Default is False.\n    count_include_pad (bool, optional): If True, includes the zero-padding in the averaging calculation. Default is True.\nMath: \\text{output} = \\text{avg\\_pool1d}(\\cos(\\text{input}))\nother: The function involves computing the cosine transformation followed by pooling, and handles parameters like stride, padding, and ceil mode.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the cosine function element-wise to the input tensor, followed by a 1D average pooling. The function first computes the cosine of each element in the input tensor, then applies 1D average pooling over the resulting tensor with the specified kernel size, stride, padding, ceil mode, and padding inclusion.\nWrapper Entry Information: def cos_avg_pool1d(input: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, ceil_mode: bool = False, count_include_pad: bool = True) -> torch.Tensor\n    \n    input (Tensor): The input tensor of shape (minibatch, in_channels, iW).\n    kernel_size (int): Size of the pooling window.\n    stride (int, optional): Stride of the pooling window. Defaults to `kernel_size`.\n    padding (int, optional): Zero-padding added to both sides of the input. Default is 0.\n    ceil_mode (bool, optional): If True, uses ceil instead of floor to compute the output shape. Default is False.\n    count_include_pad (bool, optional): If True, includes the zero-padding in the averaging calculation. Default is True.\nMath: \\text{output} = \\text{avg\\_pool1d}(\\cos(\\text{input}))\nother: The function involves computing the cosine transformation followed by pooling, and handles parameters like stride, padding, and ceil mode.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing the cosine of each element in the input tensor\n@triton.jit\ndef compute_cosine(\n    input_ptr, output_ptr, size: tl.constexpr\n):\n    \"\"\"\n    Computes the cosine of each element in the input tensor.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    size : tl.constexpr\n        The number of elements in the input tensor.\n    \"\"\"\n    pid = tl.program_id(0)\n    block_size = 256\n    block_start = pid * block_size\n    offsets = tl.arange(0, block_size)\n    idx = block_start + offsets\n\n    mask = idx < size\n    input_val = tl.load(input_ptr + idx, mask=mask)\n    output_val = tl.cos(input_val)\n    tl.store(output_ptr + idx, output_val, mask=mask)\n\n# Triton kernel for 1D average pooling\n@triton.jit\ndef avg_pool1d(\n    input_ptr, output_ptr, input_size, output_size, kernel_size, stride, padding, count_include_pad: tl.constexpr\n):\n    \"\"\"\n    Applies 1D average pooling over the input tensor.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    input_size : int\n        The size of the input tensor along the pooling dimension.\n    output_size : int\n        The size of the output tensor along the pooling dimension.\n    kernel_size : int\n        The size of the pooling window.\n    stride : int\n        The stride of the pooling window.\n    padding : int\n        The amount of zero-padding added to both sides of the input.\n    count_include_pad : tl.constexpr\n        If True, includes the zero-padding in the averaging calculation.\n    \"\"\"\n    pid = tl.program_id(0)\n    block_size = 256\n    block_start = pid * block_size\n    offsets = tl.arange(0, block_size)\n    idx = block_start + offsets\n\n    mask = idx < output_size\n    output_val = tl.zeros((block_size,), dtype=tl.float32)\n\n    for k in range(kernel_size):\n        input_idx = idx * stride + k - padding\n        input_mask = (input_idx >= 0) & (input_idx < input_size) & mask\n        input_val = tl.load(input_ptr + input_idx, mask=input_mask, other=0.0)\n        output_val += input_val\n\n    if count_include_pad:\n        output_val /= kernel_size\n    else:\n        valid_count = tl.sum(input_mask, axis=0)\n        output_val /= valid_count\n\n    tl.store(output_ptr + idx, output_val, mask=mask)\n\n# Wrapper function for cos_avg_pool1d\ndef cos_avg_pool1d(input: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, ceil_mode: bool = False, count_include_pad: bool = True) -> torch.Tensor:\n    \"\"\"\n    Applies the cosine function element-wise to the input tensor, followed by 1D average pooling.\n\n    Parameters:\n    -----------\n    input (Tensor): The input tensor of shape (minibatch, in_channels, iW).\n    kernel_size (int): Size of the pooling window.\n    stride (int, optional): Stride of the pooling window. Defaults to `kernel_size`.\n    padding (int, optional): Zero-padding added to both sides of the input. Default is 0.\n    ceil_mode (bool, optional): If True, uses ceil instead of floor to compute the output shape. Default is False.\n    count_include_pad (bool, optional): If True, includes the zero-padding in the averaging calculation. Default is True.\n\n    Returns:\n    --------\n    torch.Tensor\n        The output tensor after applying cosine and 1D average pooling.\n    \"\"\"\n    if stride is None:\n        stride = kernel_size\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n\n    B, C, W = input.shape\n    input = input.view(-1, W)  # Flatten the input to (B * C, W)\n\n    # Compute the cosine of each element in the input tensor\n    cosine_output = torch.empty_like(input)\n    grid = (input.numel() // 256 + 1,)\n    compute_cosine[grid](input, cosine_output, input.numel())\n\n    # Compute the output size for 1D average pooling\n    if ceil_mode:\n        output_size = (W + 2 * padding - kernel_size + stride - 1) // stride + 1\n    else:\n        output_size = (W + 2 * padding - kernel_size) // stride + 1\n\n    # Apply 1D average pooling\n    pooled_output = torch.empty((input.shape[0], output_size), device=device)\n    grid = (input.shape[0] * output_size // 256 + 1,)\n    avg_pool1d[grid](cosine_output, pooled_output, W, output_size, kernel_size, stride, padding, count_include_pad)\n\n    # Reshape the output back to (B, C, output_size)\n    pooled_output = pooled_output.view(B, C, output_size)\n\n    return pooled_output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sum of elements in the input tensor along the specified dimension(s), followed by calculating the standard deviation of the summed values.\nWrapper Entry Information: def sum_std(input, dim=None, keepdim=False, dtype=None, correction=1, out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension(s) to reduce. If None, all dimensions are reduced. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default is False. dtype (torch.dtype, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to dtype before the operation. Default: None. correction (int, optional): Difference between the sample size and sample degrees of freedom. Default is 1 (Bessel's correction). out (Tensor, optional): The output tensor.\nMath: \\text{sum} = \\sum_{i=0}^{N-1} x_i\n\n\\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The function uses Bessel's correction by default with a correction value of 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sum of elements in the input tensor along the specified dimension(s), followed by calculating the standard deviation of the summed values.\nWrapper Entry Information: def sum_std(input, dim=None, keepdim=False, dtype=None, correction=1, out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension(s) to reduce. If None, all dimensions are reduced. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default is False. dtype (torch.dtype, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to dtype before the operation. Default: None. correction (int, optional): Difference between the sample size and sample degrees of freedom. Default is 1 (Bessel's correction). out (Tensor, optional): The output tensor.\nMath: \\text{sum} = \\sum_{i=0}^{N-1} x_i\n\n\\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The function uses Bessel's correction by default with a correction value of 1.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_std_kernel(\n    input_ptr,\n    output_ptr,\n    sum_ptr,\n    n_elements,\n    correction: tl.constexpr,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    x = tl.load(input_ptr + offsets, mask=mask)\n    sum_val = tl.sum(x, axis=0)\n    mean_val = sum_val / n_elements\n\n    x_minus_mean = x - mean_val\n    var_val = tl.sum(x_minus_mean * x_minus_mean, axis=0) / (n_elements - correction)\n    std_val = tl.sqrt(var_val)\n\n    tl.store(output_ptr + pid, std_val, mask=mask)\n    tl.store(sum_ptr + pid, sum_val, mask=mask)\n\n@torch.inference_mode()\ndef sum_std(input: torch.Tensor, dim=None, keepdim=False, dtype=None, correction=1, out=None) -> torch.Tensor:\n    \"\"\"\n    Computes the sum of elements in the input tensor along the specified dimension(s),\n    followed by calculating the standard deviation of the summed values.\n\n    Args:\n        input (Tensor): The input tensor.\n        dim (int or tuple of ints, optional): The dimension(s) to reduce. If None, all dimensions are reduced.\n        keepdim (bool, optional): Whether the output tensor has dim retained or not. Default is False.\n        dtype (torch.dtype, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to dtype before the operation. Default: None.\n        correction (int, optional): Difference between the sample size and sample degrees of freedom. Default is 1 (Bessel's correction).\n        out (Tensor, optional): The output tensor.\n\n    Returns:\n        Tensor: The output tensor containing the standard deviation of the summed values.\n    \"\"\"\n    if dtype is not None:\n        input = input.to(dtype)\n\n    if dim is None:\n        input = input.flatten()\n        dim = 0\n\n    if isinstance(dim, int):\n        dim = (dim,)\n\n    if out is None:\n        out = torch.empty_like(input, device=input.device, dtype=input.dtype)\n\n    # Calculate the number of elements in the reduced dimensions\n    n_elements = 1\n    for d in dim:\n        n_elements *= input.shape[d]\n\n    # Flatten the input tensor along the specified dimensions\n    input_flattened = input.flatten(start_dim=dim[0], end_dim=dim[-1])\n\n    # Allocate memory for the sum and output tensors\n    sum_tensor = torch.empty(input_flattened.shape[0], device=input.device, dtype=input.dtype)\n    output_tensor = torch.empty(input_flattened.shape[0], device=input.device, dtype=input.dtype)\n\n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n\n    # Launch the kernel\n    grid = (input_flattened.shape[0],)\n    sum_std_kernel[grid](\n        input_flattened,\n        output_tensor,\n        sum_tensor,\n        n_elements,\n        correction,\n        BLOCK_SIZE,\n        num_warps=4,\n        num_stages=2,\n    )\n\n    # Reshape the output tensor if keepdim is True\n    if keepdim:\n        out_shape = list(input.shape)\n        for d in dim:\n            out_shape[d] = 1\n        output_tensor = output_tensor.view(out_shape)\n\n    return output_tensor\n\n# Example usage\ninput_tensor = torch.randn(4, 5, 6, device='cuda')\nresult = sum_std(input_tensor, dim=(1, 2), keepdim=True)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs element-wise multiplication of two inputs, input and other, and then applies the Rectified Linear Unit (ReLU) function to the result, which replaces all negative values with zero.\nWrapper Entry Information: def mul_relu(input, other, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other (Tensor or Number): The tensor or number to multiply with `input`. inplace (bool, optional): If True, modifies `input` in-place, if possible. Default is False. out (Tensor, optional): The output tensor.\nMath: ReLU(x) = max(0, x); out_i = ReLU(input_i * other_i)\nother: The function uses torch.mul for multiplication and F.relu for the ReLU operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs element-wise multiplication of two inputs, input and other, and then applies the Rectified Linear Unit (ReLU) function to the result, which replaces all negative values with zero.\nWrapper Entry Information: def mul_relu(input, other, inplace=False, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other (Tensor or Number): The tensor or number to multiply with `input`. inplace (bool, optional): If True, modifies `input` in-place, if possible. Default is False. out (Tensor, optional): The output tensor.\nMath: ReLU(x) = max(0, x); out_i = ReLU(input_i * other_i)\nother: The function uses torch.mul for multiplication and F.relu for the ReLU operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nimport torch.nn.functional as F\n\n@triton.jit\ndef mul_relu_kernel(\n    input_ptr,\n    other_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    input_vals = tl.load(input_ptr + offsets, mask=mask)\n    other_vals = tl.load(other_ptr + offsets, mask=mask)\n\n    mul_vals = input_vals * other_vals\n    relu_vals = tl.maximum(mul_vals, 0)\n\n    tl.store(output_ptr + offsets, relu_vals, mask=mask)\n\nimport torch\nimport triton\nfrom torch import Tensor\n\n@torch.inference_mode()\ndef mul_relu(input: Tensor, other: Tensor, inplace: bool = False, out: Tensor = None) -> Tensor:\n    \"\"\"\n    Performs element-wise multiplication of two inputs, `input` and `other`, and then applies the ReLU function to the result.\n    \n    Args:\n        input (Tensor): The input tensor to be multiplied.\n        other (Tensor or Number): The tensor or number to multiply with `input`.\n        inplace (bool, optional): If True, modifies `input` in-place, if possible. Default is False.\n        out (Tensor, optional): The output tensor.\n    \n    Returns:\n        Tensor: The output tensor after applying the element-wise multiplication and ReLU.\n    \"\"\"\n    if isinstance(other, (int, float)):\n        other = torch.tensor(other, device=input.device, dtype=input.dtype)\n\n    if out is None:\n        if inplace:\n            out = input\n        else:\n            out = torch.empty_like(input)\n\n    n_elements = input.numel()\n    grid = (triton.cdiv(n_elements, 1024),)\n    block_size = 1024\n\n    mul_relu_kernel[grid](\n        input,\n        other,\n        out,\n        n_elements,\n        BLOCK_SIZE=block_size,\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the Gaussian Error Linear Units (GELU) activation function element-wise to the result. This helps introduce non-linearity after the convolution operation.\nWrapper Entry Information: def gelu_conv2d(input: Tensor, weight: Tensor, bias: Optional[Tensor] = None, stride: Union[int, Tuple[int, int]] = 1, padding: Union[int, Tuple[int, int], str] = 0, dilation: Union[int, Tuple[int, int]] = 1, groups: int = 1, approximate: str = 'none', out: Optional[Tensor] = None) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\n    weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\n    bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: ``None``.\n    stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\n    padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of groups to split the input into. Default: 1.\n    approximate (str, optional): The approximation method for GELU. Default is 'none'.\n    out (Tensor, optional): The output tensor.\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{GELU}(\\text{conv2d}(\\text{input}, \\text{weight}))\n\nwhere GELU is computed as:\n\n- If :attr:`approximate` is 'none', GELU is computed as:\n\n  .. math::\n      \\text{GELU}(x) = x * \\Phi(x)\n\n  where :math:`\\Phi(x)` is the Cumulative Distribution Function for Gaussian Distribution.\n\n- If :attr:`approximate` is 'tanh', GELU is approximated as:\n\n  .. math::\n      \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3)))\nother: The function combines 2D convolution and GELU activation, with options for approximation methods for GELU.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor with specified filters, followed by applying the Gaussian Error Linear Units (GELU) activation function element-wise to the result. This helps introduce non-linearity after the convolution operation.\nWrapper Entry Information: def gelu_conv2d(input: Tensor, weight: Tensor, bias: Optional[Tensor] = None, stride: Union[int, Tuple[int, int]] = 1, padding: Union[int, Tuple[int, int], str] = 0, dilation: Union[int, Tuple[int, int]] = 1, groups: int = 1, approximate: str = 'none', out: Optional[Tensor] = None) -> Tensor\nArgs:\n    input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`.\n    weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`.\n    bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: ``None``.\n    stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple `(sH, sW)`. Default: 1.\n    padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple `(padH, padW)`. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of groups to split the input into. Default: 1.\n    approximate (str, optional): The approximation method for GELU. Default is 'none'.\n    out (Tensor, optional): The output tensor.\nMath: The combined operation is defined as:\n\n.. math::\n    \\text{out} = \\text{GELU}(\\text{conv2d}(\\text{input}, \\text{weight}))\n\nwhere GELU is computed as:\n\n- If :attr:`approximate` is 'none', GELU is computed as:\n\n  .. math::\n      \\text{GELU}(x) = x * \\Phi(x)\n\n  where :math:`\\Phi(x)` is the Cumulative Distribution Function for Gaussian Distribution.\n\n- If :attr:`approximate` is 'tanh', GELU is approximated as:\n\n  .. math::\n      \\text{GELU}(x) = 0.5 * x * (1 + \\text{Tanh}(\\sqrt{2 / \\pi} * (x + 0.044715 * x^3)))\nother: The function combines 2D convolution and GELU activation, with options for approximation methods for GELU.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for 2D convolution followed by GELU activation\n@triton.jit\ndef gelu_conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr, \n    input_shape, weight_shape, output_shape, \n    stride, padding, dilation, groups, \n    approximate, \n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_C: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr\n):\n    # Extract shapes\n    N, C, H, W = input_shape\n    K, Cg, R, S = weight_shape\n    N, K, Ho, Wo = output_shape\n\n    # Extract convolution parameters\n    stride_h, stride_w = stride\n    pad_h, pad_w = padding\n    dilation_h, dilation_w = dilation\n\n    # Compute the grid and block indices\n    pid_n = tl.program_id(0)\n    pid_k = tl.program_id(1)\n    pid_ho = tl.program_id(2)\n    pid_wo = tl.program_id(3)\n\n    # Compute the block start indices\n    ho_start = pid_ho * BLOCK_SIZE_H\n    wo_start = pid_wo * BLOCK_SIZE_W\n\n    # Compute the block end indices\n    ho_end = min(ho_start + BLOCK_SIZE_H, Ho)\n    wo_end = min(wo_start + BLOCK_SIZE_W, Wo)\n\n    # Initialize the output block\n    output_block = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W), dtype=tl.float32)\n\n    # Iterate over the input channels and kernel positions\n    for r in range(R):\n        for s in range(S):\n            for c in range(Cg):\n                # Compute the input indices\n                h_start = ho_start * stride_h - pad_h + r * dilation_h\n                w_start = wo_start * stride_w - pad_w + s * dilation_w\n\n                # Compute the input block\n                input_block = tl.load(\n                    input_ptr + (pid_n * C * H * W + c * H * W + h_start * W + w_start) * BLOCK_SIZE_H * BLOCK_SIZE_W,\n                    mask=(h_start + tl.arange(0, BLOCK_SIZE_H) < H) & (w_start + tl.arange(0, BLOCK_SIZE_W) < W),\n                    other=0.0\n                )\n\n                # Compute the weight block\n                weight_block = tl.load(\n                    weight_ptr + (pid_k * Cg * R * S + c * R * S + r * S + s) * BLOCK_SIZE_H * BLOCK_SIZE_W\n                )\n\n                # Perform the convolution\n                output_block += input_block * weight_block\n\n    # Apply bias if provided\n    if bias_ptr is not None:\n        bias_block = tl.load(bias_ptr + pid_k * BLOCK_SIZE_C)\n        output_block += bias_block\n\n    # Apply GELU activation\n    if approximate == 'none':\n        output_block = output_block * tl.erf(output_block / tl.sqrt(tl.float32(2.0)))\n    elif approximate == 'tanh':\n        output_block = 0.5 * output_block * (1 + tl.tanh(tl.sqrt(tl.float32(2.0 / tl.pi)) * (output_block + 0.044715 * output_block * output_block * output_block)))\n\n    # Store the output block\n    tl.store(\n        output_ptr + (pid_n * K * Ho * Wo + pid_k * Ho * Wo + ho_start * Wo + wo_start) * BLOCK_SIZE_H * BLOCK_SIZE_W,\n        output_block,\n        mask=(ho_start + tl.arange(0, BLOCK_SIZE_H) < Ho) & (wo_start + tl.arange(0, BLOCK_SIZE_W) < Wo)\n    )\n\n# Python wrapper function\ndef gelu_conv2d(input: torch.Tensor, weight: torch.Tensor, bias: Optional[torch.Tensor] = None, \n                stride: Union[int, Tuple[int, int]] = 1, padding: Union[int, Tuple[int, int], str] = 0, \n                dilation: Union[int, Tuple[int, int]] = 1, groups: int = 1, \n                approximate: str = 'none', out: Optional[torch.Tensor] = None) -> torch.Tensor:\n    # Ensure input and weight are on the same device\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == weight.device, \"Input and weight must be on the same CUDA device.\"\n\n    # Ensure bias is on the same device if provided\n    if bias is not None:\n        assert bias.device == device, \"Bias must be on the same CUDA device as input and weight.\"\n\n    # Convert stride, padding, and dilation to tuples if they are single numbers\n    if isinstance(stride, int):\n        stride = (stride, stride)\n    if isinstance(padding, int):\n        padding = (padding, padding)\n    if isinstance(dilation, int):\n        dilation = (dilation, dilation)\n\n    # Compute output shape\n    N, C, H, W = input.shape\n    K, Cg, R, S = weight.shape\n    Ho = (H + 2 * padding[0] - dilation[0] * (R - 1) - 1) // stride[0] + 1\n    Wo = (W + 2 * padding[1] - dilation[1] * (S - 1) - 1) // stride[1] + 1\n\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty((N, K, Ho, Wo), device=device, dtype=input.dtype)\n\n    # Define block and grid sizes\n    BLOCK_SIZE_N = 1\n    BLOCK_SIZE_C = 1\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n\n    grid = (N, K, (Ho + BLOCK_SIZE_H - 1) // BLOCK_SIZE_H, (Wo + BLOCK_SIZE_W - 1) // BLOCK_SIZE_W)\n\n    # Launch the kernel\n    gelu_conv2d_kernel[grid](\n        input, weight, bias, out,\n        (N, C, H, W), (K, Cg, R, S), (N, K, Ho, Wo),\n        stride, padding, dilation, groups,\n        approximate,\n        BLOCK_SIZE_N, BLOCK_SIZE_C, BLOCK_SIZE_H, BLOCK_SIZE_W\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a 2D convolution followed by SELU activation and instance normalization on the input tensor.\nWrapper Entry Information: fused_instance_norm_selu_conv2d(input: Tensor, weight: Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, num_features=None, eps=1e-5, momentum=0.1, affine=False, track_running_stats=False) -> Tensor: input (Tensor): Input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): Weights for the convolution, shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Bias for the convolution layer, shape (out_channels). stride (int or tuple, optional): Stride of the convolution. Default is 1. padding (int or tuple, optional): Padding for the convolution. Default is 0. dilation (int or tuple, optional): Spacing between kernel elements. Default is 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default is 1. num_features (int, optional): Number of features or channels in the input for instance normalization. eps (float, optional): A value added to the denominator for numerical stability in instance normalization. Default is 1e-5. momentum (float, optional): Momentum for updating running statistics in instance normalization. Default is 0.1. affine (bool, optional): If True, instance normalization has learnable affine parameters. Default is False. track_running_stats (bool, optional): If True, tracks running mean and variance for instance normalization. Default is False.\nother: The function combines convolution, SELU activation, and instance normalization in a single operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a 2D convolution followed by SELU activation and instance normalization on the input tensor.\nWrapper Entry Information: fused_instance_norm_selu_conv2d(input: Tensor, weight: Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, num_features=None, eps=1e-5, momentum=0.1, affine=False, track_running_stats=False) -> Tensor: input (Tensor): Input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): Weights for the convolution, shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Bias for the convolution layer, shape (out_channels). stride (int or tuple, optional): Stride of the convolution. Default is 1. padding (int or tuple, optional): Padding for the convolution. Default is 0. dilation (int or tuple, optional): Spacing between kernel elements. Default is 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default is 1. num_features (int, optional): Number of features or channels in the input for instance normalization. eps (float, optional): A value added to the denominator for numerical stability in instance normalization. Default is 1e-5. momentum (float, optional): Momentum for updating running statistics in instance normalization. Default is 0.1. affine (bool, optional): If True, instance normalization has learnable affine parameters. Default is False. track_running_stats (bool, optional): If True, tracks running mean and variance for instance normalization. Default is False.\nother: The function combines convolution, SELU activation, and instance normalization in a single operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_instance_norm_selu_conv2d_kernel(\n    input_ptr,\n    weight_ptr,\n    bias_ptr,\n    output_ptr,\n    in_channels,\n    out_channels,\n    in_h,\n    in_w,\n    out_h,\n    out_w,\n    k_h,\n    k_w,\n    stride_h,\n    stride_w,\n    padding_h,\n    padding_w,\n    dilation_h,\n    dilation_w,\n    groups,\n    num_features,\n    eps,\n    BLOCK_SIZE_H: tl.constexpr,\n    BLOCK_SIZE_W: tl.constexpr,\n    BLOCK_SIZE_C: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_size = BLOCK_SIZE_H * BLOCK_SIZE_W\n    num_blocks = (out_h * out_w + block_size - 1) // block_size\n    block_id = pid % num_blocks\n    block_h = block_id // (out_w // BLOCK_SIZE_W)\n    block_w = block_id % (out_w // BLOCK_SIZE_W)\n\n    # Compute the starting and ending indices for the block\n    start_h = block_h * BLOCK_SIZE_H\n    start_w = block_w * BLOCK_SIZE_W\n    end_h = min(start_h + BLOCK_SIZE_H, out_h)\n    end_w = min(start_w + BLOCK_SIZE_W, out_w)\n\n    # Compute the starting and ending indices for the input\n    start_h_in = start_h * stride_h - padding_h\n    start_w_in = start_w * stride_w - padding_w\n    end_h_in = start_h_in + (end_h - start_h) * stride_h + (k_h - 1) * dilation_h\n    end_w_in = start_w_in + (end_w - start_w) * stride_w + (k_w - 1) * dilation_w\n\n    # Load the input and weight tensors\n    input_block = tl.zeros((BLOCK_SIZE_H, BLOCK_SIZE_W, in_channels), dtype=tl.float32)\n    weight_block = tl.load(weight_ptr, mask=tl.arange(0, out_channels) < out_channels)\n\n    for h in range(start_h, end_h):\n        for w in range(start_w, end_w):\n            for c in range(0, in_channels, BLOCK_SIZE_C):\n                input_block[h - start_h, w - start_w, c:c + BLOCK_SIZE_C] = tl.load(\n                    input_ptr + (h * stride_h - padding_h) * in_w * in_channels + (w * stride_w - padding_w) * in_channels + c,\n                    mask=(h * stride_h - padding_h) * in_w * in_channels + (w * stride_w - padding_w) * in_channels + c < in_h * in_w * in_channels\n                )\n\n    # Perform the convolution\n    conv_output = tl.zeros((BLOCK_SIZE_H, BLOCK_SIZE_W, out_channels), dtype=tl.float32)\n    for c in range(0, in_channels, BLOCK_SIZE_C):\n        for kh in range(k_h):\n            for kw in range(k_w):\n                conv_output += tl.dot(\n                    input_block[:, :, c:c + BLOCK_SIZE_C],\n                    weight_block[kh * k_w * in_channels + kw * in_channels + c:c + BLOCK_SIZE_C, :]\n                )\n\n    # Apply bias if provided\n    if bias_ptr is not None:\n        bias_block = tl.load(bias_ptr, mask=tl.arange(0, out_channels) < out_channels)\n        conv_output += bias_block\n\n    # Apply SELU activation\n    conv_output = 1.0507 * tl.where(conv_output > 0, conv_output, 1.67326 * tl.exp(conv_output) - 1.67326)\n\n    # Compute instance normalization\n    mean = tl.sum(conv_output, axis=2) / out_channels\n    var = tl.sum((conv_output - mean[:, :, None]) ** 2, axis=2) / out_channels\n    conv_output = (conv_output - mean[:, :, None]) / tl.sqrt(var[:, :, None] + eps)\n\n    # Apply affine transformation if affine is True\n    if affine:\n        gamma = tl.load(gamma_ptr, mask=tl.arange(0, out_channels) < out_channels)\n        beta = tl.load(beta_ptr, mask=tl.arange(0, out_channels) < out_channels)\n        conv_output = conv_output * gamma + beta\n\n    # Store the output\n    for h in range(start_h, end_h):\n        for w in range(start_w, end_w):\n            tl.store(\n                output_ptr + h * out_w * out_channels + w * out_channels,\n                conv_output[h - start_h, w - start_w, :],\n                mask=(h < out_h) & (w < out_w)\n            )\n\nimport torch\nfrom triton.runtime.jit import get_cuda_stream\n\ndef fused_instance_norm_selu_conv2d(\n    input: torch.Tensor,\n    weight: torch.Tensor,\n    bias: torch.Tensor = None,\n    stride: int or tuple = 1,\n    padding: int or tuple = 0,\n    dilation: int or tuple = 1,\n    groups: int = 1,\n    num_features: int = None,\n    eps: float = 1e-5,\n    momentum: float = 0.1,\n    affine: bool = False,\n    track_running_stats: bool = False\n) -> torch.Tensor:\n    \"\"\"\n    Applies a fused operation consisting of a 2D convolution followed by SELU activation and instance normalization on the input tensor.\n\n    Args:\n        input (Tensor): Input tensor of shape (minibatch, in_channels, iH, iW).\n        weight (Tensor): Weights for the convolution, shape (out_channels, in_channels / groups, kH, kW).\n        bias (Tensor, optional): Bias for the convolution layer, shape (out_channels).\n        stride (int or tuple, optional): Stride of the convolution. Default is 1.\n        padding (int or tuple, optional): Padding for the convolution. Default is 0.\n        dilation (int or tuple, optional): Spacing between kernel elements. Default is 1.\n        groups (int, optional): Number of blocked connections from input channels to output channels. Default is 1.\n        num_features (int, optional): Number of features or channels in the input for instance normalization.\n        eps (float, optional): A value added to the denominator for numerical stability in instance normalization. Default is 1e-5.\n        momentum (float, optional): Momentum for updating running statistics in instance normalization. Default is 0.1.\n        affine (bool, optional): If True, instance normalization has learnable affine parameters. Default is False.\n        track_running_stats (bool, optional): If True, tracks running mean and variance for instance normalization. Default is False.\n\n    Returns:\n        Tensor: The output tensor after applying the fused operation.\n    \"\"\"\n\n    # Ensure input and weight are on the same device\n    device = input.device\n    weight = weight.to(device)\n    if bias is not None:\n        bias = bias.to(device)\n\n    # Get input and weight dimensions\n    minibatch, in_channels, in_h, in_w = input.shape\n    out_channels, in_channels_per_group, k_h, k_w = weight.shape\n\n    # Compute output dimensions\n    if isinstance(stride, int):\n        stride_h, stride_w = stride, stride\n    else:\n        stride_h, stride_w = stride\n\n    if isinstance(padding, int):\n        padding_h, padding_w = padding, padding\n    else:\n        padding_h, padding_w = padding\n\n    if isinstance(dilation, int):\n        dilation_h, dilation_w = dilation, dilation\n    else:\n        dilation_h, dilation_w = dilation\n\n    out_h = (in_h + 2 * padding_h - dilation_h * (k_h - 1) - 1) // stride_h + 1\n    out_w = (in_w + 2 * padding_w - dilation_w * (k_w - 1) - 1) // stride_w + 1\n\n    # Allocate output tensor\n    output = torch.empty((minibatch, out_channels, out_h, out_w), device=device)\n\n    # Set up grid and block sizes\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n    BLOCK_SIZE_C = 32\n\n    grid = (minibatch, (out_h * out_w + BLOCK_SIZE_H * BLOCK_SIZE_W - 1) // (BLOCK_SIZE_H * BLOCK_SIZE_W))\n\n    # Launch the kernel\n    fused_instance_norm_selu_conv2d_kernel[grid](\n        input,\n        weight,\n        bias,\n        output,\n        in_channels,\n        out_channels,\n        in_h,\n        in_w,\n        out_h,\n        out_w,\n        k_h,\n        k_w,\n        stride_h,\n        stride_w,\n        padding_h,\n        padding_w,\n        dilation_h,\n        dilation_w,\n        groups,\n        num_features,\n        eps,\n        BLOCK_SIZE_H,\n        BLOCK_SIZE_W,\n        BLOCK_SIZE_C,\n        num_warps=4,\n        num_stages=2,\n        stream=get_cuda_stream(device.index)\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a ReLU activation followed by 2D fractional max pooling over an input signal composed of multiple planes. The input is first rectified (non-negative) and then pooled using fractional max pooling.\nWrapper Entry Information: def fused_fractional_max_pool2d_with_relu(input: torch.Tensor, kernel_size, output_size=None, output_ratio=None, return_indices=False) -> torch.Tensor: Input (Tensor): Input tensor. kernel_size (int or Tuple[int, int]): Size of the pooling window. output_size (Tuple[int, int], optional): Target output size (height, width). output_ratio (Tuple[float, float], optional): If set, output size is scaled as a ratio of the input size. return_indices (bool, optional): If `True`, return the max pooling indices along with the output.\nother: The function combines ReLU activation with fractional max pooling, allowing for optional output size or ratio specification and the option to return pooling indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a ReLU activation followed by 2D fractional max pooling over an input signal composed of multiple planes. The input is first rectified (non-negative) and then pooled using fractional max pooling.\nWrapper Entry Information: def fused_fractional_max_pool2d_with_relu(input: torch.Tensor, kernel_size, output_size=None, output_ratio=None, return_indices=False) -> torch.Tensor: Input (Tensor): Input tensor. kernel_size (int or Tuple[int, int]): Size of the pooling window. output_size (Tuple[int, int], optional): Target output size (height, width). output_ratio (Tuple[float, float], optional): If set, output size is scaled as a ratio of the input size. return_indices (bool, optional): If `True`, return the max pooling indices along with the output.\nother: The function combines ReLU activation with fractional max pooling, allowing for optional output size or ratio specification and the option to return pooling indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_kernel(X, Y, stride_xn, stride_xc, stride_xh, stride_xw, stride_yn, stride_yc, stride_yh, stride_yw, N, C, H, W):\n    pid = tl.program_id(axis=0)\n    n = pid // (C * H * W)\n    c = (pid % (C * H * W)) // (H * W)\n    h = (pid % (H * W)) // W\n    w = pid % W\n\n    # Compute the index in the input tensor\n    x_idx = n * stride_xn + c * stride_xc + h * stride_xh + w * stride_xw\n    # Apply ReLU\n    y_val = tl.max(X[x_idx], 0.0)\n    # Compute the index in the output tensor\n    y_idx = n * stride_yn + c * stride_yc + h * stride_yh + w * stride_yw\n    # Write the result to the output tensor\n    Y[y_idx] = y_val\n\n@triton.jit\ndef fractional_max_pool2d_kernel(X, Y, indices, stride_xn, stride_xc, stride_xh, stride_xw, stride_yn, stride_yc, stride_yh, stride_yw, N, C, H, W, kernel_h, kernel_w, output_h, output_w, return_indices: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    n = pid // (C * output_h * output_w)\n    c = (pid % (C * output_h * output_w)) // (output_h * output_w)\n    oh = (pid % (output_h * output_w)) // output_w\n    ow = pid % output_w\n\n    # Compute the input region for this output element\n    ih_start = int(oh * (H / output_h))\n    iw_start = int(ow * (W / output_w))\n    ih_end = int((oh + 1) * (H / output_h))\n    iw_end = int((ow + 1) * (W / output_w))\n\n    # Initialize max value and index\n    max_val = -float('inf')\n    max_idx = -1\n\n    for ih in range(ih_start, ih_end):\n        for iw in range(iw_start, iw_end):\n            # Compute the index in the input tensor\n            x_idx = n * stride_xn + c * stride_xc + ih * stride_xh + iw * stride_xw\n            # Update max value and index\n            if X[x_idx] > max_val:\n                max_val = X[x_idx]\n                max_idx = x_idx\n\n    # Compute the index in the output tensor\n    y_idx = n * stride_yn + c * stride_yc + oh * stride_yh + ow * stride_yw\n    # Write the result to the output tensor\n    Y[y_idx] = max_val\n\n    if return_indices:\n        # Compute the index in the indices tensor\n        idx_idx = n * stride_yn + c * stride_yc + oh * stride_yh + ow * stride_yw\n        # Write the index of the max value to the indices tensor\n        indices[idx_idx] = max_idx\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_fractional_max_pool2d_with_relu(input: torch.Tensor, kernel_size, output_size=None, output_ratio=None, return_indices=False) -> torch.Tensor:\n    # Ensure the input is a 4D tensor (N, C, H, W)\n    assert input.dim() == 4, \"Input tensor must be 4D (N, C, H, W)\"\n    \n    N, C, H, W = input.shape\n\n    # Determine the output size\n    if output_size is not None:\n        output_h, output_w = output_size\n    elif output_ratio is not None:\n        output_h = int(H * output_ratio[0])\n        output_w = int(W * output_ratio[1])\n    else:\n        raise ValueError(\"Either output_size or output_ratio must be specified\")\n\n    # Create output tensor\n    output = torch.empty((N, C, output_h, output_w), device=input.device, dtype=input.dtype)\n\n    # Create indices tensor if return_indices is True\n    indices = None\n    if return_indices:\n        indices = torch.empty((N, C, output_h, output_w), device=input.device, dtype=torch.int64)\n\n    # Launch the ReLU kernel\n    relu_kernel[(N * C * H * W,)](input, output, input.stride(0), input.stride(1), input.stride(2), input.stride(3), output.stride(0), output.stride(1), output.stride(2), output.stride(3), N, C, H, W)\n\n    # Launch the fractional max pooling kernel\n    fractional_max_pool2d_kernel[(N * C * output_h * output_w,)](output, output, indices, output.stride(0), output.stride(1), output.stride(2), output.stride(3), output.stride(0), output.stride(1), output.stride(2), output.stride(3), N, C, H, W, kernel_size[0], kernel_size[1], output_h, output_w, return_indices)\n\n    if return_indices:\n        return output, indices\n    else:\n        return output\n\n# Sample input tensor\ninput_tensor = torch.randn(2, 3, 10, 10, device='cuda')\n\n# Test the function\noutput_tensor = fused_fractional_max_pool2d_with_relu(input_tensor, kernel_size=(2, 2), output_size=(5, 5))\nprint(output_tensor)\n\n# Test with indices\noutput_tensor, indices = fused_fractional_max_pool2d_with_relu(input_tensor, kernel_size=(2, 2), output_size=(5, 5), return_indices=True)\nprint(output_tensor)\nprint(indices)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Chebyshev polynomial of the first kind T_n(input). If n = 0, returns 1. If n = 1, returns input. For n < 6 or |input| > 1, uses a recursive formula. Otherwise, uses an explicit trigonometric formula.\nWrapper Entry Information: chebyshev_polynomial_t(input, n, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. n (Tensor): Degree of the polynomial. Keyword args: out (Tensor, optional): the output tensor.\nMath: T_{n + 1}(input) = 2 \\times input \\times T_{n}(input) - T_{n - 1}(input)\nT_{n}(input) = \\text{cos}(n \\times \\text{arccos}(x))\nother: If n = 0, returns 1. If n = 1, returns input. Uses recursion for n < 6 or |input| > 1, otherwise uses trigonometric formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel 'copy_func' that takes one parameter 'x' and returns it. Define a function 'flip' that takes a PyTorch tensor 'A' and a list of dimensions 'dims'. It calculates the strides and offsets to create a flipped view of 'A' and uses the 'copy_func' kernel to copy the flipped view into an output tensor. import triton\nimport torch\n\n@triton.jit\ndef copy_func(x):\n    return x\n\ndef flip(A: torch.Tensor, dims) -> torch.Tensor:\n    strides = list(A.stride())\n    flip_dims_b = [False for _ in A.stride()]\n    for dim in dims:\n        assert (\n            dim >= -A.dim() and dim < A.dim()\n        ), \"Dimension out of range (expected to be in range of [{}, {}], but got {})\".format(\n            -A.dim(), A.dim() - 1, dim\n        )\n        assert not flip_dims_b[\n            dim\n        ], \"dim {} appears multiple times in the list of dims\".format(dim)\n        flip_dims_b[dim] = True\n    n = 0\n    offset = 0\n    for i in range(len(flip_dims_b)):\n        if flip_dims_b[i] and A.size(i) > 1 and A.stride(i) != 0:\n            offset += strides[i] * (A.shape[i] - 1)\n            strides[i] = -strides[i]\n            n += 1\n    if n == 0 or A.numel() <= 1:\n        return A.clone()\n    out = torch.empty_like(A)\n    flipped_A = StridedBuffer(A, strides=strides, offset=offset)\n    overload = copy_func.instantiate(A.ndim)\n    overload(flipped_A, out0=out)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Chebyshev polynomial of the first kind T_n(input). If n = 0, returns 1. If n = 1, returns input. For n < 6 or |input| > 1, uses a recursive formula. Otherwise, uses an explicit trigonometric formula.\nWrapper Entry Information: chebyshev_polynomial_t(input, n, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. n (Tensor): Degree of the polynomial. Keyword args: out (Tensor, optional): the output tensor.\nMath: T_{n + 1}(input) = 2 \\times input \\times T_{n}(input) - T_{n - 1}(input)\nT_{n}(input) = \\text{cos}(n \\times \\text{arccos}(x))\nother: If n = 0, returns 1. If n = 1, returns input. Uses recursion for n < 6 or |input| > 1, otherwise uses trigonometric formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef chebyshev_kernel(input_ptr, n_ptr, output_ptr, input_n, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < input_n\n\n    input = tl.load(input_ptr + offsets, mask=mask)\n    n = tl.load(n_ptr + offsets, mask=mask)\n\n    # Initialize T0 and T1\n    T0 = tl.where(n == 0, 1.0, 0.0)\n    T1 = tl.where(n == 1, input, 0.0)\n\n    # Compute Tn using the recursive formula or trigonometric formula\n    Tn = tl.where(n == 0, T0, T1)\n    Tn_minus_1 = T0\n    Tn_minus_2 = T0\n\n    for i in range(2, 6):\n        Tn = tl.where(n == i, 2 * input * Tn_minus_1 - Tn_minus_2, Tn)\n        Tn_minus_2 = Tn_minus_1\n        Tn_minus_1 = Tn\n\n    # For n >= 6 and |input| <= 1, use the trigonometric formula\n    Tn = tl.where((n >= 6) & (tl.abs(input) <= 1.0), tl.cos(n * tl.acos(input)), Tn)\n\n    # Store the result\n    tl.store(output_ptr + offsets, Tn, mask=mask)\n\nimport torch\n\ndef chebyshev_polynomial_t(input, n, *, out=None):\n    # Ensure input and n are tensors\n    input = input.contiguous()\n    n = n.contiguous()\n\n    # Determine the output tensor\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        out = out.contiguous()\n\n    # Define the grid and block sizes\n    BLOCK_SIZE = 256\n    grid = (input.numel() + BLOCK_SIZE - 1) // BLOCK_SIZE\n\n    # Launch the Triton kernel\n    chebyshev_kernel[grid, BLOCK_SIZE](\n        input, n, out, input.numel(), BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the logit of the elements of input. The input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nWrapper Entry Information: logit(input, eps=None, *, out=None) -> Tensor; input (Tensor): the input tensor.; eps (float, optional): the epsilon for input clamp bound. Default: None; out (Tensor, optional): the output tensor.\nMath: y_{i} = \\ln(\\frac{z_{i}}{1 - z_{i}}); z_{i} = \\begin{cases} x_{i} & \\text{if eps is None} \\\\ \\text{eps} & \\text{if } x_{i} < \\text{eps} \\\\ x_{i} & \\text{if } \\text{eps} \\leq x_{i} \\leq 1 - \\text{eps} \\\\ 1 - \\text{eps} & \\text{if } x_{i} > 1 - \\text{eps} \\end{cases}\nother: input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the logit of the elements of input. The input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nWrapper Entry Information: logit(input, eps=None, *, out=None) -> Tensor; input (Tensor): the input tensor.; eps (float, optional): the epsilon for input clamp bound. Default: None; out (Tensor, optional): the output tensor.\nMath: y_{i} = \\ln(\\frac{z_{i}}{1 - z_{i}}); z_{i} = \\begin{cases} x_{i} & \\text{if eps is None} \\\\ \\text{eps} & \\text{if } x_{i} < \\text{eps} \\\\ x_{i} & \\text{if } \\text{eps} \\leq x_{i} \\leq 1 - \\text{eps} \\\\ 1 - \\text{eps} & \\text{if } x_{i} > 1 - \\text{eps} \\end{cases}\nother: input is clamped to [eps, 1 - eps] when eps is not None. When eps is None and input < 0 or input > 1, the function yields NaN.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef logit_kernel(output_ptr, input_ptr, n_elements, eps, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_values = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n\n    if eps is not None:\n        eps = tl.float32(eps)\n        input_values = tl.where(input_values < eps, eps, input_values)\n        input_values = tl.where(input_values > (1.0 - eps), 1.0 - eps, input_values)\n    else:\n        input_values = tl.where((input_values < 0.0) | (input_values > 1.0), tl.nan, input_values)\n\n    logits = tl.log(input_values / (1.0 - input_values))\n    tl.store(output_ptr + offsets, logits, mask=mask)\n\nimport torch\n\ndef logit(input, eps=None, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    \n    n_elements = input.numel()\n    BLOCK_SIZE = 1024  # Adjust block size as needed\n\n    logit_kernel[(n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        out, input, n_elements, eps, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves a symmetric (or Hermitian) linear system A x = b using LDL decomposition. The function first decomposes A into L and D through LDL decomposition, reconstructs matrix A, and then uses `torch.linalg.solve` to solve the linear system.\nWrapper Entry Information: solve_symmetric_ldl(A, b, *, hermitian=False, out=None) -> Tensor A (Tensor): \u5f62\u72b6\u4e3a (*, n, n) \u7684\u5bf9\u79f0\uff08\u6216 Hermitian\uff09\u77e9\u9635\uff0c\u5176\u4e2d * \u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u6279\u6b21\u7ef4\u5ea6\u3002 b (Tensor): \u5f62\u72b6\u4e3a (*, n) \u6216 (*, n, k) \u7684\u53f3\u7aef\u9879\u5f20\u91cf\u3002 hermitian (bool, \u53ef\u9009): \u662f\u5426\u5c06 A \u89c6\u4e3a Hermitian \u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aFalse\u3002 out (Tensor, \u53ef\u9009): \u8f93\u51fa\u5f20\u91cf\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u5ffd\u7565\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nMath: Given a symmetric (or Hermitian) matrix A in \\mathbb{K}^{n \\times n} (where \\mathbb{K} is the real field \\mathbb{R} or complex field \\mathbb{C}), the LDL decomposition of A is represented as: A = L D L^{\\mathrm{T}} or A = L D L^{\\mathrm{H}}.\nother: This function supports batch processing; all computations are performed across batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a fused Mixture of Experts (MOE) kernel with parameters including pointers to tensors (a_ptr, b_ptr, c_ptr, a_scale_ptr, b_scale_ptr, topk_weights_ptr, sorted_token_ids_ptr, expert_ids_ptr, num_tokens_post_padded_ptr), matrix dimensions (N, K, EM, num_valid_tokens), strides (stride_am, stride_ak, stride_be, stride_bk, stride_bn, stride_cm, stride_cn), and meta-parameters (BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, GROUP_SIZE_M, MUL_ROUTED_WEIGHT, top_k, compute_type, use_fp8). The kernel computes a block of the output matrix C by multiplying tokens and expert matrices, taking into account token padding and expert assignment. The function `invoke_fused_moe_kernel` is used to call the `fused_moe_kernel` with appropriate parameters. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_moe_kernel(\n    a_ptr,\n    b_ptr,\n    c_ptr,\n    a_scale_ptr,\n    b_scale_ptr,\n    topk_weights_ptr,\n    sorted_token_ids_ptr,\n    expert_ids_ptr,\n    num_tokens_post_padded_ptr,\n    N,\n    K,\n    EM,\n    num_valid_tokens,\n    stride_am,\n    stride_ak,\n    stride_be,\n    stride_bk,\n    stride_bn,\n    stride_cm,\n    stride_cn,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n    MUL_ROUTED_WEIGHT: tl.constexpr,\n    top_k: tl.constexpr,\n    compute_type: tl.constexpr,\n    use_fp8: tl.constexpr,\n):\n    \"\"\"\n    Implements the fused computation for a Mixture of Experts (MOE) using\n    token and expert matrices.\n\n    Key Parameters:\n    - A: The input tensor representing tokens with shape (*, K), where '*' can\n        be any shape representing batches and K is the feature dimension of\n        each token.\n    - B: The stacked MOE weight tensor with shape (E, N, K), where E is\n        the number of experts, K is the input feature dimension, and N is\n        the output feature dimension.\n    - C: The output cache tensor with shape (M, topk, N), where M is the\n        total number of tokens post padding, topk is the number of times\n        each token is repeated, and N is the output feature dimension.\n    - sorted_token_ids: A tensor containing the sorted indices of tokens,\n        repeated topk times and arranged by the expert index they are\n        assigned to.\n    - expert_ids: A tensor containing the indices of the expert for each\n        block. It determines which expert matrix from B should be used for\n        each block in A.\n    This kernel performs the multiplication of a token by its corresponding\n    expert matrix as determined by `expert_ids`. The sorting of\n    `sorted_token_ids` by expert index and padding ensures divisibility by\n    BLOCK_SIZE_M, which is necessary to maintain consistency in block matrix\n    multiplication across different blocks processed by the same expert.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(EM, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + ((pid % num_pid_in_group) % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    num_tokens_post_padded = tl.load(num_tokens_post_padded_ptr)\n    if pid_m * BLOCK_SIZE_M >= num_tokens_post_padded:\n        return\n    offs_token_id = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_token = tl.load(sorted_token_ids_ptr + offs_token_id)\n    token_mask = offs_token < num_valid_tokens\n\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = a_ptr + (\n        offs_token[:, None] // top_k * stride_am + offs_k[None, :] * stride_ak\n    )\n\n    off_experts = tl.load(expert_ids_ptr + pid_m)\n    b_ptrs = (\n        b_ptr\n        + off_experts * stride_be\n        + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n    )\n\n    if use_fp8:\n        a_scale = tl.load(a_scale_ptr)\n        b_scale = tl.load(b_scale_ptr + off_experts)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a = tl.load(\n            a_ptrs,\n            mask=token_mask[:, None] & (offs_k[None, :] < K - k * BLOCK_SIZE_K),\n            other=0.0,\n        )\n        b = tl.load(b_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)\n        if use_fp8:\n            accumulator = tl.dot(a, b, acc=accumulator)\n        else:\n            accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    if MUL_ROUTED_WEIGHT:\n        moe_weight = tl.load(topk_weights_ptr + offs_token, mask=token_mask, other=0)\n        accumulator = accumulator * moe_weight[:, None]\n\n    if use_fp8:\n        accumulator = (accumulator * a_scale * b_scale).to(compute_type)\n    else:\n        accumulator = accumulator.to(compute_type)\n\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_token[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = token_mask[:, None] & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef invoke_fused_moe_kernel(\n    A: torch.Tensor,\n    B: torch.Tensor,\n    C: torch.Tensor,\n    A_scale: Optional[torch.Tensor],\n    B_scale: Optional[torch.Tensor],\n    topk_weights: torch.Tensor,\n    topk_ids: torch.Tensor,\n    sorted_token_ids: torch.Tensor,\n    expert_ids: torch.Tensor,\n    num_tokens_post_padded: torch.Tensor,\n    mul_routed_weight: bool,\n    top_k: int,\n    config: Dict[str, Any],\n    compute_type: tl.dtype,\n    use_fp8: bool,\n) -> None:\n    grid = lambda META: (\n        triton.cdiv(sorted_token_ids.shape[0], META[\"BLOCK_SIZE_M\"])\n        * triton.cdiv(B.shape[1], META[\"BLOCK_SIZE_N\"]),\n    )\n\n    fused_moe_kernel[grid](\n        A,\n        B,\n        C,\n        A_scale,\n        B_scale,\n        topk_weights,\n        sorted_token_ids,\n        expert_ids,\n        num_tokens_post_padded,\n        B.shape[1],\n        B.shape[2],\n        sorted_token_ids.shape[0],\n        topk_ids.numel(),\n        A.stride(0),\n        A.stride(1),\n        B.stride(0),\n        B.stride(2),\n        B.stride(1),\n        C.stride(1),\n        C.stride(2),\n        MUL_ROUTED_WEIGHT=mul_routed_weight,\n        top_k=top_k,\n        compute_type=compute_type,\n        use_fp8=use_fp8,\n        **config,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves a symmetric (or Hermitian) linear system A x = b using LDL decomposition. The function first decomposes A into L and D through LDL decomposition, reconstructs matrix A, and then uses `torch.linalg.solve` to solve the linear system.\nWrapper Entry Information: solve_symmetric_ldl(A, b, *, hermitian=False, out=None) -> Tensor A (Tensor): \u5f62\u72b6\u4e3a (*, n, n) \u7684\u5bf9\u79f0\uff08\u6216 Hermitian\uff09\u77e9\u9635\uff0c\u5176\u4e2d * \u662f\u96f6\u4e2a\u6216\u591a\u4e2a\u6279\u6b21\u7ef4\u5ea6\u3002 b (Tensor): \u5f62\u72b6\u4e3a (*, n) \u6216 (*, n, k) \u7684\u53f3\u7aef\u9879\u5f20\u91cf\u3002 hermitian (bool, \u53ef\u9009): \u662f\u5426\u5c06 A \u89c6\u4e3a Hermitian \u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aFalse\u3002 out (Tensor, \u53ef\u9009): \u8f93\u51fa\u5f20\u91cf\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u5ffd\u7565\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nMath: Given a symmetric (or Hermitian) matrix A in \\mathbb{K}^{n \\times n} (where \\mathbb{K} is the real field \\mathbb{R} or complex field \\mathbb{C}), the LDL decomposition of A is represented as: A = L D L^{\\mathrm{T}} or A = L D L^{\\mathrm{H}}.\nother: This function supports batch processing; all computations are performed across batch dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for LDL decomposition\n@triton.jit\ndef ldl_decomposition_kernel(\n    A_ptr, L_ptr, D_ptr, n, stride_am, stride_an, stride_lm, stride_ln, stride_dm,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n\n\n    # Load A block\n    A_block = tl.load(A_ptr + offsets[:, None] * stride_am + offsets[None, :] * stride_an, mask=mask[:, None] & mask[None, :], other=0.0)\n\n    # Initialize L and D blocks\n    L_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n    D_block = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for i in range(BLOCK_SIZE):\n        for j in range(i + 1):\n            if i == j:\n                # Compute D[i, i]\n                D_block[i] = A_block[i, i] - tl.sum(L_block[i, :i] * D_block[:i] * L_block[i, :i], axis=0)\n            else:\n                # Compute L[i, j]\n                L_block[i, j] = (A_block[i, j] - tl.sum(L_block[i, :j] * D_block[:j] * L_block[j, :j], axis=0)) / D_block[j]\n\n    # Store L and D blocks\n    tl.store(L_ptr + offsets[:, None] * stride_lm + offsets[None, :] * stride_ln, L_block, mask=mask[:, None] & mask[None, :])\n    tl.store(D_ptr + offsets, D_block, mask=mask)\n\n# Wrapper function for solving the symmetric (or Hermitian) linear system\ndef solve_symmetric_ldl(A, b, *, hermitian=False, out=None):\n    # Check input shapes\n    assert A.dim() >= 2 and A.shape[-2] == A.shape[-1], \"A must be a square matrix\"\n    assert b.dim() >= 1 and (b.shape[-2] == A.shape[-1] or b.shape[-1] == A.shape[-1]), \"b must have the same number of rows as A\"\n\n    # Determine the number of rows and columns\n    n = A.shape[-1]\n\n    # Allocate memory for L and D\n    L = torch.zeros_like(A, device=A.device)\n    D = torch.zeros(A.shape[:-1], device=A.device)\n\n    # Perform LDL decomposition\n    grid = lambda META: (triton.cdiv(n, META['BLOCK_SIZE']),)\n    ldl_decomposition_kernel[grid](A, L, D, n, A.stride(-2), A.stride(-1), L.stride(-2), L.stride(-1), D.stride(-1), BLOCK_SIZE=16)\n\n    # Reconstruct matrix A from L and D\n    A_reconstructed = torch.matmul(L, torch.matmul(torch.diag_embed(D), L.transpose(-2, -1) if not hermitian else L.conj().transpose(-2, -1)))\n\n    # Solve the linear system using torch.linalg.solve\n    x = torch.linalg.solve(A_reconstructed, b, out=out)\n\n    return x\n\n# Example usage\nA = torch.tensor([[4.0, 12.0, -16.0], [12.0, 37.0, -43.0], [-16.0, -43.0, 98.0]], device='cuda')\nb = torch.tensor([1.0, 2.0, 3.0], device='cuda')\nx = solve_symmetric_ldl(A, b)\nprint(x)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the exponential of each element in the input tensor, followed by calculating the square root of the result. Returns a tensor where each element is the result of applying exponential followed by square root to each element of input.\nWrapper Entry Information: def exp_sqrt(input, out=None) -> Tensor; input (Tensor): The input tensor.; out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{e^{\\text{input}_i}}\nother: This function will return NaN for input elements that result in negative values after `exp` and `sqrt` due to overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the exponential of each element in the input tensor, followed by calculating the square root of the result. Returns a tensor where each element is the result of applying exponential followed by square root to each element of input.\nWrapper Entry Information: def exp_sqrt(input, out=None) -> Tensor; input (Tensor): The input tensor.; out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\sqrt{e^{\\text{input}_i}}\nother: This function will return NaN for input elements that result in negative values after `exp` and `sqrt` due to overflow.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute the exponential followed by the square root of elements in a tensor\n@triton.jit\ndef exp_sqrt_kernel(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the exponential of the loaded elements\n    exp_value = tl.exp(a_value.to(tl.float32))\n    # Compute the square root of the exponential result\n    b_value = tl.sqrt(exp_value)\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)\n\n# Function to launch the Triton kernel and compute exp followed by sqrt\ndef exp_sqrt(input, out=None):\n    # Ensure the input is a tensor\n    if not isinstance(input, torch.Tensor):\n        raise ValueError(\"Input must be a torch.Tensor\")\n    \n    # Create an output tensor 'out' if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    elif out.shape != input.shape:\n        raise ValueError(\"Output tensor must have the same shape as the input tensor\")\n    \n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    \n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    \n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Launch the Triton kernel\n    exp_sqrt_kernel[(grid_size, 1, 1)](input, out, n_elements, block_size)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations combining matrix multiplication, sigmoid, tanh, element-wise multiplication, and addition. It supports batches of inputs, where any leading batch dimensions in `input` will be preserved in the output. The function's operations are differentiable and support autograd. The function ensures the dimensions of `input` and `weight1` are compatible for matrix multiplication, and that `weight2` and `bias` are broadcastable to the shape of the output tensor.\nWrapper Entry Information: combined_activation(input, weight1, weight2, bias, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_{in}), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_{in}, D_{out}).; weight2 (Tensor): Weight tensor for element-wise multiplication, must be broadcastable to the shape of the intermediate activation.; bias (Tensor): Bias tensor, must be broadcastable to the shape of the output.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a bias b, the function computes: Y = (tanh(sigmoid(X W_1)) \u2299 W_2) + b\n\n- \u03c3(z) = 1 / (1 + exp(-z)) is the sigmoid function applied element-wise.\n- tanh(z) = (exp(z) - exp(-z)) / (exp(z) + exp(-z)) is the hyperbolic tangent function applied element-wise.\n- \u2299 denotes element-wise multiplication.\nother: The function supports differentiable operations and autograd. It requires compatibility in dimensions for matrix multiplication and broadcasting for element-wise operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel that computes Y = A[IDX, :]^T @ X + BIAS for a dense matrix A with Z rows and N columns. The kernel takes pointers to matrices Y, A, X, and IDX, matrix dimensions M and N, cache keys CACHE_KEY_M and CACHE_KEY_N, stride_am for pointer increment, and meta-parameters BATCHSIZE, SPARSITY_BIN, BLOCK_M, and BLOCK_N. The kernel is called by a function that computes y = weight[idx, :]^T @ x, where x is the input tensor, weight is the weight matrix, idx is the indices, and sparsity_bin is an integer representing the sparsity bin. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef gather_transposed_gemv_flag_atomicadd_kernel(\n    Y,  # Pointers to matrices\n    A,\n    X,\n    IDX,\n    # Matrix dimensions\n    M,\n    N,\n    CACHE_KEY_M,\n    CACHE_KEY_N,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_am,\n    # Meta-parameters\n    BATCHSIZE: tl.constexpr,\n    SPARSITY_BIN: tl.constexpr,\n    BLOCK_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    \"\"\"\n    Kernel for computing Y = A[IDX, :]^T @ X + BIAS, where A is a dense matrix\n    with Z rows and N columns. We also batch across the batch dimension of the input X.\n    We will not check that the indices are valid, for performance reason.\n    - Input X has shape (BATCHSIZE, M)\n    - Weight has shape (Z, N)\n    - IDX has shape (M), where M is the number of non-zero rows in A\n    - Bias has shape (N)\n    - Output has shape (BATCHSIZE, N)\n    \"\"\"\n    start_m = tl.program_id(0)\n    start_n = tl.program_id(1)\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices for rows (resp. col) of A\n    rm = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\n    IDX = IDX + rm\n    idx = tl.load(IDX, mask=rm < M, other=0) > 0\n    A = A + (rm[:, None] * stride_am + rn[None, :])\n    X = X + rm\n    Y = Y + rn\n    \n    if BATCHSIZE == 1:\n        a = tl.load(A, mask=idx[:, None], other=0.0)\n        x0 = tl.load(X)#, mask=idx, other=0.0) # if flag_gemv is correct, this will be unnecessary.\n        acc0 = tl.sum(a.to(tl.float32) * x0.to(tl.float32)[:, None], 0)\n\n    # rematerialize rm and rn to save registers\n    rn = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    tl.atomic_add(Y, acc0, mask=rn < N)\n    \ndef gather_transposed_gemv_flag_3d(\n    x: torch.Tensor,\n    weight: torch.Tensor,\n    idx: torch.Tensor,\n    sparsity_bin: int\n) -> torch.Tensor:\n    \"\"\"\n    Compute y = weight[idx, :]^T @ x.\n    :param x: input tensor\n    :param weight: weight matrix\n    :param idx: indices\n    :return: result tensor\n    \"\"\"\n    Z, N = weight.shape\n    beam_width, seq_len, _ = x.shape\n    assert x.shape[2] == Z\n    x = x.contiguous()\n    if weight.stride(1) > 1:\n        weight = weight.contiguous()\n\n    output = torch.empty(\n        beam_width,\n        seq_len,\n        N,\n        device=x.device,\n        dtype=torch.float32,\n    )\n\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (\n        triton.cdiv(Z, META[\"BLOCK_M\"]),\n        triton.cdiv(N, META[\"BLOCK_N\"]),\n    )  # noqa\n\n    kernel = gather_transposed_gemv_flag_atomicadd_kernel\n    kernel[grid](\n        output,  # data ptrs\n        weight,\n        x,\n        idx,\n        Z,  # shapes\n        N,\n        Z // 128,  # key for triton cache (limit number of compilations)\n        N // 32,\n        weight.stride(0),  # strides\n        beam_width,  # can't use kwargs because auto-tuner requires args\n        sparsity_bin,\n    )\n    return output# .to(dtype=weight.dtype)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a sequence of operations combining matrix multiplication, sigmoid, tanh, element-wise multiplication, and addition. It supports batches of inputs, where any leading batch dimensions in `input` will be preserved in the output. The function's operations are differentiable and support autograd. The function ensures the dimensions of `input` and `weight1` are compatible for matrix multiplication, and that `weight2` and `bias` are broadcastable to the shape of the output tensor.\nWrapper Entry Information: combined_activation(input, weight1, weight2, bias, *, out=None) -> Tensor; input (Tensor): Input tensor of shape (*, N, D_{in}), where * denotes any number of batch dimensions.; weight1 (Tensor): Weight matrix of shape (D_{in}, D_{out}).; weight2 (Tensor): Weight tensor for element-wise multiplication, must be broadcastable to the shape of the intermediate activation.; bias (Tensor): Bias tensor, must be broadcastable to the shape of the output.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given an input tensor X, weight matrices W_1 and W_2, and a bias b, the function computes: Y = (tanh(sigmoid(X W_1)) \u2299 W_2) + b\n\n- \u03c3(z) = 1 / (1 + exp(-z)) is the sigmoid function applied element-wise.\n- tanh(z) = (exp(z) - exp(-z)) / (exp(z) + exp(-z)) is the hyperbolic tangent function applied element-wise.\n- \u2299 denotes element-wise multiplication.\nother: The function supports differentiable operations and autograd. It requires compatibility in dimensions for matrix multiplication and broadcasting for element-wise operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef combined_activation_kernel(\n    X,  # Input tensor\n    W1,  # Weight matrix 1\n    W2,  # Weight matrix 2\n    B,  # Bias tensor\n    Y,  # Output tensor\n    N,  # Number of elements in the last dimension of X\n    D_in,  # Number of elements in the last dimension of X\n    D_out,  # Number of elements in the last dimension of Y\n    stride_xn,  # Stride for X in the last dimension\n    stride_xd,  # Stride for X in the second-to-last dimension\n    stride_w1d,  # Stride for W1 in the last dimension\n    stride_w2d,  # Stride for W2 in the last dimension\n    stride_yd,  # Stride for Y in the last dimension\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n\n    # Load X and W1\n    x_offsets = tl.arange(0, D_in) * stride_xd + offsets[:, None] * stride_xn\n    x = tl.load(X + x_offsets, mask=mask[:, None], other=0.0)\n\n    w1_offsets = tl.arange(0, D_in) * stride_w1d + tl.arange(0, D_out)[None, :]\n    w1 = tl.load(W1 + w1_offsets)\n\n    # Matrix multiplication\n    z = tl.dot(x, w1)\n\n    # Sigmoid\n    z = 1 / (1 + tl.exp(-z))\n\n    # Tanh\n    z = (tl.exp(z) - tl.exp(-z)) / (tl.exp(z) + tl.exp(-z))\n\n    # Load W2 and B\n    w2_offsets = offsets[:, None] * stride_w2d + tl.arange(0, D_out)[None, :]\n    w2 = tl.load(W2 + w2_offsets, mask=mask[:, None], other=1.0)\n\n    b_offsets = tl.arange(0, D_out)\n    b = tl.load(B + b_offsets)\n\n    # Element-wise multiplication and addition\n    z = z * w2 + b\n\n    # Store the result\n    y_offsets = offsets[:, None] * stride_yd + tl.arange(0, D_out)[None, :]\n    tl.store(Y + y_offsets, z, mask=mask[:, None])\n\nimport torch\n\ndef combined_activation(input, weight1, weight2, bias, *, out=None):\n    # Ensure input and weight1 are compatible for matrix multiplication\n    assert input.shape[-1] == weight1.shape[0], \"Incompatible dimensions for matrix multiplication\"\n\n    # Ensure weight2 and bias are broadcastable to the output shape\n    output_shape = (*input.shape[:-1], weight1.shape[1])\n    weight2 = weight2.expand(output_shape)\n    bias = bias.expand(output_shape)\n\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty(output_shape, device=input.device, dtype=input.dtype)\n\n    # Launch the Triton kernel\n    grid = lambda META: (triton.cdiv(input.numel() // input.shape[-1], META['BLOCK_SIZE']),)\n    combined_activation_kernel[grid](\n        input,  # Input tensor\n        weight1,  # Weight matrix 1\n        weight2,  # Weight matrix 2\n        bias,  # Bias tensor\n        out,  # Output tensor\n        input.shape[-2],  # Number of elements in the last dimension of X\n        input.shape[-1],  # Number of elements in the second-to-last dimension of X\n        weight1.shape[1],  # Number of elements in the last dimension of Y\n        input.stride(-1),  # Stride for X in the last dimension\n        input.stride(-2),  # Stride for X in the second-to-last dimension\n        weight1.stride(-1),  # Stride for W1 in the last dimension\n        weight2.stride(-1),  # Stride for W2 in the last dimension\n        out.stride(-1),  # Stride for Y in the last dimension\n        BLOCK_SIZE=128,  # Block size\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the dot product of the modified `y` with itself. This fused function performs two operations: 1. Scales `x` by a factor of `alpha` and adds the result to `y`. 2. Computes the dot product of the modified `y` with itself.\nWrapper Entry Information: def scaled_add_dot(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape (n,). x (Tensor): The tensor to be scaled and added to y, of shape (n,). alpha (float): The scalar multiplier for x.\nMath: y += alpha * x\ndot_product = torch.dot(y, y)\nother: The function modifies the input tensor `y` in place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel that performs element-wise addition of two vectors. The kernel takes two pointers `x_ptr` and `y_ptr` and an integer `BLOCK_SIZE` to perform operations in parallel on blocks of data. It uses Triton primitives to load data from global memory, perform addition, and store the result back to global memory. A separate wrapper function `launch_example_kernel` is provided to configure grid dimensions and launch the kernel with two PyTorch tensors `x` and `y`. import triton\nimport torch\n\n# A sample Triton kernel function decorated with @triton.jit\n@triton.jit\ndef example_kernel(x_ptr, y_ptr, BLOCK_SIZE: int):\n    \"\"\"\n    This is a sample kernel function that takes two pointers and a block size as input.\n    It performs an element-wise addition of two vectors in parallel.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    x = tl.load(x_ptr + offset)\n    y = tl.load(y_ptr + offset)\n    tl.store(y_ptr + offset, x + y)\n\n# Wrapper function to launch the Triton kernel\ndef launch_example_kernel(x, y):\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(x.size(0), meta['BLOCK_SIZE']),)\n    example_kernel[grid](x, y, BLOCK_SIZE)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes `y += alpha * x` and returns the dot product of the modified `y` with itself. This fused function performs two operations: 1. Scales `x` by a factor of `alpha` and adds the result to `y`. 2. Computes the dot product of the modified `y` with itself.\nWrapper Entry Information: def scaled_add_dot(y: Tensor, x: Tensor, alpha: float) -> Tensor: y (Tensor): The target tensor to be modified, of shape (n,). x (Tensor): The tensor to be scaled and added to y, of shape (n,). alpha (float): The scalar multiplier for x.\nMath: y += alpha * x\ndot_product = torch.dot(y, y)\nother: The function modifies the input tensor `y` in place.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel function\n@triton.jit\ndef scaled_add_dot_kernel(y_ptr, x_ptr, alpha, BLOCK_SIZE: int):\n    \"\"\"\n    This kernel performs the operation y += alpha * x and computes the dot product of the modified y with itself.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < y_ptr.size\n\n    # Load data from global memory\n    y = tl.load(y_ptr + offset, mask=mask)\n    x = tl.load(x_ptr + offset, mask=mask)\n\n    # Perform y += alpha * x\n    y += alpha * x\n\n    # Store the result back to global memory\n    tl.store(y_ptr + offset, y, mask=mask)\n\n    # Compute the dot product of y with itself\n    y_squared = y * y\n    dot_product = tl.sum(y_squared, axis=0)\n\n    # Write the dot product to the output location\n    tl.atomic_add(y_ptr + 0, dot_product, mask=mask)\n\n# Wrapper function to launch the Triton kernel\ndef scaled_add_dot(y: torch.Tensor, x: torch.Tensor, alpha: float) -> torch.Tensor:\n    \"\"\"\n    Computes y += alpha * x and returns the dot product of the modified y with itself.\n    \n    Parameters:\n    y (Tensor): The target tensor to be modified, of shape (n,).\n    x (Tensor): The tensor to be scaled and added to y, of shape (n,).\n    alpha (float): The scalar multiplier for x.\n    \n    Returns:\n    Tensor: The dot product of the modified y with itself.\n    \"\"\"\n    # Ensure the tensors are on the same device\n    assert y.device == x.device, \"Tensors must be on the same device\"\n    \n    # Ensure the tensors have the same shape\n    assert y.shape == x.shape, \"Tensors must have the same shape\"\n    \n    # Allocate a tensor to store the dot product\n    dot_product = torch.zeros(1, device=y.device, dtype=y.dtype)\n    \n    # Define the block size and grid dimensions\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(y.numel(), meta['BLOCK_SIZE']),)\n    \n    # Launch the kernel\n    scaled_add_dot_kernel[grid](y, x, alpha, BLOCK_SIZE)\n    \n    # Return the dot product\n    return dot_product\n\n# Example usage\ny = torch.tensor([1.0, 2.0, 3.0], device='cuda')\nx = torch.tensor([4.0, 5.0, 6.0], device='cuda')\nalpha = 2.0\nresult = scaled_add_dot(y, x, alpha)\nprint(\"Modified y:\", y)\nprint(\"Dot product:\", result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a contraction of a and b over multiple dimensions. It implements a generalized matrix product.\nWrapper Entry Information: def tensordot(a: Tensor, b: Tensor, dims: Union[int, Tuple[List[int], List[int]], List[List[int]]]) -> Tensor: \nArgs:\n    a (Tensor): Left tensor to contract\n    b (Tensor): Right tensor to contract\n    dims (int or Tuple[List[int], List[int]] or List[List[int]] containing two lists or Tensor): number of dimensions to contract or explicit lists of dimensions for a and b respectively\nMath: r_{i_0,...,i_{m-d}, i_d,...,i_n} = \\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}.\nother: The sizes in the contracted dimensions must match, but broadcasted dimensions are handled.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a kernel for performing a tiled matrix multiplication. The kernel, _xformers_tiled_matmul_kernel, requires 47 parameters: 18 tensor pointers for the input matrices (A11 to A33 and B11 to B33), 9 tensor pointers for the output matrix (C11 to C33), 9 integers representing the dimensions of the matrices (M1, M2, M3, N1, N2, N3, K1, K2, K3), 12 integers for stride dimensions (stride_am1, stride_am2, stride_am3, stride_ak1, stride_ak2, stride_ak3, stride_bk1, stride_bk2, stride_bk3, stride_bn1, stride_bn2, stride_bn3), and 5 constexprs (BLOCK_M, BLOCK_N, BLOCK_K, GROUP_M, SPLIT_K, EVEN_K, ACC_TYPE) to control block sizes and data types. Launch the kernel using the _launch_triton_matmul function with 6 parameters: two lists of lists of torch tensors (a, b, c) representing input and output matrices, and three lists of integers (ms, ns, ks) representing matrix dimensions. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit()\ndef _xformers_tiled_matmul_kernel(\n    A11, A12, A13, A21, A22, A23, A31, A32, A33,\n    B11, B12, B13, B21, B22, B23, B31, B32, B33,\n    C11, C12, C13, C21, C22, C23, C31, C32, C33,\n    M1, M2, M3, N1, N2, N3, K1, K2, K3,\n    stride_am1, stride_am2, stride_am3, stride_ak1, stride_ak2, stride_ak3,\n    stride_bk1, stride_bk2, stride_bk3, stride_bn1, stride_bn2, stride_bn3,\n    stride_cm1, stride_cm2, stride_cm3, stride_cn1, stride_cn2, stride_cn3,\n    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, BLOCK_K: tl.constexpr,\n    GROUP_M: tl.constexpr, SPLIT_K: tl.constexpr, EVEN_K: tl.constexpr,\n    ACC_TYPE: tl.constexpr\n):\n    # Kernel logic for matrix multiplication\n\ndef _launch_triton_matmul(\n    a: List[List[torch.Tensor]],\n    b: List[List[torch.Tensor]],\n    c: List[List[torch.Tensor]],\n    ms: List[int],\n    ns: List[int],\n    ks: List[int],\n) -> None:\n    strides_am, strides_ak = _get_strides(a, \"first operand\", \"m\", \"k\")\n    strides_bk, strides_bn = _get_strides(b, \"second operand\", \"k\", \"n\")\n    strides_cm, strides_cn = _get_strides(c, \"output\", \"m\", \"n\")\n\n    ACC_TYPE = (\n        tl.float32\n        if c[0][0].dtype in [torch.float16, torch.bfloat16, torch.float32]\n        else tl.int32\n    )\n\n    def grid(META):\n        return (\n            sum(triton.cdiv(m, META[\"BLOCK_M\"]) for m in ms)\n            * sum(triton.cdiv(n, META[\"BLOCK_N\"]) for n in ns),\n            META[\"SPLIT_K\"],\n        )\n\n    _xformers_tiled_matmul_kernel[grid](\n        *[a[min(i, len(a) - 1)][min(j, len(a[0]) - 1)] for i in range(3) for j in range(3)],\n        *[b[min(i, len(b) - 1)][min(j, len(b[0]) - 1)] for i in range(3) for j in range(3)],\n        *[c[min(i, len(c) - 1)][min(j, len(c[0]) - 1)] for i in range(3) for j in range(3)],\n        *[ms[i] if len(ms) > i else 0 for i in range(3)],\n        *[ns[i] if len(ns) > i else 0 for i in range(3)],\n        *[ks[i] if len(ks) > i else 0 for i in range(3)],\n        *strides_am, *strides_ak, *strides_bk, *strides_bn, *strides_cm, *strides_cn,\n        ACC_TYPE=ACC_TYPE,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a contraction of a and b over multiple dimensions. It implements a generalized matrix product.\nWrapper Entry Information: def tensordot(a: Tensor, b: Tensor, dims: Union[int, Tuple[List[int], List[int]], List[List[int]]]) -> Tensor: \nArgs:\n    a (Tensor): Left tensor to contract\n    b (Tensor): Right tensor to contract\n    dims (int or Tuple[List[int], List[int]] or List[List[int]] containing two lists or Tensor): number of dimensions to contract or explicit lists of dimensions for a and b respectively\nMath: r_{i_0,...,i_{m-d}, i_d,...,i_n} = \\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}.\nother: The sizes in the contracted dimensions must match, but broadcasted dimensions are handled.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef tensordot_kernel(\n    a_ptr, b_ptr, c_ptr,\n    a_strides, b_strides, c_strides,\n    a_shape, b_shape, c_shape,\n    dims_a, dims_b, num_dims,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr, SPLIT_K: tl.constexpr, ACC_TYPE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    num_programs = tl.num_programs(axis=0)\n    \n    # Compute the grid and block indices\n    grid_m = c_shape[0] // BLOCK_SIZE_M\n    grid_n = c_shape[1] // BLOCK_SIZE_N\n    grid_k = c_shape[2] // BLOCK_SIZE_K\n    \n    # Compute the block indices\n    block_m = pid % grid_m\n    block_n = (pid // grid_m) % grid_n\n    block_k = (pid // (grid_m * grid_n)) % grid_k\n    \n    # Compute the block start indices\n    rm = block_m * BLOCK_SIZE_M\n    rn = block_n * BLOCK_SIZE_N\n    rk = block_k * BLOCK_SIZE_K\n    \n    # Initialize the accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=ACC_TYPE)\n    \n    # Iterate over the contraction dimension\n    for k in range(0, c_shape[2], BLOCK_SIZE_K):\n        # Load the input tiles\n        a_tile = tl.load(a_ptr + rm * a_strides[0] + rk * a_strides[1] + tl.arange(0, BLOCK_SIZE_M)[:, None] * a_strides[0] + tl.arange(0, BLOCK_SIZE_K)[None, :])\n        b_tile = tl.load(b_ptr + rk * b_strides[0] + rn * b_strides[1] + tl.arange(0, BLOCK_SIZE_K)[:, None] * b_strides[0] + tl.arange(0, BLOCK_SIZE_N)[None, :])\n        \n        # Perform the matrix multiplication\n        acc += tl.dot(a_tile, b_tile)\n    \n    # Store the result\n    c_tile = tl.load(c_ptr + rm * c_strides[0] + rn * c_strides[1] + tl.arange(0, BLOCK_SIZE_M)[:, None] * c_strides[0] + tl.arange(0, BLOCK_SIZE_N)[None, :])\n    c_tile += acc\n    tl.store(c_ptr + rm * c_strides[0] + rn * c_strides[1] + tl.arange(0, BLOCK_SIZE_M)[:, None] * c_strides[0] + tl.arange(0, BLOCK_SIZE_N)[None, :], c_tile)\n\ndef tensordot(a: torch.Tensor, b: torch.Tensor, dims: Union[int, Tuple[List[int], List[int]], List[List[int]]]) -> torch.Tensor:\n    # Convert dims to a list of lists if it's an integer\n    if isinstance(dims, int):\n        dims = (list(range(-dims, 0)), list(range(dims)))\n    \n    # Ensure dims is a tuple of two lists\n    if isinstance(dims, list):\n        dims = (dims[0], dims[1])\n    \n    # Validate the dimensions\n    if len(dims[0]) != len(dims[1]):\n        raise ValueError(\"The number of dimensions to contract must be the same for both tensors.\")\n    \n    # Get the shapes and strides\n    a_shape = list(a.shape)\n    b_shape = list(b.shape)\n    a_strides = list(a.stride())\n    b_strides = list(b.stride())\n    \n    # Compute the output shape\n    c_shape = []\n    for i in range(len(a_shape)):\n        if i not in dims[0]:\n            c_shape.append(a_shape[i])\n    for i in range(len(b_shape)):\n        if i not in dims[1]:\n            c_shape.append(b_shape[i])\n    \n    # Create the output tensor\n    c = torch.empty(c_shape, dtype=a.dtype, device=a.device)\n    c_strides = list(c.stride())\n    \n    # Compute the number of dimensions\n    num_dims = len(dims[0])\n    \n    # Launch the kernel\n    grid = (c_shape[0] * c_shape[1],)\n    tensordot_kernel[grid](\n        a, b, c,\n        a_strides, b_strides, c_strides,\n        a_shape, b_shape, c_shape,\n        dims[0], dims[1], num_dims,\n        BLOCK_SIZE_M=16, BLOCK_SIZE_N=16, BLOCK_SIZE_K=16,\n        GROUP_SIZE_M=8, SPLIT_K=1, ACC_TYPE=tl.float32\n    )\n    \n    return c\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the QR decomposition of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The parameter mode chooses between the full and reduced QR decomposition. It is always differentiable for 'reduced' mode, differentiable for 'complete' mode when m <= n, and never differentiable for 'r' mode.\nWrapper Entry Information: qr(A, mode='reduced', *, out=None) -> (Tensor, Tensor) A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. mode (str, optional): one of `'reduced'`, `'complete'`, `'r'`. Controls the shape of the returned tensors. Default: `'reduced'`. out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = QR where Q is orthogonal in the real case and unitary in the complex case, and R is upper triangular with real diagonal. For tall matrices (m > n), the reduced QR decomposition is A = QR with Q in K^{m x n} and R in K^{n x n}.\nother: Differences with numpy.linalg.qr: mode='raw' is not implemented. Unlike numpy.linalg.qr, this function always returns a tuple of two tensors. When mode='r', the Q tensor is an empty tensor. The elements in the diagonal of R are not necessarily positive, making the QR decomposition unique only up to the sign of the diagonal of R. The QR decomposition is only well-defined if the first k = min(m, n) columns of every matrix in A are linearly independent.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the QR decomposition of a matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. The parameter mode chooses between the full and reduced QR decomposition. It is always differentiable for 'reduced' mode, differentiable for 'complete' mode when m <= n, and never differentiable for 'r' mode.\nWrapper Entry Information: qr(A, mode='reduced', *, out=None) -> (Tensor, Tensor) A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. mode (str, optional): one of `'reduced'`, `'complete'`, `'r'`. Controls the shape of the returned tensors. Default: `'reduced'`. out (tuple, optional): output tuple of two tensors. Ignored if `None`. Default: `None`.\nMath: A = QR where Q is orthogonal in the real case and unitary in the complex case, and R is upper triangular with real diagonal. For tall matrices (m > n), the reduced QR decomposition is A = QR with Q in K^{m x n} and R in K^{n x n}.\nother: Differences with numpy.linalg.qr: mode='raw' is not implemented. Unlike numpy.linalg.qr, this function always returns a tuple of two tensors. When mode='r', the Q tensor is an empty tensor. The elements in the diagonal of R are not necessarily positive, making the QR decomposition unique only up to the sign of the diagonal of R. The QR decomposition is only well-defined if the first k = min(m, n) columns of every matrix in A are linearly independent.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef qr_kernel(\n    A_ptr, Q_ptr, R_ptr, A_row_stride, A_col_stride, Q_row_stride, Q_col_stride, R_row_stride, R_col_stride,\n    m, n, mode, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(0)\n    batch_size = tl.cdiv(m * n, BLOCK_SIZE)\n    batch_idx = pid // batch_size\n    row_idx = (pid % batch_size) // n\n    col_idx = (pid % batch_size) % n\n\n    A_block_ptr = A_ptr + batch_idx * A_row_stride * m * n + row_idx * A_row_stride + col_idx * A_col_stride\n    Q_block_ptr = Q_ptr + batch_idx * Q_row_stride * m * n + row_idx * Q_row_stride + col_idx * Q_col_stride\n    R_block_ptr = R_ptr + batch_idx * R_row_stride * m * n + row_idx * R_row_stride + col_idx * R_col_stride\n\n    A_block = tl.load(A_block_ptr, mask=col_idx < n, other=0.0)\n    Q_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n    R_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n\n    # Perform Householder reflections\n    for k in range(min(m, n)):\n        x = A_block[:, k]\n        v = x - tl.copysign(tl.sqrt(tl.sum(x * x)), x[0])\n        v = v / tl.sqrt(tl.sum(v * v))\n        H = tl.eye(BLOCK_SIZE, dtype=tl.float32) - 2 * (v * v.T)\n        A_block[:, k:] = H @ A_block[:, k:]\n        Q_block[:, k:] = H @ Q_block[:, k:]\n\n    # Store the results\n    if mode == 'reduced':\n        tl.store(Q_block_ptr, Q_block, mask=col_idx < n)\n        tl.store(R_block_ptr, A_block, mask=col_idx < n)\n    elif mode == 'complete':\n        tl.store(Q_block_ptr, Q_block, mask=col_idx < m)\n        tl.store(R_block_ptr, A_block, mask=col_idx < n)\n    elif mode == 'r':\n        tl.store(R_block_ptr, A_block, mask=col_idx < n)\n\n### Wrapper Function for QR Decomposition\n\nThe wrapper function will handle the input and output tensors, call the kernel, and manage the memory.\n\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the arcsine of the elements of the input tensor. The function computes the inverse sine (arcsine) for each element in the input tensor.\nWrapper Entry Information: asin(input, *, out=None) -> Tensor: input (Tensor): the input tensor. out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sin^{-1}(\\text{input}_{i})\nother: The function returns NaN for input values outside the range [-1, 1] as arcsine is not defined for those values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an asin kernel that computes the arc sine of each element in an input tensor, utilizing the libdevice.asin function. The kernel processes data in blocks with a constant block size, loads elements from the input tensor, applies the asin function, and stores the result in an output tensor. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import libdevice\n\n\n# Asin Kernel\n# This is the kernel function for calculating the asin (arc sine) of elements in the input tensor.\n# The function uses libdevice.asin to perform the computation.\n\n@triton.jit\ndef asin_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    x = libdevice.asin(x)  # Apply the asin function from libdevice\n    tl.store(y_ptr + offsets, x, mask=mask)  # Store the result in the output tensor\n\n\n# Using the asin kernel\n# This is the function that invokes the asin_kernel with proper parameters.\n\ntorch.manual_seed(0)\nsize = 98432  # Size of the input tensor\nx = torch.rand(size, device='cuda')  # Create a random input tensor\noutput_triton = torch.zeros(size, device='cuda')  # Output tensor for Triton results\noutput_torch = torch.asin(x)  # Compute the arc sine using PyTorch\n\nn_elements = output_torch.numel()  # Get the number of elements in the tensor\ngrid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )  # Define the grid dimensions for Triton\n\nasin_kernel[grid](x, output_triton, n_elements, BLOCK_SIZE=1024)  # Launch the kernel\n\n# Print the results for comparison\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the arcsine of the elements of the input tensor. The function computes the inverse sine (arcsine) for each element in the input tensor.\nWrapper Entry Information: asin(input, *, out=None) -> Tensor: input (Tensor): the input tensor. out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\sin^{-1}(\\text{input}_{i})\nother: The function returns NaN for input values outside the range [-1, 1] as arcsine is not defined for those values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import libdevice\n\n# Asin Kernel\n# This is the kernel function for calculating the asin (arc sine) of elements in the input tensor.\n# The function uses libdevice.asin to perform the computation.\n\n@triton.jit\ndef asin_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    x = libdevice.asin(x)  # Apply the asin function from libdevice\n    tl.store(y_ptr + offsets, x, mask=mask)  # Store the result in the output tensor\n\nimport torch\nimport triton\n\ndef asin(input, *, out=None):\n    # Ensure the input is a tensor\n    if not isinstance(input, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor\")\n\n    # Ensure the input is on the CUDA device\n    if input.device.type != 'cuda':\n        raise ValueError(\"Input tensor must be on the CUDA device\")\n\n    # Determine the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=input.device)\n    else:\n        if not isinstance(out, torch.Tensor):\n            raise TypeError(\"Output must be a torch.Tensor\")\n        if out.shape != input.shape:\n            raise ValueError(\"Output tensor must have the same shape as the input tensor\")\n        if out.device.type != 'cuda':\n            raise ValueError(\"Output tensor must be on the CUDA device\")\n\n    # Get the number of elements in the tensor\n    n_elements = input.numel()\n\n    # Define the grid dimensions for Triton\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n\n    # Launch the kernel\n    asin_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n\n    return out\n\n# Create a random input tensor\ninput_tensor = torch.rand(1024, device='cuda')\n\n# Compute the arcsine using the Triton function\noutput_tensor = asin(input_tensor)\n\n# Print the results for comparison\nprint(output_tensor)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs a fused operation combining masked selection, addition, and GELU activation. It first selects elements from the input tensor based on a boolean mask, then adds a scalar or tensor (scaled by alpha) to the selected values, and finally applies the GELU (Gaussian Error Linear Unit) activation function element-wise to the result.\nWrapper Entry Information: fused_masked_select_add_gelu(input, mask, other, *, alpha=1, approximate='none', out=None) -> Tensor\nMath: Z = masked_select(X, M)\nS = Z + alpha * O\nY = GELU(S)\nother: The function is differentiable and supports autograd. The mask and other tensor must be broadcastable to the shape of the selected elements. The 'approximate' parameter can be set to 'tanh' for a faster, approximate GELU computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function performs a fused operation combining masked selection, addition, and GELU activation. It first selects elements from the input tensor based on a boolean mask, then adds a scalar or tensor (scaled by alpha) to the selected values, and finally applies the GELU (Gaussian Error Linear Unit) activation function element-wise to the result.\nWrapper Entry Information: fused_masked_select_add_gelu(input, mask, other, *, alpha=1, approximate='none', out=None) -> Tensor\nMath: Z = masked_select(X, M)\nS = Z + alpha * O\nY = GELU(S)\nother: The function is differentiable and supports autograd. The mask and other tensor must be broadcastable to the shape of the selected elements. The 'approximate' parameter can be set to 'tanh' for a faster, approximate GELU computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_masked_select_add_gelu_kernel(\n    input_ptr, mask_ptr, other_ptr, output_ptr, alpha, approximate,\n    input_stride, mask_stride, other_stride, output_stride,\n    input_n_elements, mask_n_elements, other_n_elements, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask_offsets = offsets % mask_n_elements\n    input_offsets = offsets % input_n_elements\n    other_offsets = offsets % other_n_elements\n\n    input_mask = mask_offsets < mask_n_elements\n    mask = tl.load(mask_ptr + mask_offsets, mask=input_mask)\n    input = tl.load(input_ptr + input_offsets, mask=input_mask, other=0.0)\n    other = tl.load(other_ptr + other_offsets, mask=input_mask, other=0.0)\n\n    selected = tl.where(mask, input, 0.0)\n    scaled_other = alpha * other\n    added = selected + scaled_other\n\n    if approximate == \"none\":\n        added_fp32 = added.to(tl.float32)\n        gelu_result = 0.5 * added_fp32 * (1 + tl.math.erf(added_fp32 * 0.7071067811))\n    elif approximate == \"tanh\":\n        added_fp32 = added.to(tl.float32)\n        gelu_result = 0.5 * added_fp32 * (1 + tl.math.tanh(0.79788456 * added_fp32 * (1 + 0.044715 * tl.math.pow(added_fp32, 2))))\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n\n    output_offsets = offsets % output_n_elements\n    tl.store(output_ptr + output_offsets, gelu_result, mask=input_mask)\n\nimport torch\nimport triton\nimport triton.language as tl\n\nclass FusedMaskedSelectAddGelu(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input, mask, other, alpha=1, approximate='none', out=None):\n        # Save the inputs for backward pass\n        ctx.save_for_backward(input, mask, other)\n        ctx.alpha = alpha\n        ctx.approximate = approximate\n\n        # Determine the output tensor\n        if out is None:\n            out = torch.empty_like(input)\n\n        # Launch the Triton kernel\n        grid = (triton.cdiv(input.numel(), 1024),)\n        fused_masked_select_add_gelu_kernel[grid](\n            input, mask, other, out, alpha, approximate,\n            input.stride(0), mask.stride(0), other.stride(0), out.stride(0),\n            input.numel(), mask.numel(), other.numel(), 1024\n        )\n\n        return out\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        input, mask, other = ctx.saved_tensors\n        alpha = ctx.alpha\n        approximate = ctx.approximate\n\n        # Compute the gradient with respect to the input\n        grad_input = torch.zeros_like(input)\n        grad_other = torch.zeros_like(other)\n\n        # Launch the Triton kernel for the backward pass\n        grid = (triton.cdiv(input.numel(), 1024),)\n        fused_masked_select_add_gelu_backward_kernel[grid](\n            grad_output, input, mask, other, alpha, approximate,\n            grad_input, grad_other,\n            input.stride(0), mask.stride(0), other.stride(0), grad_input.stride(0), grad_other.stride(0),\n            input.numel(), mask.numel(), other.numel(), 1024\n        )\n\n        return grad_input, None, grad_other, None, None, None\n\ndef fused_masked_select_add_gelu(input, mask, other, *, alpha=1, approximate='none', out=None):\n    return FusedMaskedSelectAddGelu.apply(input, mask, other, alpha, approximate, out)\n\n@triton.jit\ndef fused_masked_select_add_gelu_backward_kernel(\n    grad_output_ptr, input_ptr, mask_ptr, other_ptr, alpha, approximate,\n    grad_input_ptr, grad_other_ptr,\n    input_stride, mask_stride, other_stride, grad_input_stride, grad_other_stride,\n    input_n_elements, mask_n_elements, other_n_elements, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask_offsets = offsets % mask_n_elements\n    input_offsets = offsets % input_n_elements\n    other_offsets = offsets % other_n_elements\n\n    input_mask = mask_offsets < mask_n_elements\n    mask = tl.load(mask_ptr + mask_offsets, mask=input_mask)\n    input = tl.load(input_ptr + input_offsets, mask=input_mask, other=0.0)\n    other = tl.load(other_ptr + other_offsets, mask=input_mask, other=0.0)\n    grad_output = tl.load(grad_output_ptr + offsets, mask=input_mask, other=0.0)\n\n    selected = tl.where(mask, input, 0.0)\n    scaled_other = alpha * other\n    added = selected + scaled_other\n\n    if approximate == \"none\":\n        added_fp32 = added.to(tl.float32)\n        gelu_derivative = 0.5 * (1 + tl.math.erf(added_fp32 * 0.7071067811)) + 0.5 * added_fp32 * (2 / tl.math.sqrt(tl.math.pi)) * tl.math.exp(-0.5 * tl.math.pow(added_fp32, 2))\n    elif approximate == \"tanh\":\n        added_fp32 = added.to(tl.float32)\n        tanh_term = tl.math.tanh(0.79788456 * added_fp32 * (1 + 0.044715 * tl.math.pow(added_fp32, 2)))\n        gelu_derivative = 0.5 * (1 + tanh_term) + 0.5 * added_fp32 * (1 - tl.math.pow(tanh_term, 2)) * 0.79788456 * (1 + 0.044715 * 3 * tl.math.pow(added_fp32, 2))\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n\n    grad_input = grad_output * gelu_derivative\n    grad_other = grad_output * gelu_derivative * alpha\n\n    grad_input_offsets = offsets % input_n_elements\n    grad_other_offsets = offsets % other_n_elements\n    tl.store(grad_input_ptr + grad_input_offsets, grad_input, mask=input_mask)\n    tl.store(grad_other_ptr + grad_other_offsets, grad_other, mask=input_mask)\n\n# Test case\ninput = torch.tensor([1.0, 2.0, 3.0, 4.0], requires_grad=True)\nmask = torch.tensor([True, False, True, False])\nother = torch.tensor([0.5, 0.5, 0.5, 0.5])\nalpha = 2.0\napproximate = 'none'\n\noutput = fused_masked_select_add_gelu(input, mask, other, alpha=alpha, approximate=approximate)\nprint(\"Output:\", output)\n\n# Compute the gradient\noutput.sum().backward()\nprint(\"Gradient with respect to input:\", input.grad)\nprint(\"Gradient with respect to other:\", other.grad)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies adaptive average pooling to the input tensors `x1` and `x2` to resize them to the specified `output_size`, and then computes the pairwise distance between the pooled outputs. The function first applies `adaptive_avg_pool2d` to each input tensor, and then calculates the pairwise distance using the specified norm `p`. A small value `eps` is added to avoid division by zero during distance calculation. The function can also retain the reduced dimension of the output via the `keepdim` parameter.\nWrapper Entry Information: def fused_pairwise_distance_adaptive_avg_pool2d(x1: torch.Tensor, x2: torch.Tensor, output_size: int or tuple, p: float = 2.0, eps: float = 1e-6, keepdim: bool = False) -> torch.Tensor: x1 (Tensor): First input tensor for adaptive average pooling and distance calculation. x2 (Tensor): Second input tensor for adaptive average pooling and distance calculation. output_size (int or tuple): The target output size for the adaptive average pooling. p (float, optional): The norm degree for pairwise distance calculation. Default: 2.0 eps (float, optional): Small value to avoid division by zero in pairwise distance. Default: 1e-6 keepdim (bool, optional): Whether to keep the reduced dimension. Default: False\nMath: No explicit formula provided. The function applies adaptive average pooling followed by pairwise distance calculation with norm p and epsilon to avoid division by zero.\nother: The function combines adaptive average pooling and pairwise distance calculation in a sequential manner.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a pairwise distance computation and its gradient. The forward kernel '_kole_dist_sq_forward' takes 8 parameters: x_ptr (input tensor pointer), dist_sq_ptr (output tensor pointer), N (number of rows), D (number of columns), xnumel (total number of elements in the output), rnumel (total number of elements in a row), XBLOCK (block size for X dimension), and RBLOCK (block size for reduction dimension). It computes the squared pairwise distances between rows of the input tensor and stores the result in the output tensor. The backward kernel '_kole_dist_sq_backward' takes 9 parameters: grad_dist_sq_ptr (gradient of the output tensor), grad_x_ptr (gradient of the input tensor), x_ptr (input tensor pointer), N, D, xnumel, rnumel, XBLOCK, and RBLOCK. It computes the gradient of the input tensor based on the gradient of the output tensor. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _kole_dist_sq_forward(x_ptr, dist_sq_ptr, N, D, xnumel, rnumel, XBLOCK: tl.constexpr, RBLOCK: tl.constexpr):\n    \"\"\"\n    outer_diff_sq = (X[:, None, :] - X[None, :, :]) ** 2  # N, N, D\n    dist_sq = torch.sum(outer_diff_sq, axis=-1)  # N, N\n\n    This function works from the output perspective.\n    The goal is to compute every pairwise distance between each row of x_ptr\n    and store this value in dist_sq_ptr for all the NxN values\n\n    xnumel = N*N\n    rnumel = D\n    \"\"\"\n    # Compute output values offset\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.expand_dims(xoffset + tl.arange(0, XBLOCK), 1)  # XBLOCK, 1\n\n    # We guard against going out of the output matrix number of elements\n    # This guard will also be used to avoid loading already computed output values\n    xmask = xindex < xnumel\n\n    # First trick:\n    # This is nice way map output values to input indexes and compute all the pairwise distances\n    # While ensuring we never go beyond the number of lines of the input matrix\n    pw_row1_index = D * (xindex // N)  # [0, ..., 0, 1, ...]\n    pw_row2_index = D * (xindex % N)  # [0, 1, ..., N-1, 0, ...]\n\n    # We allocate the memory to store the temporary values\n    acc_add = tl.full([XBLOCK, RBLOCK], 0, tl.float32)\n\n    # Dynamic reduction working per block\n    rbase = tl.expand_dims(tl.arange(0, RBLOCK), 0)  # 1, RBLOCK\n    for roffset in range(0, rnumel, RBLOCK):\n        rindex = roffset + rbase\n        rmask = rindex < rnumel  # We guard against going out of the first dimension\n\n        # Second trick\n        # We use an outer AND and outer + operations to get the current reduction indexes for\n        # the rows handled by the current block\n        mask = rmask & xmask  # XBLOCK, RBLOCK\n        in1_ptrs = pw_row1_index + rindex  # XBLOCK, RBLOCK\n        in0_ptrs = pw_row2_index + rindex  # XBLOCK, RBLOCK\n\n        data0 = tl.load(x_ptr + in1_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n        data1 = tl.load(x_ptr + in0_ptrs, mask, eviction_policy=\"evict_last\", other=0)\n\n        # We do all the pointwise operations\n        diff = data0 - data1\n        diff_squared = diff * diff\n\n        # This line is not needed because we are sure that we are working with\n        # tensors of size [XBLOCK, RBLOCK] already\n        # diff_squared_brodcasted = tl.broadcast_to(diff_squared, [XBLOCK, RBLOCK])\n\n        # Those lines can be simplified because we mask our input values with the 0. value\n        # and (0 - 0)**2 -> 0 so it won't interfere with the accumulation\n        acc_add += diff_squared\n        # # We add to our temporary buffer\n        # # and make sure to only keep the values that has been updated\n        # tmp6 = acc_add + diff_squared\n        # acc_add = tl.where(mask, tmp6, acc_add)\n\n    # We finally reduce to get final output values\n    row_sum = tl.expand_dims(tl.sum(acc_add, 1), 1)\n    # And we write back in the global memory\n    tl.store(dist_sq_ptr + xindex, row_sum, xmask)\n\n\n@triton.jit\ndef _kole_dist_sq_backward(\n    grad_dist_sq_ptr,\n    grad_x_ptr,\n    x_ptr,\n    N,\n    D,\n    xnumel,\n    rnumel,\n    XBLOCK: tl.constexpr,\n    RBLOCK: tl.constexpr,\n):\n    \"\"\"\n    outer_diff_sq = (X[:, None, :] - X[None, :, :]) ** 2  # N, N, D\n    dist_sq = torch.sum(outer_diff_sq, axis=-1)  # N, N\n\n    We have:\n    - dy_ij/dx_lk = d/dx_lk [sum_m((x_im - x_jm)**2)]\n    - dy_ij/dx_lk = 2 * (x_lk - x_jk) if l=i\n    -             = -2 * (x_lk - x_jk) if l=j\n    -             = 0 otherwise\n\n    So for an element x_lk its gradient is:\n    - x_lk_grad = sum_i(dy_il/dx_lk * dy_il) + sum_j(dy_lj/dx_lk * dy_lj)\n    - x_lk_grad = 2 * [sum_j((x_lk - x_jk) * dy_lj) - sum_i((x_ik - x_lk) * dy_il)]\n    - x_lk_grad = 2 * [x_lk * sum(y_grad_add) - sum(x[:, k] * y_grad_add)]\n        - with y_grad_add = dy_*l + dy_l* (Dim N)\n    \"\"\"\n    xindex = tl.program_id(0) * XBLOCK\n    xoffset = xindex + tl.arange(0, XBLOCK)\n    xmask = xoffset < xnumel\n\n    x_rows_index = tl.expand_dims(xoffset // D, 0)\n    x_cols_index = tl.expand_dims(xoffset % D, 0)  # [1, XBLOCK]\n\n    y_grad_add = tl.full([RBLOCK, XBLOCK], 0, tl.float32)\n    x_y_grad_add = tl.full([RBLOCK, XBLOCK], 0, tl.float32)\n    r_range = tl.arange(0, RBLOCK)\n    for rindex in range(0, rnumel, RBLOCK):\n        roffset = tl.expand_dims(rindex + r_range, 1)  # (RBLOCK, 1)\n        rmask = roffset < rnumel\n\n        mask = rmask & tl.expand_dims(xmask, 0)\n        x_col = tl.load(x_ptr + (roffset * D + x_cols_index), mask, other=0)  # (RBLOCK, XBLOCK)\n        grad_dist_sq_row = tl.load(grad_dist_sq_ptr + x_rows_index * N + roffset, mask, other=0)  # Get lines\n        grad_dist_sq_col = tl.load(grad_dist_sq_ptr + roffset * N + x_rows_index, mask, other=0)  # Get cols\n\n        y_grad_add += grad_dist_sq_row + grad_dist_sq_col\n        x_y_grad_add += x_col * (grad_dist_sq_row + grad_dist_sq_col)\n\n    x = tl.load(x_ptr + xoffset, xmask, other=0)  # (XBLOCK,)\n\n    left = x * tl.sum(y_grad_add, 0)\n    right = tl.sum(x_y_grad_add, 0)\n    grad_x = 2 * (left - right)  # (XBLOCK,)\n\n    tl.store(grad_x_ptr + xoffset, grad_x, xmask)\n\n\nclass KoleDistSQ(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        N, D = x.shape\n\n        assert_size_stride(x, (N, D), (D, 1))\n\n        dist_sq = torch.empty_strided((N, N), (N, 1), device=\"cuda\", dtype=torch.float32)\n\n        # Working on a 1D grid\n        xnumel = N * N\n        rnumel = D\n\n        # Meta parameters heuristics\n        num_warps = 2  # I don't understand why I get worst performance when increasing this value\n        RBLOCK = min(triton.next_power_of_2(D), BLOCK_MAX_NB_THREADS)  #\n        XBLOCK = min(BLOCK_MAX_NB_THREADS // RBLOCK, triton.next_power_of_2(N))\n\n        nb_blocks = 1 + (xnumel - 1) // XBLOCK\n        g = (nb_blocks, 1, 1)\n\n        _kole_dist_sq_forward[g](\n            x,\n            dist_sq,\n            N,\n            D,\n            xnumel,\n            rnumel,\n            # Meta parameters\n            XBLOCK=XBLOCK,\n            RBLOCK=RBLOCK,\n            num_warps=num_warps,\n        )\n\n        ctx.N = N\n        ctx.D = D\n        ctx.num_warps = num_warps\n\n        ctx.save_for_backward(x)\n\n        return dist_sq\n\n    @staticmethod\n    def backward(ctx, grad_dist_sq):\n        x = ctx.saved_tensors[0]\n        N = ctx.N\n        D = ctx.D\n\n        try:\n            assert_size_stride(grad_dist_sq, (N, N), (N, 1))\n        except AssertionError:\n            grad_dist_sq = grad_dist_sq.clone()\n            assert_size_stride(grad_dist_sq, (N, N), (N, 1))\n\n        grad_x = torch.zeros(N, D, dtype=torch.float32, device=\"cuda\")\n        xnumel = N * D\n        rnumel = N\n\n        RBLOCK = min(triton.next_power_of_2(N), BLOCK_MAX_NB_THREADS)\n        XBLOCK = min(BLOCK_MAX_NB_THREADS // RBLOCK, triton.next_power_of_2(N * D))\n        nb_blocks = 1 + (xnumel - 1) // XBLOCK\n        g = (nb_blocks, 1, 1)\n\n        _kole_dist_sq_backward[g](\n            grad_dist_sq, grad_x, x, N, D, xnumel, rnumel, XBLOCK=XBLOCK, RBLOCK=RBLOCK, num_warps=ctx.num_warps\n        )\n\n        return grad_x\n\n\ndef kole_dist_sq_triton(x):\n    return KoleDistSQ.apply(x)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies adaptive average pooling to the input tensors `x1` and `x2` to resize them to the specified `output_size`, and then computes the pairwise distance between the pooled outputs. The function first applies `adaptive_avg_pool2d` to each input tensor, and then calculates the pairwise distance using the specified norm `p`. A small value `eps` is added to avoid division by zero during distance calculation. The function can also retain the reduced dimension of the output via the `keepdim` parameter.\nWrapper Entry Information: def fused_pairwise_distance_adaptive_avg_pool2d(x1: torch.Tensor, x2: torch.Tensor, output_size: int or tuple, p: float = 2.0, eps: float = 1e-6, keepdim: bool = False) -> torch.Tensor: x1 (Tensor): First input tensor for adaptive average pooling and distance calculation. x2 (Tensor): Second input tensor for adaptive average pooling and distance calculation. output_size (int or tuple): The target output size for the adaptive average pooling. p (float, optional): The norm degree for pairwise distance calculation. Default: 2.0 eps (float, optional): Small value to avoid division by zero in pairwise distance. Default: 1e-6 keepdim (bool, optional): Whether to keep the reduced dimension. Default: False\nMath: No explicit formula provided. The function applies adaptive average pooling followed by pairwise distance calculation with norm p and epsilon to avoid division by zero.\nother: The function combines adaptive average pooling and pairwise distance calculation in a sequential manner.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _adaptive_avg_pool2d_kernel(\n    x_ptr,  # Pointer to the input tensor\n    output_ptr,  # Pointer to the output tensor\n    N,  # Number of batches\n    C,  # Number of channels\n    H,  # Input height\n    W,  # Input width\n    OH,  # Output height\n    OW,  # Output width\n    HBLOCK: tl.constexpr,  # Block size for height\n    WBLOCK: tl.constexpr  # Block size for width\n):\n    pid = tl.program_id(0)\n    block_start_h = pid // OW\n    block_start_w = pid % OW\n    block_size_h = H // OH\n    block_size_w = W // OW\n\n    for h in range(block_start_h * HBLOCK, (block_start_h + 1) * HBLOCK):\n        for w in range(block_start_w * WBLOCK, (block_start_w + 1) * WBLOCK):\n            if h < H and w < W:\n                block_h = h // block_size_h\n                block_w = w // block_size_w\n                out_index = block_h * OW + block_w\n                for c in range(C):\n                    in_index = c * H * W + h * W + w\n                    val = tl.load(x_ptr + in_index)\n                    tl.atomic_add(output_ptr + c * OH * OW + out_index, val)\n\n@triton.jit\ndef _pairwise_distance_kernel(\n    x1_ptr,  # Pointer to the first input tensor\n    x2_ptr,  # Pointer to the second input tensor\n    dist_ptr,  # Pointer to the output distance tensor\n    N,  # Number of batches\n    C,  # Number of channels\n    H,  # Input height\n    W,  # Input width\n    p: tl.float32,  # Norm degree\n    eps: tl.float32,  # Small value to avoid division by zero\n    XBLOCK: tl.constexpr,  # Block size for X dimension\n    YBLOCK: tl.constexpr  # Block size for Y dimension\n):\n    pid = tl.program_id(0)\n    xoffset = pid * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)\n    yindex = tl.arange(0, YBLOCK)\n\n    xmask = xindex < N\n    ymask = yindex < N\n\n    dist = tl.zeros((XBLOCK, YBLOCK), dtype=tl.float32)\n    for c in range(C):\n        for h in range(H):\n            for w in range(W):\n                in1_index = c * H * W + h * W + w\n                in2_index = c * H * W + h * W + w\n                x1_val = tl.load(x1_ptr + in1_index, xmask, other=0)\n                x2_val = tl.load(x2_ptr + in2_index, ymask, other=0)\n                diff = x1_val - x2_val\n                dist += tl.abs(diff) ** p\n\n    dist = (dist + eps) ** (1 / p)\n    tl.store(dist_ptr + xindex * N + yindex, dist, xmask & ymask)\n\n### Python Wrapper Function\n\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the `other` tensor, scaled by `alpha`, to the `input` tensor and computes the mean value along the specified dimension. If no dimension is specified, it computes the mean over all elements. Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: def add_mean(input, other, dim=None, alpha=1, keepdim=False, dtype=None, out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. dim (int or tuple of ints, optional): The dimension(s) to reduce. Default: None. alpha (Number, optional): The multiplier for other. Default: 1. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default: False. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{mean}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i)\nother: Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a parallelized logsumexp kernel that computes the log of the sum of exponentials over a batch of input tensors, with an optional scale applied to the input tensor. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef logsumexp_fwd_kernel(\n    x,\n    z,\n    scale,\n    D: tl.constexpr,\n    B: tl.constexpr,\n    HAS_SCALE: tl.constexpr\n):\n    i_n, i_d = tl.program_id(0), tl.program_id(1)\n    o_d = i_d * B + tl.arange(0, B)\n    m_d = o_d < D\n\n    b_x = tl.load(x + i_n * D + o_d, mask=m_d, other=-float('inf'))\n    if HAS_SCALE:\n        b_x = b_x * scale\n    b_m = tl.max(b_x, 0)\n    b_z = tl.log(tl.sum(tl.exp(b_x - b_m), 0)) + b_m\n    tl.store(z + i_n * tl.cdiv(D, B) + i_d, b_z)\n\n\ndef logsumexp_fwd(\n    x,\n    scale: Optional[float] = None,\n    dtype: Optional[torch.dtype] = None\n):\n    r\"\"\"\n    Compute the logsumexp of the input tensor over the last dimension.\n\n    Args:\n        x (Tensor):\n            The input tensor of any shape.\n        scale (Optional[float]):\n            The scale applied to the input tensor. Default: `None`.\n        dtype (Optional[torch.dtype]):\n            The data type of the output tensor. Default: `None`.\n    Returns:\n        Tensor: The logsumexp of the input tensor.\n    \"\"\"\n\n    shape = x.shape\n    x = x.view(-1, shape[-1])\n    N, D = x.shape\n    B = min(triton.next_power_of_2(D), 64 * 1024)\n    ND = triton.cdiv(D, B)\n\n    z = x.new_empty(N, ND, dtype=torch.float)\n    logsumexp_fwd_kernel[(N, ND)](\n        x=x,\n        z=z,\n        scale=scale,\n        D=D,\n        B=B\n    )\n    z = z.logsumexp(-1).view(*shape[:-1])\n    if dtype is not None and dtype != torch.float:\n        z = z.to(dtype)\n    return z\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Adds the `other` tensor, scaled by `alpha`, to the `input` tensor and computes the mean value along the specified dimension. If no dimension is specified, it computes the mean over all elements. Supports broadcasting, type promotion, and works with integer, float, and complex inputs.\nWrapper Entry Information: def add_mean(input, other, dim=None, alpha=1, keepdim=False, dtype=None, out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to add to input. dim (int or tuple of ints, optional): The dimension(s) to reduce. Default: None. alpha (Number, optional): The multiplier for other. Default: 1. keepdim (bool, optional): Whether the output tensor has dim retained or not. Default: False. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation. This is useful for preventing data type overflows. Default: None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{mean}(\\text{input}_i + \\text{alpha} \\times \\text{other}_i)\nother: Supports broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef add_mean_kernel(\n    input_ptr, other_ptr, output_ptr, alpha, stride_input, stride_other, stride_output,\n    input_size, other_size, output_size, dim, keepdim, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    offsets_input = block_start + tl.arange(0, BLOCK_SIZE)\n    offsets_other = block_start + tl.arange(0, BLOCK_SIZE)\n    offsets_output = block_start + tl.arange(0, BLOCK_SIZE)\n\n    mask_input = offsets_input < input_size\n    mask_other = offsets_other < other_size\n    mask_output = offsets_output < output_size\n\n    input_vals = tl.load(input_ptr + offsets_input * stride_input, mask=mask_input, other=0.0)\n    other_vals = tl.load(other_ptr + offsets_other * stride_other, mask=mask_other, other=0.0)\n\n    result = input_vals + alpha * other_vals\n\n    if dim is not None:\n        # Compute mean along the specified dimension\n        result = tl.sum(result, axis=dim) / result.shape[dim]\n        if keepdim:\n            result = tl.reshape(result, result.shape[:dim] + (1,) + result.shape[dim+1:])\n\n    tl.store(output_ptr + offsets_output * stride_output, result, mask=mask_output)\n\ndef add_mean(input, other, dim=None, alpha=1, keepdim=False, dtype=None, out=None) -> torch.Tensor:\n    # Handle dtype conversion\n    if dtype is not None:\n        input = input.to(dtype)\n        other = other.to(dtype)\n\n    # Handle broadcasting\n    input, other = torch.broadcast_tensors(input, other)\n\n    # Compute the shape of the output tensor\n    if dim is None:\n        output_shape = (1,)\n    else:\n        output_shape = list(input.shape)\n        if not keepdim:\n            output_shape[dim] = 1\n\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty(output_shape, dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == output_shape, \"Output tensor shape mismatch\"\n\n    # Determine the number of elements to process\n    input_size = input.numel()\n    other_size = other.numel()\n    output_size = out.numel()\n\n    # Determine the strides\n    stride_input = input.stride(0)\n    stride_other = other.stride(0)\n    stride_output = out.stride(0)\n\n    # Launch the Triton kernel\n    grid = lambda meta: (triton.cdiv(input_size, meta['BLOCK_SIZE']),)\n    add_mean_kernel[grid](\n        input_ptr=input.data_ptr(),\n        other_ptr=other.data_ptr(),\n        output_ptr=out.data_ptr(),\n        alpha=alpha,\n        stride_input=stride_input,\n        stride_other=stride_other,\n        stride_output=stride_output,\n        input_size=input_size,\n        other_size=other_size,\n        output_size=output_size,\n        dim=dim,\n        keepdim=keepdim,\n        BLOCK_SIZE=1024\n    )\n\n    return out\n\n# Test case 1: Simple addition and mean over all elements\ninput = torch.tensor([1.0, 2.0, 3.0], device='cuda')\nother = torch.tensor([1.0, 1.0, 1.0], device='cuda')\nresult = add_mean(input, other, alpha=2)\nprint(result)  # Expected: 4.0\n\n# Test case 2: Mean along a specific dimension\ninput = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device='cuda')\nother = torch.tensor([[1.0, 1.0], [1.0, 1.0]], device='cuda')\nresult = add_mean(input, other, dim=1)\nprint(result)  # Expected: [2.0, 4.0]\n\n# Test case 3: Keep dimension\nresult = add_mean(input, other, dim=1, keepdim=True)\nprint(result)  # Expected: [[2.0], [4.0]]\n\n# Test case 4: Type promotion\ninput = torch.tensor([1, 2, 3], device='cuda', dtype=torch.int32)\nother = torch.tensor([1.0, 1.0, 1.0], device='cuda')\nresult = add_mean(input, other, alpha=2, dtype=torch.float32)\nprint(result)  # Expected: 4.0\n\n# Test case 5: Broadcasting\ninput = torch.tensor([1.0, 2.0, 3.0], device='cuda')\nother = torch.tensor(1.0, device='cuda')\nresult = add_mean(input, other, alpha=2)\nprint(result)  # Expected: 4.0\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a linear transformation followed by ReLU activation and layer normalization on the input tensor.\nWrapper Entry Information: fused_layer_norm_relu_linear(input: Tensor, weight: Tensor, bias=None, normalized_shape=None, eps=1e-5, elementwise_affine=True) -> Tensor: Input (Tensor): Input tensor with shape (*, in_features). Weight (Tensor): Weights for the linear transformation, shape (out_features, in_features). Bias (Tensor, optional): Bias for the linear transformation, shape (out_features). Normalized_shape (int or list or torch.Size, optional): Shape of the dimensions to normalize. Eps (float, optional): A value added to the denominator for numerical stability. Default is 1e-5. Elementwise_affine (bool, optional): If True, layer normalization has learnable parameters. Default is True. Returns: Tensor: Result after applying the linear transformation, ReLU, and layer normalization. Example: >>> input = torch.randn(4, 5) # Example input tensor >>> weight = torch.randn(3, 5) # Linear transformation weights >>> bias = torch.randn(3) # Bias for linear layer >>> normalized_shape = 3 >>> # Apply fused operation >>> output = fused_layer_norm_relu_linear(input, weight, bias, normalized_shape) >>> print(output.shape) # Expected output shape: (4, 3)\nother: The function performs a sequence of operations: linear transformation, ReLU activation, and layer normalization. It supports optional bias and learnable parameters for layer normalization.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of a linear transformation followed by ReLU activation and layer normalization on the input tensor.\nWrapper Entry Information: fused_layer_norm_relu_linear(input: Tensor, weight: Tensor, bias=None, normalized_shape=None, eps=1e-5, elementwise_affine=True) -> Tensor: Input (Tensor): Input tensor with shape (*, in_features). Weight (Tensor): Weights for the linear transformation, shape (out_features, in_features). Bias (Tensor, optional): Bias for the linear transformation, shape (out_features). Normalized_shape (int or list or torch.Size, optional): Shape of the dimensions to normalize. Eps (float, optional): A value added to the denominator for numerical stability. Default is 1e-5. Elementwise_affine (bool, optional): If True, layer normalization has learnable parameters. Default is True. Returns: Tensor: Result after applying the linear transformation, ReLU, and layer normalization. Example: >>> input = torch.randn(4, 5) # Example input tensor >>> weight = torch.randn(3, 5) # Linear transformation weights >>> bias = torch.randn(3) # Bias for linear layer >>> normalized_shape = 3 >>> # Apply fused operation >>> output = fused_layer_norm_relu_linear(input, weight, bias, normalized_shape) >>> print(output.shape) # Expected output shape: (4, 3)\nother: The function performs a sequence of operations: linear transformation, ReLU activation, and layer normalization. It supports optional bias and learnable parameters for layer normalization.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_layer_norm_relu_linear_kernel(\n    input,\n    weight,\n    bias,\n    output,\n    input_row_stride,\n    weight_row_stride,\n    output_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    # Load input and weight\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    w_ptr = weight + offsets\n    w = tl.load(w_ptr, mask=offsets < n_cols)\n\n    # Linear transformation\n    linear_out = tl.dot(x, w)\n\n    # Apply bias if provided\n    if bias is not None:\n        b_ptr = bias + offsets\n        b = tl.load(b_ptr, mask=offsets < n_cols)\n        linear_out += b\n\n    # ReLU activation\n    relu_out = tl.relu(linear_out)\n\n    # Layer normalization\n    mean = tl.sum(relu_out, axis=0) / N_COLS\n    var = tl.sum((relu_out - mean) * (relu_out - mean), axis=0) / N_COLS\n    inv_std = 1.0 / tl.sqrt(var + eps)\n\n    # Apply layer normalization\n    norm_out = (relu_out - mean) * inv_std\n\n    # Apply elementwise affine transformation if enabled\n    if elementwise_affine:\n        gamma_ptr = weight + offsets\n        gamma = tl.load(gamma_ptr, mask=offsets < n_cols)\n        beta_ptr = bias + offsets\n        beta = tl.load(beta_ptr, mask=offsets < n_cols)\n        norm_out = norm_out * gamma + beta\n\n    # Store the result\n    out_ptr = output + prog_id * output_row_stride\n    tl.store(out_ptr + offsets, norm_out, mask=offsets < n_cols)\n\nimport torch\nimport triton\nfrom triton.runtime.jit import get_cuda_stream\n\ndef fused_layer_norm_relu_linear(input: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor = None, normalized_shape=None, eps: float = 1e-5, elementwise_affine: bool = True) -> torch.Tensor:\n    \"\"\"\n    Applies a fused operation consisting of a linear transformation followed by ReLU activation and layer normalization on the input tensor.\n\n    Args:\n        input (Tensor): Input tensor with shape (*, in_features).\n        weight (Tensor): Weights for the linear transformation, shape (out_features, in_features).\n        bias (Tensor, optional): Bias for the linear transformation, shape (out_features).\n        normalized_shape (int or list or torch.Size, optional): Shape of the dimensions to normalize.\n        eps (float, optional): A value added to the denominator for numerical stability. Default is 1e-5.\n        elementwise_affine (bool, optional): If True, layer normalization has learnable parameters. Default is True.\n\n    Returns:\n        Tensor: Result after applying the linear transformation, ReLU, and layer normalization.\n    \"\"\"\n    # Ensure normalized_shape is a list\n    if isinstance(normalized_shape, int):\n        normalized_shape = [normalized_shape]\n    elif isinstance(normalized_shape, torch.Size):\n        normalized_shape = list(normalized_shape)\n\n    # Check input dimensions\n    in_features = input.shape[-1]\n    out_features = weight.shape[0]\n    assert weight.shape[1] == in_features, \"Weight shape must match input features\"\n    if bias is not None:\n        assert bias.shape[0] == out_features, \"Bias shape must match output features\"\n\n    # Prepare output tensor\n    output = torch.empty(input.shape[:-1] + (out_features,), dtype=input.dtype, device=input.device)\n\n    # Set up kernel parameters\n    n_cols = in_features\n    BLOCK_N = triton.next_power_of_2(n_cols)\n    grid = (input.shape[0],)\n\n    # Launch the kernel\n    fused_layer_norm_relu_linear_kernel[grid](\n        input,\n        weight,\n        bias,\n        output,\n        input.stride(-2),\n        weight.stride(-2),\n        output.stride(-2),\n        n_cols,\n        eps,\n        n_cols,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        stream=get_cuda_stream(input.device.index)\n    )\n\n    return output\n\nimport torch\n\n# Example input tensor\ninput = torch.randn(4, 5)\n\n# Linear transformation weights\nweight = torch.randn(3, 5)\n\n# Bias for linear layer\nbias = torch.randn(3)\n\n# Normalized shape\nnormalized_shape = 3\n\n# Apply fused operation\noutput = fused_layer_norm_relu_linear(input, weight, bias, normalized_shape)\n\n# Print the output shape\nprint(output.shape)  # Expected output shape: (4, 3)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise addition, element-wise multiplication, and group normalization. It takes two input tensors, adds them element-wise, multiplies the result with the second tensor, and then applies group normalization using learnable parameters for scaling and shifting. The function supports autograd for gradient computation and all operations are differentiable.\nWrapper Entry Information: fused_add_mul_groupnorm(input1, input2, weight, bias, num_groups, eps=1e-5, *, out=None) -> Tensor; input1 (Tensor): The first input tensor X; input2 (Tensor): The second input tensor Y, must be broadcastable to the shape of X; weight (Tensor): Learnable weight parameter \\gamma of shape (C,), where C is the number of channels; bias (Tensor): Learnable bias parameter \\beta of shape (C,); num_groups (int): Number of groups to separate the channels into for group normalization; eps (float, optional): A value added to the denominator for numerical stability in group normalization. Default: `1e-5`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given two input tensors X and Y, and learnable parameters \\gamma and \\beta for group normalization, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X + Y \\\\\nM &= Z \\odot Y \\\\\nO &= \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon)\n\\end{align*}\n\\]\n\nwhere:\n- X and Y are input tensors.\n- \\odot denotes element-wise multiplication.\n- \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon) applies group normalization to M with \\gamma and \\beta as affine parameters, over the specified number of groups, and \\epsilon for numerical stability.\nother: - The shapes of `input1` and `input2` must be broadcastable to each other.\n- The `weight` and `bias` parameters must have shape `(C,)`, where `C` is the number of channels in the input tensors.\n- The `num_groups` parameter must divide the number of channels `C` evenly.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise addition, element-wise multiplication, and group normalization. It takes two input tensors, adds them element-wise, multiplies the result with the second tensor, and then applies group normalization using learnable parameters for scaling and shifting. The function supports autograd for gradient computation and all operations are differentiable.\nWrapper Entry Information: fused_add_mul_groupnorm(input1, input2, weight, bias, num_groups, eps=1e-5, *, out=None) -> Tensor; input1 (Tensor): The first input tensor X; input2 (Tensor): The second input tensor Y, must be broadcastable to the shape of X; weight (Tensor): Learnable weight parameter \\gamma of shape (C,), where C is the number of channels; bias (Tensor): Learnable bias parameter \\beta of shape (C,); num_groups (int): Number of groups to separate the channels into for group normalization; eps (float, optional): A value added to the denominator for numerical stability in group normalization. Default: `1e-5`; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`\nMath: Given two input tensors X and Y, and learnable parameters \\gamma and \\beta for group normalization, the function computes:\n\n\\[\n\\begin{align*}\nZ &= X + Y \\\\\nM &= Z \\odot Y \\\\\nO &= \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon)\n\\end{align*}\n\\]\n\nwhere:\n- X and Y are input tensors.\n- \\odot denotes element-wise multiplication.\n- \\text{GroupNorm}(M, \\gamma, \\beta, \\text{num\\_groups}, \\epsilon) applies group normalization to M with \\gamma and \\beta as affine parameters, over the specified number of groups, and \\epsilon for numerical stability.\nother: - The shapes of `input1` and `input2` must be broadcastable to each other.\n- The `weight` and `bias` parameters must have shape `(C,)`, where `C` is the number of channels in the input tensors.\n- The `num_groups` parameter must divide the number of channels `C` evenly.\n- This function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_add_mul_groupnorm_kernel(\n    X, Y, M, W, B, O,\n    stride_xb, stride_xc, stride_yb, stride_yc, stride_mb, stride_mc, stride_ob, stride_oc,\n    stride_w, stride_b,\n    N, C, H, W, num_groups, eps: tl.constexpr,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N * C * H * W\n\n    # Load data\n    x_offsets = (offsets // (C * H * W)) * stride_xb + (offsets % (C * H * W)) % (H * W) + (offsets % (C * H * W)) // (H * W) * stride_xc\n    y_offsets = (offsets // (C * H * W)) * stride_yb + (offsets % (C * H * W)) % (H * W) + (offsets % (C * H * W)) // (H * W) * stride_yc\n    x = tl.load(X + x_offsets, mask=mask)\n    y = tl.load(Y + y_offsets, mask=mask)\n\n    # Element-wise addition and multiplication\n    z = x + y\n    m = z * y\n\n    # Group normalization\n    group_size = C // num_groups\n    group_id = (offsets % (C * H * W)) // (group_size * H * W)\n    group_start = group_id * group_size * H * W\n    group_end = group_start + group_size * H * W\n\n    # Compute mean and variance within the group\n    group_mask = (offsets % (C * H * W) >= group_start) & (offsets % (C * H * W) < group_end)\n    group_mean = tl.sum(m, mask=group_mask) / (group_size * H * W)\n    group_var = tl.sum((m - group_mean) ** 2, mask=group_mask) / (group_size * H * W)\n    inv_std = 1 / tl.sqrt(group_var + eps)\n\n    # Apply group normalization\n    w_offsets = (offsets % (C * H * W)) // (H * W) * stride_w\n    b_offsets = (offsets % (C * H * W)) // (H * W) * stride_b\n    w = tl.load(W + w_offsets, mask=mask)\n    b = tl.load(B + b_offsets, mask=mask)\n    o = (m - group_mean) * inv_std * w + b\n\n    # Store the result\n    o_offsets = (offsets // (C * H * W)) * stride_ob + (offsets % (C * H * W)) % (H * W) + (offsets % (C * H * W)) // (H * W) * stride_oc\n    tl.store(O + o_offsets, o, mask=mask)\n\nimport torch\nimport triton\nimport triton.language as tl\n\nclass FusedAddMulGroupNorm(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, X, Y, W, B, num_groups, eps=1e-5, out=None):\n        N, C, H, W = X.shape\n        assert Y.shape == X.shape, \"Input tensors must be broadcastable to each other\"\n        assert W.shape == (C,), \"Weight parameter must have shape (C,)\"\n        assert B.shape == (C,), \"Bias parameter must have shape (C,)\"\n        assert C % num_groups == 0, \"Number of groups must divide the number of channels evenly\"\n\n        if out is None:\n            out = torch.empty_like(X)\n\n        # Launch the Triton kernel\n        grid = (N * C * H * W // 1024 + 1,)\n        fused_add_mul_groupnorm_kernel[grid](\n            X, Y, out, W, B, out,\n            X.stride(0), X.stride(1), Y.stride(0), Y.stride(1), out.stride(0), out.stride(1), out.stride(0), out.stride(1),\n            W.stride(0), B.stride(0),\n            N, C, H, W, num_groups, eps, 1024\n        )\n\n        ctx.save_for_backward(X, Y, W, B, out, num_groups, eps)\n        return out\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        X, Y, W, B, out, num_groups, eps = ctx.saved_tensors\n        N, C, H, W = X.shape\n\n        # Compute gradients\n        grad_X = torch.zeros_like(X)\n        grad_Y = torch.zeros_like(Y)\n        grad_W = torch.zeros_like(W)\n        grad_B = torch.zeros_like(B)\n\n        # Reuse the forward pass kernel to compute gradients\n        grid = (N * C * H * W // 1024 + 1,)\n        fused_add_mul_groupnorm_kernel[grid](\n            X, Y, out, W, B, grad_X,\n            X.stride(0), X.stride(1), Y.stride(0), Y.stride(1), grad_X.stride(0), grad_X.stride(1), grad_X.stride(0), grad_X.stride(1),\n            W.stride(0), B.stride(0),\n            N, C, H, W, num_groups, eps, 1024\n        )\n\n        # Compute gradients for Y\n        grad_Y = grad_output * (X + Y) + grad_output * (X + Y) * Y\n\n        # Compute gradients for W and B\n        group_size = C // num_groups\n        for group_id in range(num_groups):\n            group_start = group_id * group_size\n            group_end = group_start + group_size\n            group_mask = (torch.arange(C) >= group_start) & (torch.arange(C) < group_end)\n            group_mean = torch.mean(out[:, group_mask, :, :], dim=(1, 2, 3), keepdim=True)\n            group_var = torch.var(out[:, group_mask, :, :], dim=(1, 2, 3), keepdim=True)\n            inv_std = 1 / torch.sqrt(group_var + eps)\n\n            grad_W[group_mask] = torch.sum(grad_output[:, group_mask, :, :] * (out[:, group_mask, :, :] - group_mean) * inv_std, dim=(0, 2, 3))\n            grad_B[group_mask] = torch.sum(grad_output[:, group_mask, :, :], dim=(0, 2, 3))\n\n        return grad_X, grad_Y, grad_W, grad_B, None, None, None\n\ndef fused_add_mul_groupnorm(input1, input2, weight, bias, num_groups, eps=1e-5, *, out=None):\n    return FusedAddMulGroupNorm.apply(input1, input2, weight, bias, num_groups, eps, out)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements stochastic gradient descent, optionally with momentum, weight decay, dampening, and Nesterov momentum. It can maximize or minimize an objective function and supports different optimization algorithms for performance.\nWrapper Entry Information: def SGD(params, lr=1e-3, momentum=0, weight_decay=0, dampening=0, nesterov=False, maximize=False, foreach=None, differentiable=False, fused=None)\nMath: \\begin{aligned} &g_t \\leftarrow \\nabla_{\\theta} f_t (\\theta_{t-1}) \\\\\\ &\\text{if} \\: \\lambda \\neq 0 \\\\\\ &g_t \\leftarrow g_t + \\lambda \\theta_{t-1} \\\\\\ &\\text{if} \\: \\mu \\neq 0 \\\\\\ &\\text{if} \\: t > 1 \\\\\\ &\\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t \\\\\\ &\\text{else} \\\\\\ &\\textbf{b}_t \\leftarrow g_t \\\\\\ &\\text{if} \\: \\textit{nesterov} \\\\\\ &g_t \\leftarrow g_{t} + \\mu \\textbf{b}_t \\\\\\ &\\text{else} \\\\\\ &g_t  \\leftarrow  \\textbf{b}_t \\\\\\ &\\text{if} \\: \\textit{maximize} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} + \\gamma g_t \\\\\\ &\\text{else} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t \\end{aligned}\nother: Nesterov momentum is based on a research paper. The algorithm prioritizes different implementations based on performance. It differs from some traditional frameworks in its handling of momentum. The initial momentum buffer is set to the gradient value at the first step.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a kernel 'update_fn_kernel' and a wrapper function 'update_fn_triton'. The kernel performs the update of model parameters using gradient descent with momentum and weight decay, where each parameter is updated individually using input pointers 'p_ptr', 'grad_ptr', and 'exp_avg_ptr' for parameters, gradients, and exponential moving averages, respectively. The learning rate 'lr', weight decay 'wd', beta coefficients 'beta1', 'beta2', and the total number of elements 'n_elements' determine the update process. The 'BLOCK_SIZE' specifies the number of threads per block. The wrapper function 'update_fn_triton' prepares the grid and launches this kernel. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef update_fn_kernel(\n      p_ptr,\n      grad_ptr,\n      exp_avg_ptr,\n      lr,\n      wd,\n      beta1,\n      beta2,\n      n_elements,\n      BLOCK_SIZE, # tl.constexpr\n):\n    pid = tl.program_id(axis = 0)\n\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    mask = offsets < n_elements\n\n    # offsetted pointers\n    offset_p_ptr = p_ptr + offsets\n    offset_grad_ptr = grad_ptr + offsets\n    offset_exp_avg_ptr = exp_avg_ptr + offsets\n\n    # load\n    p = tl.load(offset_p_ptr, mask = mask)\n    grad = tl.load(offset_grad_ptr, mask = mask)\n    exp_avg = tl.load(offset_exp_avg_ptr, mask = mask)\n\n    # stepweight decay\n    p = p * (1 - lr * wd)\n\n    # diff between momentum running average and grad\n    diff = exp_avg - grad\n\n    # weight update\n    update = diff * beta1 + grad\n\n    # torch.sign\n    can_update = update != 0\n    update_sign = tl.where(update > 0, -lr, lr)\n\n    p = p + update_sign * can_update\n\n    # decay the momentum running average coefficient\n    exp_avg = diff * beta2 + grad\n\n    # store new params and momentum running average coefficient\n    tl.store(offset_p_ptr, p, mask = mask)\n    tl.store(offset_exp_avg_ptr, exp_avg, mask = mask)\n\ndef update_fn_triton(\n    p: torch.Tensor,\n    grad: torch.Tensor,\n    exp_avg: torch.Tensor,\n    lr: float,\n    wd: float,\n    beta1: float,\n    beta2: float\n):\n    assert all([t.is_cuda for t in (p, grad, exp_avg)])\n    n_elements = p.numel()\n\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n\n    update_fn_kernel[grid](\n        p,\n        grad,\n        exp_avg,\n        lr,\n        wd,\n        beta1,\n        beta2,\n        n_elements\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements stochastic gradient descent, optionally with momentum, weight decay, dampening, and Nesterov momentum. It can maximize or minimize an objective function and supports different optimization algorithms for performance.\nWrapper Entry Information: def SGD(params, lr=1e-3, momentum=0, weight_decay=0, dampening=0, nesterov=False, maximize=False, foreach=None, differentiable=False, fused=None)\nMath: \\begin{aligned} &g_t \\leftarrow \\nabla_{\\theta} f_t (\\theta_{t-1}) \\\\\\ &\\text{if} \\: \\lambda \\neq 0 \\\\\\ &g_t \\leftarrow g_t + \\lambda \\theta_{t-1} \\\\\\ &\\text{if} \\: \\mu \\neq 0 \\\\\\ &\\text{if} \\: t > 1 \\\\\\ &\\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t \\\\\\ &\\text{else} \\\\\\ &\\textbf{b}_t \\leftarrow g_t \\\\\\ &\\text{if} \\: \\textit{nesterov} \\\\\\ &g_t \\leftarrow g_{t} + \\mu \\textbf{b}_t \\\\\\ &\\text{else} \\\\\\ &g_t  \\leftarrow  \\textbf{b}_t \\\\\\ &\\text{if} \\: \\textit{maximize} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} + \\gamma g_t \\\\\\ &\\text{else} \\\\\\ &\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t \\end{aligned}\nother: Nesterov momentum is based on a research paper. The algorithm prioritizes different implementations based on performance. It differs from some traditional frameworks in its handling of momentum. The initial momentum buffer is set to the gradient value at the first step.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef sgd_kernel(\n    p_ptr,  # Pointer to parameters\n    grad_ptr,  # Pointer to gradients\n    exp_avg_ptr,  # Pointer to momentum buffer\n    lr,  # Learning rate\n    momentum,  # Momentum coefficient\n    weight_decay,  # Weight decay coefficient\n    dampening,  # Dampening coefficient\n    nesterov,  # Nesterov momentum flag\n    maximize,  # Maximize or minimize objective function\n    n_elements,  # Total number of elements\n    BLOCK_SIZE: tl.constexpr  # Number of threads per block\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load parameters, gradients, and momentum buffer\n    p = tl.load(p_ptr + offsets, mask=mask)\n    grad = tl.load(grad_ptr + offsets, mask=mask)\n    exp_avg = tl.load(exp_avg_ptr + offsets, mask=mask)\n\n    # Apply weight decay\n    if weight_decay != 0:\n        grad = grad + weight_decay * p\n\n    # Update momentum buffer\n    if momentum != 0:\n        if pid == 0:  # First step, initialize momentum buffer\n            exp_avg = grad\n        else:\n            exp_avg = momentum * exp_avg + (1 - dampening) * grad\n\n        if nesterov:\n            grad = grad + momentum * exp_avg\n        else:\n            grad = exp_avg\n\n    # Update parameters\n    if maximize:\n        p = p + lr * grad\n    else:\n        p = p - lr * grad\n\n    # Store updated parameters and momentum buffer\n    tl.store(p_ptr + offsets, p, mask=mask)\n    tl.store(exp_avg_ptr + offsets, exp_avg, mask=mask)\n\nimport torch\n\ndef SGD(params, lr=1e-3, momentum=0, weight_decay=0, dampening=0, nesterov=False, maximize=False, foreach=None, differentiable=False, fused=None):\n    if foreach is not None or differentiable or fused is not None:\n        raise NotImplementedError(\"foreach, differentiable, and fused options are not supported in this implementation.\")\n\n    for param in params:\n        if param.grad is None:\n            continue\n\n        # Ensure tensors are on the same device\n        assert param.is_cuda and param.grad.is_cuda\n\n        # Initialize momentum buffer if it doesn't exist\n        if 'exp_avg' not in param.state:\n            param.state['exp_avg'] = torch.zeros_like(param, memory_format=torch.preserve_format)\n\n        # Get pointers to the data\n        p_ptr = param.data_ptr()\n        grad_ptr = param.grad.data_ptr()\n        exp_avg_ptr = param.state['exp_avg'].data_ptr()\n\n        # Number of elements\n        n_elements = param.numel()\n\n        # Set up grid and block dimensions\n        grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n\n        # Launch the kernel\n        sgd_kernel[grid](\n            p_ptr,\n            grad_ptr,\n            exp_avg_ptr,\n            lr,\n            momentum,\n            weight_decay,\n            dampening,\n            nesterov,\n            maximize,\n            n_elements,\n            BLOCK_SIZE=1024\n        )\n\n    return params\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by batch normalization and then applies the ReLU activation function element-wise to the normalized result. This combined operation is useful for applying feature extraction, normalization, and non-linearity in one step, commonly used in convolutional neural networks (CNNs).\nWrapper Entry Information: def relu_batch_norm_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, running_mean=None, running_var=None, bn_weight=None, bn_bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False) -> Tensor\n\nArgs:\n    input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW).\n    weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW).\n    bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None.\n    stride (int or tuple, optional): The stride of the convolution kernel. Default: 1.\n    padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1.\n    running_mean (Tensor, optional): The running mean for batch normalization. Default: None.\n    running_var (Tensor, optional): The running variance for batch normalization. Default: None.\n    bn_weight (Tensor, optional): Learnable scaling factor for batch normalization (gamma). Default: None.\n    bn_bias (Tensor, optional): Learnable shift factor for batch normalization (beta). Default: None.\n    training (bool, optional): If True, updates running statistics for batch normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance in batch normalization. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability in batch normalization. Default: 1e-5.\n    inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: out = ReLU(BatchNorm(conv2d(input)))\nReLU(x) = max(0, x)\ny = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta\nother: The function combines convolution, batch normalization, and ReLU activation in a single step, which is a common pattern in CNNs for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by batch normalization and then applies the ReLU activation function element-wise to the normalized result. This combined operation is useful for applying feature extraction, normalization, and non-linearity in one step, commonly used in convolutional neural networks (CNNs).\nWrapper Entry Information: def relu_batch_norm_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, running_mean=None, running_var=None, bn_weight=None, bn_bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False) -> Tensor\n\nArgs:\n    input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW).\n    weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW).\n    bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None.\n    stride (int or tuple, optional): The stride of the convolution kernel. Default: 1.\n    padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0.\n    dilation (int or tuple, optional): The spacing between kernel elements. Default: 1.\n    groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1.\n    running_mean (Tensor, optional): The running mean for batch normalization. Default: None.\n    running_var (Tensor, optional): The running variance for batch normalization. Default: None.\n    bn_weight (Tensor, optional): Learnable scaling factor for batch normalization (gamma). Default: None.\n    bn_bias (Tensor, optional): Learnable shift factor for batch normalization (beta). Default: None.\n    training (bool, optional): If True, updates running statistics for batch normalization. Default: False.\n    momentum (float, optional): Value for updating the running mean and variance in batch normalization. Default: 0.1.\n    eps (float, optional): A small value added for numerical stability in batch normalization. Default: 1e-5.\n    inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: out = ReLU(BatchNorm(conv2d(input)))\nReLU(x) = max(0, x)\ny = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta\nother: The function combines convolution, batch normalization, and ReLU activation in a single step, which is a common pattern in CNNs for efficient computation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_batch_norm_conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, running_mean_ptr, running_var_ptr, bn_weight_ptr, bn_bias_ptr,\n    output_ptr, stride, padding, dilation, groups, momentum, eps, training, inplace,\n    input_shape, weight_shape, output_shape, \n    BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr, BLOCK_SIZE_C: tl.constexpr\n):\n    # Load input and weight tensors\n    input = tl.load(input_ptr)\n    weight = tl.load(weight_ptr)\n    bias = tl.load(bias_ptr) if bias_ptr is not None else None\n    running_mean = tl.load(running_mean_ptr) if running_mean_ptr is not None else None\n    running_var = tl.load(running_var_ptr) if running_var_ptr is not None else None\n    bn_weight = tl.load(bn_weight_ptr) if bn_weight_ptr is not None else None\n    bn_bias = tl.load(bn_bias_ptr) if bn_bias_ptr is not None else None\n\n    # Perform 2D convolution\n    conv_output = tl.zeros(output_shape, dtype=tl.float32)\n    for h in range(BLOCK_SIZE_H):\n        for w in range(BLOCK_SIZE_W):\n            for c in range(BLOCK_SIZE_C):\n                conv_output[:, :, h, w] += tl.dot(input[:, :, h * stride[0] + h, w * stride[1] + w], weight[:, c, :, :])\n\n    # Add bias if provided\n    if bias is not None:\n        conv_output += bias\n\n    # Perform batch normalization\n    if training:\n        # Calculate mean and variance\n        batch_mean = tl.mean(conv_output, axis=(0, 2, 3))\n        batch_var = tl.var(conv_output, axis=(0, 2, 3))\n\n        # Update running mean and variance\n        running_mean = (1 - momentum) * running_mean + momentum * batch_mean\n        running_var = (1 - momentum) * running_var + momentum * batch_var\n\n    # Normalize the output\n    norm_output = (conv_output - running_mean) / tl.sqrt(running_var + eps)\n    if bn_weight is not None and bn_bias is not None:\n        norm_output = norm_output * bn_weight + bn_bias\n\n    # Apply ReLU activation\n    if inplace:\n        output = tl.where(norm_output > 0, norm_output, 0)\n    else:\n        output = tl.max(norm_output, 0)\n\n    # Store the output\n    tl.store(output_ptr, output)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef relu_batch_norm_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, running_mean=None, running_var=None, bn_weight=None, bn_bias=None, training=False, momentum=0.1, eps=1e-5, inplace=False):\n    # Ensure input and weight are on the same device\n    device = input.device\n    input = input.to(device)\n    weight = weight.to(device)\n    bias = bias.to(device) if bias is not None else None\n    running_mean = running_mean.to(device) if running_mean is not None else None\n    running_var = running_var.to(device) if running_var is not None else None\n    bn_weight = bn_weight.to(device) if bn_weight is not None else None\n    bn_bias = bn_bias.to(device) if bn_bias is not None else None\n\n    # Get input and weight shapes\n    minibatch, in_channels, iH, iW = input.shape\n    out_channels, in_channels_per_group, kH, kW = weight.shape\n\n    # Calculate output shape\n    oH = (iH + 2 * padding - dilation * (kH - 1) - 1) // stride + 1\n    oW = (iW + 2 * padding - dilation * (kW - 1) - 1) // stride + 1\n    output_shape = (minibatch, out_channels, oH, oW)\n\n    # Allocate output tensor\n    output = torch.empty(output_shape, device=device, dtype=input.dtype)\n\n    # Define grid and block sizes\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n    BLOCK_SIZE_C = 32\n\n    # Call the Triton kernel\n    relu_batch_norm_conv2d_kernel[\n        (minibatch, out_channels, oH, oW)\n    ](\n        input, weight, bias, running_mean, running_var, bn_weight, bn_bias,\n        output, stride, padding, dilation, groups, momentum, eps, training, inplace,\n        input.shape, weight.shape, output.shape,\n        BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C\n    )\n\n    return output\n\nimport torch\n\n# Define input and weight tensors\ninput = torch.randn(2, 3, 32, 32, device='cuda')\nweight = torch.randn(4, 3, 3, 3, device='cuda')\nbias = torch.randn(4, device='cuda')\nrunning_mean = torch.randn(4, device='cuda')\nrunning_var = torch.randn(4, device='cuda')\nbn_weight = torch.randn(4, device='cuda')\nbn_bias = torch.randn(4, device='cuda')\n\n# Call the function\noutput = relu_batch_norm_conv2d(\n    input, weight, bias, stride=1, padding=1, dilation=1, groups=1,\n    running_mean=running_mean, running_var=running_var, bn_weight=bn_weight, bn_bias=bn_bias,\n    training=True, momentum=0.1, eps=1e-5, inplace=False\n)\n\nprint(output.shape)  # Should be (2, 4, 32, 32)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image composed of several input planes. Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN for performance. Supports complex data types.\nWrapper Entry Information: conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor Args: input: input tensor of shape (minibatch , in_channels , iH , iW) weight: filters of shape (out_channels , in_channels/groups , kH , kW) bias: optional bias tensor of shape (out_channels). Default: None stride: the stride of the convolving kernel. Can be a single number or a tuple (sH, sW). Default: 1 padding: implicit paddings on both sides of the input. Can be a string {'valid', 'same'}, single number or a tuple (padH, padW). Default: 0 dilation: the spacing between kernel elements. Can be a single number or a tuple (dH, dW). Default: 1 groups: split input into groups, both in_channels and out_channels should be divisible by the number of groups. Default: 1\nother: Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN. Supports complex data types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image composed of several input planes. Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN for performance. Supports complex data types.\nWrapper Entry Information: conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) -> Tensor Args: input: input tensor of shape (minibatch , in_channels , iH , iW) weight: filters of shape (out_channels , in_channels/groups , kH , kW) bias: optional bias tensor of shape (out_channels). Default: None stride: the stride of the convolving kernel. Can be a single number or a tuple (sH, sW). Default: 1 padding: implicit paddings on both sides of the input. Can be a string {'valid', 'same'}, single number or a tuple (padH, padW). Default: 0 dilation: the spacing between kernel elements. Can be a single number or a tuple (dH, dW). Default: 1 groups: split input into groups, both in_channels and out_channels should be divisible by the number of groups. Default: 1\nother: Supports TensorFloat32. May select a nondeterministic algorithm on CUDA with CuDNN. Supports complex data types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    in_channels, out_channels, batch_size, iH, iW, kH, kW,\n    stride_h, stride_w, pad_h, pad_w, dilation_h, dilation_w,\n    groups, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr\n):\n    \"\"\"\n    Applies a 2D convolution to the input tensor using Triton.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    weight_ptr : tl.tensor\n        Pointer to the weight tensor in global memory.\n    bias_ptr : tl.tensor\n        Pointer to the bias tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    batch_size : int\n        Number of samples in the batch.\n    iH : int\n        Height of the input tensor.\n    iW : int\n        Width of the input tensor.\n    kH : int\n        Height of the kernel.\n    kW : int\n        Width of the kernel.\n    stride_h : int\n        Stride in the height dimension.\n    stride_w : int\n        Stride in the width dimension.\n    pad_h : int\n        Padding in the height dimension.\n    pad_w : int\n        Padding in the width dimension.\n    dilation_h : int\n        Dilation in the height dimension.\n    dilation_w : int\n        Dilation in the width dimension.\n    groups : int\n        Number of groups.\n    BLOCK_SIZE_N : tl.constexpr\n        Block size for the batch dimension.\n    BLOCK_SIZE_H : tl.constexpr\n        Block size for the height dimension.\n    BLOCK_SIZE_W : tl.constexpr\n        Block size for the width dimension.\n    \"\"\"\n\n    pid_n = tl.program_id(0)  # Batch index\n    pid_h = tl.program_id(1)  # Height index\n    pid_w = tl.program_id(2)  # Width index\n\n    # Compute the output indices\n    n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    h = pid_h * BLOCK_SIZE_H + tl.arange(0, BLOCK_SIZE_H)\n    w = pid_w * BLOCK_SIZE_W + tl.arange(0, BLOCK_SIZE_W)\n\n    # Compute the output shape\n    oH = (iH + 2 * pad_h - dilation_h * (kH - 1) - 1) // stride_h + 1\n    oW = (iW + 2 * pad_w - dilation_w * (kW - 1) - 1) // stride_w + 1\n\n    # Mask for valid indices\n    mask_n = n < batch_size\n    mask_h = h < oH\n    mask_w = w < oW\n    mask = mask_n[:, None, None] & mask_h[None, :, None] & mask_w[None, None, :]\n\n    # Initialize the output tensor\n    output = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_H, BLOCK_SIZE_W, out_channels // groups), dtype=tl.float32)\n\n    # Load the bias if provided\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr, mask=tl.arange(0, out_channels // groups) < (out_channels // groups))\n\n    # Iterate over the output channels\n    for oc in range(out_channels // groups):\n        # Iterate over the input channels\n        for ic in range(in_channels // groups):\n            # Iterate over the kernel\n            for kh in range(kH):\n                for kw in range(kW):\n                    # Compute the input indices\n                    input_h = h * stride_h - pad_h + kh * dilation_h\n                    input_w = w * stride_w - pad_w + kw * dilation_w\n\n                    # Mask for valid input indices\n                    input_mask = (input_h >= 0) & (input_h < iH) & (input_w >= 0) & (input_w < iW)\n\n                    # Load the input and weight\n                    input_val = tl.load(input_ptr + (n * in_channels * iH * iW + ic * iH * iW + input_h * iW + input_w), mask=input_mask, other=0.0)\n                    weight_val = tl.load(weight_ptr + (oc * in_channels * kH * kW + ic * kH * kW + kh * kW + kw))\n\n                    # Perform the convolution\n                    output[:, :, :, oc] += input_val * weight_val\n\n    # Add the bias if provided\n    if bias_ptr is not None:\n        output += bias[None, None, None, :]\n\n    # Store the output\n    tl.store(output_ptr + (n * out_channels * oH * oW + oc * oH * oW + h * oW + w), output, mask=mask)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between two normalized input tensors `x1` and `x2`. This function normalizes `x1` and `x2` along a specified dimension using L_p normalization, and subsequently calculates the cosine similarity between these normalized tensors along the specified dimension. This involves ensuring vectors are scaled to avoid division by zero by introducing small epsilon values both during normalization and similarity computation.\nWrapper Entry Information: def normalized_cosine_similarity(x1: Tensor, x2: Tensor, dim: int = 1, eps_similarity: float = 1e-8, p_norm: float = 2, eps_norm: float = 1e-12) -> Tensor\nMath: The operation is defined as:\n\nsimilarity = \\frac{\\text{normalize}(x1) \\cdot \\text{normalize}(x2)}{\\max(\\lVert \\text{normalize}(x1) \\Vert _2, \\epsilon) \\cdot \\max(\\lVert \\text{normalize}(x2) \\Vert _2, \\epsilon)}\n\nwhere the `normalize` function is defined as:\n\nv = \\frac{v}{\\max(\\lVert v \\rVert_p, \\epsilon)}.\nother: The function allows broadcasting x2 to match x1's shape. Default values are provided for dimension, normalization, and similarity thresholds to enhance robustness against division by zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between two normalized input tensors `x1` and `x2`. This function normalizes `x1` and `x2` along a specified dimension using L_p normalization, and subsequently calculates the cosine similarity between these normalized tensors along the specified dimension. This involves ensuring vectors are scaled to avoid division by zero by introducing small epsilon values both during normalization and similarity computation.\nWrapper Entry Information: def normalized_cosine_similarity(x1: Tensor, x2: Tensor, dim: int = 1, eps_similarity: float = 1e-8, p_norm: float = 2, eps_norm: float = 1e-12) -> Tensor\nMath: The operation is defined as:\n\nsimilarity = \\frac{\\text{normalize}(x1) \\cdot \\text{normalize}(x2)}{\\max(\\lVert \\text{normalize}(x1) \\Vert _2, \\epsilon) \\cdot \\max(\\lVert \\text{normalize}(x2) \\Vert _2, \\epsilon)}\n\nwhere the `normalize` function is defined as:\n\nv = \\frac{v}{\\max(\\lVert v \\rVert_p, \\epsilon)}.\nother: The function allows broadcasting x2 to match x1's shape. Default values are provided for dimension, normalization, and similarity thresholds to enhance robustness against division by zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef normalize_kernel(\n    x,\n    norm,\n    x_row_stride,\n    n_cols,\n    p,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    x_ptr = x + prog_id * x_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    norm_p = tl.sum(tl.abs(xf) ** p, 0) ** (1.0 / p)\n    norm_val = tl.max(norm_p, eps)\n    norm[prog_id] = norm_val\n\n    normalized_x = (xf / norm_val).to(x.dtype)\n    tl.store(x_ptr + offsets, normalized_x, mask=offsets < n_cols)\n\n@triton.jit\ndef cosine_similarity_kernel(\n    x1,\n    x2,\n    similarity,\n    x1_row_stride,\n    x2_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    x1_ptr = x1 + prog_id * x1_row_stride\n    x2_ptr = x2 + prog_id * x2_row_stride\n\n    x1 = tl.load(x1_ptr + offsets, mask=offsets < n_cols)\n    x2 = tl.load(x2_ptr + offsets, mask=offsets < n_cols)\n    x1f = x1.to(tl.float32)\n    x2f = x2.to(tl.float32)\n\n    dot_product = tl.sum(x1f * x2f, 0)\n    norm_x1 = tl.max(tl.sqrt(tl.sum(x1f * x1f, 0)), eps)\n    norm_x2 = tl.max(tl.sqrt(tl.sum(x2f * x2f, 0)), eps)\n\n    similarity_val = dot_product / (norm_x1 * norm_x2)\n    similarity[prog_id] = similarity_val\n\n@torch.inference_mode()\ndef normalized_cosine_similarity(x1: Tensor, x2: Tensor, dim: int = 1, eps_similarity: float = 1e-8, p_norm: float = 2, eps_norm: float = 1e-12) -> Tensor:\n    \"\"\"\n    Computes the cosine similarity between two normalized input tensors `x1` and `x2`.\n\n    Args:\n        x1 (Tensor): The first input tensor.\n        x2 (Tensor): The second input tensor.\n        dim (int, optional): The dimension along which to compute the cosine similarity. Default is 1.\n        eps_similarity (float, optional): A small value to avoid division by zero in the similarity computation. Default is 1e-8.\n        p_norm (float, optional): The p-norm value for normalization. Default is 2.\n        eps_norm (float, optional): A small value to avoid division by zero in the normalization. Default is 1e-12.\n\n    Returns:\n        Tensor: The cosine similarity between the normalized tensors.\n    \"\"\"\n\n    def _kernel_meta():\n        device = x1.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    # Ensure x2 is broadcasted to match x1's shape\n    x2 = x2.expand_as(x1)\n\n    feat_size = x1.size(dim)\n    seq_len = x1.numel() // x1.size(-1)\n    x1_stride = x1.stride(dim)\n    x2_stride = x2.stride(dim)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    norm_x1 = torch.empty((seq_len,), dtype=torch.float32, device=x1.device)\n    norm_x2 = torch.empty((seq_len,), dtype=torch.float32, device=x2.device)\n\n    # Normalize x1\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    normalize_kernel[grid](\n        x1,\n        norm_x1,\n        x1_stride,\n        feat_size,\n        p_norm,\n        eps_norm,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n\n    # Normalize x2\n    normalize_kernel[grid](\n        x2,\n        norm_x2,\n        x2_stride,\n        feat_size,\n        p_norm,\n        eps_norm,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n\n    # Compute cosine similarity\n    similarity = torch.empty((seq_len,), dtype=torch.float32, device=x1.device)\n    cosine_similarity_kernel[grid](\n        x1,\n        x2,\n        similarity,\n        x1_stride,\n        x2_stride,\n        feat_size,\n        eps_similarity,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n\n    return similarity\n\n# Example usage\nx1 = torch.randn((32, 64), device='cuda')\nx2 = torch.randn((32, 64), device='cuda')\nsimilarity = normalized_cosine_similarity(x1, x2)\nprint(similarity)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using the Cholesky decomposition. It first performs Cholesky decomposition on a symmetric positive-definite matrix `A` to obtain a lower triangular matrix `L` such that `A = L * L.T`, then solves for `x` in `Ax = b` using the Cholesky factorization.\nWrapper Entry Information: def fused_cholesky_solve(A: Tensor, b: Tensor) -> Tensor: A: The symmetric positive-definite matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n, k)`.\nMath: Cholesky decomposition: A = L * L.T, Solve: Ax = b\nother: The function assumes that the input matrix `A` is symmetric positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel (cos_func) that computes the cosine for each element of a given tensor A. The kernel takes four parameters: tensor pointers a (input) and b (output), n_elements (number of elements in the input), and BLOCK_SIZE (number of elements processed per block, defined as a constexpr). The cos function wraps the triton kernel launch, preparing tensors and grid/block configurations. import torch\nimport triton\nimport triton.language as tl\nimport math\n\n# Kernel function: Computes the cosine of each element in the input tensor.\n@triton.jit\ndef cos_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block and thread\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Determine which elements are valid within the block\n    mask = offset < n_elements\n    # Load elements from tensor `a` into `a_value`\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the cosine of each element in `a_value`\n    b_value = tl.cos(a_value.to(tl.float32))\n    # Store the result back to tensor `b`\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to invoke the Triton kernel and perform the computation\ndef cos(A):\n    # Prepare output tensor `B` with the same shape and type as `A`\n    B = torch.empty_like(A)\n    # Determine the total number of elements in the input tensor `A`\n    n_elements = A.numel()\n    # Calculate the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    cos_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution `x` to the equation `Ax = b` using the Cholesky decomposition. It first performs Cholesky decomposition on a symmetric positive-definite matrix `A` to obtain a lower triangular matrix `L` such that `A = L * L.T`, then solves for `x` in `Ax = b` using the Cholesky factorization.\nWrapper Entry Information: def fused_cholesky_solve(A: Tensor, b: Tensor) -> Tensor: A: The symmetric positive-definite matrix `A` of shape `(n, n)`. b: The right-hand side tensor `b` of shape `(n, k)`.\nMath: Cholesky decomposition: A = L * L.T, Solve: Ax = b\nother: The function assumes that the input matrix `A` is symmetric positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Define the fused Cholesky solve function\ndef fused_cholesky_solve(A: torch.Tensor, b: torch.Tensor) -> torch.Tensor:\n    # Ensure A is a symmetric positive-definite matrix\n    assert A.shape[0] == A.shape[1], \"A must be a square matrix\"\n    assert A.shape[0] == b.shape[0], \"A and b must have the same number of rows\"\n    \n    # Perform Cholesky decomposition: A = L * L.T\n    L = torch.cholesky(A, upper=False)\n    \n    # Solve the system L * y = b for y\n    y = torch.triangular_solve(b, L, upper=False).solution\n    \n    # Solve the system L.T * x = y for x\n    x = torch.triangular_solve(y, L.T, upper=True).solution\n    \n    return x\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a symmetric positive-definite matrix A and a right-hand side tensor b\n    A = torch.tensor([[4.0, 12.0, -16.0], [12.0, 37.0, -43.0], [-16.0, -43.0, 98.0]], dtype=torch.float32)\n    b = torch.tensor([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], dtype=torch.float32)\n    \n    # Solve the system Ax = b\n    x = fused_cholesky_solve(A, b)\n    print(\"Solution x:\")\n    print(x)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Matrix product of two tensors. The behavior depends on the dimensionality of the tensors: 1D tensors return a dot product; 2D tensors return a matrix-matrix product; 1D and 2D tensors return a matrix-vector product; N-dimensional tensors (N > 2) return a batched matrix multiply with broadcasting support. Sparse layouts are supported for 2D matrix-matrix products. TensorFloat32 is supported. On certain ROCm devices, float16 inputs use different precision for backward. The 1D dot product version does not support an out parameter.\nWrapper Entry Information: matmul(input, other, *, out=None) -> Tensor\nArguments:\n    input (Tensor): the first tensor to be multiplied\n    other (Tensor): the second tensor to be multiplied\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. If you notice missing functionality please open a feature request.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a dot product kernel. The kernel function 'dot_product_kernel' takes five parameters: x_ptr (pointer to the first input tensor), y_ptr (pointer to the second input tensor), out_ptr (pointer to the output tensor), N (size of the input tensors, as a compile-time constant), and block_size (size of the block, as a compile-time constant). It computes the dot product of two 1D tensors and stores the result in the output tensor. The 'dot_product' function is a wrapper that checks input validity, prepares the output tensor, and launches the Triton kernel. import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef dot_product_kernel(x_ptr, y_ptr, out_ptr, N: tl.constexpr, block_size: tl.constexpr):\n    # Get the index of the current thread\n    pid = tl.program_id(0)\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < N\n\n    # Load elements from global memory\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n\n    # Compute dot product\n    result = tl.sum(x * y, axis=0)\n\n    # Write result to global memory\n    if pid == 0:\n        tl.store(out_ptr, result)\n\ndef dot_product(x, y):\n    # Ensure x and y are 1D tensors\n    if x.dim() != 1 or y.dim() != 1:\n        raise ValueError(\"Both input tensors must be 1-dimensional\")\n    \n    if x.size(0) != y.size(0):\n        raise ValueError(\"Input tensors must be of the same size\")\n\n    N = next_power_of_2(x.size(0))\n    block_size = 1024\n\n    # Prepare output tensor\n    out = torch.empty((), dtype=torch.float32, device=x.device)\n    \n    # Launch Triton kernel\n    grid = (1,)\n    dot_product_kernel[grid](x, y, out, N, block_size)\n    \n    return out.item()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Matrix product of two tensors. The behavior depends on the dimensionality of the tensors: 1D tensors return a dot product; 2D tensors return a matrix-matrix product; 1D and 2D tensors return a matrix-vector product; N-dimensional tensors (N > 2) return a batched matrix multiply with broadcasting support. Sparse layouts are supported for 2D matrix-matrix products. TensorFloat32 is supported. On certain ROCm devices, float16 inputs use different precision for backward. The 1D dot product version does not support an out parameter.\nWrapper Entry Information: matmul(input, other, *, out=None) -> Tensor\nArguments:\n    input (Tensor): the first tensor to be multiplied\n    other (Tensor): the second tensor to be multiplied\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. If you notice missing functionality please open a feature request.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    M, N, K,\n    stride_am, stride_ak,\n    stride_bk, stride_bn,\n    stride_cm, stride_cn,\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + (pid % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_mask = (offs_am[:, None] < M) & (offs_k[None, :] < K)\n        b_mask = (offs_k[:, None] < K) & (offs_bn[None, :] < N)\n        a = tl.load(a_ptrs, mask=a_mask, other=0.0)\n        b = tl.load(b_ptrs, mask=b_mask, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + (offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn)\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    tl.store(c_ptrs, accumulator, mask=c_mask)\n\ndef matmul(input, other, *, out=None):\n    # Ensure input and other are valid tensors\n    if not isinstance(input, torch.Tensor) or not isinstance(other, torch.Tensor):\n        raise ValueError(\"Both input and other must be tensors\")\n\n    # Determine the output shape based on input dimensions\n    if input.dim() == 1 and other.dim() == 1:\n        if input.size(0) != other.size(0):\n            raise ValueError(\"Input tensors must be of the same size for dot product\")\n        if out is not None:\n            raise ValueError(\"The 1D dot product version does not support an out parameter\")\n        return dot_product(input, other)\n    elif input.dim() == 2 and other.dim() == 2:\n        M, K = input.size()\n        K2, N = other.size()\n        if K != K2:\n            raise ValueError(\"Incompatible dimensions for matrix-matrix product\")\n    elif input.dim() == 1 and other.dim() == 2:\n        M = input.size(0)\n        K, N = other.size()\n    elif input.dim() == 2 and other.dim() == 1:\n        M, K = input.size()\n        N = other.size(0)\n    else:\n        # Handle N-dimensional tensors with broadcasting support\n        M = input.size(-2)\n        K = input.size(-1)\n        N = other.size(-1)\n        if input.size(-1) != other.size(-2):\n            raise ValueError(\"Incompatible dimensions for batched matrix multiply\")\n\n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty((M, N), dtype=input.dtype, device=input.device)\n    else:\n        if out.size() != (M, N):\n            raise ValueError(\"Output tensor must have the correct shape\")\n\n    # Define block sizes\n    BLOCK_SIZE_M = 16\n    BLOCK_SIZE_N = 16\n    BLOCK_SIZE_K = 16\n    GROUP_SIZE_M = 8\n\n    # Launch the Triton kernel\n    grid = (triton.cdiv(M, BLOCK_SIZE_M) * triton.cdiv(N, BLOCK_SIZE_N),)\n    matmul_kernel[grid](\n        input, other, out,\n        M, N, K,\n        input.stride(-2), input.stride(-1),\n        other.stride(-2), other.stride(-1),\n        out.stride(-2), out.stride(-1),\n        BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, GROUP_SIZE_M\n    )\n\n    return out\n\ndef dot_product(x, y):\n    # Ensure x and y are 1D tensors\n    if x.dim() != 1 or y.dim() != 1:\n        raise ValueError(\"Both input tensors must be 1-dimensional\")\n    \n    if x.size(0) != y.size(0):\n        raise ValueError(\"Input tensors must be of the same size\")\n\n    N = next_power_of_2(x.size(0))\n    block_size = 1024\n\n    # Prepare output tensor\n    out = torch.empty((), dtype=torch.float32, device=x.device)\n    \n    # Launch Triton kernel\n    grid = (1,)\n    dot_product_kernel[grid](x, y, out, N, block_size)\n    \n    return out.item()\n\n# Helper function to find the next power of 2\ndef next_power_of_2(n):\n    return 1 << (n - 1).bit_length()\n\n# Test 1D dot product\nx = torch.tensor([1.0, 2.0, 3.0], device='cuda')\ny = torch.tensor([4.0, 5.0, 6.0], device='cuda')\nresult = matmul(x, y)\nprint(\"1D Dot Product:\", result)  # Expected: 32.0\n\n# Test 2D matrix-matrix product\na = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device='cuda')\nb = torch.tensor([[5.0, 6.0], [7.0, 8.0]], device='cuda')\nresult = matmul(a, b)\nprint(\"2D Matrix-Matrix Product:\\n\", result)  # Expected: [[19.0, 22.0], [43.0, 50.0]]\n\n# Test 2D matrix-vector product\na = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device='cuda')\nb = torch.tensor([5.0, 6.0], device='cuda')\nresult = matmul(a, b)\nprint(\"2D Matrix-Vector Product:\", result)  # Expected: [17.0, 39.0]\n\n# Test 3D batched matrix multiply\na = torch.tensor([[[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0]]], device='cuda')\nb = torch.tensor([[[5.0, 6.0], [7.0, 8.0]], [[1.0, 2.0], [3.0, 4.0]]], device='cuda')\nresult = matmul(a, b)\nprint(\"3D Batched Matrix Multiply:\\n\", result)  # Expected: [[[19.0, 22.0], [43.0, 50.0]], [[11.0, 14.0], [25.0, 32.0]]]\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining torch.gather and torch.Tensor.masked_fill. It first gathers values from the input tensor along a specified dimension using provided indices, and then replaces the gathered elements with a specified value where the mask is True.\nWrapper Entry Information: fused_gather_masked_fill(input, dim, index, mask, value, *, sparse_grad=False, out=None) -> Tensor; input (Tensor): The input tensor X.; dim (int): The dimension along which to index.; index (LongTensor): The indices of elements to gather, of the same dimensionality as `input`.; mask (BoolTensor): A boolean mask tensor, broadcastable to the shape of the output tensor Y.; value (float): The value to fill in where `mask` is True.; sparse_grad (bool, optional): If True, gradient w.r.t. `input` will be a sparse tensor. Default: `False`.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Y = \\text{gather}(X, \\text{dim}, I)\nY[M] = \\text{value}\nother: - The input and index tensors must have the same number of dimensions.\n- The size of index at each dimension d must not exceed the size of input at that dimension, except at dimension dim.\n- The mask tensor must be broadcastable to the shape of the gathered output.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining torch.gather and torch.Tensor.masked_fill. It first gathers values from the input tensor along a specified dimension using provided indices, and then replaces the gathered elements with a specified value where the mask is True.\nWrapper Entry Information: fused_gather_masked_fill(input, dim, index, mask, value, *, sparse_grad=False, out=None) -> Tensor; input (Tensor): The input tensor X.; dim (int): The dimension along which to index.; index (LongTensor): The indices of elements to gather, of the same dimensionality as `input`.; mask (BoolTensor): A boolean mask tensor, broadcastable to the shape of the output tensor Y.; value (float): The value to fill in where `mask` is True.; sparse_grad (bool, optional): If True, gradient w.r.t. `input` will be a sparse tensor. Default: `False`.; out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Y = \\text{gather}(X, \\text{dim}, I)\nY[M] = \\text{value}\nother: - The input and index tensors must have the same number of dimensions.\n- The size of index at each dimension d must not exceed the size of input at that dimension, except at dimension dim.\n- The mask tensor must be broadcastable to the shape of the gathered output.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_gather_masked_fill_kernel(\n    output_ptr, input_ptr, index_ptr, mask_ptr, value, \n    input_stride, index_stride, mask_stride, \n    n_elements, n_cols, BLOCK_SIZE: tl.constexpr\n):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    \n    # Calculate the starting pointers for the current row\n    input_row_start_ptr = input_ptr + row_idx * input_stride\n    index_row_start_ptr = index_ptr + row_idx * index_stride\n    mask_row_start_ptr = mask_ptr + row_idx * mask_stride\n    \n    # Load the indices for the current row\n    indices = tl.load(index_row_start_ptr + col_offsets, mask=col_offsets < n_cols, other=0)\n    \n    # Load the input values for the current row\n    input_values = tl.load(input_row_start_ptr + indices * n_elements, mask=col_offsets < n_cols, other=0)\n    \n    # Load the mask for the current row\n    mask_values = tl.load(mask_row_start_ptr + col_offsets, mask=col_offsets < n_cols, other=0)\n    \n    # Apply the mask to replace the gathered elements with the specified value\n    output_values = tl.where(mask_values, value, input_values)\n    \n    # Write back the output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * input_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, output_values, mask=col_offsets < n_cols)\n\nimport torch\n\ndef fused_gather_masked_fill(input, dim, index, mask, value, *, sparse_grad=False, out=None):\n    # Validate input tensors and their shapes\n    if input.dim() != index.dim():\n        raise ValueError(\"Input and index tensors must have the same number of dimensions.\")\n    if any(input.size(d) != index.size(d) for d in range(input.dim()) if d != dim):\n        raise ValueError(\"The size of index at each dimension d must not exceed the size of input at that dimension, except at dimension dim.\")\n    if not mask.shape == input.shape:\n        raise ValueError(\"The mask tensor must be broadcastable to the shape of the output tensor.\")\n    \n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    \n    # Determine the grid and block sizes\n    n_elements = input.size(dim)\n    n_cols = input.size(0) if dim == 0 else input.size(1)\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    \n    # Launch the Triton kernel\n    fused_gather_masked_fill_kernel[(n_elements,)](\n        out, input, index, mask, value,\n        input.stride(dim), index.stride(dim), mask.stride(dim),\n        n_elements, n_cols, BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the cross entropy loss with log softmax applied to the input logits. It combines log softmax activation and cross entropy loss calculation in a numerically stable way. The log softmax is applied to the input logits, and the cross entropy loss is computed between the normalized logits and the target. The function allows customization with options such as which dimension to apply the log softmax, manual rescaling weights for each class, handling of ignored targets, reduction method for loss aggregation, and label smoothing to modify the target distribution.\nWrapper Entry Information: def fused_cross_entropy_log_softmax(input: torch.Tensor, target: torch.Tensor, dim: int = 1, weight: torch.Tensor = None, ignore_index: int = -100, reduction: str = 'mean', label_smoothing: float = 0.0) -> torch.Tensor\nArgs:\n    input (Tensor): Input tensor of logits, where softmax will be computed along `dim`.\n    target (Tensor): Ground truth class indices or probabilities.\n    dim (int, optional): Dimension along which to compute log softmax. Default is 1.\n    weight (Tensor, optional): Manual rescaling weight for each class.\n    ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100.\n    reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\n    label_smoothing (float, optional): Specifies the amount of smoothing to be applied, where 0.0 means no smoothing. Default: 0.0.\nMath: log_softmax(x_i) = log(exp(x_i) / sum(exp(x)))\nCE(y, p) = -sum(y * log(p))\nother: The function integrates the log softmax and cross entropy loss computation into a single operation for numerical stability. The input and target tensors must be of compatible shapes, where the input is expected to have logits of size (N, C) and target should have size (N,) for class indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the cross entropy loss with log softmax applied to the input logits. It combines log softmax activation and cross entropy loss calculation in a numerically stable way. The log softmax is applied to the input logits, and the cross entropy loss is computed between the normalized logits and the target. The function allows customization with options such as which dimension to apply the log softmax, manual rescaling weights for each class, handling of ignored targets, reduction method for loss aggregation, and label smoothing to modify the target distribution.\nWrapper Entry Information: def fused_cross_entropy_log_softmax(input: torch.Tensor, target: torch.Tensor, dim: int = 1, weight: torch.Tensor = None, ignore_index: int = -100, reduction: str = 'mean', label_smoothing: float = 0.0) -> torch.Tensor\nArgs:\n    input (Tensor): Input tensor of logits, where softmax will be computed along `dim`.\n    target (Tensor): Ground truth class indices or probabilities.\n    dim (int, optional): Dimension along which to compute log softmax. Default is 1.\n    weight (Tensor, optional): Manual rescaling weight for each class.\n    ignore_index (int, optional): Specifies a target value that is ignored and does not contribute to the input gradient. Default: -100.\n    reduction (str, optional): Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'. Default: 'mean'.\n    label_smoothing (float, optional): Specifies the amount of smoothing to be applied, where 0.0 means no smoothing. Default: 0.0.\nMath: log_softmax(x_i) = log(exp(x_i) / sum(exp(x)))\nCE(y, p) = -sum(y * log(p))\nother: The function integrates the log softmax and cross entropy loss computation into a single operation for numerical stability. The input and target tensors must be of compatible shapes, where the input is expected to have logits of size (N, C) and target should have size (N,) for class indices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_cross_entropy_log_softmax_kernel(\n    input_ptr, target_ptr, output_ptr, weight_ptr, ignore_index, reduction, label_smoothing,\n    n_elements, n_classes, stride_input, stride_target, stride_output, stride_weight,\n    BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    # Load input and target\n    input_offsets = offsets[:, None] * stride_input + tl.arange(0, n_classes)\n    target_offsets = offsets * stride_target\n\n    input = tl.load(input_ptr + input_offsets, mask=offsets < n_elements, other=0.0)\n    target = tl.load(target_ptr + target_offsets, mask=offsets < n_elements, other=ignore_index)\n\n    # Apply label smoothing\n    if label_smoothing > 0.0:\n        smooth_target = (1.0 - label_smoothing) * tl.equal(target[:, None], tl.arange(0, n_classes)) + label_smoothing / n_classes\n    else:\n        smooth_target = tl.equal(target[:, None], tl.arange(0, n_classes))\n\n    # Compute log softmax\n    max_val = tl.max(input, axis=1)[:, None]\n    input = input - max_val\n    log_sum_exp = tl.log(tl.sum(tl.exp(input), axis=1))[:, None]\n    log_softmax = input - log_sum_exp\n\n    # Compute cross entropy loss\n    loss = -tl.sum(smooth_target * log_softmax, axis=1)\n\n    # Apply weights\n    if weight_ptr is not None:\n        weight_offsets = target * stride_weight\n        weights = tl.load(weight_ptr + weight_offsets, mask=offsets < n_elements, other=1.0)\n        loss = loss * weights\n\n    # Apply reduction\n    if reduction == 0:  # 'none'\n        tl.store(output_ptr + offsets, loss, mask=offsets < n_elements)\n    elif reduction == 1:  # 'mean'\n        loss_sum = tl.sum(loss, axis=0)\n        loss_count = tl.sum(smooth_target, axis=0)\n        loss_mean = loss_sum / loss_count\n        tl.store(output_ptr, loss_mean)\n    elif reduction == 2:  # 'sum'\n        loss_sum = tl.sum(loss, axis=0)\n        tl.store(output_ptr, loss_sum)\n\nimport torch\nimport triton\n\ndef fused_cross_entropy_log_softmax(input: torch.Tensor, target: torch.Tensor, dim: int = 1, weight: torch.Tensor = None, ignore_index: int = -100, reduction: str = 'mean', label_smoothing: float = 0.0) -> torch.Tensor:\n    # Ensure input and target are on the same device\n    device = input.device\n    target = target.to(device)\n\n    # Get dimensions\n    n_elements = input.size(0)\n    n_classes = input.size(dim)\n\n    # Reshape input and target for Triton kernel\n    input = input.view(n_elements, n_classes)\n    target = target.view(n_elements)\n\n    # Initialize output tensor\n    if reduction == 'none':\n        output = torch.empty_like(input, device=device)\n    else:\n        output = torch.empty(1, device=device)\n\n    # Initialize weight tensor if provided\n    if weight is not None:\n        weight = weight.to(device)\n    else:\n        weight = None\n\n    # Define reduction method\n    reduction_map = {'none': 0, 'mean': 1, 'sum': 2}\n    reduction_code = reduction_map[reduction]\n\n    # Launch Triton kernel\n    grid = (n_elements // 1024 + 1,)\n    fused_cross_entropy_log_softmax_kernel[grid](\n        input, target, output, weight, ignore_index, reduction_code, label_smoothing,\n        n_elements, n_classes, input.stride(0), target.stride(0), output.stride(0), weight.stride(0) if weight is not None else 0,\n        BLOCK_SIZE=1024\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the matrices mat1 and mat2. The matrix input is added to the final result. If mat1 is a (n x m) tensor, mat2 is a (m x p) tensor, then input must be broadcastable with a (n x p) tensor and out will be a (n x p) tensor. Alpha and beta are scaling factors on matrix-vector product between mat1 and mat2 and the added matrix input respectively. If beta is 0, then input will be ignored, and nan and inf in it will not be propagated. This operation supports sparse layouts. If input is sparse the result will have the same layout and if out is provided it must have the same layout as input. Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nWrapper Entry Information: addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor; input (Tensor): matrix to be added; mat1 (Tensor): the first matrix to be matrix multiplied; mat2 (Tensor): the second matrix to be matrix multiplied; beta (Number, optional): multiplier for input (\u03b2); alpha (Number, optional): multiplier for mat1 @ mat2 (\u03b1); out (Tensor, optional): the output tensor.\nMath: out = \u03b2 * input + \u03b1 * (mat1 @ mat2)\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function for matrix multiplication with sparse tensors in BSR format and a regular dense matrix, and a wrapper function to call this kernel from PyTorch. import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef _sampled_addmm_kernel(\n    alpha,\n    beta,\n    IS_BETA_ZERO: tl.constexpr,\n    BLOCKSIZE_ROW: tl.constexpr,\n    BLOCKSIZE_COL: tl.constexpr,\n    k,\n    TILE_K: tl.constexpr,\n    values_ptr,\n    values_batch_stride,\n    values_nnz_stride,\n    values_row_block_stride,\n    values_col_block_stride,\n    crow_indices_ptr,\n    crow_indices_batch_stride,\n    crow_indices_stride,\n    col_indices_ptr,\n    col_indices_batch_stride,\n    col_indices_stride,\n    mat1_ptr,\n    mat1_batch_stride,\n    mat1_tiled_row_stride,\n    mat1_tiled_col_stride,\n    mat1_row_block_stride,\n    mat1_col_block_stride,\n    mat2_ptr,\n    mat2_batch_stride,\n    mat2_tiled_row_stride,\n    mat2_tiled_col_stride,\n    mat2_row_block_stride,\n    mat2_col_block_stride,\n    acc_dtype: tl.constexpr,\n    allow_tf32: tl.constexpr,\n):\n    batch_pid = tl.program_id(axis=1)\n    row_block_pid = tl.program_id(axis=0)\n\n    crow_indices_offset_ptr = (\n        crow_indices_ptr\n        + crow_indices_batch_stride * batch_pid\n        + crow_indices_stride * row_block_pid\n    )\n    nnz_offset = tl.load(crow_indices_offset_ptr)\n    nnz_offset_next = tl.load(crow_indices_offset_ptr + crow_indices_stride)\n\n    # Compute nnz for the row with number row_block_pid.\n    # If it is zero, skip the row.\n    row_nnz = nnz_offset_next - nnz_offset\n    if row_nnz == 0:\n        return\n\n    row_block_arange = tl.arange(0, BLOCKSIZE_ROW)\n    col_block_arange = tl.arange(0, BLOCKSIZE_COL)\n\n    # Pointers are set to the first block of the current row.\n    values_block_ptrs = (\n        values_ptr\n        + values_batch_stride * batch_pid\n        + values_nnz_stride * nnz_offset\n        + values_row_block_stride * row_block_arange[:, None]\n        + values_col_block_stride * col_block_arange[None, :]\n    )\n\n    col_index_nnz_ptr = (\n        col_indices_ptr\n        + col_indices_batch_stride * batch_pid\n        + col_indices_stride * nnz_offset\n    )\n\n    # Advance mat1 to the current tiled row, ignore columns.\n    mat1_block_ptrs = (\n        mat1_ptr\n        + mat1_batch_stride * batch_pid\n        + mat1_tiled_row_stride * row_block_pid\n        + mat1_row_block_stride * row_block_arange[:, None]\n    )\n\n    # Advance mat2 in batch and block col dimension.\n    mat2_block_ptrs = (\n        mat2_ptr\n        + mat2_batch_stride * batch_pid\n        + mat2_col_block_stride * col_block_arange[None, :]\n    )\n\n    k_tile_arange = tl.arange(0, TILE_K)\n    for _ in range(row_nnz):\n        acc_block = tl.zeros((BLOCKSIZE_ROW, BLOCKSIZE_COL), dtype=acc_dtype)\n\n        # find column block index\n        col_block = tl.load(col_index_nnz_ptr)\n\n        for k_tile in range(0, k, TILE_K):\n            k_offsets = k_tile + k_tile_arange\n            mask_k = k_offsets < k\n\n            mat1_block = tl.load(\n                mat1_block_ptrs\n                + mat1_col_block_stride * k_offsets[None, :],\n                mask=mask_k[None, :], other=0.0\n            )\n\n            mat2_block = tl.load(\n                mat2_block_ptrs\n                + mat2_tiled_col_stride * col_block\n                + mat2_row_block_stride * k_offsets[:, None],\n                mask=mask_k[:, None], other=0.0\n            )\n\n            acc_block += tl.dot(mat1_block, mat2_block, allow_tf32=allow_tf32, out_dtype=acc_dtype)\n\n        if IS_BETA_ZERO:\n            acc_block *= alpha\n        else:\n            acc_block = alpha * acc_block + beta * tl.load(values_block_ptrs)\n\n        # write result\n        tl.store(values_block_ptrs, acc_block.to(values_ptr.dtype.element_ty))\n\n        # advance val/col_index ptrs to the next block in the row.\n        values_block_ptrs += values_nnz_stride\n        col_index_nnz_ptr += col_indices_stride\n\ndef sampled_addmm(\n    input: torch.Tensor,\n    mat1: torch.Tensor,\n    mat2: torch.Tensor,\n    *,\n    beta=1.0,\n    alpha=1.0,\n    out: Optional[torch.Tensor] = None,\n    skip_checks: bool = False,\n    max_grid: Optional[Tuple[Optional[int], Optional[int], Optional[int]]] = None,\n):\n    f_name = \"sampled_addmm\"\n\n    def check(cond, msg):\n        if not cond:\n            raise ValueError(msg)\n\n    def check_bsr_layout(f_name, t):\n        check(\n            t.layout == torch.sparse_bsr,\n            f\"{f_name}(): only BSR sparse format is supported for the sparse argument.\",\n        )\n\n    def check_device(f_name, t, device):\n        check(\n            t.device == device and t.device.type == \"cuda\",\n            f\"{f_name}(): all inputs are expected to be on the same GPU device.\",\n        )\n\n    def check_mm_compatible_shapes(f_name, lhs, rhs):\n        check(\n            lhs.dim() >= 2 and rhs.dim() >= 2,\n            f\"{f_name}(): all inputs involved in the matrix product are expected to be at least 2D, \"\n            f\"but got lhs.dim() == {lhs.dim()} and rhs.dim() == {rhs.dim()}.\"\n        )\n\n        m, kl = lhs.shape[-2:]\n        kr, n = rhs.shape[-2:]\n\n        check(\n            kl == kr,\n            f\"{f_name}(): arguments' sizes involved in the matrix product are not compatible for matrix multiplication, \"\n            f\"got lhs.shape[-1] == {kl} which is not equal to rhs.shape[-2] == {kr}.\",\n        )\n\n    def check_dtype(f_name, t, dtype, *additional_dtypes):\n        check(\n            t.dtype == dtype\n            and t.dtype in ((torch.half, torch.bfloat16, torch.float) + tuple(*additional_dtypes)),\n            f\"{f_name}(): all inputs are expected to be of the same dtype \"\n            f\"and one of (half, bfloat16, float32) or {additional_dtypes}, \"\n            f\"but got dtype == {t.dtype}.\",\n        )\n\n    def check_blocksize(f_name, blocksize):\n        assert len(blocksize) == 2\n\n        def is_power_of_two(v):\n            return not (v & (v - 1))\n\n        def is_compatible_blocksize(b):\n            res = True\n            for blocksize in b:\n                # Triton loads only blocks which are at least 16 and powers of 2.\n                res = (blocksize >= 16 and is_power_of_two(blocksize)) and res\n            return res\n\n        check(\n            is_compatible_blocksize(blocksize),\n            f\"{f_name}(): sparse inputs' blocksize ({blocksize[0]}, {blocksize[1]}) \"\n            \"should be at least 16 and a power of 2 in each dimension.\",\n        )\n\n    def make_triton_contiguous(t):\n        \"\"\"Return input as a triton-contiguous tensor.\n\n        A triton-contiguous tensor is defined as a tensor that has strides\n        with minimal value equal to 1.\n\n        While triton kernels support triton-non-contiguous tensors (all\n        strides being greater than 1 or having 0 strides) arguments, a\n        considerable slow-down occurs because tensor data is copied\n        element-wise rather than chunk-wise.\n        \"\"\"\n        if min(t.stride()) != 1:\n            # TODO: investigate if contiguity along other axes than the\n            # last one can be beneficial for performance\n            return t.contiguous()\n        else:\n            return t\n\n    def broadcast_batch_dims(f_name, *tensors):\n        try:\n            return torch.broadcast_shapes(*(t.shape[:-2] for t in tensors))\n        except Exception:\n            check(False, f\"{f_name}(): inputs' batch dimensions are not broadcastable!\")\n\n    def prepare_inputs(bsr, *dense_tensors):\n        # Introduce fake batch dimension if not present for convenience.\n        crow_indices = bsr.crow_indices().unsqueeze(0)\n        col_indices = bsr.col_indices().unsqueeze(0)\n        values = make_triton_contiguous(bsr.values().unsqueeze(0))\n        tensors = [make_triton_contiguous(t.unsqueeze(0)) for t in dense_tensors]\n\n        # Compute broadcasted batch dimension\n        batch_dims_broadcasted = torch.broadcast_shapes(values.shape[:-3], *(t.shape[:-2] for t in tensors))\n\n        # Broadcast batch dimensions and squash.\n        # The result can be either a view or a copy.\n        def batch_broadcast_and_squash(t, batch_dims, invariant_dims):\n            return t.broadcast_to(batch_dims + invariant_dims).flatten(\n                0, len(batch_dims) - 1\n            )\n\n        crow_indices = batch_broadcast_and_squash(\n            crow_indices, batch_dims_broadcasted, (-1,)\n        )\n\n        col_indices = batch_broadcast_and_squash(\n            col_indices, batch_dims_broadcasted, (-1,)\n        )\n        values = batch_broadcast_and_squash(\n            values, batch_dims_broadcasted, values.shape[-3:]\n        )\n        tensors = [\n            batch_broadcast_and_squash(t, batch_dims_broadcasted, t.shape[-2:]) for t in tensors\n        ]\n\n        return crow_indices, col_indices, values, *tensors\n\n    def tile_to_blocksize(t, blocksize):\n        *rest, m, n = t.shape\n        new_shape = rest + [\n            m // blocksize[0],\n            blocksize[0],\n            n // blocksize[1],\n            blocksize[1],\n        ]\n        # using .view instead of .reshape to ensure that the result is\n        # indeed a view:\n        return t.view(new_shape).transpose(-3, -2)\n\n    def broadcast_batch_dims_bsr(f_name, bsr, *tensors):\n        batch_shape = broadcast_batch_dims(f_name, bsr, *tensors)\n\n        crow_indices = bsr.crow_indices().broadcast_to(batch_shape + (-1,))\n        col_indices = bsr.col_indices().broadcast_to(batch_shape + (-1,))\n        values = bsr.values().broadcast_to(batch_shape + bsr.values().shape[-3:])\n        size = batch_shape + bsr.shape[-2:]\n        return torch.sparse_compressed_tensor(crow_indices, col_indices, values, size=size, layout=bsr.layout)\n\n    check_bsr_layout(f_name, input)\n    input_broadcasted = broadcast_batch_dims_bsr(f_name, input, mat1, mat2)\n\n    if not skip_checks:\n        check_device(f_name, mat1, input.device)\n        check_device(f_name, mat2, input.device)\n        if beta != 0.0 and input.dtype is torch.bool:\n            check(\n                False,\n                f\"{f_name}(): having beta == {beta} not equal to 0.0 with boolean mask is not allowed.\"\n            )\n        if input.dtype is not torch.bool:\n            check_dtype(f_name, mat1, input.dtype)\n            check_dtype(f_name, mat2, input.dtype)\n        else:\n            check_dtype(f_name, mat1, mat2.dtype)\n        check_mm_compatible_shapes(f_name, mat1, mat2)\n        if out is not None:\n            check_bsr_layout(f_name, out)\n            check_device(f_name, out, mat1.device)\n            check_dtype(f_name, out, input.dtype)\n            check(\n                out.shape == input_broadcasted.shape\n                and out._nnz() == input_broadcasted._nnz(),\n                f\"{f_name}(): Expects `out` to be of shape {input_broadcasted.shape} \"\n                f\"and with nnz equal to {input_broadcasted._nnz()} \"\n                f\"but got out.shape = {out.shape} and out.nnz = {out._nnz()}\"\n            )\n\n    if out is None:\n        out = input_broadcasted.to(mat1.dtype, copy=True)\n    else:\n        out.copy_(input_broadcasted)\n\n    if out.numel() == 0 or out._nnz() == 0:\n        return out\n\n    blocksize = out.values().shape[-2:]\n    m = mat1.size(-2)\n    n = mat2.size(-1)\n    k = mat1.size(-1)\n\n    # NOTE: (m, 0) @ (0, n) == zeros(m, n)\n    if alpha == 0.0 or k == 0:\n        out.values().mul_(beta)\n        return out\n\n    # prepare inputs by reshaping them to be kernel-compatible\n    out_backup = out\n    crow_indices, col_indices, values, mat1, mat2 = prepare_inputs(out, mat1, mat2)\n\n    mat1 = tile_to_blocksize(mat1, (blocksize[0], k))\n    mat2 = tile_to_blocksize(mat2, (k, blocksize[1]))\n    tile_k = max(*blocksize)\n\n    _run_sampled_addmm_kernel(\n        alpha, beta, beta == 0.0,\n        blocksize, k, tile_k,\n        values, crow_indices, col_indices,\n        mat1, mat2,\n        max_grid\n    )\n\n    # If nnz x block strides are not the same in out_backup.values and values,\n    # it means that out_backup.values and values are not the views of each other,\n    # so we have to copy.\n    if out_backup.values().stride()[-3:] != values.stride()[-3:]:\n        out_backup.values().copy_(values.reshape(out_backup.values().shape))\n    return out_backup\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the matrices mat1 and mat2. The matrix input is added to the final result. If mat1 is a (n x m) tensor, mat2 is a (m x p) tensor, then input must be broadcastable with a (n x p) tensor and out will be a (n x p) tensor. Alpha and beta are scaling factors on matrix-vector product between mat1 and mat2 and the added matrix input respectively. If beta is 0, then input will be ignored, and nan and inf in it will not be propagated. This operation supports sparse layouts. If input is sparse the result will have the same layout and if out is provided it must have the same layout as input. Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nWrapper Entry Information: addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None) -> Tensor; input (Tensor): matrix to be added; mat1 (Tensor): the first matrix to be matrix multiplied; mat2 (Tensor): the second matrix to be matrix multiplied; beta (Number, optional): multiplier for input (\u03b2); alpha (Number, optional): multiplier for mat1 @ mat2 (\u03b1); out (Tensor, optional): the output tensor.\nMath: out = \u03b2 * input + \u03b1 * (mat1 @ mat2)\nother: Sparse support is a beta feature and some layout(s)/dtype/device combinations may not be supported, or may not have autograd support. This operator supports TensorFloat32. On certain ROCm devices, when using float16 inputs this module will use different precision for backward.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef _addmm_kernel(\n    alpha, beta, IS_BETA_ZERO: tl.constexpr,\n    M, N, K, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n    stride_am, stride_ak,\n    stride_bk, stride_bn,\n    stride_cm, stride_cn,\n    A_ptr, B_ptr, C_ptr, D_ptr\n):\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_warp = num_pid_m * num_pid_n\n    pid_m = pid // num_pid_n\n    pid_n = pid % num_pid_n\n    rm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    rn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    rk = tl.arange(0, BLOCK_SIZE_K)\n    A = A_ptr + (rm[:, None] * stride_am + rk[None, :] * stride_ak)\n    B = B_ptr + (rk[:, None] * stride_bk + rn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a = tl.load(A, mask=k + rk[None, :] < K, other=0.0)\n        b = tl.load(B, mask=k + rk[:, None] < K, other=0.0)\n        accumulator += tl.dot(a, b)\n        A += BLOCK_SIZE_K * stride_ak\n        B += BLOCK_SIZE_K * stride_bk\n\n    if IS_BETA_ZERO:\n        accumulator = accumulator * alpha\n    else:\n        C = C_ptr + (rm[:, None] * stride_cm + rn[None, :] * stride_cn)\n        c = tl.load(C, mask=rm[:, None] < M and rn[None, :] < N, other=0.0)\n        accumulator = accumulator * alpha + c * beta\n\n    D = D_ptr + (rm[:, None] * stride_cm + rn[None, :] * stride_cn)\n    tl.store(D, accumulator, mask=rm[:, None] < M and rn[None, :] < N)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef addmm(input: torch.Tensor, mat1: torch.Tensor, mat2: torch.Tensor, *, beta=1.0, alpha=1.0, out: Optional[torch.Tensor] = None) -> torch.Tensor:\n    # Check input dimensions\n    assert mat1.dim() == 2, \"mat1 must be a 2D tensor\"\n    assert mat2.dim() == 2, \"mat2 must be 2D tensor\"\n    assert mat1.size(1) == mat2.size(0), \"Incompatible dimensions for matrix multiplication\"\n    \n    # Determine output shape\n    n, m = mat1.size()\n    p = mat2.size(1)\n    \n    # Ensure input is broadcastable with (n, p)\n    input = input.expand(n, p)\n    \n    # Determine output tensor\n    if out is None:\n        out = torch.empty((n, p), dtype=input.dtype, device=input.device)\n    else:\n        assert out.shape == (n, p), \"Output tensor must have shape (n, p)\"\n        assert out.dtype == input.dtype, \"Output tensor must have the same dtype as input\"\n        assert out.device == input.device, \"Output tensor must be on the same device as input\"\n    \n    # Define block sizes\n    BLOCK_SIZE_M = 16\n    BLOCK_SIZE_N = 16\n    BLOCK_SIZE_K = 16\n    \n    # Launch the Triton kernel\n    grid = lambda META: (\n        triton.cdiv(n, META['BLOCK_SIZE_M']) * triton.cdiv(p, META['BLOCK_SIZE_N']),\n    )\n    \n    _addmm_kernel[grid](\n        alpha, beta, beta == 0.0,\n        n, p, m, BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K,\n        mat1.stride(0), mat1.stride(1),\n        mat2.stride(0), mat2.stride(1),\n        input.stride(0), input.stride(1),\n        out.stride(0), out.stride(1),\n        mat1, mat2, input, out\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the linear system `Ax = b` using QR decomposition. This function combines the QR decomposition with solving a linear system. Given a matrix `A` and a vector (or matrix) `b`, it performs the QR decomposition of `A` and computes the solution `x` using the formula `x = R^{-1} (Q^T b)`.\nWrapper Entry Information: def fused_qr_solve(A: Tensor, b: Tensor) -> Tensor: A: The matrix `A` of shape `(m, n)` where `m >= n`. b: The right-hand side tensor `b` of shape `(m, k)`.\nMath: x = R^{-1} Q^T b\nother: The function assumes `m >= n` for the matrix `A`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel (cos_func) that computes the cosine for each element of a given tensor A. The kernel takes four parameters: tensor pointers a (input) and b (output), n_elements (number of elements in the input), and BLOCK_SIZE (number of elements processed per block, defined as a constexpr). The cos function wraps the triton kernel launch, preparing tensors and grid/block configurations. import torch\nimport triton\nimport triton.language as tl\nimport math\n\n# Kernel function: Computes the cosine of each element in the input tensor.\n@triton.jit\ndef cos_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block and thread\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Determine which elements are valid within the block\n    mask = offset < n_elements\n    # Load elements from tensor `a` into `a_value`\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the cosine of each element in `a_value`\n    b_value = tl.cos(a_value.to(tl.float32))\n    # Store the result back to tensor `b`\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to invoke the Triton kernel and perform the computation\ndef cos(A):\n    # Prepare output tensor `B` with the same shape and type as `A`\n    B = torch.empty_like(A)\n    # Determine the total number of elements in the input tensor `A`\n    n_elements = A.numel()\n    # Calculate the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    cos_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the linear system `Ax = b` using QR decomposition. This function combines the QR decomposition with solving a linear system. Given a matrix `A` and a vector (or matrix) `b`, it performs the QR decomposition of `A` and computes the solution `x` using the formula `x = R^{-1} (Q^T b)`.\nWrapper Entry Information: def fused_qr_solve(A: Tensor, b: Tensor) -> Tensor: A: The matrix `A` of shape `(m, n)` where `m >= n`. b: The right-hand side tensor `b` of shape `(m, k)`.\nMath: x = R^{-1} Q^T b\nother: The function assumes `m >= n` for the matrix `A`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for QR decomposition and solving the linear system\n@triton.jit\ndef fused_qr_solve_kernel(A, b, x, m, n, k, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n\n    # Load A and b into shared memory\n    A_shared = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n    b_shared = tl.zeros((BLOCK_SIZE, k), dtype=tl.float32)\n\n    # Load A and b into shared memory\n    for i in range(BLOCK_SIZE):\n        if block_start + i < m:\n            for j in range(n):\n                A_shared[i, j] = A[block_start + i, j]\n            for j in range(k):\n                b_shared[i, j] = b[block_start + i, j]\n\n    # Perform QR decomposition on A\n    Q, R = tl.qr(A_shared)\n\n    # Compute Q^T b\n    Q_T = tl.transpose(Q)\n    Q_T_b = tl.dot(Q_T, b_shared)\n\n    # Solve R x = Q^T b\n    x_shared = tl.solve_triangular(R, Q_T_b, upper=True)\n\n    # Store the result back to x\n    for i in range(BLOCK_SIZE):\n        if block_start + i < m:\n            for j in range(k):\n                x[block_start + i, j] = x_shared[i, j]\n\n# Wrapper function to invoke the Triton kernel\ndef fused_qr_solve(A: torch.Tensor, b: torch.Tensor) -> torch.Tensor:\n    m, n = A.shape\n    _, k = b.shape\n    assert m >= n, \"Matrix A must have m >= n\"\n\n    # Prepare output tensor x with the same shape and type as b\n    x = torch.empty_like(b)\n\n    # Determine the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(m)))\n\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(m, block_size)\n\n    # Launch the Triton kernel\n    fused_qr_solve_kernel[(grid_size, 1, 1)](A, b, x, m, n, k, block_size)\n\n    return x\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D adaptive average pooling over an input tensor, followed by the sigmoid activation function applied element-wise. This is used for downsampling a feature map to a specified output size and then normalizing the result with the sigmoid function.\nWrapper Entry Information: def sigmoid_adaptive_avg_pool2d(input: Tensor, output_size: Union[int, Tuple[int, int]]) -> Tensor\nMath: out = \u03c3(AdaptiveAvgPool2D(input))\nSigmoid(x) = 1 / (1 + exp(-x))\nother: Each element in the resulting tensor is scaled to the range (0, 1) by the sigmoid activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement GELU function, including an approximation version using the sigmoid function and an exact version using the error function (erf). Both functions take a single tensor input `x` and return the transformed output. Additionally, a benchmarking function is provided to evaluate the performance of these Triton kernels over varying input sizes and configurations. import torch\nimport triton\nimport triton.language as tl\n\n# Approximate GELU kernel using Triton's `sigmoid` function\n@triton.jit\ndef approx_gelu_kernel(x):\n    return x * tl.sigmoid(1.702 * x)\n\n# Exact GELU kernel using Triton's `erf` function\n@triton.jit\ndef gelu_kernel(x):\n    return x * 0.5 * (1.0 + tl.erf(x / tl.sqrt(2.0)))\n\n# Initialize input tensor\ntorch.manual_seed(0)\nx = torch.randn(1024, 1024, device=\"cuda\")\n\n# Compute outputs using Triton kernels\ntriton_approx_y = approx_gelu_kernel(x)\ntriton_y = gelu_kernel(x)\n\n# Benchmarking function to compare performance\n@triton.testing.perf_report(\n    triton.testing.Benchmark(\n        x_names=['N'],  # argument names to use as an x-axis for the plot\n        x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`\n        line_arg='provider',  # argument name whose value corresponds to a different line in the plot\n        line_vals=[\n            'triton',\n            'triton-approx',\n            # Other providers omitted for clarity\n        ],  # possible values for `line_arg``\n        line_names=[\n            \"Triton\",\n            \"Triton (approx)\",\n            # Other names omitted for clarity\n        ],  # label name for the lines\n        styles=[('blue', '-'), ('green', '-')],  # line styles\n        ylabel=\"GB/s\",  # label name for the y-axis\n        plot_name=\"gelu-performance\",  # name for the plot. Used also as a file name for saving the plot.\n        args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`\n    ))\ndef benchmark(M, N, provider):\n    x = torch.randn(M, N, device='cuda', dtype=torch.float32)\n    quantiles = [0.5, 0.2, 0.8]\n    if provider == 'triton':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: gelu_kernel(x), quantiles=quantiles)\n    if provider == 'triton-approx':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: approx_gelu_kernel(x), quantiles=quantiles)\n    gbps = lambda ms: 2 * x.nelement() * x.element_size() * 1e-9 / (ms * 1e-3)\n    return gbps(ms), gbps(max_ms), gbps(min_ms)\n\nbenchmark.run(print_data=True, save_path=\".\")\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D adaptive average pooling over an input tensor, followed by the sigmoid activation function applied element-wise. This is used for downsampling a feature map to a specified output size and then normalizing the result with the sigmoid function.\nWrapper Entry Information: def sigmoid_adaptive_avg_pool2d(input: Tensor, output_size: Union[int, Tuple[int, int]]) -> Tensor\nMath: out = \u03c3(AdaptiveAvgPool2D(input))\nSigmoid(x) = 1 / (1 + exp(-x))\nother: Each element in the resulting tensor is scaled to the range (0, 1) by the sigmoid activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for adaptive average pooling followed by sigmoid activation\n@triton.jit\ndef sigmoid_adaptive_avg_pool2d_kernel(\n    input_ptr,  # Pointer to the input tensor\n    output_ptr,  # Pointer to the output tensor\n    input_shape,  # Shape of the input tensor (N, C, H, W)\n    output_shape,  # Shape of the output tensor (N, C, H_out, W_out)\n    stride_h,  # Stride in the height dimension\n    stride_w,  # Stride in the width dimension\n    BLOCK_SIZE: tl.constexpr,  # Block size for parallelization\n):\n    # Get the current block's position in the grid\n    pid = tl.program_id(axis=0)\n    batch, channel, height, width = input_shape\n    _, _, height_out, width_out = output_shape\n\n    # Compute the output coordinates for this block\n    h_out = (pid % height_out) * BLOCK_SIZE\n    w_out = (pid // height_out) * BLOCK_SIZE\n\n    # Compute the input coordinates for the pooling region\n    h_start = h_out * stride_h\n    h_end = min(h_start + stride_h, height)\n    w_start = w_out * stride_w\n    w_end = min(w_start + stride_w, width)\n\n    # Initialize the sum and count for the pooling region\n    sum_val = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n    count = (h_end - h_start) * (w_end - w_start)\n\n    # Iterate over the pooling region\n    for h in range(h_start, h_end):\n        for w in range(w_start, w_end):\n            input_offset = (pid % batch) * channel * height * width + \\\n                           (pid // batch) * height * width + \\\n                           h * width + w\n            sum_val += tl.load(input_ptr + input_offset)\n\n    # Compute the average value for the pooling region\n    avg_val = sum_val / count\n\n    # Apply the sigmoid activation\n    sigmoid_val = 1 / (1 + tl.exp(-avg_val))\n\n    # Store the result in the output tensor\n    output_offset = (pid % batch) * channel * height_out * width_out + \\\n                    (pid // batch) * height_out * width_out + \\\n                    h_out * width_out + w_out\n    tl.store(output_ptr + output_offset, sigmoid_val)\n\n# Python wrapper function\ndef sigmoid_adaptive_avg_pool2d(input: torch.Tensor, output_size: Union[int, Tuple[int, int]]) -> torch.Tensor:\n    # Ensure the input tensor is on the GPU\n    input = input.to(device='cuda')\n\n    # Determine the output size\n    if isinstance(output_size, int):\n        output_size = (output_size, output_size)\n    height_out, width_out = output_size\n\n    # Get the input shape\n    batch, channel, height, width = input.shape\n\n    # Compute the stride for the pooling\n    stride_h = height // height_out\n    stride_w = width // width_out\n\n    # Allocate the output tensor\n    output = torch.empty((batch, channel, height_out, width_out), device='cuda')\n\n    # Launch the Triton kernel\n    grid = (batch * channel * height_out * width_out, )\n    sigmoid_adaptive_avg_pool2d_kernel[grid](\n        input_ptr=input,\n        output_ptr=output,\n        input_shape=(batch, channel, height, width),\n        output_shape=(batch, channel, height_out, width_out),\n        stride_h=stride_h,\n        stride_w=stride_w,\n        BLOCK_SIZE=1,\n    )\n\n    return output\n\n# Example usage\ninput_tensor = torch.randn(2, 3, 16, 16, device='cuda')\noutput_tensor = sigmoid_adaptive_avg_pool2d(input_tensor, (4, 4))\nprint(output_tensor)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the cosine of the elements of the input tensor.\nWrapper Entry Information: cos(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\cos(\\text{input}_{i})\nother: The function computes the cosine of each element in the input tensor and returns a new tensor with these values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the cosine of the elements of the input tensor.\nWrapper Entry Information: cos(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\cos(\\text{input}_{i})\nother: The function computes the cosine of each element in the input tensor and returns a new tensor with these values.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef cos_kernel(\n    input_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the current program id\n    pid = tl.program_id(axis=0)\n    # Compute the range of elements this program instance will process\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load the input elements\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Compute the cosine of the input elements\n    output_elements = tl.cos(input_elements)\n    # Store the result in the output tensor\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\ndef cos(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    \n    # If out is not provided, create a new tensor for the output\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        # Ensure the output tensor is on the GPU and has the same shape as the input\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor must have the same shape as input tensor'\n    \n    # Calculate the number of elements in the tensor\n    n_elements = input.numel()\n    # Determine the block size for parallel execution\n    BLOCK_SIZE = triton.next_power_of_2(min(n_elements, 1024))\n    \n    # Launch the Triton kernel\n    cos_kernel[(n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        input_ptr=input, output_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, dropout, and GELU activation. It computes the batch matrix multiplication of two input tensors, applies dropout to the result, and then applies the GELU activation function.\nWrapper Entry Information: fused_bmm_dropout_gelu(input1, input2, p=0.5, training=True, inplace=False, approximate='none', *, out=None) -> Tensor\n- **input1** (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size.\n- **input2** (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P).\n- **p** (float, optional): Probability of an element to be zeroed in the dropout layer. Default: `0.5`.\n- **training** (bool, optional): Apply dropout if `True`. Default: `True`.\n- **inplace** (bool, optional): If set to `True`, will perform the dropout operation in-place. Default: `False`.\n- **approximate** (str, optional): Can be `'none'` or `'tanh'`. The approximation to use for GELU. Default: `'none'`.\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given two input tensors X and Y, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nD &= \\text{Dropout}(Z, p) \\\\\nO &= \\text{GELU}(D)\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{Dropout}(Z, p) randomly zeroes elements of Z with probability p.\n- \\text{GELU}(D) applies the Gaussian Error Linear Unit activation function element-wise to D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the output of dropout.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement dropout operations. The `apply_dropout` kernel takes 4 parameters: input (the data to apply dropout on), drop_p (probability of dropping an element), seed (for random number generation), and offset (to generate the mask). It returns the input with elements randomly zeroed out. The `apply_dropout_grad` kernel also takes 4 parameters: output_grad (gradients of the output), drop_p, seed, and offset, and returns the gradient of dropout. The `dropout_forward_kernel` and `dropout_backward_kernel` are triton kernels that perform the forward and backward passes of dropout, respectively. They take pointers to input/output data, size of the data, drop probability, seed, and block size as parameters. import triton\nimport triton.language as tl\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Input with elements randomly zeroed out.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef apply_dropout_grad(output_grad, drop_p, seed, offset):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad: Output gradients. The output gradients must be\n            loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Gradient of dropout.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, output_grad / (1 - drop_p))\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_forward_kernel(\n    input_pointer, output_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input_pointer: Pointer to the input to perform dropout on.\n            The input must be of shape [size].\n        output_pointer: Pointer to a container the result is written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    input = tl.load(input_pointer + offset, mask=mask)\n    output = apply_dropout(input, drop_p, seed, offset)\n    tl.store(output_pointer + offset, output, mask=mask)\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_backward_kernel(\n    output_grad_pointer, input_grad_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad_pointer: Pointer to dropout's output gradients.\n            The output gradients must be of shape [size].\n        input_grad_pointer: Pointer to a container the input's gradients are written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element used in dropout.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    output_grad = tl.load(output_grad_pointer + offset, mask=mask)\n    input_grad = apply_dropout_grad(output_grad, drop_p, seed, offset)\n    tl.store(input_grad_pointer + offset, input_grad, mask=mask)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, dropout, and GELU activation. It computes the batch matrix multiplication of two input tensors, applies dropout to the result, and then applies the GELU activation function.\nWrapper Entry Information: fused_bmm_dropout_gelu(input1, input2, p=0.5, training=True, inplace=False, approximate='none', *, out=None) -> Tensor\n- **input1** (Tensor): First input tensor for batch matrix multiplication, of shape (B, N, M), where B is the batch size.\n- **input2** (Tensor): Second input tensor for batch matrix multiplication, of shape (B, M, P).\n- **p** (float, optional): Probability of an element to be zeroed in the dropout layer. Default: `0.5`.\n- **training** (bool, optional): Apply dropout if `True`. Default: `True`.\n- **inplace** (bool, optional): If set to `True`, will perform the dropout operation in-place. Default: `False`.\n- **approximate** (str, optional): Can be `'none'` or `'tanh'`. The approximation to use for GELU. Default: `'none'`.\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given two input tensors X and Y, this function computes:\n\n\\[\n\\begin{align*}\nZ &= \\text{bmm}(X, Y) \\\\\nD &= \\text{Dropout}(Z, p) \\\\\nO &= \\text{GELU}(D)\n\\end{align*}\n\\]\n\nwhere:\n\n- \\text{bmm}(X, Y) performs batch matrix multiplication.\n- \\text{Dropout}(Z, p) randomly zeroes elements of Z with probability p.\n- \\text{GELU}(D) applies the Gaussian Error Linear Unit activation function element-wise to D.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- The `GELU` activation is applied element-wise to the output of dropout.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef gelu(x, approximate='none'):\n    if approximate == 'tanh':\n        y = 0.5 * x * (1 + tl.tanh(0.7978845608 * (x + 0.044715 * x * x * x)))\n    else:\n        y = 0.5 * x * (1 + tl.erf(x / 1.41421356237))\n    return y\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef fused_bmm_dropout_gelu_kernel(\n    input1_ptr, input2_ptr, output_ptr,\n    B, N, M, P,\n    drop_p, seed, training, approximate,\n    BLOCK_SIZE_B: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_P: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    num_blocks_n = (N + BLOCK_SIZE_N - 1) // BLOCK_SIZE_N\n    num_blocks_p = (P + BLOCK_SIZE_P - 1) // BLOCK_SIZE_P\n    num_blocks_m = (M + BLOCK_SIZE_M - 1) // BLOCK_SIZE_M\n    num_blocks = num_blocks_n * num_blocks_p * num_blocks_m\n    block_id = pid % num_blocks\n    block_id_n = block_id // (num_blocks_p * num_blocks_m)\n    block_id_p = (block_id % (num_blocks_p * num_blocks_m)) // num_blocks_m\n    block_id_m = block_id % num_blocks_m\n\n    offsets_n = block_id_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offsets_p = block_id_p * BLOCK_SIZE_P + tl.arange(0, BLOCK_SIZE_P)\n    offsets_m = block_id_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offsets_b = tl.arange(0, B)\n\n    mask_n = offsets_n < N\n    mask_p = offsets_p < P\n    mask_m = offsets_m < M\n\n    input1 = tl.load(input1_ptr + offsets_b[:, None, None] * N * M + offsets_n[None, :, None] * M + offsets_m[None, None, :],\n                     mask=mask_n[None, :, None] & mask_m[None, None, :], other=0.0)\n    input2 = tl.load(input2_ptr + offsets_b[:, None, None] * M * P + offsets_m[None, :, None] * P + offsets_p[None, None, :],\n                     mask=mask_m[None, :, None] & mask_p[None, None, :], other=0.0)\n\n    acc = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_P), dtype=tl.float32)\n    for m in range(0, M, BLOCK_SIZE_M):\n        a = tl.load(input1_ptr + offsets_b[:, None, None] * N * M + offsets_n[None, :, None] * M + m + offsets_m[None, None, :],\n                    mask=mask_n[None, :, None] & mask_m[None, None, :], other=0.0)\n        b = tl.load(input2_ptr + offsets_b[:, None, None] * M * P + m + offsets_m[None, :, None] * P + offsets_p[None, None, :],\n                    mask=mask_m[None, :, None] & mask_p[None, None, :], other=0.0)\n        acc += tl.dot(a, b)\n\n    if training:\n        acc = apply_dropout(acc, drop_p, seed, block_id)\n\n    acc = gelu(acc, approximate)\n\n    tl.store(output_ptr + offsets_b[:, None, None] * N * P + offsets_n[None, :, None] * P + offsets_p[None, None, :],\n             acc, mask=mask_n[None, :, None] & mask_p[None, None, :])\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_bmm_dropout_gelu(input1, input2, p=0.5, training=True, inplace=False, approximate='none', *, out=None):\n    assert input1.dim() == 3 and input2.dim() == 3, \"Input tensors must be 3D\"\n    assert input1.shape[0] == input2.shape[0], \"Batch sizes must match\"\n    assert input1.shape[2] == input2.shape[1], \"Matrix dimensions must be compatible for batch matrix multiplication\"\n\n    B, N, M = input1.shape\n    _, _, P = input2.shape\n\n    if out is None:\n        out = torch.empty((B, N, P), device=input1.device, dtype=input1.dtype)\n\n    seed = torch.randint(0, 2**32, (1,), device=input1.device).item()\n\n    grid = lambda meta: (\n        (N + meta['BLOCK_SIZE_N'] - 1) // meta['BLOCK_SIZE_N'],\n        (P + meta['BLOCK_SIZE_P'] - 1) // meta['BLOCK_SIZE_P'],\n        (M + meta['BLOCK_SIZE_M'] - 1) // meta['BLOCK_SIZE_M'],\n        B\n    )\n\n    fused_bmm_dropout_gelu_kernel[grid](\n        input1, input2, out,\n        B, N, M, P,\n        p, seed, training, approximate,\n        BLOCK_SIZE_B=1, BLOCK_SIZE_N=128, BLOCK_SIZE_M=64, BLOCK_SIZE_P=128\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the truncated integer values of the elements of the input tensor. For integer inputs, it follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: trunc(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel that calculates the sum of each row of a 2D tensor. The kernel takes pointers to the input and output tensors, the dimensions of the input tensor (M, N), a block size for processing (BLOCK_N), and the strides of the input tensor. The kernel iteratively loads blocks of the input tensor, computes their sum, and stores the result in the output tensor. The function sum_row_blocked_iterative wraps this kernel to provide a PyTorch interface, accepting a 2D tensor and returning a 1D tensor with the sum of each row. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_row_blocked_iterative_kernel(\n    A_ptr: tl.tensor, outputs_ptr: tl.tensor,\n    M: tl.constexpr, N: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    A_strides_x, A_strides_y,\n):\n    \"\"\"Calculate the sum of a row of the input tensor, storing the result in\n    the output. We assume the input row fits into SRAM.\n\n    Args:\n        A_ptr: Pointer to the input tensor.\n        outputs_ptr: Pointer to the output tensor.\n        M: Number of rows in the input tensor.\n        N: Number of columns in the input tensor.\n        BLOCK_N: Block size of each row we load.\n        input_stride_x: Stride of the input tensor along the row dim.\n        input_stride_y: Stride of the input tensor along the column dim.\n    \"\"\"\n    program_id = tl.program_id(axis=0)\n\n    input_block_ptr = tl.make_block_ptr(\n        base=A_ptr,\n        shape=(M, N),\n        strides=(A_strides_x, A_strides_y),\n        offsets=(program_id, 0),\n        block_shape=(1, BLOCK_N),\n        order=(1, 0),\n    )\n    output_block_ptr = tl.make_block_ptr(\n        base=outputs_ptr,\n        shape=(M, ),\n        strides=(1, ),\n        offsets=(program_id, ),\n        block_shape=(1, ),\n        order=(0, ),\n    )\n\n    accumulator = tl.zeros((1, ), dtype=tl.float32)\n    for _ in range(0, N, BLOCK_N):\n        input_block = tl.load(input_block_ptr, boundary_check=(0, 1))\n        accumulator += tl.sum(input_block, axis=1)\n        input_block_ptr = tl.advance(input_block_ptr, (0, BLOCK_N))\n\n    tl.store(output_block_ptr, accumulator)\n\n\ndef sum_row_blocked_iterative(A: torch.Tensor) -> torch.Tensor:\n    \"\"\"Calculate the sum of a tensor A along the final dim.\n\n    Args:\n        A: Tensor of shape (M, N) containing the input values.\n\n    Returns:\n        Tensor of shape (M, ) containing the summed values.\n    \"\"\"\n    M, N = A.shape\n    outputs = torch.empty((M,), dtype=A.dtype, device=A.device)\n\n    sum_row_blocked_iterative_kernel[(M, )](\n        A_ptr=A, outputs_ptr=outputs,\n        M=M, N=N,\n        A_strides_x=A.stride(0), A_strides_y=A.stride(1),\n        BLOCK_N=8,\n    )\n\n    return outputs\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the truncated integer values of the elements of the input tensor. For integer inputs, it follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: trunc(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nother: For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for truncating elements of a tensor\n@triton.jit\ndef trunc_kernel(\n    input_ptr: tl.tensor, output_ptr: tl.tensor,\n    size: tl.constexpr, element_size: tl.constexpr\n):\n    \"\"\"Truncate the elements of the input tensor and store the result in the output tensor.\n\n    Args:\n        input_ptr: Pointer to the input tensor.\n        output_ptr: Pointer to the output tensor.\n        size: Number of elements in the input tensor.\n        element_size: Size of each element in bytes.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_size = 128  # Number of elements processed by each block\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < size\n\n    input_block = tl.load(input_ptr + offsets * element_size, mask=mask)\n    output_block = tl.where(input_block >= 0, tl.floor(input_block), tl.ceil(input_block))\n    tl.store(output_ptr + offsets * element_size, output_block, mask=mask)\n\n# Wrapper function for the trunc kernel\ndef trunc(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    \"\"\"Returns a new tensor with the truncated integer values of the elements of the input tensor.\n    For integer inputs, it follows the array-api convention of returning a copy of the input tensor.\n\n    Args:\n        input (Tensor): the input tensor.\n        out (Tensor, optional): the output tensor.\n\n    Returns:\n        Tensor: the truncated tensor.\n    \"\"\"\n    if input.dtype in [torch.int8, torch.int16, torch.int32, torch.int64, torch.uint8]:\n        if out is not None:\n            out.copy_(input)\n        else:\n            out = input.clone()\n        return out\n\n    if out is None:\n        out = torch.empty_like(input, device=input.device, dtype=input.dtype)\n\n    grid = (triton.cdiv(input.numel(), 128),)\n    trunc_kernel[grid](\n        input_ptr=input, output_ptr=out,\n        size=input.numel(), element_size=input.element_size()\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix power A^k of a square matrix A using eigendecomposition. It relies on A being diagonalizable and computes the power through the equation A^k = V diag(\u039b^k) V^(-1), where \u039b and V are the eigenvalues and eigenvectors of A. It allows for fractional powers of matrices and supports real or complex exponents. If A is not diagonalizable, the result may not be accurate.\nWrapper Entry Information: def matrix_power_eig(A, k, *, out=None) -> Tensor\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\n    k (float or complex): the exponent to which the matrix :attr:`A` is to be raised.\n\nKeyword args:\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A^k = V diag(\u039b^k) V^{-1}, where A = V diag(\u039b) V^{-1}, and \u039b^k denotes the element-wise power of the eigenvalues.\nother: Supports input of float, double, cfloat, and cdouble dtypes. Also supports batches of matrices, output has the same batch dimensions. Note that the computed A^k may be complex even if A is real, due to complex eigenvalues. Warning: If A is not diagonalizable, the result may not be accurate. Gradients might be numerically unstable if the distance between any two eigenvalues is close to zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function normalizes each row of the input tensor and writes the result to the output tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, and calls the kernel function. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix power A^k of a square matrix A using eigendecomposition. It relies on A being diagonalizable and computes the power through the equation A^k = V diag(\u039b^k) V^(-1), where \u039b and V are the eigenvalues and eigenvectors of A. It allows for fractional powers of matrices and supports real or complex exponents. If A is not diagonalizable, the result may not be accurate.\nWrapper Entry Information: def matrix_power_eig(A, k, *, out=None) -> Tensor\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\n    k (float or complex): the exponent to which the matrix :attr:`A` is to be raised.\n\nKeyword args:\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A^k = V diag(\u039b^k) V^{-1}, where A = V diag(\u039b) V^{-1}, and \u039b^k denotes the element-wise power of the eigenvalues.\nother: Supports input of float, double, cfloat, and cdouble dtypes. Also supports batches of matrices, output has the same batch dimensions. Note that the computed A^k may be complex even if A is real, due to complex eigenvalues. Warning: If A is not diagonalizable, the result may not be accurate. Gradients might be numerically unstable if the distance between any two eigenvalues is close to zero.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to compute the element-wise power of eigenvalues\n@triton.jit\ndef power_kernel(eigenvalues_ptr, k, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    eigenvalues = tl.load(eigenvalues_ptr + offsets, mask=mask)\n    powered_eigenvalues = tl.math.pow(eigenvalues, k)\n    tl.store(eigenvalues_ptr + offsets, powered_eigenvalues, mask=mask)\n\n# Wrapper function to compute the matrix power using eigendecomposition\ndef matrix_power_eig(A, k, *, out=None):\n    # Check input dimensions\n    if A.dim() < 2 or A.size(-1) != A.size(-2):\n        raise ValueError(\"Input tensor must be a batch of square matrices.\")\n    \n    # Compute the eigendecomposition\n    eigenvalues, eigenvectors = torch.linalg.eig(A)\n    \n    # Ensure the eigenvalues are in a contiguous tensor\n    eigenvalues = eigenvalues.contiguous()\n    \n    # Compute the element-wise power of eigenvalues using Triton\n    n_elements = eigenvalues.numel()\n    BLOCK_SIZE = 1024  # Block size for processing\n    grid = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n    power_kernel[grid](eigenvalues, k, n_elements, BLOCK_SIZE)\n    \n    # Reconstruct the matrix A^k = V diag(\u039b^k) V^{-1}\n    powered_matrix = torch.matmul(eigenvectors, torch.diag_embed(eigenvalues))\n    powered_matrix = torch.matmul(powered_matrix, torch.linalg.inv(eigenvectors))\n    \n    # Handle the output tensor\n    if out is not None:\n        out.copy_(powered_matrix)\n    else:\n        out = powered_matrix\n    \n    return out\n\n# Example usage\nA = torch.tensor([[[1.0, 2.0], [3.0, 4.0]]], dtype=torch.float32)\nk = 2.0\nresult = matrix_power_eig(A, k)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of each element in the input tensor, then applies the hyperbolic tangent (tanh) function to the result. This involves applying the logarithm first, which is only defined for positive numbers, and then applying tanh to transform the result between -1 and 1.\nWrapper Entry Information: def log_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. All elements must be positive for the log function. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\log(\\text{input}_{i}))\nother: All input elements must be positive for the logarithm function to be defined.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an asin kernel that computes the arc sine of each element in an input tensor, utilizing the libdevice.asin function. The kernel processes data in blocks with a constant block size, loads elements from the input tensor, applies the asin function, and stores the result in an output tensor. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import libdevice\n\n\n# Asin Kernel\n# This is the kernel function for calculating the asin (arc sine) of elements in the input tensor.\n# The function uses libdevice.asin to perform the computation.\n\n@triton.jit\ndef asin_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    x = libdevice.asin(x)  # Apply the asin function from libdevice\n    tl.store(y_ptr + offsets, x, mask=mask)  # Store the result in the output tensor\n\n\n# Using the asin kernel\n# This is the function that invokes the asin_kernel with proper parameters.\n\ntorch.manual_seed(0)\nsize = 98432  # Size of the input tensor\nx = torch.rand(size, device='cuda')  # Create a random input tensor\noutput_triton = torch.zeros(size, device='cuda')  # Output tensor for Triton results\noutput_torch = torch.asin(x)  # Compute the arc sine using PyTorch\n\nn_elements = output_torch.numel()  # Get the number of elements in the tensor\ngrid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )  # Define the grid dimensions for Triton\n\nasin_kernel[grid](x, output_triton, n_elements, BLOCK_SIZE=1024)  # Launch the kernel\n\n# Print the results for comparison\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of each element in the input tensor, then applies the hyperbolic tangent (tanh) function to the result. This involves applying the logarithm first, which is only defined for positive numbers, and then applying tanh to transform the result between -1 and 1.\nWrapper Entry Information: def log_tanh(input, out=None) -> Tensor: input (Tensor): The input tensor. All elements must be positive for the log function. out (Tensor, optional): The output tensor.\nMath: \\text{out}_{i} = \\tanh(\\log(\\text{input}_{i}))\nother: All input elements must be positive for the logarithm function to be defined.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Log-Tanh Kernel\n# This is the kernel function for calculating the log and then tanh of elements in the input tensor.\n\n@triton.jit\ndef log_tanh_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    x = tl.log(x)  # Apply the log function\n    x = tl.tanh(x)  # Apply the tanh function\n    tl.store(y_ptr + offsets, x, mask=mask)  # Store the result in the output tensor\n\ndef log_tanh(input, out=None) -> torch.Tensor:\n    \"\"\"\n    Computes the natural logarithm of each element in the input tensor, then applies the hyperbolic tangent (tanh) function to the result.\n    \n    Parameters:\n    - input (Tensor): The input tensor. All elements must be positive for the log function.\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - Tensor: The output tensor with the computed values.\n    \n    Math: \\text{out}_{i} = \\tanh(\\log(\\text{input}_{i}))\n    \"\"\"\n    if out is None:\n        out = torch.empty_like(input, device=input.device)\n    \n    n_elements = input.numel()  # Get the number of elements in the tensor\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )  # Define the grid dimensions for Triton\n    \n    log_tanh_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)  # Launch the kernel\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the exponential of the elements of the input tensor.\nWrapper Entry Information: exp(input, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    out (Tensor, optional): the output tensor.\nMath: y_{i} = e^{x_{i}}\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an exponential function kernel 'exp_func' with 4 parameters: 'a' (input tensor pointer), 'b' (output tensor pointer), 'n_elements' (number of elements in the input tensor), and 'BLOCK_SIZE' (block size for parallel execution). The kernel computes the exponential of the elements in the input tensor and stores the result in the output tensor. The function 'exp' is a wrapper to setup and launch this kernel with the necessary grid and block configurations based on the input tensor size. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate offset using the program ID and block size\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Ensure the offset does not exceed the number of elements\n    mask = offset < n_elements\n    # Load values from array 'a' using the computed offset\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the exponential of the loaded values\n    b_value = tl.exp(a_value.to(tl.float32))\n    # Store the computed values back to array 'b'\n    tl.store(b + offset, b_value, mask=mask)\n\ndef exp(A):\n    # Create an empty tensor 'B' with the same size and type as 'A'\n    B = torch.empty_like(A)\n    # Determine the total number of elements in 'A'\n    n_elements = A.numel()\n    # Calculate the block size based on the number of elements\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size required to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel 'exp_func' with the computed grid and block size\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the exponential of the elements of the input tensor.\nWrapper Entry Information: exp(input, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    out (Tensor, optional): the output tensor.\nMath: y_{i} = e^{x_{i}}\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the exponential of the elements in the input tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for the current block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to ensure we do not access out-of-bounds elements\n    mask = offset < n_elements\n    # Load the input elements\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the exponential of the loaded elements\n    b_value = tl.exp(a_value.to(tl.float32))\n    # Store the results in the output tensor\n    tl.store(b + offset, b_value, mask=mask)\n\n# Wrapper function to set up and launch the Triton kernel\ndef exp(input, *, out=None):\n    # Determine the number of elements in the input tensor\n    n_elements = input.numel()\n    \n    # If out is not provided, create a new tensor to store the result\n    if out is None:\n        out = torch.empty_like(input)\n    \n    # Calculate the block size based on the number of elements\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    \n    # Determine the grid size required to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Launch the Triton kernel 'exp_func' with the computed grid and block size\n    exp_func[(grid_size, 1, 1)](input, out, n_elements, block_size)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes two operations on matrix `C`: first, it performs the matrix-matrix product `C = alpha * torch.mm(A, B) + beta * C`, then updates `C` to be `C = alpha * torch.mm(C, C.T) + beta * C`. This function effectively performs two sequential matrix operations: a weighted sum of a matrix product and itself, followed by a weighted product of `C` and its transpose.\nWrapper Entry Information: matrix_multiply_symmetric(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor; Args: A (Tensor): The first input matrix of shape `(n, m)`. B (Tensor): The second input matrix of shape `(m, p)`. C (Tensor): The target matrix for the operations, shape `(n, p)`. alpha (float): Scalar multiplier for matrix products. beta (float): Scalar multiplier for adding to `C`. Example: A = torch.tensor([[1.0, 2.0], [3.0, 4.0]]), B = torch.tensor([[0.5, -1.0], [1.5, 2.0]]), C = torch.tensor([[1.0, 0.0], [0.0, 1.0]]), alpha, beta = 2.0, 0.5, result = matrix_multiply_symmetric(A, B, C, alpha, beta)\nMath: C = alpha * torch.mm(A, B) + beta * C\nC = alpha * torch.mm(C, C.T) + beta * C\nother: This function performs a fused operation of matrix multiplication and symmetric update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes two operations on matrix `C`: first, it performs the matrix-matrix product `C = alpha * torch.mm(A, B) + beta * C`, then updates `C` to be `C = alpha * torch.mm(C, C.T) + beta * C`. This function effectively performs two sequential matrix operations: a weighted sum of a matrix product and itself, followed by a weighted product of `C` and its transpose.\nWrapper Entry Information: matrix_multiply_symmetric(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor; Args: A (Tensor): The first input matrix of shape `(n, m)`. B (Tensor): The second input matrix of shape `(m, p)`. C (Tensor): The target matrix for the operations, shape `(n, p)`. alpha (float): Scalar multiplier for matrix products. beta (float): Scalar multiplier for adding to `C`. Example: A = torch.tensor([[1.0, 2.0], [3.0, 4.0]]), B = torch.tensor([[0.5, -1.0], [1.5, 2.0]]), C = torch.tensor([[1.0, 0.0], [0.0, 1.0]]), alpha, beta = 2.0, 0.5, result = matrix_multiply_symmetric(A, B, C, alpha, beta)\nMath: C = alpha * torch.mm(A, B) + beta * C\nC = alpha * torch.mm(C, C.T) + beta * C\nother: This function performs a fused operation of matrix multiplication and symmetric update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for the matrix operations\n@triton.jit\ndef matrix_multiply_symmetric_kernel(\n    A_ptr, B_ptr, C_ptr, alpha, beta, stride_am, stride_an, stride_bm, stride_bn, stride_cm, stride_cn, n, m, p, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    A kernel to perform the matrix operations:\n    C = alpha * torch.mm(A, B) + beta * C\n    C = alpha * torch.mm(C, C.T) + beta * C\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (input/output).\n    - alpha: Scalar multiplier for matrix products.\n    - beta: Scalar multiplier for adding to C.\n    - stride_am, stride_an: Strides for matrix A.\n    - stride_bm, stride_bn: Strides for matrix B.\n    - stride_cm, stride_cn: Strides for matrix C.\n    - n, m, p: Dimensions of the matrices.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets_m = block_start + tl.arange(0, BLOCK_SIZE)\n    offsets_n = tl.arange(0, BLOCK_SIZE)\n    \n    # First operation: C = alpha * torch.mm(A, B) + beta * C\n    A = tl.load(A_ptr + offsets_m[:, None] * stride_am + offsets_n[None, :] * stride_an)\n    B = tl.load(B_ptr + offsets_n[:, None] * stride_bm + offsets_m[None, :] * stride_bn)\n    C = tl.load(C_ptr + offsets_m[:, None] * stride_cm + offsets_n[None, :] * stride_cn)\n    \n    # Perform the matrix multiplication\n    C = alpha * tl.dot(A, B) + beta * C\n    \n    # Store the result back to C\n    tl.store(C_ptr + offsets_m[:, None] * stride_cm + offsets_n[None, :] * stride_cn, C)\n    \n    # Second operation: C = alpha * torch.mm(C, C.T) + beta * C\n    C_T = tl.load(C_ptr + offsets_n[:, None] * stride_cm + offsets_m[None, :] * stride_cn)\n    \n    # Perform the matrix multiplication with transpose\n    C = alpha * tl.dot(C, C_T) + beta * C\n    \n    # Store the final result back to C\n    tl.store(C_ptr + offsets_m[:, None] * stride_cm + offsets_n[None, :] * stride_cn, C)\n\n# Wrapper function to launch the Triton kernel\ndef matrix_multiply_symmetric(A: torch.Tensor, B: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    \"\"\"\n    Computes two operations on matrix C:\n    1. C = alpha * torch.mm(A, B) + beta * C\n    2. C = alpha * torch.mm(C, C.T) + beta * C\n    \n    Parameters:\n    - A (Tensor): The first input matrix of shape `(n, m)`.\n    - B (Tensor): The second input matrix of shape `(m, p)`.\n    - C (Tensor): The target matrix for the operations, shape `(n, p)`.\n    - alpha (float): Scalar multiplier for matrix products.\n    - beta (float): Scalar multiplier for adding to C.\n    \n    Returns:\n    - C (Tensor): The resulting matrix after the operations.\n    \"\"\"\n    n, m = A.shape\n    _, p = B.shape\n    \n    # Ensure C has the correct shape\n    assert C.shape == (n, p), \"C must have shape (n, p)\"\n    \n    # Get the strides for the matrices\n    stride_am, stride_an = A.stride()\n    stride_bm, stride_bn = B.stride()\n    stride_cm, stride_cn = C.stride()\n    \n    # Determine the block size and grid size\n    BLOCK_SIZE = 16\n    grid_size = (triton.cdiv(n * p, BLOCK_SIZE), 1, 1)\n    \n    # Launch the Triton kernel\n    matrix_multiply_symmetric_kernel[grid_size](\n        A, B, C, alpha, beta, stride_am, stride_an, stride_bm, stride_bn, stride_cm, stride_cn, n, m, p, BLOCK_SIZE\n    )\n    \n    return C\n\n# Example usage\nA = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device='cuda')\nB = torch.tensor([[0.5, -1.0], [1.5, 2.0]], device='cuda')\nC = torch.tensor([[1.0, 0.0], [0.0, 1.0]], device='cuda')\nalpha, beta = 2.0, 0.5\nresult = matrix_multiply_symmetric(A, B, C, alpha, beta)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between `x1` and `x2` along a specified dimension, adds a singleton dimension, and applies 2D average pooling. It first computes cosine similarity along dim=1 using `cosine_similarity`, then adds a singleton dimension using `unsqueeze`, and finally applies 2D average pooling using `avg_pool2d`.\nWrapper Entry Information: fused_avg_pool2d_cosine_similarity(x1: torch.Tensor, x2: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, eps: float = 1e-8) -> torch.Tensor\nother: The function provides an optional `stride` parameter which defaults to the value of `kernel_size` if not provided. The `eps` parameter is used to prevent division by zero in cosine similarity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine similarity between `x1` and `x2` along a specified dimension, adds a singleton dimension, and applies 2D average pooling. It first computes cosine similarity along dim=1 using `cosine_similarity`, then adds a singleton dimension using `unsqueeze`, and finally applies 2D average pooling using `avg_pool2d`.\nWrapper Entry Information: fused_avg_pool2d_cosine_similarity(x1: torch.Tensor, x2: torch.Tensor, kernel_size: int, stride: int = None, padding: int = 0, eps: float = 1e-8) -> torch.Tensor\nother: The function provides an optional `stride` parameter which defaults to the value of `kernel_size` if not provided. The `eps` parameter is used to prevent division by zero in cosine similarity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef cosine_similarity_kernel(\n    x1_ptr, x2_ptr, output_ptr, N, M, eps: tl.constexpr, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Computes the cosine similarity between x1 and x2 along dim=1.\n\n    Parameters:\n    -----------\n    x1_ptr : tl.tensor\n        Pointer to the first input tensor in global memory.\n    x2_ptr : tl.tensor\n        Pointer to the second input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    N : int\n        Number of elements in the batch dimension.\n    M : int\n        Number of elements in the feature dimension.\n    eps : float\n        Small value to prevent division by zero.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n    \"\"\"\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < M\n    x1_val = tl.load(x1_ptr + batch_id * M + idx, mask=mask, other=0.0)\n    x2_val = tl.load(x2_ptr + batch_id * M + idx, mask=mask, other=0.0)\n\n    dot_product = tl.sum(x1_val * x2_val, axis=0)\n    norm_x1 = tl.sqrt(tl.sum(x1_val * x1_val, axis=0) + eps)\n    norm_x2 = tl.sqrt(tl.sum(x2_val * x2_val, axis=0) + eps)\n\n    similarity = dot_product / (norm_x1 * norm_x2)\n    tl.store(output_ptr + batch_id * M + idx, similarity, mask=mask)\n\n@triton.jit\ndef avg_pool2d_kernel(\n    input_ptr, output_ptr, N, C, H, W, kernel_size, stride, padding, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies 2D average pooling to the input tensor.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    N : int\n        Number of elements in the batch dimension.\n    C : int\n        Number of elements in the channel dimension.\n    H : int\n        Height of the input tensor.\n    W : int\n        Width of the input tensor.\n    kernel_size : int\n        Size of the pooling kernel.\n    stride : int\n        Stride of the pooling operation.\n    padding : int\n        Padding applied to the input tensor.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n    \"\"\"\n    batch_id = tl.program_id(0)\n    channel_id = tl.program_id(1)\n    block_start_h = tl.program_id(2) * BLOCK_SIZE\n    block_start_w = tl.program_id(3) * BLOCK_SIZE\n    offsets_h = tl.arange(0, BLOCK_SIZE)\n    offsets_w = tl.arange(0, BLOCK_SIZE)\n    idx_h = block_start_h + offsets_h\n    idx_w = block_start_w + offsets_w\n\n    mask_h = (idx_h < H) & (idx_h >= 0)\n    mask_w = (idx_w < W) & (idx_w >= 0)\n    mask = mask_h & mask_w\n\n    input_val = tl.load(input_ptr + batch_id * C * H * W + channel_id * H * W + idx_h * W + idx_w, mask=mask, other=0.0)\n    sum_val = tl.sum(input_val, axis=0)\n    avg_val = sum_val / (kernel_size * kernel_size)\n\n    output_idx_h = (idx_h - padding) // stride\n    output_idx_w = (idx_w - padding) // stride\n    output_mask_h = (output_idx_h >= 0) & (output_idx_h < (H + 2 * padding - kernel_size) // stride + 1)\n    output_mask_w = (output_idx_w >= 0) & (output_idx_w < (W + 2 * padding - kernel_size) // stride + 1)\n    output_mask = output_mask_h & output_mask_w & mask\n\n    tl.store(output_ptr + batch_id * C * ((H + 2 * padding - kernel_size) // stride + 1) * ((W + 2 * padding - kernel_size) // stride + 1) + channel_id * ((H + 2 * padding - kernel_size) // stride + 1) * ((W + 2 * padding - kernel_size) // stride + 1) + output_idx_h * ((W + 2 * padding - kernel_size) // stride + 1) + output_idx_w, avg_val, mask=output_mask)\n\n### Wrapper Function\n\nThe wrapper function will manage the memory allocation, kernel launches, and tensor operations.\n\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of dropout followed by hard shrinkage on the input tensor. The function first applies dropout to the input tensor, where each element is zeroed with a probability of p if training is True. The dropout can be applied in-place if specified. After dropout, a hard shrinkage operation is applied, which shrinks values towards zero based on the lambda parameter.\nWrapper Entry Information: def fused_hardshrink_dropout(input: torch.Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, lambd: float = 0.5) -> torch.Tensor\nArgs:\n  input (Tensor): The input tensor.\n  p (float, optional): Probability of an element to be zeroed in dropout. Default is 0.5.\n  training (bool, optional): Apply dropout if True. Default is True.\n  inplace (bool, optional): If set to True, dropout will be applied in-place. Default is False.\n  lambd (float, optional): The lambda parameter for the hard shrinkage function. Default is 0.5.\nReturns:\n  Tensor: Result after applying dropout and then hard shrinkage on the input.\nother: The function combines dropout and hard shrinkage operations, which are typically used in neural network training to prevent overfitting and to enforce sparsity, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement dropout operations. The `apply_dropout` kernel takes 4 parameters: input (the data to apply dropout on), drop_p (probability of dropping an element), seed (for random number generation), and offset (to generate the mask). It returns the input with elements randomly zeroed out. The `apply_dropout_grad` kernel also takes 4 parameters: output_grad (gradients of the output), drop_p, seed, and offset, and returns the gradient of dropout. The `dropout_forward_kernel` and `dropout_backward_kernel` are triton kernels that perform the forward and backward passes of dropout, respectively. They take pointers to input/output data, size of the data, drop probability, seed, and block size as parameters. import triton\nimport triton.language as tl\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Input with elements randomly zeroed out.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef apply_dropout_grad(output_grad, drop_p, seed, offset):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad: Output gradients. The output gradients must be\n            loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Gradient of dropout.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, output_grad / (1 - drop_p))\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_forward_kernel(\n    input_pointer, output_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input_pointer: Pointer to the input to perform dropout on.\n            The input must be of shape [size].\n        output_pointer: Pointer to a container the result is written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    input = tl.load(input_pointer + offset, mask=mask)\n    output = apply_dropout(input, drop_p, seed, offset)\n    tl.store(output_pointer + offset, output, mask=mask)\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_backward_kernel(\n    output_grad_pointer, input_grad_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad_pointer: Pointer to dropout's output gradients.\n            The output gradients must be of shape [size].\n        input_grad_pointer: Pointer to a container the input's gradients are written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element used in dropout.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    output_grad = tl.load(output_grad_pointer + offset, mask=mask)\n    input_grad = apply_dropout_grad(output_grad, drop_p, seed, offset)\n    tl.store(input_grad_pointer + offset, input_grad, mask=mask)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a fused operation consisting of dropout followed by hard shrinkage on the input tensor. The function first applies dropout to the input tensor, where each element is zeroed with a probability of p if training is True. The dropout can be applied in-place if specified. After dropout, a hard shrinkage operation is applied, which shrinks values towards zero based on the lambda parameter.\nWrapper Entry Information: def fused_hardshrink_dropout(input: torch.Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, lambd: float = 0.5) -> torch.Tensor\nArgs:\n  input (Tensor): The input tensor.\n  p (float, optional): Probability of an element to be zeroed in dropout. Default is 0.5.\n  training (bool, optional): Apply dropout if True. Default is True.\n  inplace (bool, optional): If set to True, dropout will be applied in-place. Default is False.\n  lambd (float, optional): The lambda parameter for the hard shrinkage function. Default is 0.5.\nReturns:\n  Tensor: Result after applying dropout and then hard shrinkage on the input.\nother: The function combines dropout and hard shrinkage operations, which are typically used in neural network training to prevent overfitting and to enforce sparsity, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Input with elements randomly zeroed out.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef apply_hardshrink(input, lambd):\n    \"\"\"\n    Applies hard shrinkage to the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        lambd: The lambda parameter for the hard shrinkage function.\n\n    Returns:\n        Input with hard shrinkage applied.\n    \"\"\"\n    return tl.where(input > lambd, input - lambd, tl.where(input < -lambd, input + lambd, 0))\n\n@triton.autotune(\n    configs=triton.configs([\n        triton.Config({'BLOCK_SIZE': 128}, num_warps=4),\n        triton.Config({'BLOCK_SIZE': 256}, num_warps=4),\n        triton.Config({'BLOCK_SIZE': 512}, num_warps=4),\n    ]),\n    key=['size'],\n)\n@triton.jit\ndef fused_hardshrink_dropout_kernel(\n    input_pointer, output_pointer, size,\n    drop_p, lambd, seed, training,\n    BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\"\n    Applies dropout followed by hard shrinkage on the input tensor.\n\n    Args:\n        input_pointer: Pointer to the input tensor.\n        output_pointer: Pointer to the output tensor.\n        size: Number of elements in the input tensor.\n        drop_p: Probability of dropping an element.\n        lambd: The lambda parameter for the hard shrinkage function.\n        seed: Seed for generating the dropout mask.\n        training: If True, apply dropout.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < size\n\n    input = tl.load(input_pointer + offsets, mask=mask)\n    if training:\n        input = apply_dropout(input, drop_p, seed, offsets)\n    output = apply_hardshrink(input, lambd)\n    tl.store(output_pointer + offsets, output, mask=mask)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_hardshrink_dropout(input: torch.Tensor, p: float = 0.5, training: bool = True, inplace: bool = False, lambd: float = 0.5) -> torch.Tensor:\n    \"\"\"\n    Applies a fused operation consisting of dropout followed by hard shrinkage on the input tensor.\n\n    Args:\n        input (Tensor): The input tensor.\n        p (float, optional): Probability of an element to be zeroed in dropout. Default is 0.5.\n        training (bool, optional): Apply dropout if True. Default is True.\n        inplace (bool, optional): If set to True, dropout will be applied in-place. Default is False.\n        lambd (float, optional): The lambda parameter for the hard shrinkage function. Default is 0.5.\n\n    Returns:\n        Tensor: Result after applying dropout and then hard shrinkage on the input.\n    \"\"\"\n    if not input.is_cuda:\n        raise ValueError(\"Input tensor must be on a CUDA device.\")\n\n    if inplace:\n        output = input\n    else:\n        output = torch.empty_like(input)\n\n    size = input.numel()\n    seed = torch.randint(0, 2**32, (1,), device=input.device).item()\n\n    # Launch the Triton kernel\n    fused_hardshrink_dropout_kernel[lambda size: (size // 1024 + 1,)](\n        input, output, size, p, lambd, seed, training\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the complementary error function (erfc) and the square root of each element in the input tensor.\nWrapper Entry Information: def erfc_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: The input tensor for which the erfc and square root are computed.\nMath: \\text{erfc}(x) = 1 - \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: Returns a tuple containing the erfc result and the square root result for each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the complementary error function (erfc) and the square root of each element in the input tensor.\nWrapper Entry Information: def erfc_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: The input tensor for which the erfc and square root are computed.\nMath: \\text{erfc}(x) = 1 - \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: Returns a tuple containing the erfc result and the square root result for each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the erfc and square root of elements in a tensor\n@triton.jit\ndef erfc_sqrt_kernel(input, erfc_output, sqrt_output, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'input' with boundary mask\n    input_value = tl.load(input + offset, mask=mask)\n    # Compute the erfc of the loaded elements\n    erfc_value = 1.0 - (2.0 / tl.sqrt(tl.float32(math.pi))) * tl.math.erf(input_value)\n    # Compute the square root of the loaded elements\n    sqrt_value = tl.sqrt(input_value.to(tl.float32))\n    # Store the results in the output tensors with boundary mask\n    tl.store(erfc_output + offset, erfc_value, mask=mask)\n    tl.store(sqrt_output + offset, sqrt_value, mask=mask)\n\n# Wrapper function to launch the Triton kernel and compute erfc and square root\ndef erfc_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    # Create output tensors 'erfc_output' and 'sqrt_output' with the same shape as 'input'\n    erfc_output = torch.empty_like(input)\n    sqrt_output = torch.empty_like(input)\n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    erfc_sqrt_kernel[(grid_size, 1, 1)](input, erfc_output, sqrt_output, n_elements, block_size)\n    return erfc_output, sqrt_output\n\n# Example usage\nif __name__ == \"__main__\":\n    input_tensor = torch.tensor([1.0, 2.0, 3.0], device='cuda')\n    erfc_result, sqrt_result = erfc_sqrt(input_tensor)\n    print(\"erfc result:\", erfc_result)\n    print(\"sqrt result:\", sqrt_result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the reciprocal of the square root of the tensordot product of two tensors `a` and `b`. This function performs a tensor contraction of `a` and `b` over the specified dimensions using `torch.tensordot`, and then applies the element-wise reciprocal square root to the resulting tensor. The operation involves computing the tensordot product first and then applying the reciprocal of the square root element-wise to the result.\nWrapper Entry Information: def tensordot_rsqrt(a: torch.Tensor, b: torch.Tensor, dims) -> torch.Tensor: a (Tensor): Left tensor to contract. b (Tensor): Right tensor to contract. dims (int, Tuple[List[int], List[int]], or List[List[int]]): Dimensions for contraction, as per `torch.tensordot`.\nMath: \\text{output} = \\frac{1}{\\sqrt{\\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}}}\nother: The function applies the `torch.tensordot` and `torch.rsqrt` operations. The `dims` argument specifies the dimensions over which the contraction happens, similar to the `torch.tensordot` function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the reciprocal of the square root of the tensordot product of two tensors `a` and `b`. This function performs a tensor contraction of `a` and `b` over the specified dimensions using `torch.tensordot`, and then applies the element-wise reciprocal square root to the resulting tensor. The operation involves computing the tensordot product first and then applying the reciprocal of the square root element-wise to the result.\nWrapper Entry Information: def tensordot_rsqrt(a: torch.Tensor, b: torch.Tensor, dims) -> torch.Tensor: a (Tensor): Left tensor to contract. b (Tensor): Right tensor to contract. dims (int, Tuple[List[int], List[int]], or List[List[int]]): Dimensions for contraction, as per `torch.tensordot`.\nMath: \\text{output} = \\frac{1}{\\sqrt{\\sum_{k_0,...,k_{d-1}} a_{i_0,...,i_{m-d},k_0,...,k_{d-1}} \\times b_{k_0,...,k_{d-1}, i_d,...,i_n}}}\nother: The function applies the `torch.tensordot` and `torch.rsqrt` operations. The `dims` argument specifies the dimensions over which the contraction happens, similar to the `torch.tensordot` function.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute the reciprocal of the square root of elements in a tensor\n@triton.jit\ndef rsqrt_kernel(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the reciprocal of the square root of the loaded elements\n    b_value = 1.0 / tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)\n\n# Wrapper function to compute the reciprocal of the square root of the tensordot product\ndef tensordot_rsqrt(a: torch.Tensor, b: torch.Tensor, dims) -> torch.Tensor:\n    # Compute the tensordot product of tensors 'a' and 'b'\n    tensordot_result = torch.tensordot(a, b, dims=dims)\n    \n    # Create an output tensor 'B' with the same shape as the tensordot result\n    B = torch.empty_like(tensordot_result)\n    \n    # Get the total number of elements in the tensordot result\n    n_elements = tensordot_result.numel()\n    \n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    \n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Launch the Triton kernel\n    rsqrt_kernel[(grid_size, 1, 1)](tensordot_result, B, n_elements, block_size)\n    \n    return B\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the natural logarithm element-wise on the input tensor, followed by applying the softmax function along the specified dimension. This combined operation scales input values to a range between 0 and 1, summing to 1 after the logarithmic transformation. It allows transformation of the input tensor into a probability distribution.\nWrapper Entry Information: def softmax_log(input, dim=-1, dtype=None) -> Tensor: \nArgs:\n    input (Tensor): The input tensor on which logarithm and softmax are applied.\n    dim (int): The dimension along which softmax will be computed. Default: -1.\n    dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation is performed. Useful for preventing data type overflows. Default: None.\nExample:\n    >>> import torch\n    >>> import torch.nn.functional as F\n    >>> # Define input tensor\n    >>> input = torch.rand(3, 4) * 10\n    >>> # Apply softmax_log along the last dimension\n    >>> result = softmax_log(input, dim=1)\n    >>> result\n    tensor([[0.1829, 0.1782, 0.2783, 0.3606],\n            [0.3119, 0.1724, 0.3256, 0.1900],\n            [0.2057, 0.2166, 0.2991, 0.2786]])\n\n    >>> # Apply softmax_log along a different dimension\n    >>> result = softmax_log(input, dim=0)\n    >>> result\n    tensor([[0.3122, 0.4444, 0.2720, 0.2159],\n            [0.3879, 0.2167, 0.4226, 0.2165],\n            [0.2999, 0.3389, 0.3055, 0.5676]])\nMath: out = Softmax(log(input))\n\nwhere:\n\ny_{i} = \\frac{\\exp(\\log(x_{i}))}{\\sum_j \\exp(\\log(x_{j}))} = \\frac{x_i}{\\sum_j x_j}\nother: The function handles optional data type casting to prevent overflow and allows specifying the dimension for softmax application.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the natural logarithm element-wise on the input tensor, followed by applying the softmax function along the specified dimension. This combined operation scales input values to a range between 0 and 1, summing to 1 after the logarithmic transformation. It allows transformation of the input tensor into a probability distribution.\nWrapper Entry Information: def softmax_log(input, dim=-1, dtype=None) -> Tensor: \nArgs:\n    input (Tensor): The input tensor on which logarithm and softmax are applied.\n    dim (int): The dimension along which softmax will be computed. Default: -1.\n    dtype (:class:`torch.dtype`, optional): The desired data type of the returned tensor. If specified, the input tensor is cast to :attr:`dtype` before the operation is performed. Useful for preventing data type overflows. Default: None.\nExample:\n    >>> import torch\n    >>> import torch.nn.functional as F\n    >>> # Define input tensor\n    >>> input = torch.rand(3, 4) * 10\n    >>> # Apply softmax_log along the last dimension\n    >>> result = softmax_log(input, dim=1)\n    >>> result\n    tensor([[0.1829, 0.1782, 0.2783, 0.3606],\n            [0.3119, 0.1724, 0.3256, 0.1900],\n            [0.2057, 0.2166, 0.2991, 0.2786]])\n\n    >>> # Apply softmax_log along a different dimension\n    >>> result = softmax_log(input, dim=0)\n    >>> result\n    tensor([[0.3122, 0.4444, 0.2720, 0.2159],\n            [0.3879, 0.2167, 0.4226, 0.2165],\n            [0.2999, 0.3389, 0.3055, 0.5676]])\nMath: out = Softmax(log(input))\n\nwhere:\n\ny_{i} = \\frac{\\exp(\\log(x_{i}))}{\\sum_j \\exp(\\log(x_{j}))} = \\frac{x_i}{\\sum_j x_j}\nother: The function handles optional data type casting to prevent overflow and allows specifying the dimension for softmax application.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for softmax_log\n@triton.jit\ndef _softmax_log_kernel(X, OUT, stride_xm, stride_xn, stride_om, stride_on, N, BLOCK_N: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_N\n    offsets = block_start + tl.arange(0, BLOCK_N)\n    mask = offsets < N\n    x_ptrs = X + offsets * stride_xn\n    x = tl.load(x_ptrs, mask=mask, other=-float('inf'))\n    \n    # Compute log(x)\n    log_x = tl.log(x)\n    \n    # Compute max(log_x) for numerical stability\n    max_log_x = tl.max(log_x, axis=0)\n    \n    # Compute exp(log_x - max_log_x)\n    exp_log_x = tl.exp(log_x - max_log_x)\n    \n    # Compute sum(exp(log_x - max_log_x))\n    sum_exp_log_x = tl.sum(exp_log_x, axis=0)\n    \n    # Compute softmax(log(x))\n    softmax_log_x = exp_log_x / sum_exp_log_x\n    \n    # Store the result\n    out_ptrs = OUT + offsets * stride_on\n    tl.store(out_ptrs, softmax_log_x, mask=mask)\n\n# Wrapper function for softmax_log\ndef softmax_log(input, dim=-1, dtype=None) -> torch.Tensor:\n    if dtype is not None:\n        input = input.to(dtype)\n    \n    *batch, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(input.shape)\n    \n    M = input.shape[0]\n    _softmax_log_kernel[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), out.stride(1), N, BLOCK_N=1024, num_warps=4)\n    \n    return out.view(*batch, N)\n\n# Example usage\nif __name__ == \"__main__\":\n    import torch\n    import torch.nn.functional as F\n    \n    # Define input tensor\n    input = torch.rand(3, 4) * 10\n    \n    # Apply softmax_log along the last dimension\n    result = softmax_log(input, dim=1)\n    print(result)\n    \n    # Apply softmax_log along a different dimension\n    result = softmax_log(input, dim=0)\n    print(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation followed by a sigmoid activation and dropout. This function sequentially applies a linear transformation to the input tensor, a sigmoid activation to scale the values between 0 and 1, and randomly zeroes some elements of the tensor with a specified probability during dropout.\nWrapper Entry Information: def dropout_sigmoid_linear(input: torch.Tensor, weight: torch.Tensor, bias=None, p=0.5, training=True, inplace=False) -> torch.Tensor: Input tensor of shape :math:`(*, \\text{in\\_features})`. Weight tensor of shape :math:`(\\text{out\\_features}, \\text{in\\_features})`. Bias tensor of shape :math:`(\\text{out\\_features})`. Default is `None`. Probability of an element to be zeroed in dropout. Default: 0.5 If `True`, applies dropout during training. Default: `True` If `True`, performs the operation in-place. Default: `False`\nother: The function applies dropout only if the `training` parameter is set to `True`. The `inplace` parameter allows for in-place operations to save memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement dropout operations. The `apply_dropout` kernel takes 4 parameters: input (the data to apply dropout on), drop_p (probability of dropping an element), seed (for random number generation), and offset (to generate the mask). It returns the input with elements randomly zeroed out. The `apply_dropout_grad` kernel also takes 4 parameters: output_grad (gradients of the output), drop_p, seed, and offset, and returns the gradient of dropout. The `dropout_forward_kernel` and `dropout_backward_kernel` are triton kernels that perform the forward and backward passes of dropout, respectively. They take pointers to input/output data, size of the data, drop probability, seed, and block size as parameters. import triton\nimport triton.language as tl\n\n@triton.jit\ndef apply_dropout(input, drop_p, seed, offset):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input: Input. The input must be loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Input with elements randomly zeroed out.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, input / (1 - drop_p))\n\n@triton.jit\ndef apply_dropout_grad(output_grad, drop_p, seed, offset):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad: Output gradients. The output gradients must be\n            loaded and cannot be a pointer.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        offset: Offset to generate the mask for.\n\n    Returns:\n        Gradient of dropout.\n    \"\"\"\n    random = tl.rand(seed, offset)\n    return tl.where(random < drop_p, 0, output_grad / (1 - drop_p))\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_forward_kernel(\n    input_pointer, output_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Randomly zeroes elements in the input.\n\n    Args:\n        input_pointer: Pointer to the input to perform dropout on.\n            The input must be of shape [size].\n        output_pointer: Pointer to a container the result is written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    input = tl.load(input_pointer + offset, mask=mask)\n    output = apply_dropout(input, drop_p, seed, offset)\n    tl.store(output_pointer + offset, output, mask=mask)\n\n@triton.autotune(\n    configs=element_wise_kernel_configs(),\n    key=['size'],\n)\n@triton.jit\ndef dropout_backward_kernel(\n    output_grad_pointer, input_grad_pointer, size,\n    drop_p, seed,\n    BLOCK_SIZE: tl.constexpr,\n    ):\n    \"\"\"\n    Calculates the input gradient of dropout.\n\n    Args:\n        output_grad_pointer: Pointer to dropout's output gradients.\n            The output gradients must be of shape [size].\n        input_grad_pointer: Pointer to a container the input's gradients are written to.\n            The container must be of shape [size].\n        size: Number of elements in the input.\n        drop_p: Probability of dropping an element used in dropout.\n        seed: Seed for generating the dropout mask.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    # This program processes BLOCK_SIZE rows.\n    pid = tl.program_id(axis=0)\n    offset = pid * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < size\n\n    output_grad = tl.load(output_grad_pointer + offset, mask=mask)\n    input_grad = apply_dropout_grad(output_grad, drop_p, seed, offset)\n    tl.store(input_grad_pointer + offset, input_grad, mask=mask)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation followed by a sigmoid activation and dropout. This function sequentially applies a linear transformation to the input tensor, a sigmoid activation to scale the values between 0 and 1, and randomly zeroes some elements of the tensor with a specified probability during dropout.\nWrapper Entry Information: def dropout_sigmoid_linear(input: torch.Tensor, weight: torch.Tensor, bias=None, p=0.5, training=True, inplace=False) -> torch.Tensor: Input tensor of shape :math:`(*, \\text{in\\_features})`. Weight tensor of shape :math:`(\\text{out\\_features}, \\text{in\\_features})`. Bias tensor of shape :math:`(\\text{out\\_features})`. Default is `None`. Probability of an element to be zeroed in dropout. Default: 0.5 If `True`, applies dropout during training. Default: `True` If `True`, performs the operation in-place. Default: `False`\nother: The function applies dropout only if the `training` parameter is set to `True`. The `inplace` parameter allows for in-place operations to save memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef linear_sigmoid_dropout_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr, dropout_mask_ptr,\n    in_features, out_features, batch_size, drop_p, seed, training, inplace,\n    BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a linear transformation followed by a sigmoid activation and dropout.\n\n    Args:\n        input_ptr: Pointer to the input tensor of shape [batch_size, in_features].\n        weight_ptr: Pointer to the weight tensor of shape [out_features, in_features].\n        bias_ptr: Pointer to the bias tensor of shape [out_features]. Can be None.\n        output_ptr: Pointer to the output tensor of shape [batch_size, out_features].\n        dropout_mask_ptr: Pointer to the dropout mask tensor of shape [batch_size, out_features].\n        in_features: Number of input features.\n        out_features: Number of output features.\n        batch_size: Number of elements in the batch.\n        drop_p: Probability of an element to be zeroed in dropout.\n        seed: Seed for generating the dropout mask.\n        training: If True, applies dropout during training.\n        inplace: If True, performs the operation in-place.\n        BLOCK_SIZE: Block size.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    batch_idx = pid // (out_features // BLOCK_SIZE)\n    out_feature_idx = (pid % (out_features // BLOCK_SIZE)) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    in_feature_idx = tl.arange(0, in_features)\n\n    # Load input and weight\n    input = tl.load(input_ptr + batch_idx * in_features + in_feature_idx, mask=in_feature_idx < in_features)\n    weight = tl.load(weight_ptr + out_feature_idx[:, None] * in_features + in_feature_idx[None, :], mask=out_feature_idx[:, None] < out_features, other=0.0)\n\n    # Compute linear transformation\n    linear_output = tl.sum(input[None, :] * weight, axis=1)\n\n    # Add bias if provided\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + out_feature_idx, mask=out_feature_idx < out_features)\n        linear_output += bias\n\n    # Apply sigmoid activation\n    sigmoid_output = 1 / (1 + tl.exp(-linear_output))\n\n    # Apply dropout if training is True\n    if training:\n        random = tl.rand(seed, batch_idx * out_features + out_feature_idx)\n        dropout_mask = random > drop_p\n        sigmoid_output = tl.where(dropout_mask, sigmoid_output / (1 - drop_p), 0.0)\n\n    # Store the output\n    tl.store(output_ptr + batch_idx * out_features + out_feature_idx, sigmoid_output, mask=out_feature_idx < out_features)\n\n    # Store the dropout mask if needed\n    if training and dropout_mask_ptr is not None:\n        tl.store(dropout_mask_ptr + batch_idx * out_features + out_feature_idx, dropout_mask, mask=out_feature_idx < out_features)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef dropout_sigmoid_linear(input: torch.Tensor, weight: torch.Tensor, bias=None, p=0.5, training=True, inplace=False) -> torch.Tensor:\n    \"\"\"\n    Applies a linear transformation followed by a sigmoid activation and dropout.\n\n    Args:\n        input: Input tensor of shape (*, in_features).\n        weight: Weight tensor of shape (out_features, in_features).\n        bias: Bias tensor of shape (out_features). Default is None.\n        p: Probability of an element to be zeroed in dropout. Default: 0.5\n        training: If True, applies dropout during training. Default: True\n        inplace: If True, performs the operation in-place. Default: False\n\n    Returns:\n        Output tensor of shape (*, out_features).\n    \"\"\"\n    in_features = input.shape[-1]\n    out_features = weight.shape[0]\n    batch_size = input.numel() // in_features\n\n    # Ensure input is contiguous\n    input = input.contiguous()\n\n    # Allocate output tensor\n    if inplace:\n        output = input.view(-1, in_features)\n    else:\n        output = torch.empty((batch_size, out_features), device=input.device, dtype=input.dtype)\n\n    # Allocate dropout mask if needed\n    dropout_mask = None\n    if training:\n        dropout_mask = torch.empty((batch_size, out_features), device=input.device, dtype=torch.bool)\n\n    # Launch the kernel\n    grid = (batch_size * (out_features // 32),)\n    linear_sigmoid_dropout_kernel[grid](\n        input, weight, bias, output, dropout_mask,\n        in_features, out_features, batch_size, p, 42, training, inplace, BLOCK_SIZE=32\n    )\n\n    return output.view(*input.shape[:-1], out_features)\n\n# Example usage\ninput = torch.randn(10, 5, device='cuda')\nweight = torch.randn(3, 5, device='cuda')\nbias = torch.randn(3, device='cuda')\noutput = dropout_sigmoid_linear(input, weight, bias, p=0.5, training=True, inplace=False)\nprint(output)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization for each channel across a batch of data. Batch Normalization is a technique to improve the training of deep neural networks by ensuring that each layer receives whitened input, which helps to stabilize the learning process and reduce the number of training epochs needed to converge.\nWrapper Entry Information: def batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-05) -> Tensor\nother: This function is related to the BatchNorm classes like BatchNorm1d, BatchNorm2d, and BatchNorm3d, which are layers that handle this operation with additional features.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'sample_from_prob_kernel' that processes a vector in blocks. The kernel takes four parameters: x_ptr (pointer to input vector), output_ptr (pointer to output vector), n_elements (size of the vector), and BLOCK_SIZE (number of elements each program should process). The kernel identifies the program ID, calculates offsets, creates a mask for out-of-bounds access, loads data from DRAM, processes it by doubling the values, and stores the result back to DRAM. The function 'sample_from_prob' is a wrapper that prepares the output tensor, calculates the number of elements, defines the grid size, and launches the kernel with the specified block size. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sample_from_prob_kernel(x_ptr,  # *Pointer* to first input vector.\n                            output_ptr,  # *Pointer* to output vector.\n                            n_elements,  # Size of the vector.\n                            BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n                            ):\n  \n  # There are multiple 'programs' processing different data. We identify which program\n  # we are here:\n  pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n  # This program will process inputs that are offset from the initial data.\n  # For instance, if you had a vector of length 256 and block_size of 64, the programs\n  # would each access the elements [0:64, 64:128, 128:192, 192:256].\n  # Note that offsets is a list of pointers:\n  block_start = pid * BLOCK_SIZE\n  offsets = block_start + tl.arange(0, BLOCK_SIZE)\n  # Create a mask to guard memory operations against out-of-bounds accesses.\n  mask = offsets < n_elements\n\n  # Load x and y from DRAM, masking out any extra elements in case the input is not a\n  # multiple of the block size.\n  x = tl.load(x_ptr + offsets, mask=mask)\n  output = x*2\n\n  # Write x + y back to DRAM.\n  tl.store(output_ptr + offsets, output, mask=mask)\n\ndef sample_from_prob(x: torch.Tensor):\n  # We need to preallocate the output.\n  output = torch.empty_like(x)\n  n_elements = output.numel()\n  # The SPMD launch grid denotes the number of kernel instances that run in parallel.\n  # It is analogous to CUDA launch grids. It can be either Tuple[int], or Callable(metaparameters) -> Tuple[int].\n  # In this case, we use a 1D grid where the size is the number of blocks:\n  grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n  # NOTE:\n  #  - Each torch.tensor object is implicitly converted into a pointer to its first element.\n  #  - `triton.jit`'ed functions can be indexed with a launch grid to obtain a callable GPU kernel.\n  #  - Don't forget to pass meta-parameters as keywords arguments.\n  sample_from_prob_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)\n  # We return a handle to z but, since `torch.cuda.synchronize()` hasn't been called, the kernel is still\n  # running asynchronously at this point.\n  return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies Batch Normalization for each channel across a batch of data. Batch Normalization is a technique to improve the training of deep neural networks by ensuring that each layer receives whitened input, which helps to stabilize the learning process and reduce the number of training epochs needed to converge.\nWrapper Entry Information: def batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-05) -> Tensor\nother: This function is related to the BatchNorm classes like BatchNorm1d, BatchNorm2d, and BatchNorm3d, which are layers that handle this operation with additional features.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for batch normalization\n@triton.jit\ndef batch_norm_kernel(\n    input_ptr,  # Pointer to input tensor\n    output_ptr,  # Pointer to output tensor\n    running_mean_ptr,  # Pointer to running mean\n    running_var_ptr,  # Pointer to running variance\n    weight_ptr,  # Pointer to weight (scale)\n    bias_ptr,  # Pointer to bias (shift)\n    batch_size,  # Number of batches\n    channels,  # Number of channels\n    height,  # Height of the input tensor\n    width,  # Width of the input tensor\n    eps,  # Epsilon value for numerical stability\n    momentum,  # Momentum for running mean and variance\n    training,  # Whether to use training mode\n    BLOCK_SIZE: tl.constexpr  # Number of elements each program should process\n):\n    # Identify the program ID\n    pid = tl.program_id(axis=0)\n    \n    # Calculate the channel index for this program\n    channel = pid % channels\n    batch = pid // channels\n    \n    # Calculate the offsets for the input and output tensors\n    input_offset = (batch * channels + channel) * height * width\n    output_offset = input_offset\n    \n    # Create a mask to guard memory operations against out-of-bounds accesses\n    offsets = input_offset + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < (batch_size * channels * height * width)\n    \n    # Load input data\n    input_data = tl.load(input_ptr + offsets, mask=mask)\n    \n    # Load running mean and variance\n    running_mean = tl.load(running_mean_ptr + channel)\n    running_var = tl.load(running_var_ptr + channel)\n    \n    # Load weight and bias if provided\n    weight = tl.load(weight_ptr + channel) if weight_ptr is not None else 1.0\n    bias = tl.load(bias_ptr + channel) if bias_ptr is not None else 0.0\n    \n    # Compute the batch mean and variance if in training mode\n    if training:\n        batch_mean = tl.sum(input_data, axis=0) / (height * width)\n        batch_var = tl.sum((input_data - batch_mean) ** 2, axis=0) / (height * width)\n        \n        # Update running mean and variance\n        running_mean = (1 - momentum) * running_mean + momentum * batch_mean\n        running_var = (1 - momentum) * running_var + momentum * batch_var\n        \n        # Save updated running mean and variance\n        tl.store(running_mean_ptr + channel, running_mean)\n        tl.store(running_var_ptr + channel, running_var)\n    \n    # Normalize the input data\n    normalized_data = (input_data - running_mean) * tl.rsqrt(running_var + eps)\n    \n    # Apply weight and bias\n    output_data = normalized_data * weight + bias\n    \n    # Store the output data\n    tl.store(output_ptr + offsets, output_data, mask=mask)\n\n# Wrapper function for batch normalization\ndef batch_norm(input: torch.Tensor, running_mean: torch.Tensor, running_var: torch.Tensor, weight: torch.Tensor = None, bias: torch.Tensor = None, training: bool = False, momentum: float = 0.1, eps: float = 1e-05) -> torch.Tensor:\n    # Preallocate the output tensor\n    output = torch.empty_like(input)\n    \n    # Get the dimensions of the input tensor\n    batch_size, channels, height, width = input.shape\n    \n    # Define the grid size\n    grid = lambda meta: (triton.cdiv(batch_size * channels, meta['BLOCK_SIZE']), )\n    \n    # Launch the kernel\n    batch_norm_kernel[grid](\n        input, output, running_mean, running_var, weight, bias,\n        batch_size, channels, height, width, eps, momentum, training,\n        BLOCK_SIZE=1024\n    )\n    \n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of the absolute value of the gamma function on the input tensor.\nWrapper Entry Information: gammaln(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\ln \\Gamma(|\\text{input}_{i}|)\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 6 parameters: output_ptr (pointer to the output tensor), input_ptr (pointer to the input tensor), input_row_stride (stride of the input tensor), output_row_stride (stride of the output tensor), n_cols (number of columns in the input tensor), and BLOCK_SIZE (block size for parallelization). The function loads a row of the input tensor, normalizes it using the softmax formula, and writes the result to the output tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size and number of warps, and calls the kernel function. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride,\n                   n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row o\n    # f the input matrix\n    softmax_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the natural logarithm of the absolute value of the gamma function on the input tensor.\nWrapper Entry Information: gammaln(input, *, out=None) -> Tensor\n\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\ln \\Gamma(|\\text{input}_{i}|)\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to compute gammaln\n@triton.jit\ndef gammaln_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_vec = tl.load(input_ptr + offsets, mask=mask)\n    # Compute gammaln\n    output_vec = tl.log(tl.abs(tl.gamma(input_vec)))\n    tl.store(output_ptr + offsets, output_vec, mask=mask)\n\n# Wrapper function for gammaln\ndef gammaln(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape, \"Output tensor must have the same shape as input tensor\"\n    \n    n_elements = input.numel()\n    BLOCK_SIZE = 1024  # Adjust block size as needed\n    grid = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n    \n    gammaln_kernel[grid, BLOCK_SIZE](\n        input,\n        out,\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical AND.\nWrapper Entry Information: bitwise_and(input, other, *, out=None) -> Tensor; input: the first input tensor; other: the second input tensor; out (Tensor, optional): the output tensor.\nother: The input tensors must be of integral or Boolean types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND of input and other. The input tensor must be of integral or Boolean types. For bool tensors, it computes the logical AND.\nWrapper Entry Information: bitwise_and(input, other, *, out=None) -> Tensor; input: the first input tensor; other: the second input tensor; out (Tensor, optional): the output tensor.\nother: The input tensors must be of integral or Boolean types.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(input, other, *, out=None):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input other (tensor or scalar).\n    \n    Parameters:\n    - input: The first input tensor.\n    - other: The second input (either a tensor or scalar).\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - out: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        if out.shape != input.shape:\n            raise ValueError(\"Output tensor shape must match input tensor shape\")\n    \n    n_elements = out.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(other, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](input, other, out, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](input, other, out, n_elements, block_size)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts 'other', scaled by 'alpha', from 'input', and then applies the Gaussian Error Linear Units (GELU) activation function to the result. The function supports two modes for GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: def sub_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to subtract from input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out_i = GELU(input_i - alpha * other_i)\n\nGELU(x) = x * \u03a6(x) when approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) when approximate is 'tanh'\nother: The function allows for an optional output tensor and supports both exact and approximate GELU calculations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Subtracts 'other', scaled by 'alpha', from 'input', and then applies the Gaussian Error Linear Units (GELU) activation function to the result. The function supports two modes for GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: def sub_gelu(input, other, alpha=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. other (Tensor or Number): The tensor or number to subtract from input. alpha (Number, optional): The multiplier for other. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out_i = GELU(input_i - alpha * other_i)\n\nGELU(x) = x * \u03a6(x) when approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) when approximate is 'tanh'\nother: The function allows for an optional output tensor and supports both exact and approximate GELU calculations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, tanh, sqrt, pow\n\n# Triton kernel for exact GELU\n@triton.jit\ndef gelu_none_kernel(input, other, alpha, out, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < input.shape[0]\n    \n    input_vec = tl.load(input + offsets, mask=mask)\n    other_vec = tl.load(other + offsets, mask=mask)\n    \n    # Compute the scaled subtraction\n    sub_result = input_vec - alpha * other_vec\n    \n    # Compute the GELU function using the error function approximation\n    gelu_result = 0.5 * sub_result * (1 + erf(sub_result * 0.7071067811))\n    \n    # Store the result\n    tl.store(out + offsets, gelu_result, mask=mask)\n\n# Triton kernel for approximate GELU using tanh\n@triton.jit\ndef gelu_tanh_kernel(input, other, alpha, out, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < input.shape[0]\n    \n    input_vec = tl.load(input + offsets, mask=mask)\n    other_vec = tl.load(other + offsets, mask=mask)\n    \n    # Compute the scaled subtraction\n    sub_result = input_vec - alpha * other_vec\n    \n    # Compute the GELU function using the tanh approximation\n    gelu_result = 0.5 * sub_result * (1 + tanh(sqrt(2 / 3.141592653589793) * (sub_result + 0.044715 * pow(sub_result, 3))))\n    \n    # Store the result\n    tl.store(out + offsets, gelu_result, mask=mask)\n\n# Wrapper function\ndef sub_gelu(input, other, alpha=1, approximate='none', out=None) -> torch.Tensor:\n    if out is None:\n        out = torch.empty_like(input)\n    \n    if approximate == 'none':\n        grid = (input.numel() + 1024 - 1) // 1024\n        gelu_none_kernel[grid, 1024](input, other, alpha, out, BLOCK_SIZE=1024)\n    elif approximate == 'tanh':\n        grid = (input.numel() + 1024 - 1) // 1024\n        gelu_tanh_kernel[grid, 1024](input, other, alpha, out, BLOCK_SIZE=1024)\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to the elements of input, then computes the standard deviation along the specified dimension(s). The GELU function is applied element-wise to the input tensor, with an option to use an approximation method. After activation, the standard deviation of the result is calculated over specified dimensions, with options to keep reduced dimensions and apply a correction factor.\nWrapper Entry Information: def gelu_std(input, dim=None, keepdim=False, correction=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension or dimensions to reduce. If None, computes over all dimensions. keepdim (bool, optional): Whether to retain the dimension(s) with size 1 after reduction. Default is False. correction (int, optional): The correction factor for standard deviation. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: GELU(x) = x * \u03a6(x) (when approximate is 'none')\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) (when approximate is 'tanh')\n\u03c3 = \u221a(1/(max(0, N - \u03b4N)) * \u03a3(x_i - x\u0304)^2)\nother: The function allows the use of a correction factor in the standard deviation calculation. It supports two methods for computing GELU: exact using CDF or approximate using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to the elements of input, then computes the standard deviation along the specified dimension(s). The GELU function is applied element-wise to the input tensor, with an option to use an approximation method. After activation, the standard deviation of the result is calculated over specified dimensions, with options to keep reduced dimensions and apply a correction factor.\nWrapper Entry Information: def gelu_std(input, dim=None, keepdim=False, correction=1, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int or tuple of ints, optional): The dimension or dimensions to reduce. If None, computes over all dimensions. keepdim (bool, optional): Whether to retain the dimension(s) with size 1 after reduction. Default is False. correction (int, optional): The correction factor for standard deviation. Default is 1. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: GELU(x) = x * \u03a6(x) (when approximate is 'none')\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) (when approximate is 'tanh')\n\u03c3 = \u221a(1/(max(0, N - \u03b4N)) * \u03a3(x_i - x\u0304)^2)\nother: The function allows the use of a correction factor in the standard deviation calculation. It supports two methods for computing GELU: exact using CDF or approximate using a tanh-based formula.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, tanh, pow, sqrt, mean\n\n# GELU kernels\n@triton.jit\ndef gelu_none_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    y = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    tl.store(Y + offsets, y, mask=mask)\n\n@triton.jit\ndef gelu_tanh_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    y = 0.5 * x_fp32 * (1 + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32, 2))))\n    tl.store(Y + offsets, y, mask=mask)\n\n# Standard Deviation kernel\n@triton.jit\ndef std_kernel(X, Y, N, correction, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_mean = mean(x, axis=0)\n    x_centered = x - x_mean\n    x_squared = x_centered * x_centered\n    x_var = mean(x_squared, axis=0)\n    x_std = sqrt(x_var * (N / (N - correction)))\n    tl.store(Y + pid, x_std, mask=pid < N)\n\ndef gelu_std(input, dim=None, keepdim=False, correction=1, approximate='none', out=None):\n    # Flatten the input tensor for simplicity\n    input_flat = input.flatten()\n    N = input_flat.numel()\n    \n    # Allocate output tensor for GELU result\n    gelu_result = torch.empty_like(input_flat)\n    \n    # Apply GELU activation\n    if approximate == 'none':\n        grid = (N + 1024 - 1) // 1024\n        gelu_none_kernel[grid, 1024](input_flat, gelu_result, N, BLOCK_SIZE=1024)\n    elif approximate == 'tanh':\n        grid = (N + 1024 - 1) // 1024\n        gelu_tanh_kernel[grid, 1024](input_flat, gelu_result, N, BLOCK_SIZE=1024)\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    \n    # Reshape the GELU result to match the original input shape\n    gelu_result = gelu_result.view_as(input)\n    \n    # Compute the standard deviation\n    if dim is None:\n        dim = tuple(range(input.dim()))\n    if isinstance(dim, int):\n        dim = (dim,)\n    \n    # Allocate output tensor for standard deviation\n    std_result = torch.empty(input.size(), device=input.device, dtype=input.dtype)\n    \n    # Apply standard deviation computation\n    for d in dim:\n        grid = (input.size(d) + 1024 - 1) // 1024\n        std_kernel[grid, 1024](gelu_result, std_result, input.size(d), correction, BLOCK_SIZE=1024)\n    \n    # Reduce dimensions if keepdim is False\n    if not keepdim:\n        std_result = std_result.squeeze(dim)\n    \n    # If an output tensor is provided, store the result in it\n    if out is not None:\n        out.copy_(std_result)\n        return out\n    else:\n        return std_result\n\nimport torch\n\n# Sample input\ninput = torch.randn(4, 4, 4)\n\n# Test the function\nresult = gelu_std(input, dim=1, keepdim=True, correction=1, approximate='none')\n\n# Print the result\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs the same operation as torch.permute, which rearranges the dimensions of the input tensor according to the specified dims, but all output tensors are freshly created instead of aliasing the input.\nWrapper Entry Information: torch.permute_copy(input, dims) -> Tensor\nother: Freshly created output tensors mean that the function does not create views, so changes to the output will not affect the input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs the same operation as torch.permute, which rearranges the dimensions of the input tensor according to the specified dims, but all output tensors are freshly created instead of aliasing the input.\nWrapper Entry Information: torch.permute_copy(input, dims) -> Tensor\nother: Freshly created output tensors mean that the function does not create views, so changes to the output will not affect the input.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef permute_kernel(\n    input_ptr,\n    output_ptr,\n    input_shape,\n    output_shape,\n    input_strides,\n    output_strides,\n    num_elements: tl.constexpr,\n    num_dims: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_size = tl.num_programs(axis=0)\n    start = pid * num_elements // block_size\n    end = (pid + 1) * num_elements // block_size\n\n    for idx in range(start, end):\n        input_idx = [0] * num_dims\n        output_idx = [0] * num_dims\n        temp_idx = idx\n\n        # Calculate the output index\n        for i in range(num_dims - 1, -1, -1):\n            output_idx[i] = temp_idx // output_strides[i]\n            temp_idx = temp_idx % output_strides[i]\n\n        # Calculate the input index\n        for i in range(num_dims):\n            input_idx[i] = output_idx[i]\n\n        # Compute the linear index for input and output\n        input_linear_idx = 0\n        output_linear_idx = 0\n        for i in range(num_dims):\n            input_linear_idx += input_idx[i] * input_strides[i]\n            output_linear_idx += output_idx[i] * output_strides[i]\n\n        # Load and store the value\n        value = tl.load(input_ptr + input_linear_idx)\n        tl.store(output_ptr + output_linear_idx, value)\n\ndef torch_permute_copy(input: torch.Tensor, dims: tuple) -> torch.Tensor:\n    # Validate the input and dims\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    assert len(dims) == input.dim(), 'The number of dimensions in dims must match the input tensor'\n    assert sorted(dims) == list(range(input.dim())), 'dims must be a permutation of input tensor dimensions'\n\n    # Prepare the output tensor\n    output_shape = [input.shape[d] for d in dims]\n    output = torch.empty(size=output_shape, dtype=input.dtype, device=device)\n\n    # Calculate strides for input and output\n    input_strides = [input.stride(i) for i in range(input.dim())]\n    output_strides = [output.stride(i) for i in range(output.dim())]\n\n    # Number of elements\n    num_elements = input.numel()\n\n    # Launch the Triton kernel\n    grid = (triton.cdiv(num_elements, 1024),)\n    permute_kernel[grid](\n        input_ptr=input, output_ptr=output,\n        input_shape=input.shape, output_shape=output.shape,\n        input_strides=input_strides, output_strides=output_strides,\n        num_elements=num_elements, num_dims=input.dim()\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the logarithmic derivative of the gamma function on input. This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nWrapper Entry Information: digamma(input, *, out=None) -> Tensor; Args: input (Tensor): the tensor to compute the digamma function on; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\digamma(x) = \\frac{d}{dx} \\ln\\left(\\Gamma\\left(x\\right)\\right) = \\frac{\\Gamma'(x)}{\\Gamma(x)}\nother: This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an asin kernel that computes the arc sine of each element in an input tensor, utilizing the libdevice.asin function. The kernel processes data in blocks with a constant block size, loads elements from the input tensor, applies the asin function, and stores the result in an output tensor. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import libdevice\n\n\n# Asin Kernel\n# This is the kernel function for calculating the asin (arc sine) of elements in the input tensor.\n# The function uses libdevice.asin to perform the computation.\n\n@triton.jit\ndef asin_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    x = libdevice.asin(x)  # Apply the asin function from libdevice\n    tl.store(y_ptr + offsets, x, mask=mask)  # Store the result in the output tensor\n\n\n# Using the asin kernel\n# This is the function that invokes the asin_kernel with proper parameters.\n\ntorch.manual_seed(0)\nsize = 98432  # Size of the input tensor\nx = torch.rand(size, device='cuda')  # Create a random input tensor\noutput_triton = torch.zeros(size, device='cuda')  # Output tensor for Triton results\noutput_torch = torch.asin(x)  # Compute the arc sine using PyTorch\n\nn_elements = output_torch.numel()  # Get the number of elements in the tensor\ngrid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )  # Define the grid dimensions for Triton\n\nasin_kernel[grid](x, output_triton, n_elements, BLOCK_SIZE=1024)  # Launch the kernel\n\n# Print the results for comparison\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the logarithmic derivative of the gamma function on input. This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nWrapper Entry Information: digamma(input, *, out=None) -> Tensor; Args: input (Tensor): the tensor to compute the digamma function on; Keyword args: out (Tensor, optional): the output tensor.\nMath: \\digamma(x) = \\frac{d}{dx} \\ln\\left(\\Gamma\\left(x\\right)\\right) = \\frac{\\Gamma'(x)}{\\Gamma(x)}\nother: This function is similar to SciPy's scipy.special.digamma. From PyTorch 1.8 onwards, the digamma function returns -Inf for 0, previously it returned NaN for 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.extra import libdevice\n\n# Digamma Kernel\n# This is the kernel function for calculating the digamma function of elements in the input tensor.\n# The function uses libdevice.digamma to perform the computation.\n\n@triton.jit\ndef digamma_kernel(\n    x_ptr,\n    y_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)  # Get the program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Calculate the starting index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Generate offsets for elements in the block\n    mask = offsets < n_elements  # Ensure we don't go out of bounds\n    x = tl.load(x_ptr + offsets, mask=mask)  # Load input tensor values\n    y = libdevice.digamma(x)  # Apply the digamma function from libdevice\n    tl.store(y_ptr + offsets, y, mask=mask)  # Store the result in the output tensor\n\n# Wrapper function for the digamma kernel\ndef digamma(input, *, out=None):\n    if out is None:\n        out = torch.empty_like(input)  # Create an output tensor if not provided\n    n_elements = input.numel()  # Get the number of elements in the tensor\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )  # Define the grid dimensions for Triton\n    digamma_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)  # Launch the kernel\n    return out\n\n# Example usage\ntorch.manual_seed(0)\nsize = 98432  # Size of the input tensor\nx = torch.rand(size, device='cuda')  # Create a random input tensor\noutput_triton = digamma(x)  # Compute the digamma function using Triton\noutput_torch = torch.special.digamma(x)  # Compute the digamma function using PyTorch for comparison\n\n# Print the results for comparison\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by another tensor or number. The softmax function re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nWrapper Entry Information: def softmax_mul(input, other, dim, dtype=None, out=None) -> Tensor: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by other. Args: input (Tensor): The input tensor to apply softmax on. other (Tensor or Number): The tensor or number to multiply with the softmaxed values. dim (int): The dimension along which softmax will be computed. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is cast to dtype before the operation. Default is None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{Softmax}(\\text{input}_i) \\times \\text{other}_i\n    \\text{Softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\nother: Softmax re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by another tensor or number. The softmax function re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nWrapper Entry Information: def softmax_mul(input, other, dim, dtype=None, out=None) -> Tensor: Applies the softmax function to the input tensor along the specified dimension, and then multiplies the softmaxed values by other. Args: input (Tensor): The input tensor to apply softmax on. other (Tensor or Number): The tensor or number to multiply with the softmaxed values. dim (int): The dimension along which softmax will be computed. dtype (torch.dtype, optional): The desired data type of returned tensor. If specified, the input tensor is cast to dtype before the operation. Default is None. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = \\text{Softmax}(\\text{input}_i) \\times \\text{other}_i\n    \\text{Softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\nother: Softmax re-scales the elements so that they lie in the range [0, 1] and sum to 1 along the specified dimension.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for softmax and multiplication\n@triton.jit\ndef _softmax_mul(X, OTHER, OUT, xm_stride, xn_stride, other_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((BLOCK_N,), tl.float32)\n    \n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        \n        # Compute the maximum value for numerical stability\n        c = tl.max(x, axis=0)\n        \n        # Compute the exponentials\n        exp_x = tl.exp(x - c)\n        \n        # Compute the sum of exponentials\n        sum_exp = tl.sum(exp_x, axis=0)\n        \n        # Compute the softmax values\n        softmax_x = exp_x / sum_exp\n        \n        # Load the other tensor\n        Othermn = OTHER + rm * other_stride + rn * other_stride\n        other = tl.load(Othermn, mask=rn < N, other=1.0)\n        \n        # Compute the final result\n        res = softmax_x * other\n        \n        # Store the result\n        OUTmn = OUT + rm * out_stride + rn * out_stride\n        tl.store(OUTmn, res, mask=rn < N)\n\n# Python wrapper function\ndef softmax_mul(input, other, dim, dtype=None, out=None):\n    if not input.is_cuda:\n        input = input.cuda()\n    if isinstance(other, (int, float)):\n        other = torch.tensor(other, device=input.device, dtype=input.dtype)\n    if not other.is_cuda:\n        other = other.cuda()\n    \n    if dtype is not None:\n        input = input.to(dtype)\n        other = other.to(dtype)\n    \n    if out is None:\n        out = torch.empty_like(input, device=input.device, dtype=input.dtype)\n    \n    *dims, N = input.shape\n    input = input.view(-1, N)\n    other = other.view(-1, N)\n    out = out.view(-1, N)\n    \n    M = input.shape[0]\n    _softmax_mul[(M,)](input, other, out, input.stride(0), input.stride(1), other.stride(1), out.stride(1), N, BLOCK_N=4096, num_warps=4)\n    \n    return out.view(*dims)\n\n# Example usage\ninput = torch.randn(2, 3, 4, device='cuda')\nother = torch.randn(2, 3, 4, device='cuda')\ndim = 2\nresult = softmax_mul(input, other, dim)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND operation between two tensors and then applies a Binomial distribution sampling based on the resulting tensor's values. First, it computes the bitwise AND of `input` and `other`. Then, the result is used as input for the Binomial distribution, with each element representing the number of trials with the probability specified in `probs` or `logits`.\nWrapper Entry Information: def bitwise_and_binomial(input: torch.Tensor, other: torch.Tensor, total_count: torch.Tensor, probs: torch.Tensor = None, logits: torch.Tensor = None) -> torch.Tensor: input (Tensor): The first input tensor of integral or Boolean type. other (Tensor): The second input tensor of integral or Boolean type. total_count (Tensor): Number of Bernoulli trials, must be broadcastable with `probs` or `logits`. probs (Tensor, optional): Event probabilities. Only one of `probs` or `logits` should be provided. logits (Tensor, optional): Event log-odds.\nMath: \\text{output} = \\text{Binomial}( \\text{bitwise\\_and}(\\text{input}, \\text{other}))\nother: The function performs a bitwise AND on the input tensors and uses the result to conduct Binomial sampling with specified probabilities or logits. The `total_count` indicates the number of Bernoulli trials, and either `probs` or `logits` must be provided for the Binomial distribution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the bitwise AND operation between two tensors and then applies a Binomial distribution sampling based on the resulting tensor's values. First, it computes the bitwise AND of `input` and `other`. Then, the result is used as input for the Binomial distribution, with each element representing the number of trials with the probability specified in `probs` or `logits`.\nWrapper Entry Information: def bitwise_and_binomial(input: torch.Tensor, other: torch.Tensor, total_count: torch.Tensor, probs: torch.Tensor = None, logits: torch.Tensor = None) -> torch.Tensor: input (Tensor): The first input tensor of integral or Boolean type. other (Tensor): The second input tensor of integral or Boolean type. total_count (Tensor): Number of Bernoulli trials, must be broadcastable with `probs` or `logits`. probs (Tensor, optional): Event probabilities. Only one of `probs` or `logits` should be provided. logits (Tensor, optional): Event log-odds.\nMath: \\text{output} = \\text{Binomial}( \\text{bitwise\\_and}(\\text{input}, \\text{other}))\nother: The function performs a bitwise AND on the input tensors and uses the result to conduct Binomial sampling with specified probabilities or logits. The `total_count` indicates the number of Bernoulli trials, and either `probs` or `logits` must be provided for the Binomial distribution.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for bitwise AND and Binomial sampling\n@triton.jit\ndef bitwise_and_binomial_kernel(\n    input_ptr, other_ptr, total_count_ptr, probs_ptr, logits_ptr, output_ptr,\n    n_elements, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    A kernel to perform bitwise AND on two tensors and then apply Binomial sampling.\n    \n    Parameters:\n    - input_ptr: Pointer to the first input tensor.\n    - other_ptr: Pointer to the second input tensor.\n    - total_count_ptr: Pointer to the tensor of total counts.\n    - probs_ptr: Pointer to the tensor of probabilities.\n    - logits_ptr: Pointer to the tensor of logits.\n    - output_ptr: Pointer to the output tensor.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load input and other tensors\n    input_data = tl.load(input_ptr + offsets, mask=mask)\n    other_data = tl.load(other_ptr + offsets, mask=mask)\n    \n    # Perform bitwise AND\n    and_result = input_data & other_data\n    \n    # Load total_count, probs, and logits\n    total_count = tl.load(total_count_ptr + offsets, mask=mask)\n    if probs_ptr is not None:\n        probs = tl.load(probs_ptr + offsets, mask=mask)\n    else:\n        logits = tl.load(logits_ptr + offsets, mask=mask)\n        probs = 1 / (1 + tl.exp(-logits))\n    \n    # Perform Binomial sampling\n    output = tl.rand() < probs\n    output = tl.where(output, 1, 0)\n    output = tl.where(and_result > 0, output, 0)\n    output = tl.where(total_count > 0, output, 0)\n    \n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Wrapper function to handle inputs and invoke the Triton kernel\ndef bitwise_and_binomial(input: torch.Tensor, other: torch.Tensor, total_count: torch.Tensor, probs: torch.Tensor = None, logits: torch.Tensor = None) -> torch.Tensor:\n    \"\"\"\n    Computes the bitwise AND operation between two tensors and then applies a Binomial distribution sampling.\n    \n    Parameters:\n    - input (Tensor): The first input tensor of integral or Boolean type.\n    - other (Tensor): The second input tensor of integral or Boolean type.\n    - total_count (Tensor): Number of Bernoulli trials, must be broadcastable with `probs` or `logits`.\n    - probs (Tensor, optional): Event probabilities. Only one of `probs` or `logits` should be provided.\n    - logits (Tensor, optional): Event log-odds.\n    \n    Returns:\n    - output (Tensor): The resulting tensor after performing the bitwise AND and Binomial sampling.\n    \"\"\"\n    assert (probs is not None) != (logits is not None), \"Exactly one of `probs` or `logits` must be provided.\"\n    \n    n_elements = input.numel()\n    block_size = 1024\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    output = torch.empty_like(input, dtype=torch.int32)\n    \n    # Determine the pointers for probs or logits\n    probs_ptr = probs if probs is not None else None\n    logits_ptr = logits if logits is not None else None\n    \n    # Invoke the Triton kernel\n    bitwise_and_binomial_kernel[(grid_size, 1, 1)](\n        input, other, total_count, probs_ptr, logits_ptr, output,\n        n_elements, block_size\n    )\n    \n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the conversion of angles from radians to degrees and calculates the square root for each element in the input tensor. It returns a tuple where the first element is the converted degrees and the second is the square root of the input tensor elements.\nWrapper Entry Information: def rad2deg_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor with angles in radians.\nMath: \\text{out}_{i} = \\text{input}_{i} \\times (180.0 / \\pi) \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function uses torch's rad2deg and sqrt functions to perform the operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'exp_func' that computes the square root of elements in a tensor. The kernel takes four parameters: 'a' (input tensor), 'b' (output tensor), 'n_elements' (number of elements in the tensor), and 'BLOCK_SIZE' (block size for parallel execution). The function calculates the offset for each block, applies a mask for boundary conditions, loads elements from the input tensor, computes their square root, and stores the results in the output tensor. The 'sqrt' function is a wrapper that prepares the input and output tensors, calculates the block and grid sizes, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel function to compute the square root of elements in a tensor\n@triton.jit\ndef exp_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the square root of the loaded elements\n    b_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the result in output tensor 'b' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to launch the Triton kernel and compute square root\ndef sqrt(A):\n    # Create an output tensor 'B' with the same shape as 'A'\n    B = torch.empty_like(A)\n    # Get the total number of elements in the input tensor\n    n_elements = A.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    exp_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the conversion of angles from radians to degrees and calculates the square root for each element in the input tensor. It returns a tuple where the first element is the converted degrees and the second is the square root of the input tensor elements.\nWrapper Entry Information: def rad2deg_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor with angles in radians.\nMath: \\text{out}_{i} = \\text{input}_{i} \\times (180.0 / \\pi) \\text{out}_{i} = \\sqrt{\\text{input}_{i}}\nother: The function uses torch's rad2deg and sqrt functions to perform the operations.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel function to compute radians to degrees and square root\n@triton.jit\ndef rad2deg_sqrt_kernel(a, b, c, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle boundary conditions\n    mask = offset < n_elements\n    # Load elements from input tensor 'a' with boundary mask\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute radians to degrees\n    b_value = a_value * (180.0 / tl.math.pi)\n    # Compute the square root of the loaded elements\n    c_value = tl.sqrt(a_value.to(tl.float32))\n    # Store the results in output tensors 'b' and 'c' with boundary mask\n    tl.store(b + offset, b_value, mask=mask)\n    tl.store(c + offset, c_value, mask=mask)\n\n# Wrapper function to launch the Triton kernel\ndef rad2deg_sqrt(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    # Create output tensors 'B' and 'C' with the same shape as 'input'\n    B = torch.empty_like(input)\n    C = torch.empty_like(input)\n    # Get the total number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size for the kernel\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Calculate the grid size for the kernel launch\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    rad2deg_sqrt_kernel[(grid_size, 1, 1)](input, B, C, n_elements, block_size)\n    return B, C\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Bessel function of the first kind of order 1 for each element of the input tensor.\nWrapper Entry Information: bessel_j1(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Bessel function of the first kind of order :math:`1`.\nother: The function supports an optional output tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Bessel function of the first kind of order 1 for each element of the input tensor.\nWrapper Entry Information: bessel_j1(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Bessel function of the first kind of order :math:`1`.\nother: The function supports an optional output tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n# Triton kernel for computing the Bessel function of the first kind of order 1\n@triton.jit\ndef bessel_j1_kernel(\n    input_ptr,\n    output_ptr,\n    size,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the program ID\n    pid = tl.program_id(axis=0)\n    # Compute the start and end indices for the current block\n    block_start = pid * BLOCK_SIZE\n    block_end = min(block_start + BLOCK_SIZE, size)\n\n    # Compute the offsets for the current block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = offsets < size\n\n    # Load the input elements with masking\n    x = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n\n    # Compute the Bessel function of the first kind of order 1\n    # Using the approximation for J1(x) for simplicity\n    # For a more accurate implementation, consider using a library or a more complex approximation\n    j1 = 0.5 * (tl.sin(x) / (x * x * x) - tl.cos(x) / x)\n\n    # Store the result in the output tensor with masking\n    tl.store(output_ptr + offsets, j1, mask=mask)\n\n# Python wrapper function\ndef bessel_j1(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor shape must match input tensor shape'\n\n    # Get the size of the input tensor\n    size = input.numel()\n\n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(size)\n\n    # Launch the Triton kernel\n    bessel_j1_kernel[(size + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        input_ptr=input, output_ptr=out, size=size, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the LU decomposition with partial pivoting of a matrix. If pivot=True, returns a permutation matrix P, a lower triangular matrix L, and an upper triangular matrix U such that A = PLU. If pivot=False and A is on GPU, computes the LU decomposition without pivoting, returning empty P, L and U such that A = LU. Supports float, double, cfloat, and cdouble dtypes, as well as batches of matrices. Outputs have the same batch dimensions as input.\nWrapper Entry Information: lu(A, *, pivot=True, out=None) -> (Tensor, Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting or no pivoting. Default: `True`. Keyword args: out (tuple, optional): output tuple of three tensors. Ignored if `None`. Default: `None`.\nMath: A = PLU where P is a permutation matrix, L is lower triangular with ones on the diagonal, U is upper triangular. If pivot=False, A = LU.\nother: LU decomposition is not unique; different platforms may yield different decompositions. Gradient computations are supported only if the matrix is full-rank.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create kernels that compute the upper triangular part of matrices. The 'triu_kernel' function takes 7 parameters: input matrix pointer (X), output matrix pointer (Y), number of rows (M), number of columns (N), diagonal offset (diagonal), row block size (M_BLOCK_SIZE), and column block size (N_BLOCK_SIZE). It computes the upper triangular elements for a 2D matrix. The 'triu_batch_kernel' function takes 8 parameters: input matrix batch pointer (X), output matrix batch pointer (Y), number of matrices (batch), number of elements in each matrix (MN), number of columns (N), diagonal offset (diagonal), batch block size (BATCH_BLOCK_SIZE), and matrix element block size (MN_BLOCK_SIZE). It computes the upper triangular elements for a batch of matrices. The 'triu' function handles input tensors of 2D or higher dimensions, calling the appropriate kernel based on the tensor dimensions. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the upper triangular part of a 2D matrix\n@triton.jit\ndef triu_kernel(\n    X,  # Pointer to the input matrix\n    Y,  # Pointer to the output matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    diagonal,  # Diagonal offset\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    X += row * N\n    Y += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        x = tl.load(X + cols, mask, other=0.0)\n        y = tl.where(row + diagonal <= cols, x, 0.0)\n        tl.store(Y + cols, y, mask=mask)\n\n# Triton kernel to compute the upper triangular part for batched matrices\n@triton.jit\ndef triu_batch_kernel(\n    X,  # Pointer to the input matrix batch\n    Y,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    MN,  # Number of elements in each matrix (flattened)\n    N,  # Number of columns in each matrix\n    diagonal,  # Diagonal offset\n    BATCH_BLOCK_SIZE: tl.constexpr,  # Block size for batch processing\n    MN_BLOCK_SIZE: tl.constexpr,  # Block size for elements within a matrix\n):\n    batch_id = tl.program_id(0)\n    mn_id = tl.program_id(1)\n    row = batch_id * BATCH_BLOCK_SIZE + tl.arange(0, BATCH_BLOCK_SIZE)[:, None]\n    batch_mask = row < batch\n    X += row * MN\n    Y += row * MN\n\n    cols = mn_id * MN_BLOCK_SIZE + tl.arange(0, MN_BLOCK_SIZE)[None, :]\n    mn_mask = cols < MN\n    mask = batch_mask and mn_mask\n    x = tl.load(X + cols, mask, other=0.0)\n    m = cols // N\n    n = cols % N\n    y = tl.where(m + diagonal <= n, x, 0.0)\n    tl.store(Y + cols, y, mask=mask)\n\n# Function to compute the upper triangular part of a matrix or batch of matrices\ndef triu(A, diagonal=0):\n    A = A.contiguous()\n    out = torch.empty_like(A)\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    M, N = A.shape[-2:]\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            triu_kernel[grid](A, out, M, N, diagonal, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            batch = int(torch.numel(A) / M / N)\n            B = A.view(batch, -1)\n            grid = lambda meta: (\n                triton.cdiv(batch, meta[\"BATCH_BLOCK_SIZE\"]),\n                triton.cdiv(M * N, meta[\"MN_BLOCK_SIZE\"]),\n            )\n            triu_batch_kernel[grid](B, out, batch, M * N, N, diagonal, BATCH_BLOCK_SIZE=32, MN_BLOCK_SIZE=8)\n            out = out.view(A.shape)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the LU decomposition with partial pivoting of a matrix. If pivot=True, returns a permutation matrix P, a lower triangular matrix L, and an upper triangular matrix U such that A = PLU. If pivot=False and A is on GPU, computes the LU decomposition without pivoting, returning empty P, L and U such that A = LU. Supports float, double, cfloat, and cdouble dtypes, as well as batches of matrices. Outputs have the same batch dimensions as input.\nWrapper Entry Information: lu(A, *, pivot=True, out=None) -> (Tensor, Tensor, Tensor) Args: A (Tensor): tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting or no pivoting. Default: `True`. Keyword args: out (tuple, optional): output tuple of three tensors. Ignored if `None`. Default: `None`.\nMath: A = PLU where P is a permutation matrix, L is lower triangular with ones on the diagonal, U is upper triangular. If pivot=False, A = LU.\nother: LU decomposition is not unique; different platforms may yield different decompositions. Gradient computations are supported only if the matrix is full-rank.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for LU decomposition with partial pivoting\n@triton.jit\ndef lu_kernel_pivoting(\n    A,  # Pointer to the input matrix\n    P,  # Pointer to the permutation matrix\n    L,  # Pointer to the lower triangular matrix\n    U,  # Pointer to the upper triangular matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    A += row * N\n    P += row * N\n    L += row * N\n    U += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        # Load the current block of A\n        a = tl.load(A + cols, mask, other=0.0)\n\n        # Compute the pivot and swap rows\n        pivot_row = tl.argmax(tl.abs(a), axis=0)\n        pivot_row = tl.where(pivot_row < M, pivot_row, 0)\n        pivot_row = tl.where(pivot_row < N, pivot_row, 0)\n\n        # Swap rows in A, P, L, and U\n        temp = tl.load(A + pivot_row * N + cols, mask, other=0.0)\n        tl.store(A + pivot_row * N + cols, a, mask=mask)\n        tl.store(A + row * N + cols, temp, mask=mask)\n\n        temp = tl.load(P + pivot_row * N + cols, mask, other=0.0)\n        tl.store(P + pivot_row * N + cols, a, mask=mask)\n        tl.store(P + row * N + cols, temp, mask=mask)\n\n        temp = tl.load(L + pivot_row * N + cols, mask, other=0.0)\n        tl.store(L + pivot_row * N + cols, a, mask=mask)\n        tl.store(L + row * N + cols, temp, mask=mask)\n\n        temp = tl.load(U + pivot_row * N + cols, mask, other=0.0)\n        tl.store(U + pivot_row * N + cols, a, mask=mask)\n        tl.store(U + row * N + cols, temp, mask=mask)\n\n        # Compute the L and U factors\n        for i in range(row + 1, M):\n            l = tl.load(A + i * N + cols, mask, other=0.0)\n            u = tl.load(A + row * N + cols, mask, other=0.0)\n            l = l / u\n            tl.store(L + i * N + cols, l, mask=mask)\n            a = a - l * u\n            tl.store(A + i * N + cols, a, mask=mask)\n\n# Triton kernel for LU decomposition without pivoting\n@triton.jit\ndef lu_kernel_no_pivoting(\n    A,  # Pointer to the input matrix\n    L,  # Pointer to the lower triangular matrix\n    U,  # Pointer to the upper triangular matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    A += row * N\n    L += row * N\n    U += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        # Load the current block of A\n        a = tl.load(A + cols, mask, other=0.0)\n\n        # Compute the L and U factors\n        for i in range(row + 1, M):\n            l = tl.load(A + i * N + cols, mask, other=0.0)\n            u = tl.load(A + row * N + cols, mask, other=0.0)\n            l = l / u\n            tl.store(L + i * N + cols, l, mask=mask)\n            a = a - l * u\n            tl.store(A + i * N + cols, a, mask=mask)\n\n# Wrapper function for LU decomposition\ndef lu(A, *, pivot=True, out=None):\n    A = A.contiguous()\n    M, N = A.shape[-2:]\n    batch = A.shape[:-2] if len(A.shape) > 2 else (1,)\n    batch_size = int(torch.prod(torch.tensor(batch)))\n\n    if out is None:\n        if pivot:\n            P = torch.empty(batch + (M, N), dtype=torch.int64, device=A.device)\n            L = torch.empty(batch + (M, N), dtype=A.dtype, device=A.device)\n            U = torch.empty(batch + (M, N), dtype=A.dtype, device=A.device)\n        else:\n            P = torch.empty(0, dtype=torch.int64, device=A.device)\n            L = torch.empty(batch + (M, N), dtype=A.dtype, device=A.device)\n            U = torch.empty(batch + (M, N), dtype=A.dtype, device=A.device)\n    else:\n        P, L, U = out\n\n    with torch.cuda.device(A.device):\n        if pivot:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            lu_kernel_pivoting[grid](A, P, L, U, M, N, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            lu_kernel_no_pivoting[grid](A, L, U, M, N, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n\n    return P, L, U\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to each element in the input tensor, followed by computing the minimum value along the specified dimension. If no dimension is specified, it computes the minimum over all elements. The function supports two methods for computing GELU: exact ('none') and an approximation using 'tanh'.\nWrapper Entry Information: gelu_min(input, approximate='none', dim=None, keepdim=False, out=None) -> Tensor or (Tensor, LongTensor)\nMath: When approximate is 'none': GELU(x) = x * \u03a6(x), where \u03a6(x) is the Cumulative Distribution Function for Gaussian Distribution.\nWhen approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3)))\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Units (GELU) activation function to each element in the input tensor, followed by computing the minimum value along the specified dimension. If no dimension is specified, it computes the minimum over all elements. The function supports two methods for computing GELU: exact ('none') and an approximation using 'tanh'.\nWrapper Entry Information: gelu_min(input, approximate='none', dim=None, keepdim=False, out=None) -> Tensor or (Tensor, LongTensor)\nMath: When approximate is 'none': GELU(x) = x * \u03a6(x), where \u03a6(x) is the Cumulative Distribution Function for Gaussian Distribution.\nWhen approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3)))\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, tanh, sqrt, pow\n\n# Triton kernel for GELU using the exact method\n@triton.jit\ndef gelu_none_kernel(X, Y, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < X.shape[0]\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    tl.store(Y + offsets, x_gelu, mask=mask)\n\n# Triton kernel for GELU using the tanh approximation\n@triton.jit\ndef gelu_tanh_kernel(X, Y, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < X.shape[0]\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    x_gelu = 0.5 * x_fp32 * (1 + tanh(sqrt(2 / 3.141592653589793) * (x_fp32 + 0.044715 * pow(x_fp32, 3))))\n    tl.store(Y + offsets, x_gelu, mask=mask)\n\n# Wrapper function for applying GELU and computing the minimum\ndef gelu_min(input, approximate='none', dim=None, keepdim=False, out=None):\n    # Determine the shape of the output tensor\n    if dim is None:\n        output_shape = (1,)\n    else:\n        output_shape = list(input.shape)\n        if not keepdim:\n            output_shape[dim] = 1\n\n    # Allocate the output tensor\n    if out is None:\n        out = torch.empty(output_shape, dtype=input.dtype, device=input.device)\n\n    # Apply GELU using the specified method\n    if approximate == 'none':\n        gelu_kernel = gelu_none_kernel\n    elif approximate == 'tanh':\n        gelu_kernel = gelu_tanh_kernel\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n\n    # Launch the GELU kernel\n    BLOCK_SIZE = 256\n    grid = (input.numel() + BLOCK_SIZE - 1) // BLOCK_SIZE\n    gelu_kernel[grid](input, out, BLOCK_SIZE)\n\n    # Compute the minimum value\n    if dim is None:\n        min_value, min_index = torch.min(out, out=out)\n        return min_value\n    else:\n        min_value, min_index = torch.min(out, dim=dim, keepdim=keepdim)\n        return min_value, min_index\n\n# Example usage\ninput_tensor = torch.randn(4, 5, device='cuda')\nresult = gelu_min(input_tensor, approximate='tanh', dim=1, keepdim=True)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies an affine transformation to the input tensor followed by grid sampling. It first generates a 2D flow field (sampling grid) based on the input affine matrix `theta` using `affine_grid`. Then it uses the generated grid to sample from the input image using `grid_sample`. It supports multiple interpolation modes (such as 'bilinear', 'nearest', and 'bicubic'), different padding modes ('zeros', 'border', 'reflection'), and has an option to align corners for transformation consistency.\nWrapper Entry Information: def grid_sample_with_affine(input: torch.Tensor, theta: torch.Tensor, size: torch.Size, mode: str = 'bilinear', padding_mode: str = 'zeros', align_corners: bool = False) -> torch.Tensor: Input tensor of shape (N, C, H_{in}, W_{in}) (4D). Affine transformation matrix of shape (N, 2, 3) for 2D transformations. Target output image size as a 4D size (N, C, H_{out}, W_{out}). Interpolation mode to calculate output values, 'bilinear', 'nearest', or 'bicubic'. Default is 'bilinear'. Defines how to handle grid values outside the input range. Options: 'zeros', 'border', 'reflection'. Default is 'zeros'. If True, aligns the grid to corner pixels for transformation consistency. Default is False.\nother: The function generates an affine transformation grid and applies grid sampling to the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a SiLU (Sigmoid Linear Unit) function kernel. The kernel 'silu_kernel' takes four parameters: input_ptr (pointer to input data), output_ptr (pointer to output data), n_elements (number of elements to process), and BLOCK_SIZE (block size for processing). The kernel computes the SiLU function for each element and stores the result. The 'silu' function applies this kernel to a tensor, while 'silu_inplace' applies it in-place. import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing the SiLU (Sigmoid Linear Unit) function\n@triton.jit\ndef silu_kernel(input_ptr,\n                output_ptr,\n                n_elements,\n                BLOCK_SIZE: tl.constexpr):\n    # Obtain the program ID for the current block\n    pid = tl.program_id(axis=0)\n    # Calculate the start index for the block\n    block_start = pid * BLOCK_SIZE\n    # Create offsets for each element in the block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = offsets < n_elements\n    # Load input data with masking\n    x = tl.load(input_ptr + offsets, mask=mask)\n    # Compute the SiLU function\n    output = x * tl.sigmoid(x)\n    # Store the result with masking\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Function to apply the SiLU function using the Triton kernel\ndef silu(x: torch.Tensor):\n    # Create an output tensor with the same shape as the input\n    output = torch.empty_like(x)\n    # Ensure CUDA is available and tensors are on the GPU\n    assert torch.cuda.is_available()\n    assert x.is_cuda and output.is_cuda\n    # Get the number of elements in the tensor\n    n_elements = output.numel()\n    # Define the grid size for the kernel launch\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    # Launch the Triton kernel\n    silu_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)\n    return output\n\n# Function to apply the SiLU function in-place using the Triton kernel\ndef silu_inplace(x: torch.Tensor):\n    # Ensure CUDA is available and the tensor is on the GPU\n    assert torch.cuda.is_available()\n    assert x.is_cuda\n    # Get the number of elements in the tensor\n    n_elements = x.numel()\n    # Define the grid size for the kernel launch\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n    # Launch the Triton kernel in-place\n    silu_kernel[grid](x, x, n_elements, BLOCK_SIZE=1024)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function applies an affine transformation to the input tensor followed by grid sampling. It first generates a 2D flow field (sampling grid) based on the input affine matrix `theta` using `affine_grid`. Then it uses the generated grid to sample from the input image using `grid_sample`. It supports multiple interpolation modes (such as 'bilinear', 'nearest', and 'bicubic'), different padding modes ('zeros', 'border', 'reflection'), and has an option to align corners for transformation consistency.\nWrapper Entry Information: def grid_sample_with_affine(input: torch.Tensor, theta: torch.Tensor, size: torch.Size, mode: str = 'bilinear', padding_mode: str = 'zeros', align_corners: bool = False) -> torch.Tensor: Input tensor of shape (N, C, H_{in}, W_{in}) (4D). Affine transformation matrix of shape (N, 2, 3) for 2D transformations. Target output image size as a 4D size (N, C, H_{out}, W_{out}). Interpolation mode to calculate output values, 'bilinear', 'nearest', or 'bicubic'. Default is 'bilinear'. Defines how to handle grid values outside the input range. Options: 'zeros', 'border', 'reflection'. Default is 'zeros'. If True, aligns the grid to corner pixels for transformation consistency. Default is False.\nother: The function generates an affine transformation grid and applies grid sampling to the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "To implement the `grid_sample_with_affine` function using Triton, we need to break down the task into two main steps: generating the affine grid and then applying the grid sampling. Triton is primarily used for writing low-level GPU kernels, so we will use PyTorch for the higher-level operations (like generating the grid) and Triton for the grid sampling part, which can be highly parallelized.\n\nHere's how we can implement this:\n\n1. **Generate the Affine Grid**: This will be done using PyTorch's `F.affine_grid` function.\n2. **Apply Grid Sampling**: This will be done using a Triton kernel that performs the sampling based on the grid and the input image.\n\n### Step 1: Generate the Affine Grid\n\nWe will use PyTorch's `F.affine_grid` to generate the grid. This function is already optimized and does not need to be reimplemented in Triton.\n\n### Step 2: Apply Grid Sampling\n\nWe will write a Triton kernel to perform the grid sampling. The kernel will handle different interpolation modes and padding modes.\n\n### Full Implementation\n\n```python\nimport torch\nimport torch.nn.functional as F\nimport triton\nimport triton.language as tl\n\n# Triton kernel for grid sampling\n@triton.jit\ndef grid_sample_kernel(\n    input_ptr,  # Pointer to input tensor\n    grid_ptr,   # Pointer to grid tensor\n    output_ptr, # Pointer to output tensor\n    n_elements, # Number of elements to process\n    H_out,      # Height of the output tensor\n    W_out,      # Width of the output tensor\n    H_in,       # Height of the input tensor\n    W_in,       # Width of the input tensor\n    mode: tl.constexpr,  # Interpolation mode: 0 for 'bilinear', 1 for 'nearest', 2 for 'bicubic'\n    padding_mode: tl.constexpr,  # Padding mode: 0 for 'zeros', 1 for 'border', 2 for 'reflection'\n    align_corners: tl.constexpr,  # Align corners\n    BLOCK_SIZE: tl.constexpr  # Block size for processing\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load grid values\n    grid_x = tl.load(grid_ptr + offsets * 2, mask=mask, other=0.0)\n    grid_y = tl.load(grid_ptr + offsets * 2 + 1, mask=mask, other=0.0)\n\n    # Normalize grid values to [-1, 1]\n    if align_corners:\n        grid_x = (grid_x + 1) * (W_in - 1) / 2\n        grid_y = (grid_y + 1) * (H_in - 1) / 2\n    else:\n        grid_x = (grid_x + 1) * (W_in - 1) / 2\n        grid_y = (grid_y + 1) * (H_in - 1) / 2\n\n    # Apply padding mode\n    if padding_mode == 0:  # 'zeros'\n        grid_x = tl.where((grid_x < 0) | (grid_x > W_in - 1), 0.0, grid_x)\n        grid_y = tl.where((grid_y < 0) | (grid_y > H_in - 1), 0.0, grid_y)\n    elif padding_mode == 1:  # 'border'\n        grid_x = tl.where(grid_x < 0, 0.0, grid_x)\n        grid_x = tl.where(grid_x > W_in - 1, W_in - 1, grid_x)\n        grid_y = tl.where(grid_y < 0, 0.0, grid_y)\n        grid_y = tl.where(grid_y > H_in - 1, H_in - 1, grid_y)\n    elif padding_mode == 2:  # 'reflection'\n        grid_x = tl.where(grid_x < 0, -grid_x, grid_x)\n        grid_x = tl.where(grid_x > W_in - 1, 2 * (W_in - 1) - grid_x, grid_x)\n        grid_y = tl.where(grid_y < 0, -grid_y, grid_y)\n        grid_y = tl.where(grid_y > H_in - 1, 2 * (H_in - 1) - grid_y, grid_y)\n\n    # Convert to integer indices\n    grid_x = grid_x.to(tl.int32)\n    grid_y = grid_y.to(tl.int32)\n\n    # Load input values\n    input_values = tl.load(input_ptr + grid_y * W_in + grid_x, mask=mask, other=0.0)\n\n    # Interpolation\n    if mode == 0:  # 'bilinear'\n        # Bilinear interpolation\n        x0 = grid_x.to(tl.float32)\n        y0 = grid_y.to(tl.float32)\n        x1 = tl.where(grid_x < W_in - 1, grid_x + 1, grid_x)\n        y1 = tl.where(grid_y < H_in - 1, grid_y + 1, grid_y)\n        x1 = x1.to(tl.float32)\n        y1 = y1.to(tl.float32)\n\n        Ia = tl.load(input_ptr + y0 * W_in + x0, mask=mask, other=0.0)\n        Ib = tl.load(input_ptr + y1 * W_in + x0, mask=mask, other=0.0)\n        Ic = tl.load(input_ptr + y0 * W_in + x1, mask=mask, other=0.0)\n        Id = tl.load(input_ptr + y1 * W_in + x1, mask=mask, other=0.0)\n\n        wa = (x1 - grid_x) * (y1 - grid_y)\n        wb = (x1 - grid_x) * (grid_y - y0)\n        wc = (grid_x - x0) * (y1 - grid_y)\n        wd = (grid_x - x0) * (grid_y - y0)\n\n        output_values = wa * Ia + wb * Ib + wc * Ic + wd * Id\n    elif mode == 1:  # 'nearest'\n        output_values = input_values\n    elif mode == 2:  # 'bicubic'\n        # Bicubic interpolation (simplified for brevity)\n        output_values = input_values  # Placeholder for bicubic interpolation\n\n    # Store the result\n    tl.store(output_ptr + offsets, output_values, mask=mask)\n\n# Wrapper function\ndef grid_sample_with_affine(input: torch.Tensor, theta: torch.Tensor, size: torch.Size, mode: str = 'bilinear', padding_mode: str = 'zeros', align_corners: bool = False) -> torch.Tensor:\n    assert input.dim() == 4, \"Input tensor must be 4D (N, C, H_in, W_in)\"\n    assert theta.dim() == 3 and theta.shape[1:] == (2, 3), \"Affine matrix must be of shape (N, 2, 3)\"\n    assert mode in ['bilinear', 'nearest', 'bicubic'], \"Mode must be one of 'bilinear', 'nearest', 'bicubic'\"\n    assert padding_mode in ['zeros', 'border', 'reflection'], \"Padding mode must be one of 'zeros', 'border', 'reflection'\"\n\n    N, C, H_in, W_in = input.shape\n    N, H_out, W_out = size[0], size[2], size[3]\n\n    # Generate the grid\n    grid = F.affine_grid(theta, size, align_corners=align_corners)\n\n    # Flatten the grid and input for Triton kernel\n    grid = grid.view(N, H_out * W_out, 2).contiguous()\n    input = input.view(N, C, H_in * W_in).contiguous()\n\n    # Output tensor\n    output = torch.empty((N, C, H_out, W_out), dtype=input.dtype, device=input.device)\n\n    # Define the grid size for the kernel launch\n    n_elements = N * H_out * W_out\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)\n\n    # Launch the Triton kernel\n    mode_map = {'bilinear': 0, 'nearest': 1, 'bicubic': 2}\n    padding_mode_map = {'zeros': 0, 'border': 1, 'reflection': 2}\n    grid_sample_kernel[grid](\n        input, grid, output.view(N, H_out * W_out, C).contiguous(), n_elements, H_out, W_out, H_in, W_in,\n        mode_map[mode], padding_mode_map[padding_mode], align_corners, BLOCK_SIZE=1024\n    )\n\n    return output\n\n# Example usage\nif __name__ == \"__main__\":\n    N, C, H_in, W_in = 2, 3, 64, 64\n    H_out, W_out = 32, 32\n    input = torch.randn(N, C, H_in, W_in, device='cuda')\n    theta = torch.randn(N, 2, 3, device='cuda')\n    size = torch.Size([N, C, H_out, W_out])\n\n    output = grid_sample_with_affine(input, theta, size", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Moore-Penrose pseudoinverse of a matrix using Singular Value Decomposition (SVD). It decomposes the input matrix A into its singular value components, inverts the non-zero singular values above a certain threshold to avoid numerical instability, and reconstructs the pseudoinverse using these components. Supports input of float, double, cfloat, and cdouble dtypes, and can handle batches of matrices.\nWrapper Entry Information: def pseudoinverse_svd(A, *, full_matrices=True, rcond=1e-15, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Input tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n\nKeyword args:\n    full_matrices (bool, optional): If `True` (default), compute the full SVD. If `False`, compute the reduced SVD.\n    rcond (float, optional): Relative condition number threshold. Singular values smaller than `rcond * largest_singular_value` are set to zero. Default: `1e-15`.\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A^{+} = V^{\\mathrm{H}} \\Sigma^{+} U^{\\mathrm{H}}; \\sigma_i^{+} = \\begin{cases} \\dfrac{1}{\\sigma_i}, & \\text{if } \\sigma_i > \\text{rcond} \\times \\sigma_{\\max} \\\\ 0, & \\text{otherwise} \\end{cases}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Handles batches of matrices\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a custom softmax kernel that computes the row-wise softmax of a matrix. The kernel loads each row of the input matrix into the on-chip SRAM, performs numerical stability operations (subtracting the maximum from each row), applies exponentiation, computes the sum of the exponentiated values, and finally computes the softmax values by dividing the exponentiated values by the sum. The kernel is parallelized over the rows of the matrix, and the result is written back to global memory. A helper function 'softmax' is provided to enqueue the kernel for a given input tensor, with support for automatic block size determination and warp tuning based on the input matrix shape. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row o\n    # f the input matrix\n    softmax_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Moore-Penrose pseudoinverse of a matrix using Singular Value Decomposition (SVD). It decomposes the input matrix A into its singular value components, inverts the non-zero singular values above a certain threshold to avoid numerical instability, and reconstructs the pseudoinverse using these components. Supports input of float, double, cfloat, and cdouble dtypes, and can handle batches of matrices.\nWrapper Entry Information: def pseudoinverse_svd(A, *, full_matrices=True, rcond=1e-15, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Input tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n\nKeyword args:\n    full_matrices (bool, optional): If `True` (default), compute the full SVD. If `False`, compute the reduced SVD.\n    rcond (float, optional): Relative condition number threshold. Singular values smaller than `rcond * largest_singular_value` are set to zero. Default: `1e-15`.\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A^{+} = V^{\\mathrm{H}} \\Sigma^{+} U^{\\mathrm{H}}; \\sigma_i^{+} = \\begin{cases} \\dfrac{1}{\\sigma_i}, & \\text{if } \\sigma_i > \\text{rcond} \\times \\sigma_{\\max} \\\\ 0, & \\text{otherwise} \\end{cases}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Handles batches of matrices\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef pseudoinverse_kernel(\n    out_ptr, u_ptr, s_ptr, v_ptr, s_inv_ptr, m, n, k, rcond, full_matrices: tl.constexpr, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(0)\n    batch_size = tl.num_programs(0)\n    \n    for b in range(batch_size):\n        # Load U, S, and V for the current batch\n        u_batch_ptr = u_ptr + b * m * k\n        v_batch_ptr = v_ptr + b * n * k\n        s_batch_ptr = s_ptr + b * k\n        s_inv_batch_ptr = s_inv_ptr + b * k\n        \n        # Load U and V\n        u = tl.load(u_batch_ptr, mask=tl.arange(0, m * k) < m * k, other=0.0)\n        v = tl.load(v_batch_ptr, mask=tl.arange(0, n * k) < n * k, other=0.0)\n        \n        # Load S and compute S_inv\n        s = tl.load(s_batch_ptr, mask=tl.arange(0, k) < k, other=0.0)\n        s_max = tl.max(s, axis=0)\n        s_inv = tl.where(s > rcond * s_max, 1.0 / s, 0.0)\n        tl.store(s_inv_batch_ptr, s_inv, mask=tl.arange(0, k) < k)\n        \n        # Compute U * S_inv\n        u_s_inv = tl.zeros((m, k), dtype=tl.float32)\n        for i in range(m):\n            for j in range(k):\n                u_s_inv[i, j] = u[i * k + j] * s_inv[j]\n        \n        # Compute V^H * (U * S_inv)\n        out_batch_ptr = out_ptr + b * m * n\n        out = tl.zeros((m, n), dtype=tl.float32)\n        for i in range(m):\n            for j in range(n):\n                for l in range(k):\n                    out[i, j] += u_s_inv[i, l] * v[l * n + j]\n        \n        # Store the result\n        tl.store(out_batch_ptr, out, mask=tl.arange(0, m * n) < m * n)\n\ndef pseudoinverse_svd(A, *, full_matrices=True, rcond=1e-15, out=None) -> torch.Tensor:\n    # Check input tensor shape\n    *batch_dims, m, n = A.shape\n    batch_size = 1\n    for dim in batch_dims:\n        batch_size *= dim\n    \n    # Perform SVD\n    U, S, Vh = torch.linalg.svd(A, full_matrices=full_matrices)\n    \n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty_like(A)\n    \n    # Compute the block size\n    BLOCK_SIZE = triton.next_power_of_2(max(m, n))\n    \n    # Compute the number of warps\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    \n    # Enqueue the kernel\n    pseudoinverse_kernel[(batch_size,)](\n        out, U, S, Vh, out, m, n, min(m, n), rcond, full_matrices, BLOCK_SIZE=BLOCK_SIZE, num_warps=num_warps\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the exponential function to each element in the input tensor and then computes the mean value of the result along the specified dimension or over all elements if no dimension is specified.\nWrapper Entry Information: def exp_mean(input, dim=None, keepdim=False, dtype=None, out=None) -> Tensor\nMath: The combined operation is defined as: out = mean(e^{input}) where the exponential function is defined as: y_{i} = e^{x_{i}}\nother: The function first applies the exponential function to each element of the input tensor and then computes the mean of these exponential values. The function allows specifying dimensions to reduce, whether to keep dimensions, and the data type of the output.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the exponential function to each element in the input tensor and then computes the mean value of the result along the specified dimension or over all elements if no dimension is specified.\nWrapper Entry Information: def exp_mean(input, dim=None, keepdim=False, dtype=None, out=None) -> Tensor\nMath: The combined operation is defined as: out = mean(e^{input}) where the exponential function is defined as: y_{i} = e^{x_{i}}\nother: The function first applies the exponential function to each element of the input tensor and then computes the mean of these exponential values. The function allows specifying dimensions to reduce, whether to keep dimensions, and the data type of the output.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef exp_mean_kernel(input_ptr, output_ptr, n_elements, dim, keepdim, dtype, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Compute the exponential of each element in the block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input_block = tl.load(input_ptr + offsets, mask=mask)\n    exp_block = tl.exp(input_block)\n\n    # Compute the mean of the exponential values\n    mean_value = tl.sum(exp_block, axis=0) / n_elements\n\n    # Store the result\n    if keepdim:\n        output_block = mean_value\n    else:\n        output_block = mean_value[None]  # Reshape to a 1D tensor\n\n    tl.store(output_ptr + pid, output_block, mask=pid < n_elements)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef exp_mean(input, dim=None, keepdim=False, dtype=None, out=None) -> torch.Tensor:\n    if dtype is not None:\n        input = input.to(dtype)\n\n    if dim is None:\n        # Compute the mean over all elements\n        n_elements = input.numel()\n        output = torch.empty(1, device=input.device, dtype=input.dtype)\n        grid = (1,)\n    else:\n        # Compute the mean along the specified dimension\n        if dim < 0:\n            dim = input.dim() + dim\n        n_elements = input.size(dim)\n        output_shape = list(input.shape)\n        if not keepdim:\n            output_shape.pop(dim)\n        else:\n            output_shape[dim] = 1\n        output = torch.empty(output_shape, device=input.device, dtype=input.dtype)\n        grid = (output.numel(),)\n\n    # Launch the Triton kernel\n    exp_mean_kernel[grid](\n        input, output, n_elements, dim, keepdim, input.dtype, BLOCK_SIZE=1024\n    )\n\n    if out is not None:\n        out.copy_(output)\n    else:\n        return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a rank-k approximation of a matrix using its Singular Value Decomposition (SVD). The function retains the top-k singular values and corresponding singular vectors from the SVD of A to form the approximation Ak. This low-rank approximation minimizes the Frobenius norm of the difference between A and Ak among all rank-k matrices. Supports input of float, double, cfloat, and cdouble dtypes, and batches of matrices.\nWrapper Entry Information: def low_rank_svd_approximation(A, k, *, full_matrices=True, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    k (int): Rank of the approximation (must satisfy `1 <= k <= min(m, n)`).\n    full_matrices (bool, optional): Controls whether to compute the full or reduced SVD. Default: `True`.\n\nKeyword args:\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A \\approx A_k = U_k \\Sigma_k V_k^{\\text{H}}; U_k \\in \\mathbb{K}^{m \\times k}; \\Sigma_k \\in \\mathbb{R}^{k \\times k}; V_k^{\\text{H}} \\in \\mathbb{K}^{k \\times n}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Batches of matrices are supported.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a rank-k approximation of a matrix using its Singular Value Decomposition (SVD). The function retains the top-k singular values and corresponding singular vectors from the SVD of A to form the approximation Ak. This low-rank approximation minimizes the Frobenius norm of the difference between A and Ak among all rank-k matrices. Supports input of float, double, cfloat, and cdouble dtypes, and batches of matrices.\nWrapper Entry Information: def low_rank_svd_approximation(A, k, *, full_matrices=True, out=None) -> Tensor\n\nArgs:\n    A (Tensor): Tensor of shape `(*, m, n)` where `*` is zero or more batch dimensions.\n    k (int): Rank of the approximation (must satisfy `1 <= k <= min(m, n)`).\n    full_matrices (bool, optional): Controls whether to compute the full or reduced SVD. Default: `True`.\n\nKeyword args:\n    out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: A \\approx A_k = U_k \\Sigma_k V_k^{\\text{H}}; U_k \\in \\mathbb{K}^{m \\times k}; \\Sigma_k \\in \\mathbb{R}^{k \\times k}; V_k^{\\text{H}} \\in \\mathbb{K}^{k \\times n}\nother: Supports input of float, double, cfloat, and cdouble dtypes; Batches of matrices are supported.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef svd_kernel(A_ptr, U_ptr, S_ptr, Vh_ptr, m, n, k, batch_size, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    if pid >= batch_size:\n        return\n\n    # Pointers for the current batch\n    A_batch_ptr = A_ptr + pid * m * n\n    U_batch_ptr = U_ptr + pid * m * k\n    S_batch_ptr = S_ptr + pid * k\n    Vh_batch_ptr = Vh_ptr + pid * k * n\n\n    # Load the matrix A\n    A = tl.load(A_batch_ptr, eviction_policy=\"evict_last\")\n\n    # Perform SVD\n    U, S, Vh = tl.linalg.svd(A, full_matrices=False)\n\n    # Truncate to rank-k\n    U_k = U[:, :k]\n    S_k = S[:k]\n    Vh_k = Vh[:k, :]\n\n    # Store the results\n    tl.store(U_batch_ptr, U_k)\n    tl.store(S_batch_ptr, S_k)\n    tl.store(Vh_batch_ptr, Vh_k)\n\nimport torch\n\ndef low_rank_svd_approximation(A, k, *, full_matrices=True, out=None) -> torch.Tensor:\n    # Validate inputs\n    if not isinstance(A, torch.Tensor):\n        raise TypeError(\"A must be a torch.Tensor\")\n    if not (1 <= k <= min(A.shape[-2], A.shape[-1])):\n        raise ValueError(\"k must satisfy 1 <= k <= min(m, n)\")\n    \n    # Determine the output shape\n    batch_shape = A.shape[:-2]\n    m, n = A.shape[-2], A.shape[-1]\n    U_shape = (*batch_shape, m, k)\n    S_shape = (*batch_shape, k)\n    Vh_shape = (*batch_shape, k, n)\n    \n    # Allocate output tensors if not provided\n    if out is None:\n        U = torch.empty(U_shape, dtype=A.dtype, device=A.device)\n        S = torch.empty(S_shape, dtype=A.dtype, device=A.device)\n        Vh = torch.empty(Vh_shape, dtype=A.dtype, device=A.device)\n    else:\n        U, S, Vh = out\n        if U.shape != U_shape or S.shape != S_shape or Vh.shape != Vh_shape:\n            raise ValueError(\"Output tensor shapes do not match expected shapes\")\n    \n    # Determine the number of batches\n    batch_size = 1 if len(batch_shape) == 0 else torch.prod(torch.tensor(batch_shape)).item()\n    \n    # Launch the Triton kernel\n    grid = (batch_size,)\n    svd_kernel[grid](A, U, S, Vh, m, n, k, batch_size, BLOCK_SIZE=1024)\n    \n    # Construct the rank-k approximation\n    U_k = U\n    S_k = torch.diag_embed(S)\n    Vh_k = Vh\n    A_k = U_k @ S_k @ Vh_k\n    \n    return A_k\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the minimum value of each row of the input tensor in the given dimension dim, along with the index location of each minimum value found. If keepdim is True, the output tensors retain the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned. The function can also compare two tensors element-wise and return a tensor with the minimum values.\nWrapper Entry Information: min(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) Args: input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Keyword args: out (tuple, optional): the tuple of two output tensors (min, min_indices)\nother: If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a suite of kernel functions for matrix operations. There are four main kernels: `square_kernel` computes the element-wise square of the input matrix. `mean_of_squares_kernel` computes the mean of the squares of each row. `rms_kernel` computes the root mean square of each row. `rms_norm` performs RMS normalization on the input matrix. These kernels leverage triton's parallel execution across rows and efficient memory handling. Each kernel takes in pointers to input/output memory, strides, the number of columns, and a block size to parallelize over. Some kernels also take an epsilon value for numerical stability. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef mean_of_squares_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    mean_output = tl.sum(square_output)/n_cols + eps\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, mean_output, mask=col_offsets < n_cols)\n\n@triton.jit\ndef rms_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, eps, BLOCK_SIZE: tl.constexpr):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    tl.debug_barrier()\n\n    square_output = row * row\n    rms = tl.sqrt(tl.sum(square_output)/n_cols + eps)\n    \n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride # TODO: optimization: always 1 after the reduction\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, rms, mask=col_offsets < n_cols)\n\n\n@triton.jit\ndef rms_norm(output_ptr, input_ptr, weights_ptr, stride, N, eps, DTYPE:tl.constexpr, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    RMS Norm Triton Kernel\n\n    Params:\n        - input_ptr (tensor): Pointer to Input\n        - output_ptr (tensor): Pointer to Output\n        - weights_ptr (tensor): Pointer to Scale applied to the normalized input\n        - stride (int): Stride to be applied when accessing elements in the input and output tensors\n        - N (int): Number of elements to be reduced == input_ptr.shape[-1]\n        - eps (half/float): Epsilon value added to the variance to prevent division by zero\n        - BLOCK_SIZE (constexpr): Size of the block for computation, provided as a compile-time constant\n\n    Usage:\n        _rms_norm[grid, block](x, y, self.w, input_stride , N, eps, BLOCK_SIZE)\n    \"\"\"\n    row = tl.program_id(0)\n    output_ptr += row * stride\n    input_ptr += row * stride\n\n    tmp = 0\n    tmp = tl.zeros([BLOCK_SIZE], dtype=DTYPE)\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        a = tl.load(input_ptr + cols, mask=mask, other=0.0).to(DTYPE)\n        tmp += a * a\n    rms = tl.sqrt(tl.sum(tmp) / N + eps)\n\n    for offset in range(0, N, BLOCK_SIZE):\n        cols = offset + tl.arange(0, BLOCK_SIZE)\n        mask = cols < N\n        x = tl.load(input_ptr + cols, mask=mask, other=0.0, eviction_policy=\"evict_first\").to(DTYPE)\n        w = tl.load(weights_ptr + cols, mask=mask)\n        x_hat = x / rms\n        y = x_hat * w\n        tl.store(output_ptr + cols, y, mask=mask)\n\nclass RMSNormTriton(nn.Module):\n    def __init__(self, dim: int, eps: float = 1e-6):\n        super().__init__()\n        self.eps = eps\n        # The gamma parameter\n        self.weight = nn.Parameter(torch.ones(dim))\n\n    def forward(self, x: torch.Tensor):\n        \"\"\"Generates BxSeqLen tensors of innermost dimension ModelDim.\"\"\"\n        # For use with _square, _mean_of_squares, _rms functions\n        # return self.weight * self._norm(x.float()).type_as(x)\n\n        # For use with _rms_norm function\n        return self._rms_norm(x, self.weight, self.eps).type_as(x)\n\n    def _square(self, x):\n        \"\"\"Square the input tensor element-wise.\"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n        square_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0),\n            n_cols,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor to match the original shape of x\n        y = y.reshape(*x.shape)\n        return y\n\n    def _mean_of_squares(self, x, eps=1e-6):\n        \"\"\"\n        Compute the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The mean of the squares of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms(self, x, eps=1e-6):\n        \"\"\"\n        Compute the square root of the mean of the squares of the input tensor.\n        \n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - eps (float): A small value to add to the denominator for numerical stability\n        \n        Returns:\n            - y (torch.Tensor): The rms of the input tensor of shape (B, SeqLen, 1)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n        \n        # Allocate output\n        # Get the shape of x_reshaped and replace the last dimension with 1\n        # This dimension will be reduced with the calculation of the mean\n        new_shape = (*x_reshaped.shape[:-1], 1)\n\n        # Create a new tensor with the new shape\n        y = torch.empty(new_shape, device=x_reshaped.device, dtype=x_reshaped.dtype)\n    \n        mean_of_squares_kernel[(n_rows, )](\n            y,\n            x_reshaped,\n            x_reshaped.stride(0),\n            y.stride(0), # TODO: optimization: always 1 after the reduction\n            n_cols,\n            eps,\n            BLOCK_SIZE=BLOCK_SIZE,\n        )\n        # Reshape the output tensor, we reduced the last dimension to 1\n        y = y.reshape(*x.shape[:-1], 1)\n        return y\n\n    def _rms_norm(self, x, w, eps):\n        \"\"\"\n        Compute the RMS normalization of the input tensor.\n\n        Params:\n            - x (torch.Tensor): The input tensor of shape (B, SeqLen, ModelDim)\n            - w (torch.Tensor): The gamma parameter of shape (ModelDim)\n            - eps (half/float): A small value to add to the denominator for numerical stability\n\n        Returns:\n            - y (torch.Tensor): The normalized tensor of shape (B, SeqLen, ModelDim)\n        \"\"\"\n        # Flatten the tensor except for the last dimension\n        x_reshaped = x.reshape(-1, x.shape[-1])\n        n_rows, n_cols = x_reshaped.shape\n        M= n_rows\n        N= n_cols\n        # The block size is the smallest power of two greater than the number of columns in `x`\n        BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n        data_type = x.dtype\n        if data_type == torch.float32:\n            data_type = tl.float32\n        elif data_type == torch.float16:\n            data_type = tl.float16\n        elif data_type == torch.int64:\n            data_type = tl.int64\n        else:\n            raise ValueError(f\"Unsupported data type: {data_type}\")\n        \n        # Allocate output\n        y = torch.empty_like(x_reshaped)\n        rms_norm[(M,)](\n            y,\n            x_reshaped, \n            w,\n            x_reshaped.stride(0), N, eps,\n            DTYPE=data_type,\n            BLOCK_SIZE=BLOCK_SIZE\n        )\n            \n        # Reshape the output tensor\n        y = y.reshape(*x.shape)\n        return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the minimum value of each row of the input tensor in the given dimension dim, along with the index location of each minimum value found. If keepdim is True, the output tensors retain the same size as input except in the dimension dim where they are of size 1. Otherwise, dim is squeezed, resulting in the output tensors having 1 fewer dimension than input. If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned. The function can also compare two tensors element-wise and return a tensor with the minimum values.\nWrapper Entry Information: min(input, dim, keepdim=False, *, out=None) -> (Tensor, LongTensor) Args: input (Tensor): the input tensor. dim (int): the dimension to reduce. keepdim (bool): whether the output tensor has :attr:`dim` retained or not. Keyword args: out (tuple, optional): the tuple of two output tensors (min, min_indices)\nother: If there are multiple minimal values in a reduced row, the indices of the first minimal value are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef min_kernel(\n    min_values_ptr, min_indices_ptr, input_ptr, input_row_stride, n_cols, BLOCK_SIZE: tl.constexpr\n):\n    # The rows are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=float('inf'))\n    \n    # Initialize min_value and min_index\n    min_value = tl.full((1,), float('inf'), dtype=tl.float32)\n    min_index = tl.full((1,), -1, dtype=tl.int32)\n    \n    # Find the minimum value and its index\n    for i in range(n_cols):\n        value = row[i]\n        if value < min_value:\n            min_value = value\n            min_index = i\n    \n    # Write back the minimum value and index to DRAM\n    tl.store(min_values_ptr + row_idx, min_value)\n    tl.store(min_indices_ptr + row_idx, min_index)\n\nimport torch\n\ndef min(input, dim, keepdim=False, *, out=None):\n    # Validate input dimensions\n    if dim < 0 or dim >= input.dim():\n        raise ValueError(f\"dim {dim} is out of bounds for input of size {input.size()}\")\n    \n    # Determine the shape of the output tensors\n    output_shape = list(input.size())\n    if not keepdim:\n        output_shape[dim] = 1\n    else:\n        output_shape[dim] = 1\n    \n    # Allocate output tensors\n    if out is None:\n        min_values = torch.empty(output_shape, dtype=input.dtype, device=input.device)\n        min_indices = torch.empty(output_shape, dtype=torch.int64, device=input.device)\n    else:\n        min_values, min_indices = out\n        if min_values.shape != output_shape or min_indices.shape != output_shape:\n            raise ValueError(f\"Output tensors must have shape {output_shape}\")\n    \n    # Flatten the input tensor along the specified dimension\n    input_reshaped = input.view(-1, input.size(dim))\n    n_rows, n_cols = input_reshaped.shape\n    \n    # The block size is the smallest power of two greater than the number of columns in `input_reshaped`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    \n    # Enqueue the kernel\n    min_kernel[(n_rows,)](\n        min_values.view(-1),\n        min_indices.view(-1),\n        input_reshaped.view(-1),\n        input_reshaped.stride(0),\n        n_cols,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    # Reshape the output tensors if keepdim is False\n    if not keepdim:\n        min_values = min_values.squeeze(dim)\n        min_indices = min_indices.squeeze(dim)\n    \n    return min_values, min_indices\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a symmetric matrix multiplication by multiplying matrix `A` with its transpose, scales the result by `alpha`, adds it to matrix `C` scaled by `beta`, and returns the sum of the absolute values of the resulting matrix.\nWrapper Entry Information: symmetric_mm_and_abs_sum(A: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor\nArgs:\n    A (Tensor): Input matrix of shape `(n, m)` for which the symmetric product with its transpose is calculated.\n    C (Tensor): Matrix of the same shape as `alpha * torch.mm(A, A.T)` to accumulate the scaled result.\n    alpha (float): Scaling factor for the matrix product.\n    beta (float): Scaling factor for matrix `C`.\nReturns:\n    Tensor: Scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nMath: 1. `C = alpha * torch.mm(A, A.T) + beta * C`; 2. `asum = torch.sum(torch.abs(C))`\nother: Returns a scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement SmeLU activation function with two kernels: one for forward pass and one for backward pass. The forward kernel takes 5 parameters: input_pointer (pointer to input data), beta (float value for SmeLU), output_pointer (pointer to output data), n_elements (number of elements to process), and BLOCK_SIZE (block size for parallel execution). It computes the SmeLU activation and stores the result. The backward kernel also takes 5 parameters: input_pointer, beta, output_pointer, n_elements, and BLOCK_SIZE. It computes the gradient of the SmeLU activation and stores the result. Wrapper functions _smelu_triton_forward and _smelu_triton_backward are provided to call these kernels with PyTorch tensors. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _smelu_kernel_forward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU forward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    output = tl.where(x >= beta, x, 0.)\n    output = tl.where(tl.abs(x) <= beta, ((x + beta) * (x + beta)) / (4. * beta), output)\n    # Write-back output\n    tl.store(output_pointer + offsets, output, mask=mask)\n\ndef _smelu_triton_forward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU forward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Activation of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_forward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n\n@triton.jit\ndef _smelu_kernel_backward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU backward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    gradient = tl.where(x >= beta, 1., 0.)\n    gradient = tl.where(tl.abs(x) <= beta, 0.5 * (x + beta) / beta, gradient)\n    # Write-back output\n    tl.store(output_pointer + offsets, gradient, mask=mask)\n\ndef _smelu_triton_backward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU backward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Gradient of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_backward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a symmetric matrix multiplication by multiplying matrix `A` with its transpose, scales the result by `alpha`, adds it to matrix `C` scaled by `beta`, and returns the sum of the absolute values of the resulting matrix.\nWrapper Entry Information: symmetric_mm_and_abs_sum(A: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor\nArgs:\n    A (Tensor): Input matrix of shape `(n, m)` for which the symmetric product with its transpose is calculated.\n    C (Tensor): Matrix of the same shape as `alpha * torch.mm(A, A.T)` to accumulate the scaled result.\n    alpha (float): Scaling factor for the matrix product.\n    beta (float): Scaling factor for matrix `C`.\nReturns:\n    Tensor: Scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nMath: 1. `C = alpha * torch.mm(A, A.T) + beta * C`; 2. `asum = torch.sum(torch.abs(C))`\nother: Returns a scalar tensor representing the sum of absolute values of the resulting matrix `C`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for symmetric matrix multiplication and accumulation\n@triton.jit\ndef _symmetric_mm_kernel(\n    A_ptr, C_ptr, alpha: tl.float32, beta: tl.float32,\n    N: tl.int32, M: tl.int32, stride_Am: tl.int32, stride_An: tl.int32,\n    stride_Cm: tl.int32, stride_Cn: tl.int32, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_m = pid * BLOCK_SIZE_M\n\n    # Compute the block of A to load\n    A_block_ptr = A_ptr + block_m * stride_Am\n    A_block = tl.load(A_block_ptr, mask=block_m + tl.arange(0, BLOCK_SIZE_M) < N, other=0.0)\n\n    # Compute the block of C to load\n    C_block_ptr = C_ptr + block_m * stride_Cm\n    C_block = tl.load(C_block_ptr, mask=block_m + tl.arange(0, BLOCK_SIZE_M) < N, other=0.0)\n\n    # Compute the symmetric product A * A.T\n    A_T = tl.trans(A_block)\n    result = tl.dot(A_block, A_T)\n\n    # Scale the result by alpha\n    result *= alpha\n\n    # Scale C by beta\n    C_block *= beta\n\n    # Accumulate the result into C\n    result += C_block\n\n    # Store the result back to C\n    tl.store(C_block_ptr, result, mask=block_m + tl.arange(0, BLOCK_SIZE_M) < N)\n\n# Wrapper function to call the Triton kernel\ndef symmetric_mm_and_abs_sum(A: torch.Tensor, C: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for symmetric matrix multiplication and accumulation.\n    :param A (torch.Tensor): Input matrix of shape `(n, m)`.\n    :param C (torch.Tensor): Matrix of the same shape as `alpha * torch.mm(A, A.T)` to accumulate the scaled result.\n    :param alpha (float): Scaling factor for the matrix product.\n    :param beta (float): Scaling factor for matrix `C`.\n    :return (torch.Tensor): Scalar tensor representing the sum of absolute values of the resulting matrix `C`.\n    \"\"\"\n    # Ensure the input tensors are contiguous\n    A = A.contiguous()\n    C = C.contiguous()\n\n    # Get the dimensions of the input tensors\n    N, M = A.shape\n\n    # Define the block sizes for the Triton kernel\n    BLOCK_SIZE_M = 16\n    BLOCK_SIZE_N = 16\n\n    # Define the grid size for the Triton kernel\n    grid = lambda meta: (triton.cdiv(N, meta['BLOCK_SIZE_M']),)\n\n    # Call the Triton kernel\n    _symmetric_mm_kernel[grid](\n        A, C, alpha, beta,\n        N, M, A.stride(0), A.stride(1),\n        C.stride(0), C.stride(1), BLOCK_SIZE_M, BLOCK_SIZE_N\n    )\n\n    # Compute the sum of absolute values of the resulting matrix C\n    asum = torch.sum(torch.abs(C))\n\n    return asum\n\n# Example usage\nA = torch.randn(10, 10, device='cuda')\nC = torch.randn(10, 10, device='cuda')\nalpha = 0.5\nbeta = 0.5\nresult = symmetric_mm_and_abs_sum(A, C, alpha, beta)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using LU decomposition. The function performs LU decomposition on a given square matrix A and calculates its determinant. It supports matrices over real or complex numbers and can handle batch dimensions. The determinant is computed as the product of the diagonal elements of the upper triangular matrix U from the LU decomposition, adjusted by the sign of the permutation matrix P if pivoting is used. The function assumes A is invertible and supports float, double, cfloat, and cdouble dtypes.\nWrapper Entry Information: determinant_lu(A, *, pivot=True, out=None) -> Tensor; A (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`. out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\det(A) = \\det(P) \\cdot \\prod_{i=1}^{n} U_{ii}; When pivot=False: \\det(A) = \\prod_{i=1}^{n} U_{ii}\nother: This method assumes that A is invertible. If A is singular, the determinant will be zero, and the function may return `inf` or `nan` due to division by zero or numerical instability.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel named square_kernel that takes 6 parameters: output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, and BLOCK_SIZE. The kernel computes the square of each element in the input matrix row-wise using parallelism over rows and writes the result to output_ptr. A function named square is implemented to prepare the arguments and call the kernel, taking a single parameter x which is a 2D tensor. The square function computes an appropriate BLOCK_SIZE based on the number of columns and determines num_warps to launch the kernel. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to square elements of a matrix\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n# Function to call the Triton kernel\ndef square(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n    square_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n\n# Example usage of the kernel\ntorch.manual_seed(0)\nx = torch.randn(1823, 781, device='cuda')\ny_triton = square(x)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix using LU decomposition. The function performs LU decomposition on a given square matrix A and calculates its determinant. It supports matrices over real or complex numbers and can handle batch dimensions. The determinant is computed as the product of the diagonal elements of the upper triangular matrix U from the LU decomposition, adjusted by the sign of the permutation matrix P if pivoting is used. The function assumes A is invertible and supports float, double, cfloat, and cdouble dtypes.\nWrapper Entry Information: determinant_lu(A, *, pivot=True, out=None) -> Tensor; A (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices. pivot (bool, optional): Controls whether to compute the LU decomposition with partial pivoting (`True`) or without pivoting (`False`). Default: `True`. out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\det(A) = \\det(P) \\cdot \\prod_{i=1}^{n} U_{ii}; When pivot=False: \\det(A) = \\prod_{i=1}^{n} U_{ii}\nother: This method assumes that A is invertible. If A is singular, the determinant will be zero, and the function may return `inf` or `nan` due to division by zero or numerical instability.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the determinant of a square matrix using LU decomposition\n@triton.jit\ndef determinant_lu_kernel(\n    output_ptr, input_ptr, input_row_stride, input_col_stride, input_batch_stride,\n    n_rows, n_cols, batch_size, pivot: tl.constexpr, BLOCK_SIZE: tl.constexpr\n):\n    # Get the batch index\n    batch_idx = tl.program_id(0)\n    if batch_idx >= batch_size:\n        return\n\n    # Pointers for the current batch\n    batch_start_ptr = input_ptr + batch_idx * input_batch_stride\n\n    # Initialize the determinant\n    det = tl.float32(1.0) if tl.dtype(input_ptr) == tl.float32 else tl.float64(1.0)\n    if tl.dtype(input_ptr) == tl.complex64:\n        det = tl.complex64(1.0)\n    elif tl.dtype(input_ptr) == tl.complex128:\n        det = tl.complex128(1.0)\n\n    # LU decomposition with or without pivoting\n    for i in range(n_rows):\n        # Load the diagonal element\n        diag_ptr = batch_start_ptr + i * input_row_stride + i * input_col_stride\n        diag = tl.load(diag_ptr)\n\n        # Multiply the diagonal element to the determinant\n        det *= diag\n\n        # If pivoting is used, adjust the determinant by the sign of the permutation matrix P\n        if pivot:\n            # Load the pivot index\n            pivot_ptr = batch_start_ptr + i * input_row_stride + n_cols * input_col_stride\n            pivot_idx = tl.load(pivot_ptr, mask=i < n_rows, other=0)\n            if pivot_idx != i:\n                det = -det\n\n    # Store the result in the output tensor\n    output_batch_ptr = output_ptr + batch_idx\n    tl.store(output_batch_ptr, det)\n\n# Wrapper function to call the Triton kernel\ndef determinant_lu(A, *, pivot=True, out=None):\n    # Get the shape and data type of the input tensor\n    batch_shape = A.shape[:-2]\n    n_rows, n_cols = A.shape[-2:]\n    batch_size = 1 if len(batch_shape) == 0 else torch.prod(torch.tensor(batch_shape)).item()\n    dtype = A.dtype\n\n    # Ensure the input is a square matrix\n    if n_rows != n_cols:\n        raise ValueError(\"Input tensor must be a square matrix.\")\n\n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty(batch_shape, dtype=dtype, device=A.device)\n\n    # Determine the block size\n    BLOCK_SIZE = 128  # Adjust as needed\n\n    # Launch the Triton kernel\n    grid = (batch_size,)\n    determinant_lu_kernel[grid](\n        out.data_ptr(),\n        A.data_ptr(),\n        A.stride(-2),\n        A.stride(-1),\n        A.stride(-len(batch_shape) - 2),\n        n_rows,\n        n_cols,\n        batch_size,\n        pivot,\n        BLOCK_SIZE\n    )\n\n    return out\n\n# Example usage of the kernel\ntorch.manual_seed(0)\nA = torch.randn(2, 3, 3, device='cuda', dtype=torch.float32)\ndet = determinant_lu(A, pivot=True)\nprint(det)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by a Tanh activation function. This combined operation is useful for introducing non-linearity after a linear transformation, helping to capture complex relationships in the data.\nWrapper Entry Information: def tanh_linear(input, weight, bias=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None.\nMath: The combined operation is defined as: out = tanh(linear(input, weight, bias)) where the linear transformation is applied as y = xA^T + b and Tanh activation is applied element-wise as: Tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))\nother: A linear transformation followed by a Tanh activation helps capture complex relationships by introducing non-linearity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define two kernels: `kernel_fwd` for forward pass and `kernel_bwd` for backward pass of a linear layer with optional activation. The `kernel_fwd` function computes the matrix multiplication of inputs with weights, adds bias if provided, and applies an optional activation function. The `kernel_bwd` function computes the gradient of the inputs using the gradient of the output and the weights. The `triton_linear_act` function is a wrapper that manages data preparation and execution of `kernel_fwd`, and `triton_dgrad_act` is a wrapper for `kernel_bwd`. import torch\nimport triton\nimport triton.language as tl\nfrom flash_attn.ops.triton.k_activations import (\n    gelu,\n    gelu_approx,\n    gelu_grad,\n    gelu_approx_grad,\n    squared_relu,\n    squared_relu_grad,\n)\n\n@triton.jit\ndef kernel_fwd(\n    C,  # Pointers to matrices\n    ACT_INPUT,\n    A,\n    B,\n    bias,\n    # Matrix dimensions\n    M,\n    N,\n    K,\n    CACHE_KEY_M,\n    CACHE_KEY_N,\n    CACHE_KEY_K,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_cm,\n    # stride_cn,  # Assume that stride_cn == 1\n    stride_am,\n    stride_ak,\n    stride_bn,\n    stride_bk,\n    # Meta-parameters\n    BLOCK_M: tl.constexpr,\n    GROUP_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    BLOCK_K: tl.constexpr,\n    # split k not used, not performant with activation, kept because early_config_prune is expecting it\n    SPLIT_K: tl.constexpr,\n    EVEN_K: tl.constexpr,\n    A_ROWMAJOR: tl.constexpr,\n    B_COLMAJOR: tl.constexpr,\n    BIAS: tl.constexpr,\n    SAVE_ACT_INPUT: tl.constexpr,\n    ACTIVATION: tl.constexpr,\n):\n    \"\"\"\n    Kernel for computing Out = activation(A x W + C)\n    - Input has shape (M, K)\n    - Weight has shape (K, N)\n    - Bias has shape (N,)\n    - Output has shape (M, N)\n    - ActInputs (optional) has shape (M, N)\n    'ActInputs' optionally saves the A x W + C intermediate for backward computations\n    This kernel will consolidate over K\n    \"\"\"\n    pid = tl.program_id(axis=0)\n\n    grid_m = (M + BLOCK_M - 1) // BLOCK_M\n    grid_n = (N + BLOCK_N - 1) // BLOCK_N\n    # re-order program ID for better L2 performance\n    width = GROUP_M * grid_n\n    group_id = pid // width\n    group_size = min(grid_m - group_id * GROUP_M, GROUP_M)\n    pid_m = group_id * GROUP_M + (pid % group_size)\n    pid_n = (pid % width) // (group_size)\n\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices\n    # for rows (resp. col) of C\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    # trick to avoid masking on M and N axis\n    ram = tl.max_contiguous(tl.multiple_of(rm % M, BLOCK_M), BLOCK_M)\n    rbn = tl.max_contiguous(tl.multiple_of(rn % N, BLOCK_N), BLOCK_N)\n    rk = tl.arange(0, BLOCK_K)\n\n    if A_ROWMAJOR:\n        A = A + (ram[:, None] * stride_am + rk[None, :])\n    else:\n        A = A + (ram[:, None] * stride_am + rk[None, :] * stride_ak)\n    if B_COLMAJOR:\n        B = B + (rk[:, None] + rbn[None, :] * stride_bn)\n    else:\n        B = B + (rk[:, None] * stride_bk + rbn[None, :] * stride_bn)\n\n    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)\n\n    for k in range(K, 0, -BLOCK_K):\n        if EVEN_K:\n            a = tl.load(A)\n            b = tl.load(B)\n        else:\n            a = tl.load(A, mask=rk[None, :] < k, other=0.0)\n            b = tl.load(B, mask=rk[:, None] < k, other=0.0)\n        acc += tl.dot(a, b)\n\n        if A_ROWMAJOR:\n            A += BLOCK_K\n        else:\n            A += BLOCK_K * stride_ak\n        if B_COLMAJOR:\n            B += BLOCK_K\n        else:\n            B += BLOCK_K * stride_bk\n\n    # Putting bias after the matmul (instead of before) is faster, idk why\n    if BIAS:\n        bias = tl.load(bias + rn, mask=rn < N, other=0.0).to(tl.float32)\n        acc += bias[None, :]\n\n    # optional: save the activation inputs\n    if SAVE_ACT_INPUT:\n        # act_in_ptrs = ACT_INPUT + ram[:, None] * stride_cm + rbn[None, :] * stride_cn\n        act_in_ptrs = ACT_INPUT + ram[:, None] * stride_cm + rbn[None, :]\n        tl.store(act_in_ptrs, acc)\n\n    # optional: fused activation (while the data is in shared memory)\n    if ACTIVATION == \"gelu\":\n        acc = gelu(acc)\n    elif ACTIVATION == \"gelu_approx\":\n        acc = gelu_approx(acc)\n    elif ACTIVATION == \"squared_relu\":\n        acc = squared_relu(acc)\n    # rematerialize rm and rn to save registers\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\n    # write back result\n    # C = C + rm[:, None] * stride_cm + rn[None, :] * stride_cn\n    C = C + rm[:, None] * stride_cm + rn[None, :]\n    mask = (rm < M)[:, None] & (rn < N)[None, :]\n    tl.store(C, acc)\n\ndef triton_linear_act(\n    x: torch.Tensor,\n    weight: torch.Tensor,\n    bias: Optional[torch.Tensor] = None,\n    activation: str = \"id\",\n    save_act_input: bool = False,\n) -> torch.Tensor:\n    \"\"\"\n    Compute e = activation(x @ weight.T + bias).\n    This wrapper kicks the `kernel_fwd` Triton kernel\n    :param x: input tensor\n    :param weight: weight matrix\n    :param bias: an optional bias tensor\n    :param activation: Activation name. Needs to be a Triton kernel.\n    :param act_input: an optional tensor to save the activation inputs (for backward)\n    :return: result tensor\n    \"\"\"\n    assert activation in [\"id\", \"gelu\", \"gelu_approx\", \"squared_relu\"]\n\n    batch_shape, n = x.shape[:-1], x.shape[-1]\n    batch_dim = batch_shape.numel()\n    x_reshaped = x.reshape(batch_dim, n)\n\n    if x_reshaped.stride(0) > 1 and x_reshaped.stride(1) > 1:\n        x_reshaped = x_reshaped.contiguous()\n    if weight.stride(0) > 1 and weight.stride(1) > 1:\n        weight = weight.contiguous()\n    bias = bias.contiguous() if bias is not None else None\n\n    assert (\n        x.dtype == weight.dtype\n    ), f\"Input and weight must have the same dtype, got {x.dtype} and {weight.dtype}\"\n    if bias is not None:\n        assert (\n            x.dtype == bias.dtype\n        ), f\"Input and bias must have the same dtype, got {x.dtype} and {bias.dtype}\"\n    assert (\n        x_reshaped.shape[1] == weight.shape[1]\n    ), f\"Incompatible dimensions: {x_reshaped.shape} - {weight.shape}\"\n\n    assert (\n        bias is None or bias.shape[0] == weight.shape[0]\n    ), \"Incompatible dimensions in between weight and bias\"\n\n    M, K = x_reshaped.shape\n    N, K = weight.shape\n\n    output = torch.empty((M, N), device=x.device, dtype=x.dtype)\n    act_input = torch.empty_like(output) if save_act_input else None\n\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (triton.cdiv(M, META[\"BLOCK_M\"]) * triton.cdiv(N, META[\"BLOCK_N\"]),)  # noqa\n\n    kernel_fwd[grid](\n        output,\n        act_input,\n        x_reshaped,\n        weight,  # data ptrs\n        bias if bias is not None else x,  # auto skip bias if not present\n        M,  # shapes\n        N,\n        K,\n        M // 32,  # key for triton cache (limit number of compilations)\n        N // 32,\n        K // 32,\n        stride_cm=output.stride(0),  # strides\n        # stride_cn=output.stride(1),\n        stride_am=x_reshaped.stride(0),\n        stride_ak=x_reshaped.stride(1),\n        stride_bk=weight.stride(1),\n        stride_bn=weight.stride(0),\n        BIAS=bias is not None,  # optional fused bias\n        SAVE_ACT_INPUT=save_act_input,  # optional save activation inputs\n        ACTIVATION=activation,  # optional fused activation\n        A_ROWMAJOR=x_reshaped.stride(1) == 1,\n        B_COLMAJOR=weight.stride(1) == 1,\n        GROUP_M=8,  # speed optimization: group the programs\n    )\n\n    if not save_act_input:\n        return output.reshape(*batch_shape, output.shape[-1])\n    else:\n        return (\n            output.reshape(*batch_shape, output.shape[-1]),\n            act_input.reshape(*batch_shape, act_input.shape[-1]),\n        )\n\n@triton.jit\ndef kernel_bwd(\n    C,  # Pointers to matrices\n    ACT_INPUT,\n    A,\n    B,\n    # Matrix dimensions\n    M,\n    N,\n    K,\n    CACHE_KEY_M,\n    CACHE_KEY_N,\n    CACHE_KEY_K,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_cm,\n    # stride_cn,  # Assume that stride_cn == 1\n    stride_am,\n    stride_ak,\n    stride_bk,\n    stride_bn,\n    # Meta-parameters\n    BLOCK_M: tl.constexpr,\n    GROUP_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    BLOCK_K: tl.constexpr,\n    # split k not used, not performant with activation, kept because early_config_prune is expecting it\n    SPLIT_K: tl.constexpr,\n    EVEN_K: tl.constexpr,\n    ACTIVATION: tl.constexpr,\n):\n    \"\"\"\n    Kernel for computing Out = activation(A x W + C)\n    - Input has shape (M, K)\n    - Weight has shape (K, N)\n    - Output has shape (M, N)\n    - ActInputs (optional) has shape (M, N)\n    'ActInputs' optionally saves the A x W + C intermediate for backward computations\n    This kernel will consolidate over K\n    \"\"\"\n    pid = tl.program_id(axis=0)\n\n    grid_m = (M + BLOCK_M - 1) // BLOCK_M\n    grid_n = (N + BLOCK_N - 1) // BLOCK_N\n    # re-order program ID for better L2 performance\n    width = GROUP_M * grid_n\n    group_id = pid // width\n    group_size = min(grid_m - group_id * GROUP_M, GROUP_M)\n    pid_m = group_id * GROUP_M + (pid % group_size)\n    pid_n = (pid % width) // (group_size)\n\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices\n    # for rows (resp. col) of C\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    # trick to avoid masking on M and N axis\n    ram = tl.max_contiguous(tl.multiple_of(rm % M, BLOCK_M), BLOCK_M)\n    rbn = tl.max_contiguous(tl.multiple_of(rn % N, BLOCK_N), BLOCK_N)\n    rk = tl.arange(0, BLOCK_K)\n\n    A = A + (ram[:, None] * stride_am + rk[None, :] * stride_ak)\n    B = B + (rk[:, None] * stride_bk + rbn[None, :] * stride_bn)\n\n    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)\n\n    for k in range(K, 0, -BLOCK_K):\n        if EVEN_K:\n            a = tl.load(A)\n            b = tl.load(B)\n        else:\n            a = tl.load(A, mask=rk[None, :] < k, other=0.0)\n            b = tl.load(B, mask=rk[:, None] < k, other=0.0)\n        acc += tl.dot(a, b)\n\n        A += BLOCK_K * stride_ak\n        B += BLOCK_K * stride_bk\n\n    # optional: fused activation (while the data is in shared memory)\n    if ACTIVATION != \"id\":\n        act_in_ptrs = ACT_INPUT + ram[:, None] * stride_cm + rbn[None, :]\n        act_input = tl.load(act_in_ptrs).to(acc.dtype)\n    if ACTIVATION == \"gelu\":\n        acc *= gelu_grad(act_input)\n    elif ACTIVATION == \"gelu_approx\":\n        acc *= gelu_approx_grad(act_input)\n    elif ACTIVATION == \"squared_relu\":\n        acc *= squared_relu_grad(act_input)\n\n    # rematerialize rm and rn to save registers\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\n    # write back result\n    C = C + rm[:, None] * stride_cm + rn[None, :]\n    mask = (rm < M)[:, None] & (rn < N)[None, :]\n    tl.store(C, acc, mask=mask)\n\ndef triton_dgrad_act(\n    grad_output: torch.Tensor,\n    weight: torch.Tensor,\n    activation: str = \"id\",\n    act_input: Optional[torch.Tensor] = None,\n) -> torch.Tensor:\n    \"\"\"\n    Compute e = activation(grad_output @ weight + bias).\n    This wrapper kicks the `kernel_bwd` Triton kernel\n    :param grad_output: input tensor\n    :param weight: weight matrix\n    :param activation: Activation name. Needs to be a Triton kernel.\n    :param act_input: an optional tensor to save the activation inputs (for backward)\n    :return: result tensor\n    \"\"\"\n    assert activation in [\"id\", \"gelu\", \"gelu_approx\", \"squared_relu\"]\n\n    batch_shape, n = grad_output.shape[:-1], grad_output.shape[-1]\n    batch_dim = batch_shape.numel()\n    grad_output_reshaped = grad_output.reshape(batch_dim, n)\n\n    if grad_output_reshaped.stride(0) > 1 and grad_output_reshaped.stride(1) > 1:\n        grad_output_reshaped = grad_output_reshaped.contiguous()\n    if weight.stride(0) > 1 and weight.stride(1) > 1:\n        weight = weight.contiguous()\n\n    assert (\n        grad_output.dtype == weight.dtype\n    ), f\"grad_output and weight must have the same dtype, got {grad_output.dtype} and {weight.dtype}\"\n    assert (\n        grad_output_reshaped.shape[1] == weight.shape[0]\n    ), f\"Incompatible dimensions: {grad_output_reshaped.shape} - {weight.shape}\"\n    if activation != \"id\":\n        assert act_input is not None, f\"act_input is required for activation {activation}\"\n\n    # M, N, K in bwd are different from M, N, K in fwd\n    M, K = grad_output_reshaped.shape\n    K, N = weight.shape\n\n    grad_input = torch.empty((M, N), device=grad_output.device, dtype=grad_output.dtype)\n\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (triton.cdiv(M, META[\"BLOCK_M\"]) * triton.cdiv(N, META[\"BLOCK_N\"]),)  # noqa\n\n    kernel_bwd[grid](\n        grad_input,\n        act_input,\n        grad_output_reshaped,\n        weight,  # data ptrs\n        M,  # shapes\n        N,\n        K,\n        M // 32,  # key for triton cache (limit number of compilations)\n        N // 32,\n        K // 32,\n        stride_cm=grad_input.stride(0),  # strides\n        # stride_cn=grad_input.stride(1),\n        stride_am=grad_output_reshaped.stride(0),\n        stride_ak=grad_output_reshaped.stride(1),\n        stride_bk=weight.stride(0),\n        stride_bn=weight.stride(1),\n        ACTIVATION=activation,  # optional fused activation\n        GROUP_M=8,  # speed optimization: group the programs\n    )\n\n    return grad_input.reshape(*batch_shape, grad_input.shape[-1])\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor followed by a Tanh activation function. This combined operation is useful for introducing non-linearity after a linear transformation, helping to capture complex relationships in the data.\nWrapper Entry Information: def tanh_linear(input, weight, bias=None) -> Tensor: input (Tensor): The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions. weight (Tensor): The weight matrix of shape `(out_features, in_features)`. bias (Tensor, optional): The optional bias tensor of shape `(out_features)`. Default: None.\nMath: The combined operation is defined as: out = tanh(linear(input, weight, bias)) where the linear transformation is applied as y = xA^T + b and Tanh activation is applied element-wise as: Tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))\nother: A linear transformation followed by a Tanh activation helps capture complex relationships by introducing non-linearity.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef kernel_tanh_linear(\n    C,  # Pointers to matrices\n    A,\n    B,\n    bias,\n    # Matrix dimensions\n    M,\n    N,\n    K,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_cm,\n    stride_am,\n    stride_ak,\n    stride_bn,\n    stride_bk,\n    # Meta-parameters\n    BLOCK_M: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n    BLOCK_K: tl.constexpr,\n    SPLIT_K: tl.constexpr,\n    EVEN_K: tl.constexpr,\n    BIAS: tl.constexpr,\n):\n    \"\"\"\n    Kernel for computing Out = tanh(A x W + C)\n    - Input has shape (M, K)\n    - Weight has shape (K, N)\n    - Bias has shape (N,)\n    - Output has shape (M, N)\n    This kernel will consolidate over K\n    \"\"\"\n    pid = tl.program_id(axis=0)\n\n    grid_m = (M + BLOCK_M - 1) // BLOCK_M\n    grid_n = (N + BLOCK_N - 1) // BLOCK_N\n    # re-order program ID for better L2 performance\n    width = grid_m * grid_n\n    group_id = pid // width\n    group_size = min(grid_m - group_id * grid_m, grid_m)\n    pid_m = group_id * grid_m + (pid % group_size)\n    pid_n = (pid % width) // (group_size)\n\n    # now compute the block that each program will go through\n    # rm (resp. rn) denotes a range of indices\n    # for rows (resp. col) of C\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n    # trick to avoid masking on M and N axis\n    ram = tl.max_contiguous(tl.multiple_of(rm % M, BLOCK_M), BLOCK_M)\n    rbn = tl.max_contiguous(tl.multiple_of(rn % N, BLOCK_N), BLOCK_N)\n    rk = tl.arange(0, BLOCK_K)\n\n    A = A + (ram[:, None] * stride_am + rk[None, :] * stride_ak)\n    B = B + (rk[:, None] * stride_bk + rbn[None, :] * stride_bn)\n\n    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)\n\n    for k in range(K, 0, -BLOCK_K):\n        if EVEN_K:\n            a = tl.load(A)\n            b = tl.load(B)\n        else:\n            a = tl.load(A, mask=rk[None, :] < k, other=0.0)\n            b = tl.load(B, mask=rk[:, None] < k, other=0.0)\n        acc += tl.dot(a, b)\n\n        A += BLOCK_K * stride_ak\n        B += BLOCK_K * stride_bk\n\n    # Adding bias if provided\n    if BIAS:\n        bias = tl.load(bias + rn, mask=rn < N, other=0.0).to(tl.float32)\n        acc += bias[None, :]\n\n    # Apply Tanh activation\n    acc = tl.tanh(acc)\n\n    # rematerialize rm and rn to save registers\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\n    # write back result\n    C = C + rm[:, None] * stride_cm + rn[None, :]\n    mask = (rm < M)[:, None] & (rn < N)[None, :]\n    tl.store(C, acc, mask=mask)\n\ndef tanh_linear(input: torch.Tensor, weight: torch.Tensor, bias: Optional[torch.Tensor] = None) -> torch.Tensor:\n    \"\"\"\n    Applies a linear transformation to the input tensor followed by a Tanh activation function.\n    \n    :param input: The input tensor of shape `(*, in_features)`, where `*` represents any number of additional dimensions.\n    :param weight: The weight matrix of shape `(out_features, in_features)`.\n    :param bias: The optional bias tensor of shape `(out_features)`. Default: None.\n    :return: The result tensor of shape `(*, out_features)`.\n    \"\"\"\n    batch_shape, in_features = input.shape[:-1], input.shape[-1]\n    batch_dim = batch_shape.numel()\n    input_reshaped = input.reshape(batch_dim, in_features)\n\n    if input_reshaped.stride(0) > 1 and input_reshaped.stride(1) > 1:\n        input_reshaped = input_reshaped.contiguous()\n    if weight.stride(0) > 1 and weight.stride(1) > 1:\n        weight = weight.contiguous()\n    bias = bias.contiguous() if bias is not None else None\n\n    assert (\n        input.dtype == weight.dtype\n    ), f\"Input and weight must have the same dtype, got {input.dtype} and {weight.dtype}\"\n    if bias is not None:\n        assert (\n            input.dtype == bias.dtype\n        ), f\"Input and bias must have the same dtype, got {input.dtype} and {bias.dtype}\"\n    assert (\n        input_reshaped.shape[1] == weight.shape[1]\n    ), f\"Incompatible dimensions: {input_reshaped.shape} - {weight.shape}\"\n\n    assert (\n        bias is None or bias.shape[0] == weight.shape[0]\n    ), \"Incompatible dimensions in between weight and bias\"\n\n    M, K = input_reshaped.shape\n    N, K = weight.shape\n\n    output = torch.empty((M, N), device=input.device, dtype=input.dtype)\n\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (triton.cdiv(M, META[\"BLOCK_M\"]) * triton.cdiv(N, META[\"BLOCK_N\"]),)  # noqa\n\n    kernel_tanh_linear[grid](\n        output,\n        input_reshaped,\n        weight,  # data ptrs\n        bias if bias is not None else input,  # auto skip bias if not present\n        M,  # shapes\n        N,\n        K,\n        stride_cm=output.stride(0),  # strides\n        stride_am=input_reshaped.stride(0),\n        stride_ak=input_reshaped.stride(1),\n        stride_bk=weight.stride(1),\n        stride_bn=weight.stride(0),\n        BIAS=bias is not None,  # optional fused bias\n        BLOCK_M=128,  # block size for M\n        BLOCK_N=128,  # block size for N\n        BLOCK_K=32,  # block size for K\n        SPLIT_K=1,  # split K not used, not performant with activation, kept because early_config_prune is expecting it\n        EVEN_K=True,  # assume K is a multiple of BLOCK_K\n    )\n\n    return output.reshape(*batch_shape, output.shape[-1])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the sum of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: def sum(input, dim, keepdim=False, *, dtype=None) -> Tensor; input (Tensor): the input tensor.; dim (int or tuple of ints, optional): the dimension or dimensions to reduce.; keepdim (bool): whether the output tensor has :attr:`dim` retained or not.; dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\nother: If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'mean_dim_kernel' that computes the mean of a tensor along specified dimensions. The kernel takes 5 parameters: X (input tensor), Mean (output tensor), M (number of rows), N (number of columns), and two block sizes BLOCK_M and BLOCK_N. The function 'mean_dim' prepares the input tensor by compressing specified dimensions, calculates the grid size, and launches the kernel. It takes 4 parameters: x (input tensor), dim (dimensions to reduce), keepdim (whether to keep reduced dimensions), and dtype (data type of the output). import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mean_dim_kernel(X, Mean, M, N, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n    # Map the program id to the row of X it should compute.\n    pid = tl.program_id(0) * BLOCK_M + tl.arange(0, BLOCK_M)[:, None] \n    X = X + pid * N\n    Mean = Mean + pid\n    row_mask = pid < M\n\n    # Compute mean\n    _mean = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n    for off in range(0, N, BLOCK_N):\n        cols = off + tl.arange(0, BLOCK_N)[None, :]\n        col_mask = cols < N\n        mask = row_mask and col_mask\n\n        a = tl.load(X + cols, mask, other=0.0).to(tl.float32)\n        _mean += a\n    mean = tl.sum(_mean, axis=1) / N\n    mean = mean[:, None]\n    tl.store(Mean, mean, row_mask)\n\ndef dim_compress(inp: torch.Tensor, dims):\n    if isinstance(dims, int):\n        dims = [dims]\n    dim = inp.ndim\n    stride = inp.stride()\n    batch_dim = [i for i in range(dim) if i not in dims]\n    sorted_reduction_dim = sorted(dims, key=lambda x: stride[x], reverse=True)\n    order = batch_dim + sorted_reduction_dim\n    return inp.permute(order).contiguous()\n\ndef mean_dim(x, dim, keepdim=False, *, dtype=None):\n  if dtype is None:\n    dtype = x.dtype\n  if dim is None:\n    out = mean.mean(x, dtype=dtype)\n    if not keepdim:\n      out = out.reshape([1]*x.ndim)\n    return out\n  \n  shape = list(x.shape)\n  if isinstance(dim, int):\n     dim = [dim]\n  dim = [d % x.ndim for d in dim]\n  x = dim_compress(x, dim)\n  N = 1\n  for i in dim:\n    N *= shape[i]\n    shape[i] = 1\n  M = x.numel() // N\n  out = torch.empty(shape, dtype=dtype, device=x.device)\n  grid = lambda META: (triton.cdiv(M, META[\"BLOCK_M\"]),)\n\n  with torch.cuda.device(x.device):\n    mean_dim_kernel[grid](x, out, M, N, BLOCK_M=8, BLOCK_N=8)\n  if not keepdim:\n    out = out.squeeze(dim)\n  return out\n\nb = torch.randn(2, 3, 4, 5, device=\"cuda\")\nprint(mean_dim(b, [1, 2]))\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns the sum of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\nWrapper Entry Information: def sum(input, dim, keepdim=False, *, dtype=None) -> Tensor; input (Tensor): the input tensor.; dim (int or tuple of ints, optional): the dimension or dimensions to reduce.; keepdim (bool): whether the output tensor has :attr:`dim` retained or not.; dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\nother: If dim is a list of dimensions, reduce over all of them. If keepdim is True, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sum_dim_kernel(X, Sum, M, N, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n    # Map the program id to the row of X it should compute.\n    pid = tl.program_id(0) * BLOCK_M + tl.arange(0, BLOCK_M)[:, None]\n    X = X + pid * N\n    Sum = Sum + pid\n    row_mask = pid < M\n\n    # Compute sum\n    _sum = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n    for off in range(0, N, BLOCK_N):\n        cols = off + tl.arange(0, BLOCK_N)[None, :]\n        col_mask = cols < N\n        mask = row_mask & col_mask\n\n        a = tl.load(X + cols, mask, other=0.0).to(tl.float32)\n        _sum += a\n    sum_val = tl.sum(_sum, axis=1)\n    sum_val = sum_val[:, None]\n    tl.store(Sum, sum_val, row_mask)\n\ndef dim_compress(inp: torch.Tensor, dims):\n    if isinstance(dims, int):\n        dims = [dims]\n    dim = inp.ndim\n    stride = inp.stride()\n    batch_dim = [i for i in range(dim) if i not in dims]\n    sorted_reduction_dim = sorted(dims, key=lambda x: stride[x], reverse=True)\n    order = batch_dim + sorted_reduction_dim\n    return inp.permute(order).contiguous()\n\ndef sum(input, dim, keepdim=False, *, dtype=None):\n    if dtype is None:\n        dtype = input.dtype\n    if dim is None:\n        out = input.sum(dtype=dtype)\n        if not keepdim:\n            out = out.reshape([1] * input.ndim)\n        return out\n\n    shape = list(input.shape)\n    if isinstance(dim, int):\n        dim = [dim]\n    dim = [d % input.ndim for d in dim]\n    input = dim_compress(input, dim)\n    N = 1\n    for i in dim:\n        N *= shape[i]\n        shape[i] = 1\n    M = input.numel() // N\n    out_shape = shape if keepdim else [s for i, s in enumerate(shape) if i not in dim]\n    out = torch.empty(out_shape, dtype=dtype, device=input.device)\n    grid = lambda META: (triton.cdiv(M, META[\"BLOCK_M\"]),)\n\n    with torch.cuda.device(input.device):\n        sum_dim_kernel[grid](input, out, M, N, BLOCK_M=8, BLOCK_N=8)\n    return out\n\n# Example usage\nb = torch.randn(2, 3, 4, 5, device=\"cuda\")\nprint(sum(b, [1, 2]))\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Creates a one-dimensional tensor of size 'steps' whose values are evenly spaced from base^start to base^end, inclusive, on a logarithmic scale with a specified base. The tensor values are generated in a logarithmic progression from base^start to base^end using the specified number of steps.\nWrapper Entry Information: logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n    base (float, optional): base of the logarithm function. Default: 10.0.\n\nKeyword arguments:\n    out (Tensor, optional): the output tensor.\n    dtype (torch.dtype, optional): the data type to perform the computation in. Default: if None, uses the global default dtype (see torch.get_default_dtype()) when both start and end are real, and corresponding complex dtype when either is complex.\n    layout (torch.layout, optional): the desired layout of returned Tensor. Default: torch.strided.\n    device (torch.device, optional): the desired device of returned tensor. Default: if None, uses the current device for the default tensor type (see torch.set_default_device). device will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.\nMath: (\text{base}^{\text{start}}, \text{base}^{(\text{start} + \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \\ldots, \text{base}^{(\text{start} + (\text{steps} - 2) * \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \text{base}^{\text{end}})\nother: From PyTorch 1.11, the 'steps' argument is required. Use steps=100 to restore the previous behavior. The function allows specifying various properties of the output tensor such as dtype, layout, and device.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel 'full_kernel' that fills a tensor with a specified value. The kernel takes four parameters: a pointer to the output tensor, the total number of elements, the fill value, and the block size. The function 'full' wraps this kernel to create a tensor of a given size and fill it with the specified value, using optional parameters for data type and device. import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel to fill a tensor with a specified value\n@triton.jit(do_not_specialize=[\"fill_value\"])\ndef full_kernel(\n    output_ptr,  # Pointer to the output tensor\n    n_elements,  # Total number of elements in the tensor\n    fill_value,  # Value to fill the tensor with\n    BLOCK_SIZE: tl.constexpr,  # Size of each block\n):\n    pid = tl.program_id(axis=0)  # Program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Start index for the current block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Offsets for the current block\n    mask = offsets < n_elements  # Mask to ensure we don't write out of bounds\n    tl.store(output_ptr + offsets, fill_value, mask=mask)  # Store the fill value\n\n# Function to create a tensor filled with a specified value using the Triton kernel\ndef full(size, fill_value, *, dtype=None, layout=None, device=None, pin_memory=None):\n    if dtype is None:\n        dtype = torch.get_default_dtype()  # Use default dtype if not specified\n    if device is None:\n        device = torch.device(\"cuda\")  # Use CUDA device if not specified\n\n    out = torch.empty(size, device=device, dtype=dtype)  # Create an empty tensor\n    N = volume(size)  # Calculate the total number of elements\n    grid_fn = lambda meta: (triton.cdiv(N, meta[\"BLOCK_SIZE\"]),)  # Define grid size\n    with torch.cuda.device(device):\n        full_kernel[grid_fn](out, N, fill_value, BLOCK_SIZE=1024)  # Launch the kernel\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Creates a one-dimensional tensor of size 'steps' whose values are evenly spaced from base^start to base^end, inclusive, on a logarithmic scale with a specified base. The tensor values are generated in a logarithmic progression from base^start to base^end using the specified number of steps.\nWrapper Entry Information: logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n\nArgs:\n    start (float or Tensor): the starting value for the set of points. If `Tensor`, it must be 0-dimensional\n    end (float or Tensor): the ending value for the set of points. If `Tensor`, it must be 0-dimensional\n    steps (int): size of the constructed tensor\n    base (float, optional): base of the logarithm function. Default: 10.0.\n\nKeyword arguments:\n    out (Tensor, optional): the output tensor.\n    dtype (torch.dtype, optional): the data type to perform the computation in. Default: if None, uses the global default dtype (see torch.get_default_dtype()) when both start and end are real, and corresponding complex dtype when either is complex.\n    layout (torch.layout, optional): the desired layout of returned Tensor. Default: torch.strided.\n    device (torch.device, optional): the desired device of returned tensor. Default: if None, uses the current device for the default tensor type (see torch.set_default_device). device will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.\nMath: (\text{base}^{\text{start}}, \text{base}^{(\text{start} + \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \\ldots, \text{base}^{(\text{start} + (\text{steps} - 2) * \frac{\text{end} - \text{start}}{ \text{steps} - 1})}, \text{base}^{\text{end}})\nother: From PyTorch 1.11, the 'steps' argument is required. Use steps=100 to restore the previous behavior. The function allows specifying various properties of the output tensor such as dtype, layout, and device.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to generate logspace values\n@triton.jit\ndef logspace_kernel(\n    output_ptr,  # Pointer to the output tensor\n    start,  # Starting value\n    end,  # Ending value\n    steps,  # Number of steps\n    base,  # Base of the logarithm\n    BLOCK_SIZE: tl.constexpr  # Size of each block\n):\n    pid = tl.program_id(axis=0)  # Program ID for the current block\n    block_start = pid * BLOCK_SIZE  # Start index for the current block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Offsets for the current block\n    mask = offsets < steps  # Mask to ensure we don't write out of bounds\n\n    # Compute the logspace values\n    step_size = (end - start) / (steps - 1)\n    values = base ** (start + step_size * offsets)\n    tl.store(output_ptr + offsets, values, mask=mask)  # Store the values\n\n# Function to create a tensor with logspace values using the Triton kernel\ndef logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False):\n    if dtype is None:\n        dtype = torch.get_default_dtype()  # Use default dtype if not specified\n    if device is None:\n        device = torch.device(\"cuda\")  # Use CUDA device if not specified\n\n    if out is not None:\n        if out.shape != (steps,):\n            raise ValueError(\"Output tensor shape must match the number of steps\")\n        out = out\n    else:\n        out = torch.empty(steps, dtype=dtype, layout=layout, device=device, requires_grad=requires_grad)\n\n    # Launch the kernel\n    grid_fn = lambda meta: (triton.cdiv(steps, meta[\"BLOCK_SIZE\"]),)\n    with torch.cuda.device(device):\n        logspace_kernel[grid_fn](out, start, end, steps, base, BLOCK_SIZE=1024)\n\n    return out\n\n# Example usage\nstart = 0.0\nend = 3.0\nsteps = 10\nbase = 10.0\nresult = logspace(start, end, steps, base)\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the triangular system of linear equations Ax = b, where A is a triangular matrix. Then, adds a scaled version of the vector y to the solution x. The operations performed are: 1. Solve the triangular system Ax = b using torch.linalg.solve_triangular with A as an upper triangular matrix. 2. Add the scaled vector alpha * y to the solution x.\nWrapper Entry Information: def solve_and_add_scaled_vector(A: torch.Tensor, b: torch.Tensor, y: torch.Tensor, alpha: float) -> torch.Tensor: A (Tensor): A triangular matrix of shape `(n, n)`. b (Tensor): Right-hand side vector or matrix of shape `(n,)` or `(n, k)`. y (Tensor): Vector to be scaled and added, must have shape `(n,)` or broadcastable to `(n,)`. alpha (float): Scaling factor for the vector y.\nMath: x = torch.linalg.solve_triangular(A, b, upper=True)\nx += alpha * y\nother: The function assumes A is an upper triangular matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create kernels that compute the upper triangular part of matrices. The 'triu_kernel' function takes 7 parameters: input matrix pointer (X), output matrix pointer (Y), number of rows (M), number of columns (N), diagonal offset (diagonal), row block size (M_BLOCK_SIZE), and column block size (N_BLOCK_SIZE). It computes the upper triangular elements for a 2D matrix. The 'triu_batch_kernel' function takes 8 parameters: input matrix batch pointer (X), output matrix batch pointer (Y), number of matrices (batch), number of elements in each matrix (MN), number of columns (N), diagonal offset (diagonal), batch block size (BATCH_BLOCK_SIZE), and matrix element block size (MN_BLOCK_SIZE). It computes the upper triangular elements for a batch of matrices. The 'triu' function handles input tensors of 2D or higher dimensions, calling the appropriate kernel based on the tensor dimensions. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the upper triangular part of a 2D matrix\n@triton.jit\ndef triu_kernel(\n    X,  # Pointer to the input matrix\n    Y,  # Pointer to the output matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    diagonal,  # Diagonal offset\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    X += row * N\n    Y += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        x = tl.load(X + cols, mask, other=0.0)\n        y = tl.where(row + diagonal <= cols, x, 0.0)\n        tl.store(Y + cols, y, mask=mask)\n\n# Triton kernel to compute the upper triangular part for batched matrices\n@triton.jit\ndef triu_batch_kernel(\n    X,  # Pointer to the input matrix batch\n    Y,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    MN,  # Number of elements in each matrix (flattened)\n    N,  # Number of columns in each matrix\n    diagonal,  # Diagonal offset\n    BATCH_BLOCK_SIZE: tl.constexpr,  # Block size for batch processing\n    MN_BLOCK_SIZE: tl.constexpr,  # Block size for elements within a matrix\n):\n    batch_id = tl.program_id(0)\n    mn_id = tl.program_id(1)\n    row = batch_id * BATCH_BLOCK_SIZE + tl.arange(0, BATCH_BLOCK_SIZE)[:, None]\n    batch_mask = row < batch\n    X += row * MN\n    Y += row * MN\n\n    cols = mn_id * MN_BLOCK_SIZE + tl.arange(0, MN_BLOCK_SIZE)[None, :]\n    mn_mask = cols < MN\n    mask = batch_mask and mn_mask\n    x = tl.load(X + cols, mask, other=0.0)\n    m = cols // N\n    n = cols % N\n    y = tl.where(m + diagonal <= n, x, 0.0)\n    tl.store(Y + cols, y, mask=mask)\n\n# Function to compute the upper triangular part of a matrix or batch of matrices\ndef triu(A, diagonal=0):\n    A = A.contiguous()\n    out = torch.empty_like(A)\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    M, N = A.shape[-2:]\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            triu_kernel[grid](A, out, M, N, diagonal, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            batch = int(torch.numel(A) / M / N)\n            B = A.view(batch, -1)\n            grid = lambda meta: (\n                triton.cdiv(batch, meta[\"BATCH_BLOCK_SIZE\"]),\n                triton.cdiv(M * N, meta[\"MN_BLOCK_SIZE\"]),\n            )\n            triu_batch_kernel[grid](B, out, batch, M * N, N, diagonal, BATCH_BLOCK_SIZE=32, MN_BLOCK_SIZE=8)\n            out = out.view(A.shape)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Solves the triangular system of linear equations Ax = b, where A is a triangular matrix. Then, adds a scaled version of the vector y to the solution x. The operations performed are: 1. Solve the triangular system Ax = b using torch.linalg.solve_triangular with A as an upper triangular matrix. 2. Add the scaled vector alpha * y to the solution x.\nWrapper Entry Information: def solve_and_add_scaled_vector(A: torch.Tensor, b: torch.Tensor, y: torch.Tensor, alpha: float) -> torch.Tensor: A (Tensor): A triangular matrix of shape `(n, n)`. b (Tensor): Right-hand side vector or matrix of shape `(n,)` or `(n, k)`. y (Tensor): Vector to be scaled and added, must have shape `(n,)` or broadcastable to `(n,)`. alpha (float): Scaling factor for the vector y.\nMath: x = torch.linalg.solve_triangular(A, b, upper=True)\nx += alpha * y\nother: The function assumes A is an upper triangular matrix.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\n\ndef solve_and_add_scaled_vector(A: torch.Tensor, b: torch.Tensor, y: torch.Tensor, alpha: float) -> torch.Tensor:\n    \"\"\"\n    Solves the triangular system of linear equations Ax = b, where A is an upper triangular matrix.\n    Then, adds a scaled version of the vector y to the solution x.\n    \n    Parameters:\n    A (Tensor): A triangular matrix of shape (n, n).\n    b (Tensor): Right-hand side vector or matrix of shape (n,) or (n, k).\n    y (Tensor): Vector to be scaled and added, must have shape (n,) or broadcastable to (n,).\n    alpha (float): Scaling factor for the vector y.\n    \n    Returns:\n    Tensor: The solution x with the scaled vector y added.\n    \"\"\"\n    # Solve the triangular system Ax = b\n    x = torch.linalg.solve_triangular(A, b, upper=True)\n    \n    # Add the scaled vector alpha * y to the solution x\n    x += alpha * y\n    \n    return x\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by pixel shuffle upscaling to rearrange the spatial dimensions. This function sequentially applies a 2D convolution operation and then rearranges the elements of the convolution output to increase the spatial resolution by the upscale_factor.\nWrapper Entry Information: def pixel_shuffle_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, upscale_factor=2) -> torch.Tensor: Input tensor of shape (minibatch, in_channels, iH, iW). Convolution filter tensor of shape (out_channels, in_channels/groups, kH, kW). Optional bias tensor of shape (out_channels). Stride of the convolving kernel. Padding added to all four sides of the input. Spacing between kernel elements. Number of blocked connections from input channels to output channels. Factor by which to increase spatial resolution.\nother: The function first applies a 2D convolution and then uses pixel shuffle to upscale the spatial dimensions by the given upscale_factor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution followed by pixel shuffle upscaling to rearrange the spatial dimensions. This function sequentially applies a 2D convolution operation and then rearranges the elements of the convolution output to increase the spatial resolution by the upscale_factor.\nWrapper Entry Information: def pixel_shuffle_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, upscale_factor=2) -> torch.Tensor: Input tensor of shape (minibatch, in_channels, iH, iW). Convolution filter tensor of shape (out_channels, in_channels/groups, kH, kW). Optional bias tensor of shape (out_channels). Stride of the convolving kernel. Padding added to all four sides of the input. Spacing between kernel elements. Number of blocked connections from input channels to output channels. Factor by which to increase spatial resolution.\nother: The function first applies a 2D convolution and then uses pixel shuffle to upscale the spatial dimensions by the given upscale_factor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for 2D convolution\n@triton.jit\ndef conv2d_kernel(\n    input_ptr, output_ptr, weight_ptr, bias_ptr, stride, padding, dilation, groups,\n    minibatch, in_channels, iH, iW, out_channels, kH, kW, upscale_factor,\n    BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr, BLOCK_SIZE_C: tl.constexpr\n):\n    pid = tl.program_id(0)\n    num_blocks_h = (iH + 2 * padding - dilation * (kH - 1) - 1) // stride + 1\n    num_blocks_w = (iW + 2 * padding - dilation * (kW - 1) - 1) // stride + 1\n    num_blocks = num_blocks_h * num_blocks_w\n    block_idx_h = pid // num_blocks_w\n    block_idx_w = pid % num_blocks_w\n\n    block_start_h = block_idx_h * BLOCK_SIZE_H\n    block_start_w = block_idx_w * BLOCK_SIZE_W\n\n    for group in range(groups):\n        for out_c in range(group * out_channels // groups, (group + 1) * out_channels // groups):\n            for in_c in range(group * in_channels // groups, (group + 1) * in_channels // groups):\n                for kh in range(kH):\n                    for kw in range(kW):\n                        for bh in range(BLOCK_SIZE_H):\n                            for bw in range(BLOCK_SIZE_W):\n                                h = block_start_h + bh * stride - padding + kh * dilation\n                                w = block_start_w + bw * stride - padding + kw * dilation\n                                if 0 <= h < iH and 0 <= w < iW:\n                                    input_idx = (pid * BLOCK_SIZE_H * BLOCK_SIZE_W + bh * BLOCK_SIZE_W + bw) * in_channels + in_c\n                                    weight_idx = (out_c * in_channels * kH * kW + in_c * kH * kW + kh * kW + kw)\n                                    output_idx = (pid * BLOCK_SIZE_H * BLOCK_SIZE_W + bh * BLOCK_SIZE_W + bw) * out_channels + out_c\n                                    output_ptr[output_idx] += input_ptr[input_idx] * weight_ptr[weight_idx]\n\n    if bias_ptr is not None:\n        for out_c in range(out_channels):\n            for bh in range(BLOCK_SIZE_H):\n                for bw in range(BLOCK_SIZE_W):\n                    output_idx = (pid * BLOCK_SIZE_H * BLOCK_SIZE_W + bh * BLOCK_SIZE_W + bw) * out_channels + out_c\n                    output_ptr[output_idx] += bias_ptr[out_c]\n\n# Triton kernel for pixel shuffle\n@triton.jit\ndef pixel_shuffle_kernel(\n    input_ptr, output_ptr, minibatch, in_channels, iH, iW, upscale_factor,\n    BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_start_h = pid // (iW * upscale_factor)\n    block_start_w = (pid % (iW * upscale_factor)) // upscale_factor\n    block_start_c = (pid % (iW * upscale_factor)) % upscale_factor\n\n    for bh in range(BLOCK_SIZE_H):\n        for bw in range(BLOCK_SIZE_W):\n            h = block_start_h + bh\n            w = block_start_w + bw\n            c = block_start_c\n            if 0 <= h < iH and 0 <= w < iW:\n                input_idx = (pid * BLOCK_SIZE_H * BLOCK_SIZE_W + bh * BLOCK_SIZE_W + bw) * in_channels + c\n                output_idx = (pid * BLOCK_SIZE_H * BLOCK_SIZE_W + bh * BLOCK_SIZE_W + bw) * in_channels * upscale_factor * upscale_factor + c * upscale_factor * upscale_factor + h * upscale_factor + w\n                output_ptr[output_idx] = input_ptr[input_idx]\n\n# Wrapper function\ndef pixel_shuffle_conv2d(input: torch.Tensor, weight: torch.Tensor, bias=None, stride=1, padding=0, dilation=1, groups=1, upscale_factor=2) -> torch.Tensor:\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == weight.device, \"Input and weight must be on the same CUDA device.\"\n\n    minibatch, in_channels, iH, iW = input.shape\n    out_channels, in_channels_per_group, kH, kW = weight.shape\n    assert in_channels == in_channels_per_group * groups, \"Input channels must match the weight dimensions.\"\n    assert out_channels % groups == 0, \"Out channels must be divisible by groups.\"\n\n    oH = (iH + 2 * padding - dilation * (kH - 1) - 1) // stride + 1\n    oW = (iW + 2 * padding - dilation * (kW - 1) - 1) // stride + 1\n\n    # Output shape after convolution\n    conv_output = torch.empty((minibatch, out_channels, oH, oW), device=device)\n\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n    BLOCK_SIZE_C = 16\n    num_blocks_h = (oH + BLOCK_SIZE_H - 1) // BLOCK_SIZE_H\n    num_blocks_w = (oW + BLOCK_SIZE_W - 1) // BLOCK_SIZE_W\n    grid = (num_blocks_h * num_blocks_w,)\n\n    conv2d_kernel[grid](\n        input, conv_output, weight, bias, stride, padding, dilation, groups,\n        minibatch, in_channels, iH, iW, out_channels, kH, kW, upscale_factor,\n        BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C\n    )\n\n    # Output shape after pixel shuffle\n    shuffle_output = torch.empty((minibatch, out_channels // (upscale_factor ** 2), oH * upscale_factor, oW * upscale_factor), device=device)\n\n    num_blocks_h = (oH * upscale_factor + BLOCK_SIZE_H - 1) // BLOCK_SIZE_H\n    num_blocks_w = (oW * upscale_factor + BLOCK_SIZE_W - 1) // BLOCK_SIZE_W\n    grid = (num_blocks_h * num_blocks_w,)\n\n    pixel_shuffle_kernel[grid](\n        conv_output, shuffle_output, minibatch, out_channels, oH, oW, upscale_factor,\n        BLOCK_SIZE_H, BLOCK_SIZE_W\n    )\n\n    return shuffle_output\n\nimport torch\n\n# Test data\ninput = torch.randn(2, 3, 16, 16).cuda()\nweight = torch.randn(12, 3, 3, 3).cuda()\nbias = torch.randn(12).cuda()\n\n# Call the function\noutput = pixel_shuffle_conv2d(input, weight, bias, stride=1, padding=1, dilation=1, groups=1, upscale_factor=2)\n\n# Print the output shape\nprint(output.shape)  # Expected: (2, 3, 32, 32)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product `y = alpha * torch.mv(A, x) + beta * y` and then returns the dot product `torch.dot(y, x)`. The function first computes a scaled matrix-vector product and updates `y`, then calculates the dot product of the updated `y` with `x`. It requires an input matrix `A` of shape `(n, m)`, an input vector `x` of shape `(m,)`, and a target vector `y` of shape `(n,)` that is modified in-place. The scalar `alpha` is a multiplier for `torch.mv(A, x)`, while `beta` is a multiplier for `y`.\nWrapper Entry Information: def matrix_vector_dot(A: Tensor, x: Tensor, y: Tensor, alpha: float, beta: float) -> Tensor: \nArgs:\n    A (Tensor): The input matrix of shape `(n, m)`.\n    x (Tensor): The input vector of shape `(m,)`.\n    y (Tensor): The target vector to be modified, of shape `(n,)`.\n    alpha (float): Scalar multiplier for `torch.mv(A, x)`.\n    beta (float): Scalar multiplier for `y`.\nMath: y = alpha * torch.mv(A, x) + beta * y; result = torch.dot(y, x)\nother: The function modifies the `y` vector in-place and calculates a dot product after the update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a generalized matrix-vector multiplication (GEMV) where the kernel (gemv_kernel_g64) computes a dot product of input vectors and quantized weights, dequantizing using scaling factors and minimums for 64-sized groups. The inputs, weights, scales, and mins are provided as pointers. The function gemv_fwd is a Python wrapper for launching this kernel and requires inputs like bit-width, group size, and quantization information. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef gemv_kernel_g64(inputs_ptr, qw_ptr, mn_ptr, \n                    scale_ptr, output_ptr,\n                    IC: tl.constexpr, OC: tl.constexpr, bit: tl.constexpr, \n                    OC_PER_PH: tl.constexpr, PACK_FACTOR: tl.constexpr, BLOCK_SIZE):\n    \"\"\"\n    Computes GEMV (group_size = 64).\n\n    Args:\n    inputs: vector of shape [batch_size, IC];\n    qw: matrix of shape [OC, IC / 8];\n    output: vector of shape [OC];\n    mn: matrix of shape [OC, NG];\n    scale: matrix of shape [OC, NG];\n\n    Notes:\n    One cannot infer group_size from the shape of scaling factors.\n    the second dimension is rounded up to a multiple of PACK_FACTOR.\n    \"\"\"\n    group_size = 64\n    oc_idx = tl.program_id(axis=0) * OC_PER_PH + tl.arange(0, OC_PER_PH)\n    batch_idx = tl.program_id(axis=1)\n    num_groups = IC // group_size\n    num_groups_packed = tl.cdiv(num_groups, PACK_FACTOR)\n    weight_w = IC // PACK_FACTOR\n    num = 0xFF >> (8-bit)\n    accumulator = tl.zeros((OC_PER_PH,), dtype=tl.float32)\n    for group_idx in range(0, num_groups):\n        scale = tl.load(scale_ptr + oc_idx[:, None] * num_groups + group_idx)\n        mn = tl.load(mn_ptr + oc_idx[:, None] * num_groups + group_idx)\n        cur_qw_ptr = qw_ptr + oc_idx[:, None] * weight_w + group_idx * (64 // PACK_FACTOR) + tl.arange(0, 64 // PACK_FACTOR)[None, :]\n        qw = tl.load(cur_qw_ptr)\n        for i in range(PACK_FACTOR):\n            w_fp = qw & num\n            w_fp = w_fp * scale + mn\n            qw = qw >> bit\n            cur_inp_ptr = inputs_ptr + batch_idx * IC + group_idx * 64 + i + tl.arange(0, 64 // PACK_FACTOR)[None, :] * PACK_FACTOR\n            cur_input = tl.load(cur_inp_ptr)\n            accumulator += tl.sum(cur_input * w_fp, 1)\n    ptr = output_ptr + oc_idx + batch_idx * OC\n    tl.store(ptr, accumulator)\n\ndef gemv_fwd(bit, group_size, inp, qweight, mn, scale):\n    B, IC = inp.shape\n    OC = qweight.shape[0]\n    BLOCK_SIZE = 32\n    OC_PER_PH = 32\n    PACK_FACTOR = 32 // bit\n    assert group_size == 64\n    output = torch.empty((B, OC), device=inp.device, dtype=torch.float16)\n    grid = lambda META: (\n        triton.cdiv(OC, META['OC_PER_PH']), B\n    )\n    gemv_kernel_g64[grid](inp, qweight, mn, scale, output, \n                       IC, OC, bit, OC_PER_PH, PACK_FACTOR, BLOCK_SIZE)\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the matrix-vector product `y = alpha * torch.mv(A, x) + beta * y` and then returns the dot product `torch.dot(y, x)`. The function first computes a scaled matrix-vector product and updates `y`, then calculates the dot product of the updated `y` with `x`. It requires an input matrix `A` of shape `(n, m)`, an input vector `x` of shape `(m,)`, and a target vector `y` of shape `(n,)` that is modified in-place. The scalar `alpha` is a multiplier for `torch.mv(A, x)`, while `beta` is a multiplier for `y`.\nWrapper Entry Information: def matrix_vector_dot(A: Tensor, x: Tensor, y: Tensor, alpha: float, beta: float) -> Tensor: \nArgs:\n    A (Tensor): The input matrix of shape `(n, m)`.\n    x (Tensor): The input vector of shape `(m,)`.\n    y (Tensor): The target vector to be modified, of shape `(n,)`.\n    alpha (float): Scalar multiplier for `torch.mv(A, x)`.\n    beta (float): Scalar multiplier for `y`.\nMath: y = alpha * torch.mv(A, x) + beta * y; result = torch.dot(y, x)\nother: The function modifies the `y` vector in-place and calculates a dot product after the update.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for matrix-vector product and update\n@triton.jit\ndef matrix_vector_product_kernel(\n    A_ptr, x_ptr, y_ptr, alpha, beta,\n    M: tl.constexpr, N: tl.constexpr, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < M\n    y_offsets = offsets\n\n    # Load y into a vector\n    y = tl.load(y_ptr + y_offsets, mask=mask, other=0.0)\n\n    # Initialize accumulator\n    acc = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for n in range(0, N, BLOCK_SIZE):\n        a_offsets = pid * N * BLOCK_SIZE + n + tl.arange(0, BLOCK_SIZE)\n        x_offsets = n + tl.arange(0, BLOCK_SIZE)\n        a_mask = a_offsets < M * N\n        x_mask = x_offsets < N\n\n        # Load A and x\n        a = tl.load(A_ptr + a_offsets, mask=a_mask, other=0.0)\n        x = tl.load(x_ptr + x_offsets, mask=x_mask, other=0.0)\n\n        # Perform the matrix-vector product\n        acc += a * x\n\n    # Scale the accumulator by alpha\n    acc *= alpha\n\n    # Update y with the scaled product and beta * y\n    y = acc + beta * y\n\n    # Store the updated y\n    tl.store(y_ptr + y_offsets, y, mask=mask)\n\n# Python wrapper function\ndef matrix_vector_dot(A: torch.Tensor, x: torch.Tensor, y: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    assert A.dim() == 2, \"A must be a 2D tensor\"\n    assert x.dim() == 1, \"x must be a 1D tensor\"\n    assert y.dim() == 1, \"y must be a 1D tensor\"\n    assert A.shape[1] == x.shape[0], \"A's second dimension must match x's first dimension\"\n    assert A.shape[0] == y.shape[0], \"A's first dimension must match y's first dimension\"\n\n    M, N = A.shape\n    BLOCK_SIZE = 128  # Adjust block size as needed\n\n    # Launch the kernel\n    grid = (triton.cdiv(M, BLOCK_SIZE),)\n    matrix_vector_product_kernel[grid](\n        A, x, y, alpha, beta, M, N, BLOCK_SIZE\n    )\n\n    # Compute the dot product of the updated y with x\n    result = torch.dot(y, x)\n    return result\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Gaussian Error Linear Units (GELU) activation on the input tensor, then returns the minimum value along the specified dimension(s) or over all elements if no dimension is specified. The function supports two methods for computing GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: min_gelu(input, dim=None, keepdim=False, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. If ``None``, returns the minimum of all elements. keepdim (bool, optional): Whether the output tensor retains :attr:`dim` as size 1. Default is ``False``. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out = min(GELU(input))\n\nGELU(x) = x * \u03a6(x) if approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) if approximate is 'tanh'\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Gaussian Error Linear Units (GELU) activation on the input tensor, then returns the minimum value along the specified dimension(s) or over all elements if no dimension is specified. The function supports two methods for computing GELU: exact and approximate using 'tanh'.\nWrapper Entry Information: min_gelu(input, dim=None, keepdim=False, approximate='none', out=None) -> Tensor: input (Tensor): The input tensor. dim (int, optional): The dimension to reduce. If ``None``, returns the minimum of all elements. keepdim (bool, optional): Whether the output tensor retains :attr:`dim` as size 1. Default is ``False``. approximate (str, optional): The approximation method for GELU. Default is 'none'. out (Tensor, optional): The output tensor.\nMath: out = min(GELU(input))\n\nGELU(x) = x * \u03a6(x) if approximate is 'none'\nGELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3))) if approximate is 'tanh'\nother: Returns a namedtuple (values, indices) if dim is specified, otherwise returns the minimum value tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, tanh, sqrt, pow\n\n# Kernel for computing GELU using the exact method (error function)\n@triton.jit\ndef gelu_none_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    tl.store(Y + offsets, x_gelu, mask=mask)\n\n# Kernel for computing GELU using the approximate method (tanh)\n@triton.jit\ndef gelu_tanh_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    x_gelu = 0.5 * x_fp32 * (1 + tanh(sqrt(2.0 / 3.141592653589793) * (x_fp32 + 0.044715 * pow(x_fp32, 3))))\n    tl.store(Y + offsets, x_gelu, mask=mask)\n\nimport torch\nimport triton\nimport triton.language as tl\nfrom collections import namedtuple\n\ndef min_gelu(input, dim=None, keepdim=False, approximate='none', out=None):\n    # Determine the size of the input tensor\n    N = input.numel()\n    \n    # Allocate output tensor for GELU results\n    gelu_output = torch.empty_like(input)\n    \n    # Determine the appropriate kernel based on the approximation method\n    if approximate == 'none':\n        kernel = gelu_none_kernel\n    elif approximate == 'tanh':\n        kernel = gelu_tanh_kernel\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    \n    # Launch the kernel to compute GELU\n    grid = (N + 1024 - 1) // 1024\n    kernel[grid, 1024](input, gelu_output, N, BLOCK_SIZE=1024)\n    \n    # Compute the minimum value along the specified dimension(s)\n    if dim is not None:\n        result = torch.min(gelu_output, dim=dim, keepdim=keepdim)\n        if out is not None:\n            out.copy_(result.values)\n            return result\n        else:\n            return result\n    else:\n        result = torch.min(gelu_output)\n        if out is not None:\n            out.copy_(result)\n            return out\n        else:\n            return result\n\n# Example usage\ninput_tensor = torch.randn(4, 4)\nresult = min_gelu(input_tensor, dim=1, keepdim=True, approximate='none')\nprint(result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Takes the power of each element in input with exponent and returns a tensor with the result. exponent can be either a single float number or a Tensor with the same number of elements as input. If exponent is a scalar value, the operation applied is out_i = x_i ^ exponent. If exponent is a tensor, the operation applied is out_i = x_i ^ exponent_i. When exponent is a tensor, the shapes of input and exponent must be broadcastable.\nWrapper Entry Information: pow(input, exponent, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. exponent (float or tensor): the exponent value; Keyword args: out (Tensor, optional): the output tensor.\nMath: out_i = x_i ^ exponent (for scalar exponent)\nout_i = x_i ^ exponent_i (for tensor exponent)\nother: The operation supports both scalar and tensor exponents. When exponent is a tensor, its shape must be broadcastable with the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax kernel that computes the softmax activation function row-wise on a 2D tensor. The kernel is parameterized by input/output pointers, strides, and block size. A wrapper function prepares the input tensor, determines block size and number of warps, and launches the kernel. import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # Get the row index for the current program/thread\n    row_idx = tl.program_id(0)\n    # Compute the starting pointer for the input row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # Generate column offsets within the block\n    col_offsets = tl.arange(0, BLOCK_SIZE) \n    # Compute the input pointers for the current block\n    input_ptrs = row_start_ptr + col_offsets \n    # Load the row from global memory into SRAM with masking for out-of-bounds\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract the maximum value in the row for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Calculate the numerator as the exponent of the shifted row\n    num = tl.exp(row_minus_max)\n    # Calculate the denominator as the sum of the numerators\n    den = tl.sum(num, axis=0)\n    # Calculate the softmax output\n    output = num / den\n    # Compute the starting pointer for the output row\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    # Compute the output pointers for the current block\n    output_ptrs = output_row_start_ptr + col_offsets\n    # Store the softmax output back to global memory\n    tl.store(output_ptrs, output, mask=col_offsets < n_cols) \n\ndef softmax(x: torch.Tensor):\n    # Print the shape of the input tensor\n    print(x.shape)\n    # Extract the number of rows and columns from the input tensor shape\n    n_rows, n_cols = x.shape\n    # Determine the block size for Triton kernel\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Set the number of warps based on the block size\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Create an empty tensor for the output with the same shape as input\n    y = torch.empty_like(x)\n    # Ensure that the input and output tensors are on CUDA device\n    assert x.is_cuda and y.is_cuda\n    # Launch the Triton kernel\n    softmax_kernel[(n_rows, )](y, x, x.stride(0), y.stride(0), n_cols, num_warps=num_warps, BLOCK_SIZE=BLOCK_SIZE)\n    # Return the computed softmax result\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Takes the power of each element in input with exponent and returns a tensor with the result. exponent can be either a single float number or a Tensor with the same number of elements as input. If exponent is a scalar value, the operation applied is out_i = x_i ^ exponent. If exponent is a tensor, the operation applied is out_i = x_i ^ exponent_i. When exponent is a tensor, the shapes of input and exponent must be broadcastable.\nWrapper Entry Information: pow(input, exponent, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. exponent (float or tensor): the exponent value; Keyword args: out (Tensor, optional): the output tensor.\nMath: out_i = x_i ^ exponent (for scalar exponent)\nout_i = x_i ^ exponent_i (for tensor exponent)\nother: The operation supports both scalar and tensor exponents. When exponent is a tensor, its shape must be broadcastable with the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for the pow operation\n@triton.jit\ndef pow_kernel(\n    output_ptr, input_ptr, exponent_ptr, input_n_elements, exponent_n_elements, \n    input_strides, exponent_strides, BLOCK_SIZE: tl.constexpr\n):\n    # Get the program ID\n    pid = tl.program_id(0)\n    # Compute the range of elements for this program\n    block_start = pid * BLOCK_SIZE\n    block_end = min(block_start + BLOCK_SIZE, input_n_elements)\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    \n    # Load input and exponent values\n    input_offsets = offsets * input_strides\n    input_values = tl.load(input_ptr + input_offsets, mask=offsets < input_n_elements, other=0.0)\n    \n    if exponent_n_elements == 1:\n        # Scalar exponent\n        exponent_value = tl.load(exponent_ptr)\n        output_values = tl.math.pow(input_values, exponent_value)\n    else:\n        # Tensor exponent\n        exponent_offsets = offsets * exponent_strides\n        exponent_values = tl.load(exponent_ptr + exponent_offsets, mask=offsets < exponent_n_elements, other=0.0)\n        output_values = tl.math.pow(input_values, exponent_values)\n    \n    # Store the result\n    output_offsets = offsets * input_strides\n    tl.store(output_ptr + output_offsets, output_values, mask=offsets < input_n_elements)\n\n# Wrapper function for the pow operation\ndef pow(input: torch.Tensor, exponent, *, out=None) -> torch.Tensor:\n    # Ensure input is a tensor\n    assert isinstance(input, torch.Tensor)\n    \n    # Handle scalar exponent\n    if isinstance(exponent, (int, float)):\n        exponent = torch.tensor([exponent], dtype=input.dtype, device=input.device)\n    \n    # Ensure exponent is a tensor\n    assert isinstance(exponent, torch.Tensor)\n    \n    # Ensure input and exponent are on the same device\n    assert input.device == exponent.device\n    \n    # Ensure the shapes are broadcastable\n    if exponent.numel() > 1:\n        assert input.shape == exponent.shape, \"Input and exponent shapes must be broadcastable\"\n    \n    # Determine the number of elements\n    input_n_elements = input.numel()\n    exponent_n_elements = exponent.numel()\n    \n    # Determine the strides\n    input_strides = input.stride(0)\n    exponent_strides = exponent.stride(0)\n    \n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(max(input_n_elements, exponent_n_elements))\n    \n    # Create the output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape, \"Output tensor shape must match input tensor shape\"\n    \n    # Ensure the tensors are on the same device\n    assert input.is_cuda and exponent.is_cuda and out.is_cuda\n    \n    # Launch the Triton kernel\n    pow_kernel[(input_n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE](\n        out, input, exponent, input_n_elements, exponent_n_elements, \n        input_strides, exponent_strides, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by max pooling and then applies the ReLU activation function element-wise to the pooled result. This combined operation is often used in convolutional neural networks (CNNs) for feature extraction, downsampling, and adding non-linearity.\nWrapper Entry Information: relu_max_pool2d_conv2d(input, weight, bias=None, conv_stride=1, conv_padding=0, conv_dilation=1, conv_groups=1, pool_kernel_size=2, pool_stride=None, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False) -> Tensor: input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`. weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`. bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None. conv_stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. conv_padding (int, tuple, or string, optional): Padding added to all sides of the input in convolution. Default: 0. conv_dilation (int or tuple, optional): The spacing between kernel elements in convolution. Default: 1. conv_groups (int, optional): Number of blocked connections from input channels to output channels in convolution. Default: 1. pool_kernel_size (int or tuple): The size of the pooling region in max pooling. pool_stride (int or tuple, optional): The stride of the pooling operation. Default: `pool_kernel_size`. pool_padding (int or tuple, optional): Padding added to all sides of the input in max pooling. Default: 0. pool_dilation (int or tuple, optional): The stride between elements within a sliding window in max pooling. Default: 1. pool_ceil_mode (bool, optional): If True, uses `ceil` instead of `floor` to compute output shape. Default: False. inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: \n    \\text{out} = \\text{ReLU}(\\text{MaxPool2D}(\\text{conv2d}(\\text{input})))\n\nwhere the ReLU function is applied element-wise as:\n\n    \\text{ReLU}(x) = \\max(0, x)\nother: The function is typically used in CNNs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over the input tensor, followed by max pooling and then applies the ReLU activation function element-wise to the pooled result. This combined operation is often used in convolutional neural networks (CNNs) for feature extraction, downsampling, and adding non-linearity.\nWrapper Entry Information: relu_max_pool2d_conv2d(input, weight, bias=None, conv_stride=1, conv_padding=0, conv_dilation=1, conv_groups=1, pool_kernel_size=2, pool_stride=None, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False) -> Tensor: input (Tensor): The input tensor of shape `(minibatch, in_channels, iH, iW)`. weight (Tensor): The convolution filters of shape `(out_channels, in_channels / groups, kH, kW)`. bias (Tensor, optional): Optional bias tensor of shape `(out_channels)`. Default: None. conv_stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. conv_padding (int, tuple, or string, optional): Padding added to all sides of the input in convolution. Default: 0. conv_dilation (int or tuple, optional): The spacing between kernel elements in convolution. Default: 1. conv_groups (int, optional): Number of blocked connections from input channels to output channels in convolution. Default: 1. pool_kernel_size (int or tuple): The size of the pooling region in max pooling. pool_stride (int or tuple, optional): The stride of the pooling operation. Default: `pool_kernel_size`. pool_padding (int or tuple, optional): Padding added to all sides of the input in max pooling. Default: 0. pool_dilation (int or tuple, optional): The stride between elements within a sliding window in max pooling. Default: 1. pool_ceil_mode (bool, optional): If True, uses `ceil` instead of `floor` to compute output shape. Default: False. inplace (bool, optional): If True, performs ReLU in-place. Default: False.\nMath: \n    \\text{out} = \\text{ReLU}(\\text{MaxPool2D}(\\text{conv2d}(\\text{input})))\n\nwhere the ReLU function is applied element-wise as:\n\n    \\text{ReLU}(x) = \\max(0, x)\nother: The function is typically used in CNNs.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef conv2d_maxpool_relu_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    B, C, H, W, out_C, out_H, out_W,\n    conv_kH, conv_kW, conv_stride, conv_padding, conv_dilation, conv_groups,\n    pool_kH, pool_kW, pool_stride, pool_padding, pool_dilation, pool_ceil_mode,\n    BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr, BLOCK_SIZE_C: tl.constexpr\n):\n    pid = tl.program_id(0)\n    batch_id = pid // (out_H * out_W)\n    h = (pid % (out_H * out_W)) // out_W\n    w = (pid % (out_H * out_W)) % out_W\n\n    offset_output = batch_id * out_C * out_H * out_W + h * out_W + w\n    output_block_ptr = output_ptr + offset_output * BLOCK_SIZE_C\n\n    for c in range(0, out_C, BLOCK_SIZE_C):\n        output_block = tl.zeros((BLOCK_SIZE_C,), dtype=tl.float32)\n        for kh in range(conv_kH):\n            for kw in range(conv_kW):\n                for ic in range(C // conv_groups):\n                    input_h = h * pool_stride + kh * conv_dilation - conv_padding\n                    input_w = w * pool_stride + kw * conv_dilation - conv_padding\n                    input_h = max(0, min(H - 1, input_h))\n                    input_w = max(0, min(W - 1, input_w))\n\n                    input_block_ptr = input_ptr + batch_id * C * H * W + ic * H * W + input_h * W + input_w\n                    weight_block_ptr = weight_ptr + c * (C // conv_groups) * conv_kH * conv_kW + ic * conv_kH * conv_kW + kh * conv_kW + kw\n\n                    input_block = tl.load(input_block_ptr, mask=input_h < H and input_w < W, other=0.0)\n                    weight_block = tl.load(weight_block_ptr)\n\n                    output_block += input_block * weight_block\n\n        if bias_ptr is not None:\n            bias_block_ptr = bias_ptr + c\n            bias_block = tl.load(bias_block_ptr)\n            output_block += bias_block\n\n        output_block = tl.max(output_block, 0.0)  # ReLU\n\n        tl.store(output_block_ptr + c, output_block, mask=c < out_C)\n\n# Python Wrapper Function\ndef relu_max_pool2d_conv2d(\n    input, weight, bias=None, conv_stride=1, conv_padding=0, conv_dilation=1, conv_groups=1,\n    pool_kernel_size=2, pool_stride=None, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False\n):\n    if pool_stride is None:\n        pool_stride = pool_kernel_size\n\n    B, C, H, W = input.shape\n    out_C, _, conv_kH, conv_kW = weight.shape\n\n    if isinstance(conv_stride, int):\n        conv_stride = (conv_stride, conv_stride)\n    if isinstance(conv_padding, int):\n        conv_padding = (conv_padding, conv_padding)\n    if isinstance(conv_dilation, int):\n        conv_dilation = (conv_dilation, conv_dilation)\n\n    if isinstance(pool_kernel_size, int):\n        pool_kernel_size = (pool_kernel_size, pool_kernel_size)\n    if isinstance(pool_stride, int):\n        pool_stride = (pool_stride, pool_stride)\n    if isinstance(pool_padding, int):\n        pool_padding = (pool_padding, pool_padding)\n    if isinstance(pool_dilation, int):\n        pool_dilation = (pool_dilation, pool_dilation)\n\n    out_H = (H + 2 * conv_padding[0] - conv_dilation[0] * (conv_kH - 1) - 1) // conv_stride[0] + 1\n    out_W = (W + 2 * conv_padding[1] - conv_dilation[1] * (conv_kW - 1) - 1) // conv_stride[1] + 1\n\n    if pool_ceil_mode:\n        out_H = (H + 2 * pool_padding[0] - pool_dilation[0] * (pool_kernel_size[0] - 1) - 1 + pool_stride[0] - 1) // pool_stride[0] + 1\n        out_W = (W + 2 * pool_padding[1] - pool_dilation[1] * (pool_kernel_size[1] - 1) - 1 + pool_stride[1] - 1) // pool_stride[1] + 1\n    else:\n        out_H = (H + 2 * pool_padding[0] - pool_dilation[0] * (pool_kernel_size[0] - 1) - 1) // pool_stride[0] + 1\n        out_W = (W + 2 * pool_padding[1] - pool_dilation[1] * (pool_kernel_size[1] - 1) - 1) // pool_stride[1] + 1\n\n    output = torch.empty((B, out_C, out_H, out_W), device=input.device, dtype=input.dtype)\n\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n    BLOCK_SIZE_C = 16\n\n    grid = (B * out_H * out_W,)\n\n    conv2d_maxpool_relu_kernel[grid](\n        input, weight, bias, output,\n        B, C, H, W, out_C, out_H, out_W,\n        conv_kH, conv_kW, conv_stride[0], conv_padding[0], conv_dilation[0], conv_groups,\n        pool_kernel_size[0], pool_kernel_size[1], pool_stride[0], pool_padding[0], pool_dilation[0], pool_ceil_mode,\n        BLOCK_SIZE_H, BLOCK_SIZE_W, BLOCK_SIZE_C\n    )\n\n    if inplace:\n        input.copy_(output)\n    else:\n        return output\n\nimport torch\nimport torch.nn.functional as F\n\n# Example input\ninput = torch.randn(1, 3, 10, 10, device='cuda')\nweight = torch.randn(6, 3, 3, 3, device='cuda')\nbias = torch.randn(6, device='cuda')\n\n# PyTorch reference\nconv_out = F.conv2d(input, weight, bias, stride=1, padding=1, dilation=1, groups=1)\npool_out = F.max_pool2d(conv_out, kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\nrelu_out = F.relu(pool_out, inplace=False)\n\n# Triton implementation\ntriton_out = relu_max_pool2d_conv2d(input, weight, bias, conv_stride=1, conv_padding=1, conv_dilation=1, conv_groups=1, pool_kernel_size=2, pool_stride=2, pool_padding=0, pool_dilation=1, pool_ceil_mode=False, inplace=False)\n\n# Verify the results\nprint(\"PyTorch output:\", relu_out)\nprint(\"Triton output:\", triton_out)\nprint(\"Difference:\", torch.abs(relu_out - triton_out).max())\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the error function of the input tensor. The error function is used in probability, statistics, and partial differential equations describing diffusion.\nWrapper Entry Information: erf(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\mathrm{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\nother: The function outputs a tensor with values representing the error function of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the error function of the input tensor. The error function is used in probability, statistics, and partial differential equations describing diffusion.\nWrapper Entry Information: erf(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\mathrm{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\nother: The function outputs a tensor with values representing the error function of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n# Triton kernel for computing the error function\n@triton.jit\ndef erf_kernel(\n    input_ptr,\n    output_ptr,\n    size,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the current block index\n    pid = tl.program_id(axis=0)\n    # Calculate the range of elements this block will process\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < size\n\n    # Load the input elements\n    x = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n\n    # Compute the error function using the approximation\n    # erf(x) = 2 / sqrt(pi) * integral from 0 to x of exp(-t^2) dt\n    # Using a polynomial approximation for erf(x)\n    p = 0.3275911\n    a1 = 0.254829592\n    a2 = -0.284496736\n    a3 = 1.421413741\n    a4 = -1.453152027\n    a5 = 1.061405429\n\n    t = 1.0 / (1.0 + p * tl.abs(x))\n    y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * tl.exp(-x * x)\n    y = tl.where(x >= 0, y, -y)\n\n    # Store the results\n    tl.store(output_ptr + offsets, y, mask=mask)\n\n# Wrapper function for the erf operation\ndef erf(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Get the size of the input tensor\n    size = input.numel()\n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.shape == input.shape, \"Output tensor must have the same shape as input tensor\"\n        assert out.dtype == input.dtype, \"Output tensor must have the same dtype as input tensor\"\n        assert out.is_cuda, \"Output tensor must be on the same device as input tensor\"\n\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, \"Input tensor must be on the GPU\"\n\n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(size)\n\n    # Launch the Triton kernel\n    erf_kernel[(size + BLOCK_SIZE - 1) // BLOCK_SIZE, ](\n        input_ptr=input, output_ptr=out, size=size, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the sigmoid of the input tensor element-wise. The sigmoid function is a common activation function used in neural networks, which maps any real-valued number into the range (0, 1).\nWrapper Entry Information: sigmoid(input, *, out=None) -> Tensor\nMath: The sigmoid function is defined as: sigmoid(x) = 1 / (1 + exp(-x))\nother: Alias for torch.special.expit.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a sigmoid function kernel that processes a vector of elements. The kernel takes pointers to input and output vectors, the number of elements to process, and a block size as parameters. It computes the sigmoid function for each element in the input vector and stores the result in the output vector. The kernel is launched with a 1D grid, and each program processes a block of elements. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sigmoid_kernel(x_ptr,  # *Pointer* to first input vector.\n                   output_ptr,  # *Pointer* to output vector.\n                   n_elements,  # Size of the vector.\n                   BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n                   # NOTE: `constexpr` so it can be used as a shape value.\n                   ):\n\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    mask = offsets < n_elements\n\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    output = 1 / (1 + tl.exp(-x))\n\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n\ndef sigmoid(x: torch.Tensor):\n    output = torch.empty_like(x)\n    assert x.is_cuda and output.is_cuda\n    n_elements = output.numel()\n\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n\n    sigmoid_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)\n\n    return output\n\n\ntorch.manual_seed(0)\nsize = 98432\nx = torch.rand(size, device='cuda')\noutput_torch = torch.sigmoid(x)\noutput_triton = sigmoid(x)\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: This function computes the sigmoid of the input tensor element-wise. The sigmoid function is a common activation function used in neural networks, which maps any real-valued number into the range (0, 1).\nWrapper Entry Information: sigmoid(input, *, out=None) -> Tensor\nMath: The sigmoid function is defined as: sigmoid(x) = 1 / (1 + exp(-x))\nother: Alias for torch.special.expit.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing the sigmoid function\n@triton.jit\ndef sigmoid_kernel(x_ptr,  # *Pointer* to first input vector.\n                   output_ptr,  # *Pointer* to output vector.\n                   n_elements,  # Size of the vector.\n                   BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n                   # NOTE: `constexpr` so it can be used as a shape value.\n                   ):\n\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n\n    mask = offsets < n_elements\n\n    x = tl.load(x_ptr + offsets, mask=mask)\n\n    output = 1 / (1 + tl.exp(-x))\n\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Wrapper function for the sigmoid kernel\ndef sigmoid(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    if out is None:\n        out = torch.empty_like(input)\n    else:\n        assert out.shape == input.shape, \"Output tensor must have the same shape as input tensor\"\n        assert out.dtype == input.dtype, \"Output tensor must have the same data type as input tensor\"\n        assert out.is_cuda, \"Output tensor must be on the same device as input tensor\"\n\n    assert input.is_cuda, \"Input tensor must be on a CUDA device\"\n    n_elements = input.numel()\n\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n\n    sigmoid_kernel[grid](input, out, n_elements, BLOCK_SIZE=1024)\n\n    return out\n\n# Example usage\ntorch.manual_seed(0)\nsize = 98432\nx = torch.rand(size, device='cuda')\noutput_torch = torch.sigmoid(x)\noutput_triton = sigmoid(x)\n\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Unit (GELU) activation function element-wise to the input tensor. The function can be computed exactly or approximately using a tanh-based formula depending on the 'approximate' argument.\nWrapper Entry Information: gelu(input, approximate='none') -> Tensor\nMath: When approximate is 'none': GELU(x) = x * \u03a6(x), where \u03a6(x) is the Cumulative Distribution Function for Gaussian Distribution. When approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3)))\nother: See Gaussian Error Linear Units (GELUs) https://arxiv.org/abs/1606.08415\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement two kernels, gelu_none_and_mul_kernel and gelu_tanh_and_mul_kernel, each taking two parameters x and y. gelu_none_and_mul_kernel applies the Gaussian Error Linear Unit (GELU) function using the error function approximation on x and multiplies the result by y. gelu_tanh_and_mul_kernel does the same using the tanh approximation. Both kernels return the product. Additionally, a GeluAndMul class is provided which selects one of these kernels based on an approximation method specified as 'none' or 'tanh'. import torch\nimport triton\nimport triton.language as tl\nfrom triton.language.math import erf, pow, tanh\n\n@triton.jit\ndef gelu_none_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + erf(x_fp32 * 0.7071067811))\n    # Multiply the result by y and return\n    return x_gelu * y\n\n@triton.jit\ndef gelu_tanh_and_mul_kernel(x, y):\n    # Convert input to float32 for better precision in operations\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = (\n        0.5\n        * x_fp32\n        * (\n            1\n            + tanh(x_fp32 * 0.79788456 * (1 + 0.044715 * pow(x_fp32.to(tl.float32), 2)))\n        )\n    )\n    # Multiply the result by y and return\n    return x_gelu * y\n\nclass GeluAndMul(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, A, B, approximate=\"none\"):\n        # Log debug information\n        logging.debug(\"GEMS GELU AND MUL FORWARD\")\n        # Choose the kernel based on the approximation method\n        if approximate == \"none\":\n            return gelu_none_and_mul_kernel(A, B)\n        elif approximate == \"tanh\":\n            return gelu_tanh_and_mul_kernel(A, B)\n        else:\n            raise ValueError(f\"Invalid approximate value: {approximate}\")\n\ndef gelu_and_mul(A, B, approximate=\"none\"):\n    # Wrapper function for using GeluAndMul class\n    return GeluAndMul.apply(A, B, approximate)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Gaussian Error Linear Unit (GELU) activation function element-wise to the input tensor. The function can be computed exactly or approximately using a tanh-based formula depending on the 'approximate' argument.\nWrapper Entry Information: gelu(input, approximate='none') -> Tensor\nMath: When approximate is 'none': GELU(x) = x * \u03a6(x), where \u03a6(x) is the Cumulative Distribution Function for Gaussian Distribution. When approximate is 'tanh': GELU(x) = 0.5 * x * (1 + Tanh(\u221a(2/\u03c0) * (x + 0.044715 * x^3)))\nother: See Gaussian Error Linear Units (GELUs) https://arxiv.org/abs/1606.08415\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for GELU using the exact formula (erf approximation)\n@triton.jit\ndef gelu_none_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the error function approximation\n    x_gelu = 0.5 * x_fp32 * (1 + tl.math.erf(x_fp32 * 0.7071067811))\n    tl.store(Y + offsets, x_gelu.to(x.dtype), mask=mask)\n\n# Triton kernel for GELU using the tanh approximation\n@triton.jit\ndef gelu_tanh_kernel(X, Y, N, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < N\n    x = tl.load(X + offsets, mask=mask)\n    x_fp32 = x.to(tl.float32)\n    # Compute the GELU function using the tanh approximation\n    x_gelu = 0.5 * x_fp32 * (1 + tl.math.tanh(0.79788456 * x_fp32 * (1 + 0.044715 * x_fp32 * x_fp32)))\n    tl.store(Y + offsets, x_gelu.to(x.dtype), mask=mask)\n\n# Wrapper function for the GELU activation\ndef gelu(input, approximate='none'):\n    # Ensure the input is a torch tensor\n    if not isinstance(input, torch.Tensor):\n        raise ValueError(\"Input must be a torch.Tensor\")\n    \n    # Ensure the input is on the same device\n    device = input.device\n    dtype = input.dtype\n    N = input.numel()\n    \n    # Allocate output tensor\n    output = torch.empty_like(input, device=device, dtype=dtype)\n    \n    # Determine the block size\n    BLOCK_SIZE = 1024\n    \n    # Choose the appropriate kernel based on the 'approximate' argument\n    if approximate == 'none':\n        gelu_kernel = gelu_none_kernel\n    elif approximate == 'tanh':\n        gelu_kernel = gelu_tanh_kernel\n    else:\n        raise ValueError(f\"Invalid approximate value: {approximate}\")\n    \n    # Launch the kernel\n    grid = (triton.cdiv(N, BLOCK_SIZE),)\n    gelu_kernel[grid](input, output, N, BLOCK_SIZE)\n    \n    return output\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random input tensor\n    input_tensor = torch.randn(1024, device='cuda')\n    \n    # Apply GELU with exact formula\n    output_exact = gelu(input_tensor, approximate='none')\n    \n    # Apply GELU with tanh approximation\n    output_approx = gelu(input_tensor, approximate='tanh')\n    \n    print(\"Exact GELU output:\", output_exact)\n    print(\"Approximate GELU output:\", output_approx)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: linalg.det(A, *, out=None) -> Tensor; A (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions; out (Tensor, optional): output tensor. Ignored if None. Default: None.\nother: :func:`torch.linalg.slogdet` computes the sign and natural logarithm of the absolute value of the determinant of square matrices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the determinant of a square matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: linalg.det(A, *, out=None) -> Tensor; A (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions; out (Tensor, optional): output tensor. Ignored if None. Default: None.\nother: :func:`torch.linalg.slogdet` computes the sign and natural logarithm of the absolute value of the determinant of square matrices.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing the determinant of a square matrix\n@triton.jit\ndef det_kernel(A_ptr, A_batch_stride, A_row_stride, A_col_stride, det_ptr, det_batch_stride, n, BLOCK_SIZE: tl.constexpr):\n    # Get the batch index\n    batch_idx = tl.program_id(0)\n    \n    # Compute the base pointer for the current batch\n    A_base_ptr = A_ptr + batch_idx * A_batch_stride\n    \n    # Initialize the determinant to 1\n    det = 1.0\n    \n    # Perform LU decomposition\n    for k in range(n):\n        # Compute the pivot element\n        pivot = tl.load(A_base_ptr + k * A_row_stride + k * A_col_stride)\n        \n        # If the pivot is zero, the matrix is singular\n        if pivot == 0:\n            det = 0.0\n            break\n        \n        # Update the determinant\n        det *= pivot\n        \n        # Perform row operations to zero out the elements below the pivot\n        for i in range(k + 1, n):\n            factor = tl.load(A_base_ptr + i * A_row_stride + k * A_col_stride) / pivot\n            for j in range(k + 1, n):\n                Aij = tl.load(A_base_ptr + i * A_row_stride + j * A_col_stride)\n                Akj = tl.load(A_base_ptr + k * A_row_stride + j * A_col_stride)\n                tl.store(A_base_ptr + i * A_row_stride + j * A_col_stride, Aij - factor * Akj)\n    \n    # Store the determinant in the output tensor\n    tl.store(det_ptr + batch_idx * det_batch_stride, det)\n\n# Wrapper function for the determinant computation\ndef linalg_det(A, *, out=None):\n    # Get the shape of the input tensor\n    batch_shape = A.shape[:-2]\n    n = A.shape[-1]\n    batch_size = 1\n    for dim in batch_shape:\n        batch_size *= dim\n    \n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty(batch_shape, dtype=A.dtype, device=A.device)\n    \n    # Determine the grid and block dimensions\n    BLOCK_SIZE = 32\n    grid = (batch_size, 1, 1)\n    \n    # Launch the kernel\n    det_kernel[grid](\n        A, A.stride(0), A.stride(-2), A.stride(-1),\n        out, out.stride(0), n, BLOCK_SIZE\n    )\n    \n    return out\n\n# Example usage\nA = torch.tensor([[[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0]]], device='cuda')\ndet = linalg_det(A)\nprint(det)  # Output: tensor([-2., -2.])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, and dropout.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout(input1, input2, normalized_shape, dropout_p=0.1, eps=1e-5, training=True, approximate='none', *, out=None) -> Tensor; input1 (Tensor): First input tensor for bmm, of shape (B, N, M), where B is the batch size; input2 (Tensor): Second input tensor for bmm, of shape (B, M, P); normalized_shape (int or list or torch.Size): Input shape from an expected input of size (B, N, P). This is the shape over which RMS normalization is applied; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1; eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5; training (bool, optional): Apply dropout if True. Default: True; approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given two input tensors X and Y, this function computes: \\[ \\begin{align*} Z_1 &= \\text{bmm}(X, Y) \\\\ Z_2 &= \\text{RMSNorm}(Z_1, \\epsilon) \\\\ Z_3 &= \\text{GELU}(Z_2) \\\\ Z &= \\text{Dropout}(Z_3, p) \\end{align*} \\] where: \\- \\text{bmm}(X, Y) performs batch matrix multiplication. \\- \\text{RMSNorm}(Z_1, \\epsilon) = \\frac{Z_1}{\\sqrt{\\text{mean}(Z_1^2, \\text{dim}=\\text{last}) + \\epsilon}} \\times \\gamma, where \\gamma is a learnable parameter (if `elementwise_affine=True`). \\- \\text{GELU}(Z_2) applies the Gaussian Error Linear Unit activation function element-wise. \\- \\text{Dropout}(Z_3, p) randomly zeroes elements of Z_3 with probability p.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the shape of the last dimension(s) of the output tensor over which to compute the RMS.\n- The `GELU` activation is applied element-wise to the normalized output.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining batch matrix multiplication, RMS normalization, GELU activation, and dropout.\nWrapper Entry Information: fused_bmm_rmsnorm_gelu_dropout(input1, input2, normalized_shape, dropout_p=0.1, eps=1e-5, training=True, approximate='none', *, out=None) -> Tensor; input1 (Tensor): First input tensor for bmm, of shape (B, N, M), where B is the batch size; input2 (Tensor): Second input tensor for bmm, of shape (B, M, P); normalized_shape (int or list or torch.Size): Input shape from an expected input of size (B, N, P). This is the shape over which RMS normalization is applied; dropout_p (float, optional): Probability of an element to be zeroed in the dropout layer. Default: 0.1; eps (float, optional): A value added to the denominator for numerical stability in RMS normalization. Default: 1e-5; training (bool, optional): Apply dropout if True. Default: True; approximate (str, optional): Can be 'none' or 'tanh'. The approximation to use for GELU. Default: 'none'; out (Tensor, optional): Output tensor. Ignored if None. Default: None.\nMath: Given two input tensors X and Y, this function computes: \\[ \\begin{align*} Z_1 &= \\text{bmm}(X, Y) \\\\ Z_2 &= \\text{RMSNorm}(Z_1, \\epsilon) \\\\ Z_3 &= \\text{GELU}(Z_2) \\\\ Z &= \\text{Dropout}(Z_3, p) \\end{align*} \\] where: \\- \\text{bmm}(X, Y) performs batch matrix multiplication. \\- \\text{RMSNorm}(Z_1, \\epsilon) = \\frac{Z_1}{\\sqrt{\\text{mean}(Z_1^2, \\text{dim}=\\text{last}) + \\epsilon}} \\times \\gamma, where \\gamma is a learnable parameter (if `elementwise_affine=True`). \\- \\text{GELU}(Z_2) applies the Gaussian Error Linear Unit activation function element-wise. \\- \\text{Dropout}(Z_3, p) randomly zeroes elements of Z_3 with probability p.\nother: - The shapes of `input1` and `input2` must be compatible for batch matrix multiplication: `input1` of shape `(B, N, M)` and `input2` of shape `(B, M, P)` result in an output of shape `(B, N, P)`.\n- The `normalized_shape` argument for RMS normalization should match the shape of the last dimension(s) of the output tensor over which to compute the RMS.\n- The `GELU` activation is applied element-wise to the normalized output.\n- The `dropout` is applied during training when `training=True`. Set `training=False` to disable dropout during evaluation.\n- All operations are differentiable and support autograd.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fused_bmm_rmsnorm_gelu_dropout_kernel(\n    input1_ptr, input2_ptr, output_ptr, dropout_mask_ptr, dropout_p, eps, training, approximate,\n    B, N, M, P, BLOCK_SIZE_B, BLOCK_SIZE_N, BLOCK_SIZE_M, BLOCK_SIZE_P,\n    input1_stride_b, input1_stride_n, input1_stride_m,\n    input2_stride_b, input2_stride_m, input2_stride_p,\n    output_stride_b, output_stride_n, output_stride_p,\n):\n    pid = tl.program_id(axis=0)\n    bid = pid // (BLOCK_SIZE_N * BLOCK_SIZE_P)\n    nid = (pid % (BLOCK_SIZE_N * BLOCK_SIZE_P)) // BLOCK_SIZE_P\n    pid_p = pid % BLOCK_SIZE_P\n\n    # Offsets for input1 and input2\n    input1_offset = bid * input1_stride_b + nid * input1_stride_n\n    input2_offset = bid * input2_stride_b + pid_p * input2_stride_p\n\n    # Offsets for output\n    output_offset = bid * output_stride_b + nid * output_stride_n + pid_p * output_stride_p\n\n    # Load input1 and input2\n    input1 = tl.load(input1_ptr + input1_offset, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n    input2 = tl.load(input2_ptr + input2_offset, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n\n    # Perform batch matrix multiplication\n    accum = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_P), dtype=tl.float32)\n    for m in range(0, M, BLOCK_SIZE_M):\n        input1_block = tl.load(input1_ptr + input1_offset + m * input1_stride_m, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n        input2_block = tl.load(input2_ptr + input2_offset + m * input2_stride_m, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n        accum += tl.dot(input1_block, input2_block, allow_tf32=True)\n\n    # Perform RMS normalization\n    mean = tl.sum(accum * accum, axis=1) / P\n    inv_std = tl.rsqrt(mean + eps)\n    normed = accum * inv_std[:, None]\n\n    # Apply GELU activation\n    if approximate == 'none':\n        normed = 0.5 * normed * (1 + tl.tanh(0.7978845608 * (normed + 0.044715 * normed * normed * normed)))\n    elif approximate == 'tanh':\n        normed = normed * 0.5 * (1 + tl.tanh(0.7978845608 * normed))\n\n    # Apply dropout if training\n    if training:\n        dropout_mask = tl.rand() > dropout_p\n        normed = tl.where(dropout_mask, normed / (1 - dropout_p), 0.0)\n        tl.store(dropout_mask_ptr + output_offset, dropout_mask, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n\n    # Store the result\n    tl.store(output_ptr + output_offset, normed, mask=pid < B * BLOCK_SIZE_N * BLOCK_SIZE_P)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fused_bmm_rmsnorm_gelu_dropout(input1, input2, normalized_shape, dropout_p=0.1, eps=1e-5, training=True, approximate='none', *, out=None):\n    B, N, M = input1.shape\n    _, _, P = input2.shape\n\n    if out is None:\n        out = torch.empty((B, N, P), dtype=input1.dtype, device=input1.device)\n\n    if training:\n        dropout_mask = torch.empty((B, N, P), dtype=torch.bool, device=input1.device)\n    else:\n        dropout_mask = None\n\n    grid = (B * N * P // (32 * 32),)\n\n    fused_bmm_rmsnorm_gelu_dropout_kernel[grid](\n        input1, input2, out, dropout_mask, dropout_p, eps, training, approximate,\n        B, N, M, P, 32, 32, 32, 32,\n        input1.stride(0), input1.stride(1), input1.stride(2),\n        input2.stride(0), input2.stride(1), input2.stride(2),\n        out.stride(0), out.stride(1), out.stride(2)\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the floor of the elements of the input, the largest integer less than or equal to each element. For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: floor(input, *, out=None) -> Tensor\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\left\\lfloor \\text{input}_{i} \\right\\rfloor\nother: For integer inputs, the function returns a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the floor of the elements of the input, the largest integer less than or equal to each element. For integer inputs, follows the array-api convention of returning a copy of the input tensor.\nWrapper Entry Information: floor(input, *, out=None) -> Tensor\nArgs:\n    input (Tensor): the input tensor.\n\nKeyword args:\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\left\\lfloor \\text{input}_{i} \\right\\rfloor\nother: For integer inputs, the function returns a copy of the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef floor_kernel(\n    input_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the current block's index\n    pid = tl.program_id(axis=0)\n    # Calculate the range of elements this block will process\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = offsets < n_elements\n\n    # Load the elements from the input tensor\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Apply the floor operation\n    output_elements = tl.floor(input_elements)\n    # Store the results in the output tensor\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\ndef floor(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Check if the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    \n    # For integer inputs, return a copy of the input tensor\n    if input.dtype in [torch.int8, torch.int16, torch.int32, torch.int64]:\n        return input.clone()\n\n    # Determine the number of elements in the input tensor\n    n_elements = input.numel()\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor shape must match input tensor shape'\n    \n    # Determine the block size for parallel execution\n    BLOCK_SIZE = triton.next_power_of_2(min(n_elements, 1024))\n    \n    # Calculate the grid size (number of blocks)\n    grid_size = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n    \n    # Launch the Triton kernel\n    floor_kernel[(grid_size,)](\n        input_ptr=input, output_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1). The shape of the tensor is defined by the variable argument size.\nWrapper Entry Information: rand(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor. Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling\n    out (Tensor, optional): the output tensor.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor. Default: if ``None``, uses a global default (see :func:`torch.set_default_dtype`).\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor. Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor. Default: if ``None``, uses the current device for the default tensor type (see :func:`torch.set_default_device`). :attr:`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in the pinned memory. Works only for CPU tensors. Default: ``False``.\nother: The function can take a variable number of arguments to define the shape of the tensor. It supports optional parameters for generator, output tensor, data type, layout, device, autograd recording, and pinned memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a seeded uniform random number generator function (`seeded_uniform`) and its corresponding kernel (`_seeded_uniform_triton`). The `seeded_uniform` function allows creating a random tensor with a per-row seed, supporting up to 3D tensors. It takes parameters: size (variable dimensions), seeds (1D tensor for row-specific seeds), optional output tensor, dtype, device, and pin_memory flag. The Triton kernel `_seeded_uniform_triton` takes the output tensor pointer, seed pointer, strides for rows and 3D slices, number of rows, 3D size, number of columns, slices, and block size as constexpr to generate random numbers in the range [0,1) efficiently. import torch\nimport triton\nimport triton.language as tl\n\n\ndef seeded_uniform(\n    *size,\n    seeds: torch.Tensor,\n    out: Optional[torch.Tensor] = None,\n    dtype: Optional[torch.dtype] = None,\n    device: Optional[Union[torch.device, str]] = None,\n    pin_memory: Optional[bool] = False,\n) -> torch.Tensor:\n    \"\"\"Similar to torch.rand, but allows for seeds to be set per row.\n\n    seeds must be a 1d tensor. The output tensor may be 1d, 2d, or 3d.\n    If it is 3d, the additional seeds needed will be derived automatically\n    in a deterministic fashion:\n    [\n        row 0: [columns_with_seed_0], [columns_with_seed0^1], ...\n    ]\n    \"\"\"\n    n_dims = len(size)\n\n    if n_dims > 3:\n        raise ValueError(\"seeded_uniform only supports up to 3D tensors\")\n\n    if out is None:\n        out = torch.empty(*size,\n                          dtype=dtype,\n                          device=device,\n                          pin_memory=pin_memory)\n    elif out.shape != size:\n        raise ValueError(\"shape of out and size must be the same\")\n\n    if n_dims == 3:\n        n_rows, n_3d, n_cols = out.shape\n        stride_row = out.stride(0)\n        stride_3d = out.stride(1)\n    elif n_dims == 2:\n        n_rows, n_cols = out.shape\n        n_3d = 1\n        stride_row = out.stride(0)\n        stride_3d = 1\n    else:\n        n_cols = out.shape[0]\n        n_rows = 1\n        n_3d = 1\n        stride_row = 1\n        stride_3d = 1\n\n    if seeds.ndim != 1:\n        raise ValueError(\"seeds must be a 1D tensor\")\n\n    if seeds.numel() != n_rows:\n        raise ValueError(\n            \"seeds must have the same number of elements as out has rows\")\n\n    # The philox PRNG Triton uses generates 4 random numbers at once.\n    # Therefore, the most efficient use of it is to divide the\n    # block size by 4, and then save the generated random numbers to\n    # each of the 4 slices of the tensor.\n    full_block_size = triton.next_power_of_2(n_cols)\n    philox_block_size = max(full_block_size // 4, 1)\n    n_slices = full_block_size // philox_block_size\n    num_warps = 4\n    # Manual tuning. This seems to give best performance on A100 for\n    # simple kernels like this.\n    if philox_block_size >= 8192:\n        num_warps = 32\n    elif philox_block_size >= 4096:\n        num_warps = 16\n    elif philox_block_size >= 2048:\n        num_warps = 8\n\n    _seeded_uniform_triton[(n_rows, n_3d)](\n        out,\n        seeds,\n        stride_row,\n        stride_3d,\n        seeds.stride(0),\n        n_rows,\n        n_3d,\n        n_cols,\n        n_slices=n_slices,\n        num_warps=num_warps,\n        block_size=philox_block_size,\n    )\n    return out\n\n\n@triton.jit\ndef _seeded_uniform_triton(\n    out_ptr: torch.Tensor,\n    seed_ptr: torch.Tensor,\n    out_row_stride: int,\n    out_3d_stride: int,\n    seed_row_stride: int,\n    n_rows: int,\n    n_3d: int,\n    n_cols: int,\n    n_slices: tl.constexpr,\n    block_size: tl.constexpr,\n):\n    \"\"\"\n    Generate a random float32 number in [0, 1) for each element in the output\n    tensor. The random numbers in a row generated using the seed for that row.\n\n    Args:\n        out_ptr: The output tensor.\n        seed_ptr: The per-row seeds to use for random number generation.\n        out_row_stride: The stride between rows of the output tensor.\n        out_3d_stride: The stride between 3D slices of the output tensor.\n        seed_row_stride: The stride between rows of the seed tensor.\n        n_rows: The number of rows in the output tensor.\n        n_3d: The size of second dimension of the output tensor,\n            if output tensor is 3D.\n        n_cols: The number of columns in the output tensor.\n        n_slices: The number of philox outputs to use.\n    \"\"\"\n    tl.static_assert(n_slices > 0 and n_slices <= 4, \"0 < n_slices <= 4\")\n\n    # Get the row index.\n    row_idx = tl.program_id(axis=0)\n    three_d_idx = tl.program_id(axis=1)\n\n    philox_offsets = tl.arange(0, block_size)\n    # Get the seed for the current element.\n    seed = tl.load(seed_ptr + row_idx * seed_row_stride)\n    if three_d_idx > 0:\n        seed ^= three_d_idx\n    # Generate random numbers in [0, 1).\n    out1, out2, out3, out4 = tl.rand4x(seed, philox_offsets)\n\n    output_row_start_ptr = (out_ptr + row_idx * out_row_stride +\n                            three_d_idx * out_3d_stride)\n    out1_offsets = philox_offsets\n    tl.store(output_row_start_ptr + out1_offsets,\n             out1,\n             mask=out1_offsets < n_cols)\n    if n_slices > 1:\n        out2_offsets = tl.arange(block_size, block_size * 2)\n        tl.store(output_row_start_ptr + out2_offsets,\n                 out2,\n                 mask=out2_offsets < n_cols)\n    if n_slices > 2:\n        out3_offsets = tl.arange(block_size * 2, block_size * 3)\n        tl.store(output_row_start_ptr + out3_offsets,\n                 out3,\n                 mask=out3_offsets < n_cols)\n    if n_slices > 3:\n        out4_offsets = tl.arange(block_size * 3, block_size * 4)\n        tl.store(output_row_start_ptr + out4_offsets,\n                 out4,\n                 mask=out4_offsets < n_cols)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1). The shape of the tensor is defined by the variable argument size.\nWrapper Entry Information: rand(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor. Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling\n    out (Tensor, optional): the output tensor.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor. Default: if ``None``, uses a global default (see :func:`torch.set_default_dtype`).\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor. Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor. Default: if ``None``, uses the current device for the default tensor type (see :func:`torch.set_default_device`). :attr:`device` will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in the pinned memory. Works only for CPU tensors. Default: ``False``.\nother: The function can take a variable number of arguments to define the shape of the tensor. It supports optional parameters for generator, output tensor, data type, layout, device, autograd recording, and pinned memory.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef _rand_triton(\n    out_ptr: tl.tensor,\n    out_strides: tl.tensor,\n    out_shape: tl.tensor,\n    seed: tl.tensor,\n    philox_offset: tl.tensor,\n    out_numel: tl.tensor,\n    block_size: tl.constexpr,\n):\n    \"\"\"\n    Generate a random float32 number in [0, 1) for each element in the output tensor.\n\n    Args:\n        out_ptr: The output tensor.\n        out_strides: The strides of the output tensor.\n        out_shape: The shape of the output tensor.\n        seed: The seed for the random number generator.\n        philox_offset: The offset for the Philox random number generator.\n        out_numel: The number of elements in the output tensor.\n        block_size: The block size for parallelization.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * block_size\n\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < out_numel\n\n    # Generate random numbers using the Philox random number generator\n    random_numbers = tl.rand(seed, philox_offset + offsets)\n\n    # Convert the flat index to multi-dimensional indices\n    multi_indices = tl.zeros((len(out_shape), block_size), dtype=tl.int32)\n    for i in range(len(out_shape)):\n        multi_indices[i] = (offsets % out_strides[i]) // out_strides[i + 1] if i < len(out_shape) - 1 else offsets % out_strides[i]\n\n    # Compute the linear index for the output tensor\n    linear_indices = tl.zeros((block_size,), dtype=tl.int32)\n    for i in range(len(out_shape)):\n        linear_indices += multi_indices[i] * out_strides[i]\n\n    # Store the random numbers in the output tensor\n    tl.store(out_ptr + linear_indices, random_numbers, mask=mask)\n\nimport torch\nimport triton\n\ndef rand(*size, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False):\n    \"\"\"\n    Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1).\n    The shape of the tensor is defined by the variable argument size.\n\n    Args:\n        size (int...): a sequence of integers defining the shape of the output tensor. Can be a variable number of arguments or a collection like a list or tuple.\n\n    Keyword args:\n        generator (torch.Generator, optional): a pseudorandom number generator for sampling\n        out (Tensor, optional): the output tensor.\n        dtype (torch.dtype, optional): the desired data type of returned tensor. Default: if None, uses a global default (see torch.set_default_dtype).\n        layout (torch.layout, optional): the desired layout of returned Tensor. Default: torch.strided.\n        device (torch.device, optional): the desired device of returned tensor. Default: if None, uses the current device for the default tensor type (see torch.set_default_device). device will be the CPU for CPU tensor types and the current CUDA device for CUDA tensor types.\n        requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.\n        pin_memory (bool, optional): If set, returned tensor would be allocated in the pinned memory. Works only for CPU tensors. Default: False.\n    \"\"\"\n    if not size:\n        raise ValueError(\"size must be a non-empty sequence of integers\")\n\n    if out is None:\n        out = torch.empty(size, dtype=dtype, layout=layout, device=device, requires_grad=requires_grad, pin_memory=pin_memory)\n    else:\n        if out.shape != size:\n            raise ValueError(\"shape of out and size must be the same\")\n\n    if generator is None:\n        generator = torch.default_generator\n\n    seed = generator.seed()\n    philox_offset = 0\n\n    # Calculate the number of elements in the output tensor\n    out_numel = out.numel()\n\n    # Calculate the strides and shape of the output tensor\n    out_strides = out.stride()\n    out_shape = out.shape\n\n    # Determine the block size for parallelization\n    block_size = triton.next_power_of_2(out_numel // 1024)  # Heuristic for block size\n\n    # Launch the Triton kernel\n    grid = (triton.cdiv(out_numel, block_size),)\n    _rand_triton[grid](\n        out,\n        out_strides,\n        out_shape,\n        seed,\n        philox_offset,\n        out_numel,\n        block_size=block_size,\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a system of linear equations with complex Hermitian or real symmetric positive-definite lhs given its Cholesky decomposition. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if :math:`A` or :math:`B` is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: cholesky_solve(B, L, upper=False, *, out=None) -> Tensor; B (Tensor): right-hand side tensor of shape (*, n, k) where * is zero or more batch dimensions; L (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions consisting of lower or upper triangular Cholesky decompositions of symmetric or Hermitian positive-definite matrices; upper (bool, optional): flag that indicates whether L is lower triangular or upper triangular. Default: False; out (Tensor, optional): output tensor. Ignored if None. Default: None\nMath: A = LL^{\\text{H}}; AX = B\nother: Supports float, double, cfloat, cdouble dtypes; Handles batches of matrices; Uses Cholesky decomposition\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create kernels that compute the upper triangular part of matrices. The 'triu_kernel' function takes 7 parameters: input matrix pointer (X), output matrix pointer (Y), number of rows (M), number of columns (N), diagonal offset (diagonal), row block size (M_BLOCK_SIZE), and column block size (N_BLOCK_SIZE). It computes the upper triangular elements for a 2D matrix. The 'triu_batch_kernel' function takes 8 parameters: input matrix batch pointer (X), output matrix batch pointer (Y), number of matrices (batch), number of elements in each matrix (MN), number of columns (N), diagonal offset (diagonal), batch block size (BATCH_BLOCK_SIZE), and matrix element block size (MN_BLOCK_SIZE). It computes the upper triangular elements for a batch of matrices. The 'triu' function handles input tensors of 2D or higher dimensions, calling the appropriate kernel based on the tensor dimensions. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the upper triangular part of a 2D matrix\n@triton.jit\ndef triu_kernel(\n    X,  # Pointer to the input matrix\n    Y,  # Pointer to the output matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    diagonal,  # Diagonal offset\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    X += row * N\n    Y += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        x = tl.load(X + cols, mask, other=0.0)\n        y = tl.where(row + diagonal <= cols, x, 0.0)\n        tl.store(Y + cols, y, mask=mask)\n\n# Triton kernel to compute the upper triangular part for batched matrices\n@triton.jit\ndef triu_batch_kernel(\n    X,  # Pointer to the input matrix batch\n    Y,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    MN,  # Number of elements in each matrix (flattened)\n    N,  # Number of columns in each matrix\n    diagonal,  # Diagonal offset\n    BATCH_BLOCK_SIZE: tl.constexpr,  # Block size for batch processing\n    MN_BLOCK_SIZE: tl.constexpr,  # Block size for elements within a matrix\n):\n    batch_id = tl.program_id(0)\n    mn_id = tl.program_id(1)\n    row = batch_id * BATCH_BLOCK_SIZE + tl.arange(0, BATCH_BLOCK_SIZE)[:, None]\n    batch_mask = row < batch\n    X += row * MN\n    Y += row * MN\n\n    cols = mn_id * MN_BLOCK_SIZE + tl.arange(0, MN_BLOCK_SIZE)[None, :]\n    mn_mask = cols < MN\n    mask = batch_mask and mn_mask\n    x = tl.load(X + cols, mask, other=0.0)\n    m = cols // N\n    n = cols % N\n    y = tl.where(m + diagonal <= n, x, 0.0)\n    tl.store(Y + cols, y, mask=mask)\n\n# Function to compute the upper triangular part of a matrix or batch of matrices\ndef triu(A, diagonal=0):\n    A = A.contiguous()\n    out = torch.empty_like(A)\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    M, N = A.shape[-2:]\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            triu_kernel[grid](A, out, M, N, diagonal, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            batch = int(torch.numel(A) / M / N)\n            B = A.view(batch, -1)\n            grid = lambda meta: (\n                triton.cdiv(batch, meta[\"BATCH_BLOCK_SIZE\"]),\n                triton.cdiv(M * N, meta[\"MN_BLOCK_SIZE\"]),\n            )\n            triu_batch_kernel[grid](B, out, batch, M * N, N, diagonal, BATCH_BLOCK_SIZE=32, MN_BLOCK_SIZE=8)\n            out = out.view(A.shape)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a system of linear equations with complex Hermitian or real symmetric positive-definite lhs given its Cholesky decomposition. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if :math:`A` or :math:`B` is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: cholesky_solve(B, L, upper=False, *, out=None) -> Tensor; B (Tensor): right-hand side tensor of shape (*, n, k) where * is zero or more batch dimensions; L (Tensor): tensor of shape (*, n, n) where * is zero or more batch dimensions consisting of lower or upper triangular Cholesky decompositions of symmetric or Hermitian positive-definite matrices; upper (bool, optional): flag that indicates whether L is lower triangular or upper triangular. Default: False; out (Tensor, optional): output tensor. Ignored if None. Default: None\nMath: A = LL^{\\text{H}}; AX = B\nother: Supports float, double, cfloat, cdouble dtypes; Handles batches of matrices; Uses Cholesky decomposition\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to solve the system of linear equations using Cholesky decomposition\n@triton.jit\ndef cholesky_solve_kernel(\n    B,  # Pointer to the right-hand side tensor\n    L,  # Pointer to the Cholesky decomposition tensor\n    X,  # Pointer to the output tensor\n    batch,  # Number of batches\n    n,  # Size of the matrix (n x n)\n    k,  # Number of right-hand side vectors (n x k)\n    upper,  # Flag indicating if L is upper triangular\n    BLOCK_SIZE: tl.constexpr,  # Block size for processing\n):\n    pid = tl.program_id(0)\n    bid = tl.program_id(1)\n\n    if bid >= batch:\n        return\n\n    B += bid * n * k\n    L += bid * n * n\n    X += bid * n * k\n\n    for i in range(0, n, BLOCK_SIZE):\n        for j in range(0, k, BLOCK_SIZE):\n            # Load B block\n            b_block = tl.load(B + i * k + j, mask=(i + tl.arange(0, BLOCK_SIZE)[:, None] < n) & (j + tl.arange(0, BLOCK_SIZE)[None, :] < k), other=0.0)\n\n            for l in range(0, n, BLOCK_SIZE):\n                # Load L block\n                l_block = tl.load(L + i * n + l, mask=(i + tl.arange(0, BLOCK_SIZE)[:, None] < n) & (l + tl.arange(0, BLOCK_SIZE)[None, :] < n), other=0.0)\n\n                # Compute the solution block\n                if upper:\n                    x_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n                    for m in range(l, -1, -BLOCK_SIZE):\n                        l_block_m = tl.load(L + m * n + l, mask=(m + tl.arange(0, BLOCK_SIZE)[:, None] < n) & (l + tl.arange(0, BLOCK_SIZE)[None, :] < n), other=0.0)\n                        x_block -= tl.dot(l_block_m, x_block, allow_tf32=False)\n                    x_block /= l_block\n                else:\n                    x_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n                    for m in range(0, l + BLOCK_SIZE, BLOCK_SIZE):\n                        l_block_m = tl.load(L + i * n + m, mask=(i + tl.arange(0, BLOCK_SIZE)[:, None] < n) & (m + tl.arange(0, BLOCK_SIZE)[None, :] < n), other=0.0)\n                        x_block -= tl.dot(l_block_m, x_block, allow_tf32=False)\n                    x_block /= l_block\n\n                # Store the solution block\n                tl.store(X + i * k + j, x_block, mask=(i + tl.arange(0, BLOCK_SIZE)[:, None] < n) & (j + tl.arange(0, BLOCK_SIZE)[None, :] < k))\n\n# Wrapper function to call the Triton kernel\ndef cholesky_solve(B, L, upper=False, *, out=None):\n    B = B.contiguous()\n    L = L.contiguous()\n    if out is None:\n        out = torch.empty_like(B)\n    else:\n        out = out.contiguous()\n\n    batch = B.shape[:-2] if B.dim() > 2 else 1\n    n = B.shape[-2]\n    k = B.shape[-1]\n\n    grid = lambda meta: (triton.cdiv(n, meta[\"BLOCK_SIZE\"]), triton.cdiv(batch, meta[\"BLOCK_SIZE\"]))\n    cholesky_solve_kernel[grid](B, L, out, batch, n, k, upper, BLOCK_SIZE=32)\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or number, then subtracts another tensor or number from the result, scaled by a given alpha. This operation is performed element-wise.\nWrapper Entry Information: def mul_sub(input, other_mul, other_sub, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other_mul (Tensor or Number): The tensor or number to multiply with `input`. other_sub (Tensor or Number): The tensor or number to subtract from the multiplication result. alpha (Number, optional): The multiplier for :attr:`other_sub`. Default is 1. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = (\\text{input}_i \\times \\text{other\\_mul}_i) - \\text{alpha} \\times \\text{other\\_sub}_i\nother: The function allows for element-wise operations and supports both tensor and scalar inputs for multiplication and subtraction. The output can be stored in a specified tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or number, then subtracts another tensor or number from the result, scaled by a given alpha. This operation is performed element-wise.\nWrapper Entry Information: def mul_sub(input, other_mul, other_sub, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor to be multiplied. other_mul (Tensor or Number): The tensor or number to multiply with `input`. other_sub (Tensor or Number): The tensor or number to subtract from the multiplication result. alpha (Number, optional): The multiplier for :attr:`other_sub`. Default is 1. out (Tensor, optional): The output tensor.\nMath: \\text{out}_i = (\\text{input}_i \\times \\text{other\\_mul}_i) - \\text{alpha} \\times \\text{other\\_sub}_i\nother: The function allows for element-wise operations and supports both tensor and scalar inputs for multiplication and subtraction. The output can be stored in a specified tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for tensor-tensor multiplication and subtraction\n@triton.jit\ndef mul_sub_tensor_tensor(input_ptr, other_mul_ptr, other_sub_ptr, out_ptr, alpha, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication and subtraction of tensors.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_mul_ptr: Pointer to the tensor to multiply with `input`.\n    - other_sub_ptr: Pointer to the tensor to subtract from the multiplication result.\n    - out_ptr: Pointer to the output tensor.\n    - alpha: The multiplier for `other_sub`.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    other_mul = tl.load(other_mul_ptr + offsets, mask=mask)\n    other_sub = tl.load(other_sub_ptr + offsets, mask=mask)\n    result = (input * other_mul) - (alpha * other_sub)\n    tl.store(out_ptr + offsets, result, mask=mask)\n\n# Kernel for tensor-scalar multiplication and tensor subtraction\n@triton.jit\ndef mul_sub_tensor_scalar(input_ptr, other_mul: tl.constexpr, other_sub_ptr, out_ptr, alpha, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication with a scalar and subtraction of a tensor.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_mul: Scalar value to multiply with `input`.\n    - other_sub_ptr: Pointer to the tensor to subtract from the multiplication result.\n    - out_ptr: Pointer to the output tensor.\n    - alpha: The multiplier for `other_sub`.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    other_sub = tl.load(other_sub_ptr + offsets, mask=mask)\n    result = (input * other_mul) - (alpha * other_sub)\n    tl.store(out_ptr + offsets, result, mask=mask)\n\n# Kernel for tensor multiplication and scalar subtraction\n@triton.jit\ndef mul_sub_tensor_tensor_scalar(input_ptr, other_mul_ptr, other_sub: tl.constexpr, out_ptr, alpha, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication of tensors and subtraction of a scalar.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_mul_ptr: Pointer to the tensor to multiply with `input`.\n    - other_sub: Scalar value to subtract from the multiplication result.\n    - out_ptr: Pointer to the output tensor.\n    - alpha: The multiplier for `other_sub`.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    other_mul = tl.load(other_mul_ptr + offsets, mask=mask)\n    result = (input * other_mul) - (alpha * other_sub)\n    tl.store(out_ptr + offsets, result, mask=mask)\n\n# Kernel for tensor-scalar multiplication and scalar subtraction\n@triton.jit\ndef mul_sub_tensor_scalar_scalar(input_ptr, other_mul: tl.constexpr, other_sub: tl.constexpr, out_ptr, alpha, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication with a scalar and subtraction of a scalar.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_mul: Scalar value to multiply with `input`.\n    - other_sub: Scalar value to subtract from the multiplication result.\n    - out_ptr: Pointer to the output tensor.\n    - alpha: The multiplier for `other_sub`.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    result = (input * other_mul) - (alpha * other_sub)\n    tl.store(out_ptr + offsets, result, mask=mask)\n\ndef mul_sub(input, other_mul, other_sub, alpha=1, out=None):\n    \"\"\"\n    Multiplies the input tensor by another tensor or number, then subtracts another tensor or number from the result,\n    scaled by a given alpha. This operation is performed element-wise.\n    \n    Parameters:\n    - input (Tensor): The input tensor to be multiplied.\n    - other_mul (Tensor or Number): The tensor or number to multiply with `input`.\n    - other_sub (Tensor or Number): The tensor or number to subtract from the multiplication result.\n    - alpha (Number, optional): The multiplier for `other_sub`. Default is 1.\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - Tensor: The resulting tensor after performing the operation.\n    \"\"\"\n    if out is None:\n        out = torch.empty_like(input)\n    \n    n_elements = out.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(other_mul, torch.Tensor) and isinstance(other_sub, torch.Tensor):\n        mul_sub_tensor_tensor[(grid_size, 1, 1)](input, other_mul, other_sub, out, alpha, n_elements, block_size)\n    elif isinstance(other_mul, torch.Tensor) and isinstance(other_sub, (int, float)):\n        mul_sub_tensor_tensor_scalar[(grid_size, 1, 1)](input, other_mul, other_sub, out, alpha, n_elements, block_size)\n    elif isinstance(other_mul, (int, float)) and isinstance(other_sub, torch.Tensor):\n        mul_sub_tensor_scalar[(grid_size, 1, 1)](input, other_mul, other_sub, out, alpha, n_elements, block_size)\n    elif isinstance(other_mul, (int, float)) and isinstance(other_sub, (int, float)):\n        mul_sub_tensor_scalar_scalar[(grid_size, 1, 1)](input, other_mul, other_sub, out, alpha, n_elements, block_size)\n    else:\n        raise TypeError(\"Unsupported input types for `other_mul` and `other_sub`.\")\n    \n    return out\n\n# Example usage\ninput = torch.tensor([1.0, 2.0, 3.0])\nother_mul = torch.tensor([2.0, 2.0, 2.0])\nother_sub = torch.tensor([1.0, 1.0, 1.0])\nalpha = 2\n\n# Tensor-tensor case\nresult = mul_sub(input, other_mul, other_sub, alpha)\nprint(result)  # Expected: [1.0, 3.0, 5.0]\n\n# Tensor-scalar case\nother_sub = 1.0\nresult = mul_sub(input, other_mul, other_sub, alpha)\nprint(result)  # Expected: [1.0, 3.0, 5.0]\n\n# Scalar-tensor case\nother_mul = 2.0\nother_sub = torch.tensor([1.0, 1.0, 1.0])\nresult = mul_sub(input, other_mul, other_sub, alpha)\nprint(result)  # Expected: [1.0, 3.0, 5.0]\n\n# Scalar-scalar case\nother_mul = 2.0\nother_sub = 1.0\nresult = mul_sub(input, other_mul, other_sub, alpha)\nprint(result)  # Expected: [1.0, 3.0, 5.0]\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a compact representation of the LDL factorization of a Hermitian or symmetric (possibly indefinite) matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. When A is complex valued it can be Hermitian (hermitian=True) or symmetric (hermitian=False). The factorization is of the form A = L D L^T. If hermitian is True then transpose operation is the conjugate transpose. L (or U) and D are stored in compact form in LD. They follow the format specified by LAPACK's sytrf function. These tensors may be used in torch.linalg.ldl_solve to solve linear systems.\nWrapper Entry Information: linalg.ldl_factor(A, *, hermitian=False, out=None) -> (Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of symmetric or Hermitian matrices.\n\nKeyword args:\n    hermitian (bool, optional): whether to consider the input to be Hermitian or symmetric. For real-valued matrices, this switch has no effect. Default: `False`.\n    out (tuple, optional): tuple of two tensors to write the output to. Ignored if `None`. Default: `None`.\n\nReturns:\n    A named tuple `(LD, pivots)`.\nMath: A = L D L^T\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.ldl_factor_ex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a compact representation of the LDL factorization of a Hermitian or symmetric (possibly indefinite) matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions. When A is complex valued it can be Hermitian (hermitian=True) or symmetric (hermitian=False). The factorization is of the form A = L D L^T. If hermitian is True then transpose operation is the conjugate transpose. L (or U) and D are stored in compact form in LD. They follow the format specified by LAPACK's sytrf function. These tensors may be used in torch.linalg.ldl_solve to solve linear systems.\nWrapper Entry Information: linalg.ldl_factor(A, *, hermitian=False, out=None) -> (Tensor, Tensor)\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of symmetric or Hermitian matrices.\n\nKeyword args:\n    hermitian (bool, optional): whether to consider the input to be Hermitian or symmetric. For real-valued matrices, this switch has no effect. Default: `False`.\n    out (tuple, optional): tuple of two tensors to write the output to. Ignored if `None`. Default: `None`.\n\nReturns:\n    A named tuple `(LD, pivots)`.\nMath: A = L D L^T\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.ldl_factor_ex.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef ldl_factor_kernel(\n    A_ptr, LD_ptr, pivots_ptr, n, hermitian: tl.constexpr, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n\n    # Load the matrix A\n    A_block = tl.load(A_ptr + block_start * n + block_start, mask=block_start + tl.arange(0, BLOCK_SIZE) < n)\n\n    # Initialize LD and pivots\n    LD_block = tl.zeros((BLOCK_SIZE, BLOCK_SIZE), dtype=tl.float32)\n    pivots_block = tl.zeros((BLOCK_SIZE,), dtype=tl.int32)\n\n    # Perform LDL factorization\n    for i in range(BLOCK_SIZE):\n        if hermitian:\n            # Hermitian case\n            for j in range(i):\n                sum_val = tl.zeros((1,), dtype=tl.float32)\n                for k in range(j):\n                    sum_val += LD_block[i, k] * tl.conj(LD_block[j, k]) * LD_block[k, k]\n                LD_block[i, j] = (A_block[i, j] - sum_val) / LD_block[j, j]\n            sum_val = tl.zeros((1,), dtype=tl.float32)\n            for k in range(i):\n                sum_val += LD_block[i, k] * tl.conj(LD_block[i, k]) * LD_block[k, k]\n            LD_block[i, i] = A_block[i, i] - sum_val\n        else:\n            # Symmetric case\n            for j in range(i):\n                sum_val = tl.zeros((1,), dtype=tl.float32)\n                for k in range(j):\n                    sum_val += LD_block[i, k] * LD_block[j, k] * LD_block[k, k]\n                LD_block[i, j] = (A_block[i, j] - sum_val) / LD_block[j, j]\n            sum_val = tl.zeros((1,), dtype=tl.float32)\n            for k in range(i):\n                sum_val += LD_block[i, k] * LD_block[i, k] * LD_block[k, k]\n            LD_block[i, i] = A_block[i, i] - sum_val\n\n        # Partial pivoting\n        max_val = tl.abs(LD_block[i, i])\n        max_idx = i\n        for j in range(i + 1, BLOCK_SIZE):\n            if tl.abs(LD_block[j, i]) > max_val:\n                max_val = tl.abs(LD_block[j, i])\n                max_idx = j\n        if max_idx != i:\n            LD_block[[i, max_idx], :] = LD_block[[max_idx, i], :]\n            pivots_block[[i, max_idx]] = pivots_block[[max_idx, i]]\n\n    # Store the results\n    tl.store(LD_ptr + block_start * n + block_start, LD_block, mask=block_start + tl.arange(0, BLOCK_SIZE) < n)\n    tl.store(pivots_ptr + block_start, pivots_block, mask=block_start + tl.arange(0, BLOCK_SIZE) < n)\n\nimport torch\nimport triton\n\ndef linalg_ldl_factor(A, *, hermitian=False, out=None):\n    # Check input shape and type\n    if A.dim() < 2 or A.size(-1) != A.size(-2):\n        raise ValueError(\"Input tensor must be a batch of square matrices.\")\n    if A.dtype not in [torch.float32, torch.float64, torch.complex64, torch.complex128]:\n        raise ValueError(\"Input tensor must be of type float, double, cfloat, or cdouble.\")\n\n    # Determine the batch dimensions and matrix size\n    batch_dims = A.shape[:-2]\n    n = A.size(-1)\n    batch_size = A.numel() // (n * n)\n\n    # Prepare output tensors\n    if out is None:\n        LD = torch.empty_like(A)\n        pivots = torch.empty(batch_size, n, dtype=torch.int32, device=A.device)\n    else:\n        LD, pivots = out\n        if LD.shape != A.shape or LD.dtype != A.dtype or LD.device != A.device:\n            raise ValueError(\"Output LD tensor must have the same shape, dtype, and device as the input tensor.\")\n        if pivots.shape != (batch_size, n) or pivots.dtype != torch.int32 or pivots.device != A.device:\n            raise ValueError(\"Output pivots tensor must have shape (batch_size, n), dtype int32, and the same device as the input tensor.\")\n\n    # Determine block size\n    BLOCK_SIZE = 32  # Adjust as needed\n\n    # Launch the kernel\n    grid = (batch_size, 1, 1)\n    ldl_factor_kernel[grid](\n        A, LD, pivots, n, hermitian, BLOCK_SIZE\n    )\n\n    # Return the results as a named tuple\n    return (LD, pivots)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the absolute value of each element in the input tensor.\nWrapper Entry Information: abs(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = |\\text{input}_{i}|\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the absolute value of each element in the input tensor.\nWrapper Entry Information: abs(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = |\\text{input}_{i}|\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef abs_kernel(\n    input_ptr,\n    output_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the current block index\n    pid = tl.program_id(axis=0)\n    # Compute the range of elements this block will process\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = offsets < n_elements\n\n    # Load the elements from the input tensor\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n    # Compute the absolute values\n    abs_elements = tl.abs(input_elements)\n    # Store the results in the output tensor\n    tl.store(output_ptr + offsets, abs_elements, mask=mask)\n\ndef abs(input: torch.Tensor, *, out: torch.Tensor = None) -> torch.Tensor:\n    # Get the number of elements in the input tensor\n    n_elements = input.numel()\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n\n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input).to(device)\n    else:\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor must have the same shape as the input tensor'\n\n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n    # Determine the number of blocks needed\n    grid_size = (n_elements + BLOCK_SIZE - 1) // BLOCK_SIZE\n\n    # Launch the Triton kernel\n    abs_kernel[(grid_size,)](\n        input_ptr=input, output_ptr=out, n_elements=n_elements, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or a number, supporting broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nWrapper Entry Information: mul(input, other, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    other (Tensor or Number) - the tensor or number to multiply input by.\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_i = \\text{input}_i \\times \\text{other}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Multiplies the input tensor by another tensor or a number, supporting broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\nWrapper Entry Information: mul(input, other, *, out=None) -> Tensor\n    input (Tensor): the input tensor.\n    other (Tensor or Number) - the tensor or number to multiply input by.\n    out (Tensor, optional): the output tensor.\nMath: \\text{out}_i = \\text{input}_i \\times \\text{other}_i\nother: Supports broadcasting and type promotion.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Kernel for tensor-tensor multiplication with broadcasting\n@triton.jit\ndef mul_tensor_kernel(A_ptr, B_ptr, C_ptr, stride_a0, stride_a1, stride_b0, stride_b1, stride_c0, stride_c1, n0, n1, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication of two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - stride_a0, stride_a1: Strides for tensor A.\n    - stride_b0, stride_b1: Strides for tensor B.\n    - stride_c0, stride_c1: Strides for tensor C.\n    - n0, n1: Dimensions of the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n0 * n1\n    arange_0 = tl.arange(0, n0)\n    arange_1 = tl.arange(0, n1)\n    A = tl.load(A_ptr + arange_0[:, None] * stride_a0 + arange_1[None, :] * stride_a1, mask=mask)\n    B = tl.load(B_ptr + arange_0[:, None] * stride_b0 + arange_1[None, :] * stride_b1, mask=mask)\n    C = A * B\n    tl.store(C_ptr + arange_0[:, None] * stride_c0 + arange_1[None, :] * stride_c1, C, mask=mask)\n\n# Kernel for tensor-scalar multiplication\n@triton.jit\ndef mul_scalar_kernel(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform element-wise multiplication of a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to multiply with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A * B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to handle the multiplication\ndef mul(input, other, *, out=None):\n    \"\"\"\n    Multiplies the input tensor by another tensor or a number, supporting broadcasting to a common shape, type promotion, and integer, float, and complex inputs.\n    \n    Parameters:\n    - input (Tensor): The input tensor.\n    - other (Tensor or Number): The tensor or number to multiply the input by.\n    - out (Tensor, optional): The output tensor.\n    \n    Returns:\n    - Tensor: The resulting tensor after performing the multiplication.\n    \"\"\"\n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n    \n    if isinstance(other, torch.Tensor):\n        # Ensure both tensors have the same shape or can be broadcasted\n        input, other, out = torch.broadcast_tensors(input, other, out)\n        \n        # Get the strides and dimensions\n        stride_a0, stride_a1 = input.stride()\n        stride_b0, stride_b1 = other.stride()\n        stride_c0, stride_c1 = out.stride()\n        n0, n1 = input.shape\n        \n        # Determine the block size\n        block_size = triton.next_power_of_2(math.ceil(math.sqrt(input.numel())))\n        grid_size = triton.cdiv(input.numel(), block_size)\n        \n        # Launch the kernel\n        mul_tensor_kernel[(grid_size, 1, 1)](input, other, out, stride_a0, stride_a1, stride_b0, stride_b1, stride_c0, stride_c1, n0, n1, BLOCK_SIZE=block_size)\n    else:\n        # Scalar multiplication\n        block_size = triton.next_power_of_2(math.ceil(math.sqrt(input.numel())))\n        grid_size = triton.cdiv(input.numel(), block_size)\n        \n        # Launch the kernel\n        mul_scalar_kernel[(grid_size, 1, 1)](input, other, out, input.numel(), BLOCK_SIZE=block_size)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a softmax function to all slices along the specified dimension, re-scaling them so that the elements lie in the range [0, 1] and sum to 1.\nWrapper Entry Information: def softmax(input, dim, dtype=None) -> Tensor: input (Tensor): input; dim (int): A dimension along which softmax will be computed.; dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None.\nMath: Softmax(x_i) = exp(x_i) / sum_j exp(x_j)\nother: This function doesn't work directly with NLLLoss, which expects the Log to be computed between the Softmax and itself. Use log_softmax instead (it's faster and has better numerical properties).\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a softmax function to all slices along the specified dimension, re-scaling them so that the elements lie in the range [0, 1] and sum to 1.\nWrapper Entry Information: def softmax(input, dim, dtype=None) -> Tensor: input (Tensor): input; dim (int): A dimension along which softmax will be computed.; dtype (torch.dtype, optional): the desired data type of returned tensor. If specified, the input tensor is casted to dtype before the operation is performed. This is useful for preventing data type overflows. Default: None.\nMath: Softmax(x_i) = exp(x_i) / sum_j exp(x_j)\nother: This function doesn't work directly with NLLLoss, which expects the Log to be computed between the Softmax and itself. Use log_softmax instead (it's faster and has better numerical properties).\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for softmax\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\n# Wrapper function\ndef softmax(input, dim, dtype=None) -> torch.Tensor:\n    if dtype is not None:\n        input = input.to(dtype)\n    \n    shape = input.shape\n    n_rows = shape[dim]\n    n_cols = shape[dim + 1] if dim + 1 < len(shape) else 1\n    input = input.view(n_rows, -1)\n    \n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `input`\n    BLOCK_SIZE = triton.next_power_of_2(input.shape[1])\n    \n    # Allocate output\n    output = torch.empty_like(input)\n    \n    # Number of warps and stages\n    num_warps = 4\n    num_stages = 2\n    \n    # Grid configuration\n    grid = (n_rows, 1)\n    \n    # Launch the kernel\n    softmax_kernel[grid](\n        output_ptr=output.data_ptr(),\n        input_ptr=input.data_ptr(),\n        input_row_stride=input.stride(0),\n        output_row_stride=output.stride(0),\n        n_rows=n_rows,\n        n_cols=n_cols,\n        BLOCK_SIZE=BLOCK_SIZE,\n        num_stages=num_stages\n    )\n    \n    # Reshape back to original shape\n    output = output.view(shape)\n    \n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Leaky ReLU activation function element-wise to the input tensor. The function is defined as LeakyReLU(x) = max(0, x) + negative_slope * min(0, x), where negative_slope is a small constant that allows a small, non-zero gradient when the unit is not active.\nWrapper Entry Information: leaky_relu(input, negative_slope=0.01, inplace=False) -> Tensor\nMath: LeakyReLU(x) = max(0, x) + negative_slope * min(0, x)\nother: See torch.nn.LeakyReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement several activation functions: tanh, relu, relu_grad, squared_relu, squared_relu_grad, leaky_relu, leaky_relu_grad, gelu, gelu_grad, smelu, and smelu_grad. Each of these kernels takes a single argument x, which is the input tensor, and returns the transformed output tensor. The relu and relu_grad functions handle the ReLU activation and its gradient respectively. Similarly, squared_relu and squared_relu_grad handle the Squared ReLU activation. Leaky ReLU and its gradient are implemented in leaky_relu and leaky_relu_grad. The gelu function implements the Gaussian Error Linear Unit activation, with gelu_grad providing its gradient. Lastly, smelu and smelu_grad implement the Smooth ReLU activation and its gradient. import triton\nimport triton.language as tl\nfrom xformers.components import Activation\n\n_kAlpha = math.sqrt(2.0 / math.pi)\n\n# A Triton implementation of the most used activations\n\n@triton.jit\ndef tanh(x):\n    # Tanh is just a scaled sigmoid\n    return 2 * tl.sigmoid(2 * x) - 1\n\n@triton.jit\ndef relu(x):\n    \"\"\"\n    ReLU_ activation function\n\n    .. _ReLU: https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html\n    \"\"\"\n    zero = 0.0\n    return tl.where(x >= 0, x, zero.to(x.dtype))\n\n@triton.jit\ndef relu_grad(x):\n    # ReLU is different from other activations\n    # in that it does not require the input to retrospectively compute its gradient\n    zero = 0.0\n    one = 1.0\n    return tl.where(x >= 0, one.to(x.dtype), zero.to(x.dtype))\n\n@triton.jit\ndef squared_relu(x):\n    \"\"\"\n    Squared ReLU activation, as proposed in the Primer_ paper.\n\n    .. _Primer: https://arxiv.org/abs/2109.08668\n    \"\"\"\n    x_ = relu(x)\n    return (x_ * x_).to(x.dtype)\n\n@triton.jit\ndef squared_relu_grad(x):\n    return tl.where(x >= 0, 2.0 * x, 0.0)\n\n@triton.jit\ndef leaky_relu(x):\n    \"\"\"\n    LeakyReLU_ activation\n\n    .. _LeakyReLU: https://pytorch.org/docs/stable/generated/torch.nn.LeakyReLU.html\n    \"\"\"\n    scale = 0.01 + 0.0\n    scale = scale.to(x.dtype)\n    return tl.where(x >= 0, x, scale * x)\n\n@triton.jit\ndef leaky_relu_grad(x):\n    min_grad = 0.01\n    max_grad = 1\n\n    min_grad = min_grad.to(x.dtype)\n    max_grad = max_grad.to(x.dtype)\n\n    return tl.where(x >= 0, max_grad, min_grad)\n\n@triton.jit\ndef gelu(x):\n    \"\"\"\n    GeLU_ activation - Gaussian error linear unit\n\n    .. _GeLU: https://arxiv.org/pdf/1606.08415.pdf\n    \"\"\"\n    return 0.5 * x * (1 + tanh(_kAlpha * (x + 0.044715 * x * x * x)))\n\n@triton.jit\ndef gelu_grad(x):\n    # CREDITS: Fast implementation proposed in\n    # https://github.com/NVIDIA/Megatron-LM/blob/main/megatron/model/fused_bias_gelu.py#L30\n    tanh_out = tanh(0.79788456 * x * (1 + 0.044715 * x * x))\n    return 0.5 * x * (\n        (1 - tanh_out * tanh_out) * (0.79788456 + 0.1070322243 * x * x)\n    ) + 0.5 * (1 + tanh_out)\n\n@triton.jit\ndef smelu(x):\n    \"\"\"\n    SmeLU_ activation -  Smooth ReLU with beta=2.0\n\n    .. _SmeLU: https://arxiv.org/pdf/2202.06499.pdf\n    \"\"\"\n    zero = 0.0\n    four = 4.0\n    two = 2.0\n    beta = two.to(x.dtype)\n\n    output = (x + beta) * (x + beta) / (four.to(x.dtype) * beta)\n    relu = tl.where(x >= beta, x, zero.to(x.dtype))\n    return tl.where(tl.abs(x) <= beta, output, relu)\n\n@triton.jit\ndef smelu_grad(x):\n    zero = 0.0\n    one = 1.0\n    two = 2.0\n    beta = two.to(x.dtype)\n\n    grad = (beta + x) / (two.to(x.dtype) * beta)\n    relu_grad = tl.where(x >= beta, one.to(x.dtype), zero.to(x.dtype))\n    return tl.where(tl.abs(x) <= beta, grad, relu_grad)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies the Leaky ReLU activation function element-wise to the input tensor. The function is defined as LeakyReLU(x) = max(0, x) + negative_slope * min(0, x), where negative_slope is a small constant that allows a small, non-zero gradient when the unit is not active.\nWrapper Entry Information: leaky_relu(input, negative_slope=0.01, inplace=False) -> Tensor\nMath: LeakyReLU(x) = max(0, x) + negative_slope * min(0, x)\nother: See torch.nn.LeakyReLU for more details.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef leaky_relu_kernel(X, Y, negative_slope, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < X.shape[0]\n    x = tl.load(X + offsets, mask=mask)\n    \n    # Compute Leaky ReLU\n    y = tl.where(x >= 0, x, negative_slope * x)\n    \n    # Store the result\n    tl.store(Y + offsets, y, mask=mask)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef leaky_relu(input, negative_slope=0.01, inplace=False):\n    # Ensure input is a tensor\n    if not isinstance(input, torch.Tensor):\n        raise ValueError(\"Input must be a torch.Tensor\")\n    \n    # Ensure the tensor is on the same device\n    device = input.device\n    dtype = input.dtype\n    \n    # Create output tensor\n    if inplace:\n        output = input\n    else:\n        output = torch.empty_like(input, device=device, dtype=dtype)\n    \n    # Define grid and block sizes\n    grid = (triton.cdiv(input.numel(), 1024),)\n    block_size = 1024\n    \n    # Launch the kernel\n    leaky_relu_kernel[grid](input, output, negative_slope, BLOCK_SIZE=block_size)\n    \n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the inverse of a square matrix using LU decomposition. Given a square invertible matrix A, it computes the inverse A^{-1} by performing LU decomposition and solving linear systems involving triangular matrices. Supports inputs of 'float', 'double', 'cfloat', and 'cdouble' dtypes, as well as batches of matrices.\nWrapper Entry Information: invert_matrix_lu(A, *, pivot=True, out=None) -> Tensor\nMath: A = P L U\nA^{-1} = U^{-1} L^{-1} P\nY = L^{-1} P\nA^{-1} = U^{-1} Y\nother: The function allows computing the inverse with or without pivoting (partial pivoting by default). It can handle batches of matrices, and an output tensor can be specified which will be ignored if set to None.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the inverse of a square matrix using LU decomposition. Given a square invertible matrix A, it computes the inverse A^{-1} by performing LU decomposition and solving linear systems involving triangular matrices. Supports inputs of 'float', 'double', 'cfloat', and 'cdouble' dtypes, as well as batches of matrices.\nWrapper Entry Information: invert_matrix_lu(A, *, pivot=True, out=None) -> Tensor\nMath: A = P L U\nA^{-1} = U^{-1} L^{-1} P\nY = L^{-1} P\nA^{-1} = U^{-1} Y\nother: The function allows computing the inverse with or without pivoting (partial pivoting by default). It can handle batches of matrices, and an output tensor can be specified which will be ignored if set to None.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n# Triton kernel for LU decomposition\n@triton.jit\ndef lu_decomposition_kernel(A, P, L, U, pivot, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    batch_size = A.shape[0]\n    n = A.shape[1]\n    batch_idx = pid // n\n    row_idx = pid % n\n\n    if row_idx < n:\n        for col_idx in range(n):\n            if pivot:\n                # Partial pivoting\n                max_idx = tl.argmax(tl.abs(A[batch_idx, row_idx + tl.arange(0, BLOCK_SIZE), col_idx]), axis=0)\n                A[batch_idx, row_idx, col_idx], A[batch_idx, row_idx + max_idx, col_idx] = \\\n                    A[batch_idx, row_idx + max_idx, col_idx], A[batch_idx, row_idx, col_idx]\n                P[batch_idx, row_idx, col_idx], P[batch_idx, row_idx + max_idx, col_idx] = \\\n                    P[batch_idx, row_idx + max_idx, col_idx], P[batch_idx, row_idx, col_idx]\n\n            if row_idx == col_idx:\n                L[batch_idx, row_idx, col_idx] = 1.0\n                U[batch_idx, row_idx, col_idx] = A[batch_idx, row_idx, col_idx]\n            else:\n                if row_idx < col_idx:\n                    L[batch_idx, row_idx, col_idx] = A[batch_idx, row_idx, col_idx] / U[batch_idx, col_idx, col_idx]\n                else:\n                    U[batch_idx, row_idx, col_idx] = A[batch_idx, row_idx, col_idx] - \\\n                        tl.sum(L[batch_idx, row_idx, :col_idx] * U[batch_idx, :col_idx, col_idx])\n\n# Triton kernel for solving L * Y = P\n@triton.jit\ndef solve_ly_kernel(L, P, Y, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    batch_size = L.shape[0]\n    n = L.shape[1]\n    batch_idx = pid // n\n    row_idx = pid % n\n\n    if row_idx < n:\n        for col_idx in range(n):\n            Y[batch_idx, row_idx, col_idx] = P[batch_idx, row_idx, col_idx]\n            for k in range(col_idx):\n                Y[batch_idx, row_idx, col_idx] -= L[batch_idx, row_idx, k] * Y[batch_idx, k, col_idx]\n\n# Triton kernel for solving U * A^{-1} = Y\n@triton.jit\ndef solve_uinv_kernel(U, Y, A_inv, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    batch_size = U.shape[0]\n    n = U.shape[1]\n    batch_idx = pid // n\n    row_idx = pid % n\n\n    if row_idx < n:\n        for col_idx in range(n - 1, -1, -1):\n            A_inv[batch_idx, row_idx, col_idx] = Y[batch_idx, row_idx, col_idx]\n            for k in range(col_idx + 1, n):\n                A_inv[batch_idx, row_idx, col_idx] -= U[batch_idx, row_idx, k] * A_inv[batch_idx, k, col_idx]\n            A_inv[batch_idx, row_idx, col_idx] /= U[batch_idx, col_idx, col_idx]\n\n# Wrapper function\ndef invert_matrix_lu(A, *, pivot=True, out=None):\n    batch_size, n, _ = A.shape\n    if out is None:\n        out = tl.zeros_like(A)\n    \n    # Initialize P, L, U\n    P = tl.eye(n, dtype=A.dtype)\n    L = tl.zeros((batch_size, n, n), dtype=A.dtype)\n    U = tl.zeros((batch_size, n, n), dtype=A.dtype)\n    \n    # Perform LU decomposition\n    lu_decomposition_kernel[(batch_size * n,)](A, P, L, U, pivot, BLOCK_SIZE=n)\n    \n    # Solve L * Y = P\n    Y = tl.zeros((batch_size, n, n), dtype=A.dtype)\n    solve_ly_kernel[(batch_size * n,)](L, P, Y, BLOCK_SIZE=n)\n    \n    # Solve U * A^{-1} = Y\n    solve_uinv_kernel[(batch_size * n,)](U, Y, out, BLOCK_SIZE=n)\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Calculates the standard deviation over the specified dimensions of the input tensor. The dim argument can specify a single dimension, a list of dimensions, or None to reduce over all dimensions. If keepdim is set to True, the output tensor retains the reduced dimensions as size 1; otherwise, these dimensions are removed. The correction parameter adjusts the calculation for the difference between sample size and degrees of freedom, defaulting to Bessel's correction with correction=1.\nWrapper Entry Information: def std(input, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. correction (int): difference between the sample size and sample degrees of freedom. Defaults to `Bessel's correction`, correction=1. keepdim (bool): whether the output tensor has dim retained or not. out (Tensor, optional): the output tensor.\nMath: \\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The standard deviation function has undergone a change in version 2.0, where the argument previously called unbiased has been renamed to correction. Bessel's correction link: https://en.wikipedia.org/wiki/Bessel%27s_correction\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Calculates the standard deviation over the specified dimensions of the input tensor. The dim argument can specify a single dimension, a list of dimensions, or None to reduce over all dimensions. If keepdim is set to True, the output tensor retains the reduced dimensions as size 1; otherwise, these dimensions are removed. The correction parameter adjusts the calculation for the difference between sample size and degrees of freedom, defaulting to Bessel's correction with correction=1.\nWrapper Entry Information: def std(input, dim=None, *, correction=1, keepdim=False, out=None) -> Tensor: input (Tensor): the input tensor. dim (int or tuple of ints): the dimension or dimensions to reduce. correction (int): difference between the sample size and sample degrees of freedom. Defaults to `Bessel's correction`, correction=1. keepdim (bool): whether the output tensor has dim retained or not. out (Tensor, optional): the output tensor.\nMath: \\sigma = \\sqrt{\\frac{1}{\\max(0,~N - \\delta N)}\\sum_{i=0}^{N-1}(x_i-\\bar{x})^2}\nother: The standard deviation function has undergone a change in version 2.0, where the argument previously called unbiased has been renamed to correction. Bessel's correction link: https://en.wikipedia.org/wiki/Bessel%27s_correction\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef std_kernel(\n    input_ptr,  # Pointer to the input tensor\n    output_ptr,  # Pointer to the output tensor\n    size,  # Total number of elements in the input tensor\n    stride,  # Stride of the input tensor\n    dim,  # Dimension(s) to reduce over\n    correction,  # Bessel's correction\n    keepdim,  # Whether to keep reduced dimensions\n    BLOCK_SIZE: tl.constexpr,  # Block size for parallelization\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Compute the mean\n    mean = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(block_start, block_start + BLOCK_SIZE):\n        if i < size:\n            mean += tl.load(input_ptr + i * stride)\n    mean = mean / size\n\n    # Compute the variance\n    variance = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(block_start, block_start + BLOCK_SIZE):\n        if i < size:\n            x = tl.load(input_ptr + i * stride)\n            variance += (x - mean) ** 2\n    variance = variance / (size - correction)\n\n    # Compute the standard deviation\n    std = tl.sqrt(variance)\n\n    # Write the result to the output tensor\n    if keepdim:\n        tl.store(output_ptr + block_start, std)\n    else:\n        tl.store(output_ptr + pid, std)\n\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef std_kernel(\n    input_ptr,  # Pointer to the input tensor\n    output_ptr,  # Pointer to the output tensor\n    size,  # Total number of elements in the input tensor\n    stride,  # Stride of the input tensor\n    dim,  # Dimension(s) to reduce over\n    correction,  # Bessel's correction\n    keepdim,  # Whether to keep reduced dimensions\n    BLOCK_SIZE: tl.constexpr,  # Block size for parallelization\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Compute the mean\n    mean = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(block_start, block_start + BLOCK_SIZE):\n        if i < size:\n            mean += tl.load(input_ptr + i * stride)\n    mean = mean / size\n\n    # Compute the variance\n    variance = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n    for i in range(block_start, block_start + BLOCK_SIZE):\n        if i < size:\n            x = tl.load(input_ptr + i * stride)\n            variance += (x - mean) ** 2\n    variance = variance / (size - correction)\n\n    # Compute the standard deviation\n    std = tl.sqrt(variance)\n\n    # Write the result to the output tensor\n    if keepdim:\n        tl.store(output_ptr + block_start, std)\n    else:\n        tl.store(output_ptr + pid, std)\n\ndef std(input, dim=None, *, correction=1, keepdim=False, out=None) -> torch.Tensor:\n    if dim is None:\n        dim = tuple(range(input.dim()))\n    elif isinstance(dim, int):\n        dim = (dim,)\n\n    # Flatten the input tensor along the specified dimensions\n    input_flattened = input.flatten(start_dim=0, end_dim=max(dim))\n\n    # Compute the size and stride for the kernel\n    size = input_flattened.numel()\n    stride = input_flattened.stride(0)\n\n    # Allocate the output tensor\n    if out is None:\n        out_shape = [1 if i in dim else s for i, s in enumerate(input.shape)] if keepdim else [s for i, s in enumerate(input.shape) if i not in dim]\n        out = torch.empty(out_shape, dtype=input.dtype, device=input.device)\n\n    # Launch the kernel\n    grid = (triton.cdiv(size, 1024),)\n    std_kernel[grid](\n        input_flattened,  # Pointer to the input tensor\n        out,  # Pointer to the output tensor\n        size,  # Total number of elements in the input tensor\n        stride,  # Stride of the input tensor\n        dim,  # Dimension(s) to reduce over\n        correction,  # Bessel's correction\n        keepdim,  # Whether to keep reduced dimensions\n        BLOCK_SIZE=1024,  # Block size for parallelization\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the lower triangular part of matrix `A` with matrix `B`, scales the result by `alpha`, and then scales the final output by `beta`. The operations are as follows:\n1. Perform matrix multiplication between the lower triangular part of `A` (denoted as `torch.tril(A)`) and `B`, and scale the result by `alpha`.\n2. Scale the resulting matrix from step 1 by `beta` to obtain the final result.\nWrapper Entry Information: def tril_mm_and_scale(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float) -> torch.Tensor: A (Tensor): A 2D matrix to be multiplied, of shape (n, n). B (Tensor): A matrix to be multiplied with the lower triangular part of A, of shape (n, p). alpha (float): Scaling factor for the initial matrix multiplication result. beta (float): Scaling factor for the final result.\nMath: B = alpha * torch.mm(torch.tril(A), B)\nC = beta * B\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement SmeLU activation function with two kernels: one for forward pass and one for backward pass. The forward kernel takes 5 parameters: input_pointer (pointer to input data), beta (float value for SmeLU), output_pointer (pointer to output data), n_elements (number of elements to process), and BLOCK_SIZE (block size for parallel execution). It computes the SmeLU activation and stores the result. The backward kernel also takes 5 parameters: input_pointer, beta, output_pointer, n_elements, and BLOCK_SIZE. It computes the gradient of the SmeLU activation and stores the result. Wrapper functions _smelu_triton_forward and _smelu_triton_backward are provided to call these kernels with PyTorch tensors. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _smelu_kernel_forward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU forward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    output = tl.where(x >= beta, x, 0.)\n    output = tl.where(tl.abs(x) <= beta, ((x + beta) * (x + beta)) / (4. * beta), output)\n    # Write-back output\n    tl.store(output_pointer + offsets, output, mask=mask)\n\ndef _smelu_triton_forward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU forward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Activation of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_forward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n\n@triton.jit\ndef _smelu_kernel_backward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU backward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    gradient = tl.where(x >= beta, 1., 0.)\n    gradient = tl.where(tl.abs(x) <= beta, 0.5 * (x + beta) / beta, gradient)\n    # Write-back output\n    tl.store(output_pointer + offsets, gradient, mask=mask)\n\ndef _smelu_triton_backward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU backward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Gradient of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_backward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a matrix multiplication of the lower triangular part of matrix `A` with matrix `B`, scales the result by `alpha`, and then scales the final output by `beta`. The operations are as follows:\n1. Perform matrix multiplication between the lower triangular part of `A` (denoted as `torch.tril(A)`) and `B`, and scale the result by `alpha`.\n2. Scale the resulting matrix from step 1 by `beta` to obtain the final result.\nWrapper Entry Information: def tril_mm_and_scale(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float) -> torch.Tensor: A (Tensor): A 2D matrix to be multiplied, of shape (n, n). B (Tensor): A matrix to be multiplied with the lower triangular part of A, of shape (n, p). alpha (float): Scaling factor for the initial matrix multiplication result. beta (float): Scaling factor for the final result.\nMath: B = alpha * torch.mm(torch.tril(A), B)\nC = beta * B\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef tril_mm_and_scale_kernel(\n    A_ptr,  # Pointer to matrix A\n    B_ptr,  # Pointer to matrix B\n    C_ptr,  # Pointer to output matrix C\n    alpha,  # Scaling factor for the initial matrix multiplication result\n    beta,   # Scaling factor for the final result\n    n,      # Dimension of matrix A (n x n)\n    p,      # Dimension of matrix B (n x p)\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n):\n    # Program ID\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(n, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(p, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + (pid % group_size_m)\n    pid_n = (pid % num_pid_n)\n\n    # Offsets for A, B, and C\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    A = A_ptr + (offs_am[:, None] * n + offs_k[None, :])\n    B = B_ptr + (offs_k[:, None] * p + offs_bn[None, :])\n    C = C_ptr + (offs_am[:, None] * p + offs_bn[None, :])\n\n    # Initialize the accumulator\n    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    # Compute the matrix multiplication\n    for k in range(0, n, BLOCK_SIZE_K):\n        # Load the blocks of A and B\n        a = tl.load(A + k * n, mask=offs_am[:, None] >= offs_k[None, :], other=0.0)\n        b = tl.load(B + k * p, mask=offs_k[:, None] < p, other=0.0)\n        # Perform the matrix multiplication\n        acc += tl.dot(a, b)\n\n    # Scale the result by alpha\n    acc *= alpha\n\n    # Store the result in C\n    tl.store(C, acc.to(C_ptr.dtype.element_ty), mask=offs_am[:, None] < p)\n\n    # Scale the final result by beta\n    acc *= beta\n    tl.store(C, acc.to(C_ptr.dtype.element_ty), mask=offs_am[:, None] < p)\n\ndef tril_mm_and_scale(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for the Triton kernel that performs matrix multiplication of the lower triangular part of A with B,\n    scales the result by alpha, and then scales the final output by beta.\n\n    :param A (torch.Tensor): A 2D matrix to be multiplied, of shape (n, n).\n    :param B (torch.Tensor): A matrix to be multiplied with the lower triangular part of A, of shape (n, p).\n    :param alpha (float): Scaling factor for the initial matrix multiplication result.\n    :param beta (float): Scaling factor for the final result.\n    :return (torch.Tensor): The final result of the operation.\n    \"\"\"\n    # Ensure A and B are contiguous\n    if not A.is_contiguous():\n        A = A.contiguous()\n    if not B.is_contiguous():\n        B = B.contiguous()\n\n    # Get dimensions\n    n, p = A.shape[0], B.shape[1]\n\n    # Allocate output tensor\n    C = torch.empty((n, p), device=A.device, dtype=A.dtype)\n\n    # Define block and grid sizes\n    BLOCK_SIZE_M = 16\n    BLOCK_SIZE_N = 16\n    BLOCK_SIZE_K = 16\n    GROUP_SIZE_M = 8\n\n    # Launch the Triton kernel\n    grid = lambda meta: (triton.cdiv(n, meta['BLOCK_SIZE_M']) * triton.cdiv(p, meta['BLOCK_SIZE_N']),)\n    tril_mm_and_scale_kernel[grid](\n        A, B, C, alpha, beta, n, p,\n        BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, GROUP_SIZE_M\n    )\n\n    return C\n\nimport torch\n\n# Test data\nA = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float32, device='cuda')\nB = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float32, device='cuda')\nalpha = 2.0\nbeta = 0.5\n\n# Call the wrapper function\nC = tril_mm_and_scale(A, B, alpha, beta)\n\n# Expected result\nexpected_C = 0.5 * (2.0 * torch.mm(torch.tril(A), B))\n\n# Check if the results match\nprint(\"C:\", C)\nprint(\"Expected C:\", expected_C)\nprint(\"Results match:\", torch.allclose(C, expected_C))\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a square system of linear equations with a unique solution. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if the inputs are batches of matrices then the output has the same batch dimensions. Assumes that matrix A is invertible.\nWrapper Entry Information: A (Tensor), B (Tensor), *, left (bool, optional), out (Tensor, optional)\nMath: AX = B; XA = B\nother: This function computes `X = A.inverse() @ B` in a faster and more numerically stable way than performing the computations separately. When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see `torch.linalg.solve_ex`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 8 parameters: output_ptr (output tensor pointer), input_ptr (input tensor pointer), input_row_stride (stride of input rows), output_row_stride (stride of output rows), n_rows (number of rows), n_cols (number of columns), BLOCK_SIZE (block size for processing), and num_stages (number of software pipelining stages). The function computes the softmax for each row of the input tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, number of warps, and stages, and then calls the kernel function with the appropriate grid configuration. import torch\nimport triton\nimport triton.language as tl\nfrom triton.runtime import driver\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,\n                   num_stages: tl.constexpr):\n    # starting row of the program\n    row_start = tl.program_id(0)\n    row_step = tl.num_programs(0)\n    for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):\n        # The stride represents how much we need to increase the pointer to advance 1 row\n        row_start_ptr = input_ptr + row_idx * input_row_stride\n        # The block size is the next power of two greater than n_cols, so we can fit each\n        # row in a single block\n        col_offsets = tl.arange(0, BLOCK_SIZE)\n        input_ptrs = row_start_ptr + col_offsets\n        # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n        mask = col_offsets < n_cols\n        row = tl.load(input_ptrs, mask=mask, other=-float('inf'))\n        # Subtract maximum for numerical stability\n        row_minus_max = row - tl.max(row, axis=0)\n        # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n        numerator = tl.exp(row_minus_max)\n        denominator = tl.sum(numerator, axis=0)\n        softmax_output = numerator / denominator\n        # Write back output to DRAM\n        output_row_start_ptr = output_ptr + row_idx * output_row_stride\n        output_ptrs = output_row_start_ptr + col_offsets\n        tl.store(output_ptrs, softmax_output, mask=mask)\n\ndevice = torch.cuda.current_device()\nproperties = driver.active.utils.get_device_properties(device)\nNUM_SM = properties[\"multiprocessor_count\"]\nNUM_REGS = properties[\"max_num_regs\"]\nSIZE_SMEM = properties[\"max_shared_mem\"]\nWARP_SIZE = properties[\"warpSize\"]\ntarget = triton.runtime.driver.active.get_current_target()\nkernels = {}\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n\n    # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 8\n\n    # Number of software pipelining stages.\n    num_stages = 4 if SIZE_SMEM > 200000 else 2\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # pre-compile kernel to get register usage and compute thread occupancy.\n    kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))\n    if kernel is None:\n        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,\n                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))\n        kernel._init_handles()\n        n_regs = kernel.n_regs\n        size_smem = kernel.metadata.shared\n        if is_hip():\n            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.\n            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.\n            # ISA SECTION (3.6.4 for CDNA3)\n            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used\n            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total\n            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is\n            # not required to be equal numbers of both types.\n            if is_cdna():\n                NUM_GPRS = NUM_REGS * 2\n\n            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.\n            # When we divide this number with WARP_SIZE we get maximum number of waves that can\n            # execute on a CU (multi-processor)  in parallel.\n            MAX_NUM_THREADS = properties[\"max_threads_per_sm\"]\n            max_num_waves = MAX_NUM_THREADS // WARP_SIZE\n            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps\n        else:\n            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)\n        occupancy = min(occupancy, SIZE_SMEM // size_smem)\n        num_programs = NUM_SM * occupancy\n        kernels[BLOCK_SIZE] = (kernel, num_programs)\n\n    num_programs = min(num_programs, n_rows)\n\n    # Create a number of persistent programs.\n    kernel[(num_programs, 1, 1)](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_rows,\n        n_cols,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the solution of a square system of linear equations with a unique solution. Supports inputs of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if the inputs are batches of matrices then the output has the same batch dimensions. Assumes that matrix A is invertible.\nWrapper Entry Information: A (Tensor), B (Tensor), *, left (bool, optional), out (Tensor, optional)\nMath: AX = B; XA = B\nother: This function computes `X = A.inverse() @ B` in a faster and more numerically stable way than performing the computations separately. When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see `torch.linalg.solve_ex`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel to solve the linear system AX = B or XA = B\n@triton.jit\ndef solve_kernel(A_ptr, B_ptr, X_ptr, batch_size, n, left, BLOCK_SIZE: tl.constexpr):\n    # Compute the linear index for the batch\n    batch_idx = tl.program_id(0)\n    if batch_idx < batch_size:\n        # Compute the base pointers for the current batch\n        A_base_ptr = A_ptr + batch_idx * n * n\n        B_base_ptr = B_ptr + batch_idx * n\n        X_base_ptr = X_ptr + batch_idx * n\n\n        # Load the matrix A and B\n        A = tl.load(A_base_ptr, (n, n))\n        B = tl.load(B_base_ptr, (n,))\n\n        # Solve the system\n        if left:\n            # Solve AX = B\n            X = tl.linalg.solve(A, B)\n        else:\n            # Solve XA = B\n            X = tl.linalg.solve(B, A.T)\n\n        # Store the result\n        tl.store(X_base_ptr, X)\n\n# Wrapper function to handle input validation and kernel invocation\ndef solve(A, B, *, left=True, out=None):\n    # Validate input tensors\n    if A.dtype not in [torch.float32, torch.float64, torch.complex64, torch.complex128]:\n        raise ValueError(\"A must be of type float, double, cfloat, or cdouble\")\n    if B.dtype not in [torch.float32, torch.float64, torch.complex64, torch.complex128]:\n        raise ValueError(\"B must be of type float, double, cfloat, or cdouble\")\n    if A.shape[-2] != A.shape[-1]:\n        raise ValueError(\"A must be a square matrix\")\n    if A.shape[-1] != B.shape[-1]:\n        raise ValueError(\"The last dimension of A and B must match\")\n\n    # Determine batch size\n    batch_size = A.shape[:-2] if A.dim() > 2 else 1\n    n = A.shape[-1]\n\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty_like(B)\n    else:\n        if out.shape != B.shape:\n            raise ValueError(\"out must have the same shape as B\")\n\n    # Determine block size\n    BLOCK_SIZE = 128  # Adjust block size as needed\n\n    # Synchronize the device with the CPU\n    if A.device.type == 'cuda':\n        torch.cuda.synchronize()\n\n    # Launch the kernel\n    grid = (batch_size, 1, 1)\n    solve_kernel[grid](A.data_ptr(), B.data_ptr(), out.data_ptr(), batch_size, n, left, BLOCK_SIZE=BLOCK_SIZE)\n\n    return out\n\n# Example usage\nA = torch.tensor([[[1.0, 2.0], [3.0, 4.0]]], device='cuda')\nB = torch.tensor([[5.0, 6.0]], device='cuda')\nX = solve(A, B, left=True)\nprint(X)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Airy function Ai for each element of the input tensor.\nWrapper Entry Information: airy_ai(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Airy function :math:`\\text{Ai}\\left(\\text{input}\\right)`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes four parameters: A_ptr (pointer to input tensor), O_ptr (pointer to output tensor), M (number of columns in the input tensor), and BLOCK_SIZE (block size for parallel execution). The function computes the softmax of each row of the input tensor. The 'softmax' function is a wrapper that prepares the input and output tensors, calculates the block size, and launches the Triton kernel. import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n@triton.jit\ndef softmax_kernel(\n        A_ptr,\n        O_ptr,\n        M,\n        BLOCK_SIZE: tl.constexpr\n):\n    # Get the row index for the current program\n    row_id = tl.program_id(axis=0)\n    # Calculate offsets for the current row\n    offsets = row_id*M + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle out-of-bounds accesses\n    mask = tl.arange(0, BLOCK_SIZE) < M\n\n    # Load the row elements from A_ptr with masking\n    a = tl.load(A_ptr + offsets, mask=mask, other=-float('inf'))\n    # Compute the exponentials of the row elements\n    row_wise_exp = tl.exp(a)\n    # Sum the exponentials for normalization\n    row_wise_sum = tl.sum(row_wise_exp, axis=0)\n    # Compute the softmax output\n    op = row_wise_exp/row_wise_sum\n\n    # Store the result in O_ptr with masking\n    tl.store(O_ptr + offsets, op, mask=mask)\n\n\ndef softmax(A: torch.Tensor):\n    # Get the dimensions of the input tensor\n    rows, cols = A.shape\n    # Prepare an output tensor on the same device\n    output = torch.empty(size=A.shape).to(device)\n\n    # Ensure both input and output tensors are on the GPU\n    assert A.is_cuda and output.is_cuda, 'One of the matrix is not on GPU'\n\n    # Block size will be equal to number of columns\n    # so that every row is operated in one block\n    BLOCK_SIZE = triton.next_power_of_2(cols)\n    print(f'Block size: {BLOCK_SIZE}, grid: {(rows,)}')\n\n    # Launch the Triton kernel\n    softmax_kernel[(rows,)](\n        A_ptr=A, O_ptr=output, M=cols, BLOCK_SIZE=BLOCK_SIZE\n    )\n\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Airy function Ai for each element of the input tensor.\nWrapper Entry Information: airy_ai(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: Airy function :math:`\\text{Ai}\\left(\\text{input}\\right)`.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\ndevice = 'cuda:0'\n\n# Triton kernel to compute the Airy function Ai\n@triton.jit\ndef airy_ai_kernel(\n    input_ptr,\n    output_ptr,\n    size,\n    BLOCK_SIZE: tl.constexpr\n):\n    # Get the program ID\n    pid = tl.program_id(axis=0)\n    # Compute the range of elements this program instance will process\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < size\n\n    # Load the input elements\n    input_elements = tl.load(input_ptr + offsets, mask=mask, other=0.0)\n\n    # Compute the Airy function Ai for each element\n    output_elements = tl.math.airy_ai(input_elements)\n\n    # Store the results\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\n# Wrapper function to compute the Airy function Ai\ndef airy_ai(input, *, out=None):\n    # Ensure the input tensor is on the GPU\n    assert input.is_cuda, 'Input tensor must be on GPU'\n    \n    # Prepare the output tensor\n    if out is None:\n        out = torch.empty_like(input, device=device)\n    else:\n        assert out.is_cuda, 'Output tensor must be on GPU'\n        assert out.shape == input.shape, 'Output tensor must have the same shape as input tensor'\n    \n    # Get the size of the input tensor\n    size = input.numel()\n    \n    # Determine the block size\n    BLOCK_SIZE = triton.next_power_of_2(min(1024, size))\n    \n    # Launch the Triton kernel\n    grid = (triton.cdiv(size, BLOCK_SIZE),)\n    airy_ai_kernel[grid](\n        input_ptr=input,\n        output_ptr=out,\n        size=size,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Tests if each element of the input tensor has its sign bit set or not. It handles signed zeros, so negative zero (-0) returns True.\nWrapper Entry Information: signbit(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nother: signbit handles signed zeros, so negative zero (-0) returns True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a batched softmax kernel. The kernel 'softmax_kernel_batch' takes 9 arguments: output_ptr, input_ptr, input_row_stride, input_batch_stride, output_row_stride, output_batch_stride, n_cols, n_rows, and BLOCK_SIZE. It calculates the softmax across the last dimension of a 2D tensor slice (batch, row) using Triton's parallel programming model and stores the results in the provided output_ptr. The 'triton_batch_softmax' function is a Python wrapper that prepares input data and invokes the Triton kernel. It accepts a tensor 'x' of shape (batch, n_rows, n_cols) as its parameter, calculates the BLOCK_SIZE, allocates an output tensor 'y', and then calls the Triton kernel with these parameters. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel_batch(\n    output_ptr,\n    input_ptr,\n    input_row_stride,\n    input_batch_stride,\n    output_row_stride,\n    output_batch_stride,\n    n_cols,\n    n_rows,\n    BLOCK_SIZE: tl.constexpr,\n):\n    # The rows of the softmax are independent, so we parallelize across those\n    batch_pid = tl.program_id(axis=0)\n    row_idx = tl.program_id(1)\n\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride + (batch_pid * input_batch_stride)\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float(\"inf\"))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride + (batch_pid * output_batch_stride)\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\n\ndef triton_batch_softmax(x):\n    batch, n_rows, n_cols = x.shape\n\n    # Move tensors to GPU (if they're not already there)\n    x = x.cuda()\n\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n\n    # Allocate output\n    y = torch.empty_like(x)\n\n    # Enqueue kernel. The 2D launch grid is simple: we have one kernel instance per row of\n    # the input matrix\n    softmax_kernel_batch[(batch, n_rows)](\n        y,\n        x,\n        x.stride(1),\n        x.stride(0),\n        y.stride(1),\n        y.stride(0),\n        n_cols,\n        n_rows,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Tests if each element of the input tensor has its sign bit set or not. It handles signed zeros, so negative zero (-0) returns True.\nWrapper Entry Information: signbit(input, *, out=None) -> Tensor; Args: input (Tensor): the input tensor.; Keyword args: out (Tensor, optional): the output tensor.\nother: signbit handles signed zeros, so negative zero (-0) returns True.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef signbit_kernel(\n    output_ptr,\n    input_ptr,\n    input_size,\n    BLOCK_SIZE: tl.constexpr,\n):\n    # Compute the block index\n    pid = tl.program_id(0)\n    # Compute the block start index\n    block_start = pid * BLOCK_SIZE\n    # Create a range of offsets for the block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to handle the case where the block extends beyond the input size\n    mask = offsets < input_size\n    # Load the input data\n    input_data = tl.load(input_ptr + offsets, mask=mask)\n    # Check if the sign bit is set (negative or negative zero)\n    signbit_result = input_data < 0\n    # Store the result in the output tensor\n    tl.store(output_ptr + offsets, signbit_result, mask=mask)\n\ndef signbit(input, *, out=None):\n    # Ensure the input tensor is on the GPU\n    input = input.cuda()\n    # Determine the size of the input tensor\n    input_size = input.numel()\n    # Determine the block size\n    BLOCK_SIZE = 1024\n    # Determine the number of blocks needed\n    num_blocks = (input_size + BLOCK_SIZE - 1) // BLOCK_SIZE\n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input, dtype=torch.bool, device=input.device)\n    else:\n        # Ensure the output tensor is on the same device and has the same shape as the input\n        assert out.device == input.device, \"Output tensor must be on the same device as the input tensor\"\n        assert out.shape == input.shape, \"Output tensor must have the same shape as the input tensor\"\n        out = out.to(dtype=torch.bool)\n    \n    # Launch the Triton kernel\n    signbit_kernel[(num_blocks,)](\n        out.view(-1).contiguous().data_ptr(),\n        input.view(-1).contiguous().data_ptr(),\n        input_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    \n    return out\n\n# Example usage\ninput_tensor = torch.tensor([-1.0, 0.0, -0.0, 1.0, -2.0, 2.0], device='cuda')\noutput_tensor = signbit(input_tensor)\nprint(output_tensor)  # Expected output: tensor([ True, False,  True, False,  True, False])\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a scaled matrix-matrix product, then calculates the dot product of the first two rows of the resulting matrix. First, it multiplies matrix A and B using the scalar alpha and then adds the scaled version of matrix C using scalar beta. Finally, it computes the dot product of the first two rows of the updated matrix C.\nWrapper Entry Information: def matrix_multiply_and_row_dot(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float, C: torch.Tensor) -> torch.Tensor: A (Tensor): First input matrix of shape `(n, m)`. B (Tensor): Second input matrix of shape `(m, p)`. alpha (float): Scalar multiplier for the matrix-matrix product. beta (float): Scalar multiplier for the input matrix `C`. C (Tensor): Output matrix of shape `(n, p)` where the results are added.\nMath: 1. `C = alpha * torch.mm(A, B) + beta * C`; 2. `result = torch.dot(C[0], C[1])`\nother: Assumes `C` has at least two rows for the dot product to be computed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement SmeLU activation function with two kernels: one for forward pass and one for backward pass. The forward kernel takes 5 parameters: input_pointer (pointer to input data), beta (float value for SmeLU), output_pointer (pointer to output data), n_elements (number of elements to process), and BLOCK_SIZE (block size for parallel execution). It computes the SmeLU activation and stores the result. The backward kernel also takes 5 parameters: input_pointer, beta, output_pointer, n_elements, and BLOCK_SIZE. It computes the gradient of the SmeLU activation and stores the result. Wrapper functions _smelu_triton_forward and _smelu_triton_backward are provided to call these kernels with PyTorch tensors. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _smelu_kernel_forward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU forward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    output = tl.where(x >= beta, x, 0.)\n    output = tl.where(tl.abs(x) <= beta, ((x + beta) * (x + beta)) / (4. * beta), output)\n    # Write-back output\n    tl.store(output_pointer + offsets, output, mask=mask)\n\ndef _smelu_triton_forward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU forward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Activation of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_forward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n\n@triton.jit\ndef _smelu_kernel_backward(\n        input_pointer,\n        beta: float,\n        output_pointer,\n        n_elements: int,\n        BLOCK_SIZE: tl.constexpr,\n):\n    \"\"\" Triton kernel SmeLU backward \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    # Load data\n    x = tl.load(input_pointer + offsets, mask=mask)\n    gradient = tl.where(x >= beta, 1., 0.)\n    gradient = tl.where(tl.abs(x) <= beta, 0.5 * (x + beta) / beta, gradient)\n    # Write-back output\n    tl.store(output_pointer + offsets, gradient, mask=mask)\n\ndef _smelu_triton_backward(\n        input: torch.Tensor,\n        beta: float = 2.\n) -> torch.Tensor:\n    \"\"\"\n    Wrapper function for SmeLU backward triton kernel\n    :param input (torch.Tensor): Input tensor of any shape\n    :param beta (float): Beta value of SmeLU\n    :return (torch.Tensor): Gradient of SmeLU\n    \"\"\"\n    # Init output tensor\n    output: torch.Tensor = torch.empty_like(input)\n    # Make input contiguous if needed\n    if not input.is_contiguous():\n        input = input.contiguous()\n    # Get number of elements in input\n    number_of_elements: int = input.numel()\n    # Call triton kernel\n    grid = lambda meta: (triton.cdiv(number_of_elements, meta['BLOCK_SIZE']),)\n    _smelu_kernel_backward[grid](input, beta, output, number_of_elements, BLOCK_SIZE=1024)\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes a scaled matrix-matrix product, then calculates the dot product of the first two rows of the resulting matrix. First, it multiplies matrix A and B using the scalar alpha and then adds the scaled version of matrix C using scalar beta. Finally, it computes the dot product of the first two rows of the updated matrix C.\nWrapper Entry Information: def matrix_multiply_and_row_dot(A: torch.Tensor, B: torch.Tensor, alpha: float, beta: float, C: torch.Tensor) -> torch.Tensor: A (Tensor): First input matrix of shape `(n, m)`. B (Tensor): Second input matrix of shape `(m, p)`. alpha (float): Scalar multiplier for the matrix-matrix product. beta (float): Scalar multiplier for the input matrix `C`. C (Tensor): Output matrix of shape `(n, p)` where the results are added.\nMath: 1. `C = alpha * torch.mm(A, B) + beta * C`; 2. `result = torch.dot(C[0], C[1])`\nother: Assumes `C` has at least two rows for the dot product to be computed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _matrix_multiply_and_row_dot_kernel(\n    A_ptr, B_ptr, C_ptr, alpha, beta, M, N, K, stride_Am, stride_An, stride_Bm, stride_Bn, stride_Cm, stride_Cn, BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = num_pid_m * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * num_pid_m\n    first_pid_n = group_id * num_pid_n\n    pid_m = first_pid_m + (pid % num_pid_m)\n    pid_n = first_pid_n + (pid % num_pid_n)\n\n    offs_am = (pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)) % M\n    offs_bn = (pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)) % N\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = A_ptr + (offs_am[:, None] * stride_Am + offs_k[None, :] * stride_An)\n    b_ptrs = B_ptr + (offs_k[:, None] * stride_Bm + offs_bn[None, :] * stride_Bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        a_mask = (offs_k[None, :] < K - k)\n        b_mask = (offs_k[:, None] < K - k)\n        a = tl.load(a_ptrs, mask=a_mask, other=0.)\n        b = tl.load(b_ptrs, mask=b_mask, other=0.)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_An\n        b_ptrs += BLOCK_SIZE_K * stride_Bm\n\n    accumulator = accumulator * alpha\n    c_ptrs = C_ptr + (offs_am[:, None] * stride_Cm + offs_bn[None, :] * stride_Cn)\n    c_mask = (offs_am[:, None] < M) & (offs_bn[None, :] < N)\n    c = tl.load(c_ptrs, mask=c_mask, other=0.)\n    c = c * beta + accumulator\n    tl.store(c_ptrs, c, mask=c_mask)\n\n    # Compute dot product of the first two rows\n    if pid_m == 0 and pid_n == 0:\n        row1 = tl.load(c_ptrs + 0 * stride_Cm, mask=offs_bn < N, other=0.)\n        row2 = tl.load(c_ptrs + 1 * stride_Cm, mask=offs_bn < N, other=0.)\n        dot_product = tl.sum(row1 * row2)\n        tl.store(C_ptr + M * N, dot_product)\n\n### PyTorch Wrapper Function\n\nThe PyTorch wrapper function will handle the input and output tensors and call the Triton kernel.\n\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the n-th derivative of the digamma function on input. The function is implemented for nonnegative integers n >= 0.\nWrapper Entry Information: def polygamma(n, input, *, out=None) -> Tensor: n (int): the order of the polygamma function; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\psi^{(n)}(x) = \\frac{d^{(n)}}{dx^{(n)}} \\psi(x)\nother: Implemented only for nonnegative integers n >= 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the n-th derivative of the digamma function on input. The function is implemented for nonnegative integers n >= 0.\nWrapper Entry Information: def polygamma(n, input, *, out=None) -> Tensor: n (int): the order of the polygamma function; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\psi^{(n)}(x) = \\frac{d^{(n)}}{dx^{(n)}} \\psi(x)\nother: Implemented only for nonnegative integers n >= 0.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for computing the n-th derivative of the digamma function\n@triton.jit\ndef _polygamma_kernel(n, INPUT, OUTPUT, input_stride, output_stride, size, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < size\n\n    input_offsets = INPUT + offsets * input_stride\n    output_offsets = OUTPUT + offsets * output_stride\n\n    x = tl.load(input_offsets, mask=mask, other=0.0)\n\n    # Compute the n-th derivative of the digamma function\n    result = tl.where(n == 0, tl.digamma(x), tl.polygamma(n, x))\n\n    tl.store(output_offsets, result, mask=mask)\n\n# Python wrapper function for the polygamma kernel\ndef polygamma(n, input, *, out=None) -> torch.Tensor:\n    if not input.is_cuda:\n        raise ValueError(\"Input tensor must be on a CUDA device\")\n\n    if out is None:\n        out = torch.empty_like(input)\n\n    if n < 0:\n        raise ValueError(\"n must be a nonnegative integer\")\n\n    size = input.numel()\n    grid = (triton.cdiv(size, 1024),)\n    _polygamma_kernel[grid](n, input, out, input.stride(0), out.stride(0), size, BLOCK_SIZE=1024)\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Exponential Linear Unit (ELU) activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with ELU.\nWrapper Entry Information: def elu_linear(input, weight, bias=None, alpha=1.0, inplace=False) -> Tensor: input (Tensor): The input tensor for the linear layer. weight (Tensor): The weight tensor for the linear transformation. bias (Tensor, optional): The bias tensor for the linear transformation. Default: None. alpha (float, optional): The \\(\\alpha\\) parameter for the ELU function. Default: 1.0. inplace (bool, optional): Whether to apply ELU in-place. Default: False.\nMath: \\text{out} = \\text{ELU}(\\text{Linear}(x))\n\n\\text{ELU}(x) = \\begin{cases}\n    x, & \\text{ if } x > 0\\\\\n    \\alpha * (\\exp(x) - 1), & \\text{ if } x \\leq 0\n\\end{cases}\nother: The function integrates linear transformation and ELU activation. The ELU activation applies element-wise to incorporate non-linearity after linear mapping.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an ELU (Exponential Linear Unit) activation function. The kernel 'elu_kernel' takes five parameters: pointers to input and output vectors, a pointer to the alpha parameter, the number of elements in the vector, and a block size for processing. The function 'elu' calls this kernel, preparing the output tensor and setting up the grid for execution. import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for ELU activation function\n@triton.jit\ndef elu_kernel(x_ptr,  # *Pointer* to first input vector.\n               alpha_ptr,\n               output_ptr,  # *Pointer* to output vector.\n               n_elements,  # Size of the vector.\n               BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n               ):\n\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    \n    mask = offsets < n_elements\n  \n    x = tl.load(x_ptr + offsets, mask=mask)\n    alpha = tl.load(alpha_ptr)\n\n    output = tl.where(x > 0, x, alpha * (tl.exp(x) - 1))\n\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Function to call the Triton kernel\ndef elu(x: torch.Tensor, alpha: torch.Tensor):\n    output = torch.empty_like(x)\n    assert x.is_cuda and output.is_cuda\n    n_elements = output.numel()\n\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n\n    elu_kernel[grid](x, alpha, output, n_elements, BLOCK_SIZE=1024)\n\n    return output\n\n# Example usage\ntorch.manual_seed(0)\nsize = 98432\nx = torch.rand(size, device='cuda') * 2 - 1\nalpha = torch.rand(1, device='cuda')\noutput_torch = torch.where(x > 0, x, alpha * (torch.exp(x) - 1))\noutput_triton = elu(x, alpha)\nprint(alpha)\nprint(x)\nprint(output_torch)\nprint(output_triton)\nprint(f'The maximum difference between torch and triton is '\n      f'{torch.max(torch.abs(output_torch - output_triton))}')\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a linear transformation to the input tensor, followed by the Exponential Linear Unit (ELU) activation function applied element-wise. This combined operation first performs a linear transformation and then introduces non-linearity with ELU.\nWrapper Entry Information: def elu_linear(input, weight, bias=None, alpha=1.0, inplace=False) -> Tensor: input (Tensor): The input tensor for the linear layer. weight (Tensor): The weight tensor for the linear transformation. bias (Tensor, optional): The bias tensor for the linear transformation. Default: None. alpha (float, optional): The \\(\\alpha\\) parameter for the ELU function. Default: 1.0. inplace (bool, optional): Whether to apply ELU in-place. Default: False.\nMath: \\text{out} = \\text{ELU}(\\text{Linear}(x))\n\n\\text{ELU}(x) = \\begin{cases}\n    x, & \\text{ if } x > 0\\\\\n    \\alpha * (\\exp(x) - 1), & \\text{ if } x \\leq 0\n\\end{cases}\nother: The function integrates linear transformation and ELU activation. The ELU activation applies element-wise to incorporate non-linearity after linear mapping.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for linear transformation followed by ELU activation\n@triton.jit\ndef elu_linear_kernel(\n    input_ptr,  # *Pointer* to input tensor.\n    weight_ptr,  # *Pointer* to weight tensor.\n    bias_ptr,  # *Pointer* to bias tensor (optional).\n    alpha_ptr,  # *Pointer* to alpha parameter.\n    output_ptr,  # *Pointer* to output tensor.\n    input_size,  # Number of elements in the input tensor.\n    output_size,  # Number of elements in the output tensor.\n    input_stride,  # Stride of the input tensor.\n    weight_stride,  # Stride of the weight tensor.\n    bias_stride,  # Stride of the bias tensor (optional).\n    BLOCK_SIZE_INPUT: tl.constexpr,  # Number of elements each program should process for input.\n    BLOCK_SIZE_OUTPUT: tl.constexpr  # Number of elements each program should process for output.\n):\n    pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n    block_start_input = pid * BLOCK_SIZE_INPUT\n    block_start_output = pid * BLOCK_SIZE_OUTPUT\n    offsets_input = block_start_input + tl.arange(0, BLOCK_SIZE_INPUT)\n    offsets_output = block_start_output + tl.arange(0, BLOCK_SIZE_OUTPUT)\n\n    mask_input = offsets_input < input_size\n    mask_output = offsets_output < output_size\n\n    input = tl.load(input_ptr + offsets_input * input_stride, mask=mask_input)\n    weight = tl.load(weight_ptr + offsets_output * weight_stride, mask=mask_output)\n\n    # Perform the linear transformation\n    output = tl.zeros((BLOCK_SIZE_OUTPUT,), dtype=tl.float32)\n    for i in range(input_size):\n        output += input[i] * weight[i]\n\n    # Add bias if provided\n    if bias_ptr is not None:\n        bias = tl.load(bias_ptr + offsets_output * bias_stride, mask=mask_output)\n        output += bias\n\n    # Apply ELU activation\n    alpha = tl.load(alpha_ptr)\n    output = tl.where(output > 0, output, alpha * (tl.exp(output) - 1))\n\n    tl.store(output_ptr + offsets_output, output, mask=mask_output)\n\n# Function to call the Triton kernel\ndef elu_linear(input: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor = None, alpha: float = 1.0, inplace: bool = False) -> torch.Tensor:\n    if inplace:\n        output = input\n    else:\n        output = torch.empty((input.size(0), weight.size(0)), device=input.device, dtype=input.dtype)\n\n    assert input.is_cuda and weight.is_cuda and output.is_cuda\n    if bias is not None:\n        assert bias.is_cuda\n\n    input_size = input.numel()\n    output_size = output.numel()\n\n    grid = lambda meta: (triton.cdiv(output_size, meta['BLOCK_SIZE_OUTPUT']), )\n\n    elu_linear_kernel[grid](\n        input, weight, bias, torch.tensor([alpha], device=input.device, dtype=input.dtype),\n        output, input_size, output_size, input.stride(0), weight.stride(0), bias.stride(0) if bias is not None else 0,\n        BLOCK_SIZE_INPUT=1024, BLOCK_SIZE_OUTPUT=1024\n    )\n\n    return output\n\n# Example usage\ntorch.manual_seed(0)\ninput_size = 128\noutput_size = 64\nbatch_size = 32\n\ninput = torch.rand(batch_size, input_size, device='cuda')\nweight = torch.rand(output_size, input_size, device='cuda')\nbias = torch.rand(output_size, device='cuda')\nalpha = 1.0\n\noutput_triton = elu_linear(input, weight, bias, alpha, inplace=False)\nprint(output_triton)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between two input tensors `x1` and `x2` after normalizing both tensors. Normalization is performed along the specified dimension, followed by pairwise distance calculation.\nWrapper Entry Information: def fused_pairwise_distance_normalize(x1: torch.Tensor, x2: torch.Tensor, p_norm: float = 2.0, eps_norm: float = 1e-12, eps_distance: float = 1e-6, keepdim: bool = False) -> torch.Tensor\nArgs:\n    x1 (Tensor): First input tensor.\n    x2 (Tensor): Second input tensor.\n    p_norm (float, optional): The exponent value in the norm for normalization. Default: 2.\n    eps_norm (float, optional): Small value to avoid division by zero during normalization. Default: 1e-12.\n    eps_distance (float, optional): Small value to avoid division by zero in distance calculation. Default: 1e-6.\n    keepdim (bool, optional): If `True`, retains the last dimension in the output. Default: `False`.\nother: Normalization is performed along the specified dimension. Small values `eps_norm` and `eps_distance` are used to avoid division by zero during normalization and distance calculation, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement an RMS normalization kernel function `rms_norm_kernel` with 8 parameters: input, weight, output, input_row_stride, n_cols, eps, and two constexpr parameters N_COLS, BLOCK_N. The kernel normalizes input tensors using RMS normalization. The `trmsnorm` function calls the kernel and includes parameters hidden_states, weight, eps; it sets up the execution environment and manages the data preparation and launching of the kernel on specified grid sizes. import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n@triton.jit\ndef rms_norm_kernel(\n    input,\n    weight,\n    output,\n    input_row_stride,\n    n_cols,\n    eps,\n    N_COLS: tl.constexpr,\n    BLOCK_N: tl.constexpr,\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    w = tl.load(weight + offsets, mask=offsets < n_cols)\n    x_ptr = input + prog_id * input_row_stride\n    x = tl.load(x_ptr + offsets, mask=offsets < n_cols)\n    xf = x.to(tl.float32)\n\n    var = tl.sum(xf * xf, 0) * float(1.0 / N_COLS)\n    out = xf / tl.sqrt(var + eps)\n    out = (w * out).to(x.dtype)\n\n    out_ptr = output + prog_id * input_row_stride\n    tl.store(out_ptr + offsets, out, mask=offsets < n_cols)\n\n@torch.inference_mode()\ndef trmsnorm(hidden_states: Tensor, weight: Tensor, eps: float = 1e-6):\n    \"\"\"\n    Applies the Triton RMSNorm operation to the given hidden states.\n\n    Args:\n        hidden_states (Tensor): The input hidden states.\n        weight (Tensor): The weight tensor.\n        eps (float, optional): A small value to avoid division by zero. Default is 1e-6.\n\n    Returns:\n        Tensor: The output tensor after applying the RMSNorm operation.\n    \"\"\"\n\n    def _kernel_meta():\n        device = hidden_states.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = weight.shape[0]\n    seq_len = hidden_states.numel() // hidden_states.size(-1)\n    input_stride = hidden_states.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    out = torch.empty_like(hidden_states)\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    rms_norm_kernel[grid](\n        hidden_states,\n        weight,\n        out,\n        input_stride,\n        feat_size,\n        eps,\n        feat_size,\n        BLOCK_N,\n        num_warps=4,\n        num_stages=2,\n        **kernel_meta,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the pairwise distance between two input tensors `x1` and `x2` after normalizing both tensors. Normalization is performed along the specified dimension, followed by pairwise distance calculation.\nWrapper Entry Information: def fused_pairwise_distance_normalize(x1: torch.Tensor, x2: torch.Tensor, p_norm: float = 2.0, eps_norm: float = 1e-12, eps_distance: float = 1e-6, keepdim: bool = False) -> torch.Tensor\nArgs:\n    x1 (Tensor): First input tensor.\n    x2 (Tensor): Second input tensor.\n    p_norm (float, optional): The exponent value in the norm for normalization. Default: 2.\n    eps_norm (float, optional): Small value to avoid division by zero during normalization. Default: 1e-12.\n    eps_distance (float, optional): Small value to avoid division by zero in distance calculation. Default: 1e-6.\n    keepdim (bool, optional): If `True`, retains the last dimension in the output. Default: `False`.\nother: Normalization is performed along the specified dimension. Small values `eps_norm` and `eps_distance` are used to avoid division by zero during normalization and distance calculation, respectively.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom torch import Tensor\nfrom triton.runtime.jit import get_cuda_stream\n\n# Triton kernel for fused pairwise distance and normalization\n@triton.jit\ndef fused_pairwise_distance_normalize_kernel(\n    x1_ptr, x2_ptr, output_ptr, x1_stride, x2_stride, output_stride,\n    n_cols, p_norm, eps_norm, eps_distance, N_COLS: tl.constexpr, BLOCK_N: tl.constexpr\n):\n    prog_id = tl.program_id(0)\n    offsets = tl.arange(0, BLOCK_N)\n\n    # Load x1 and x2\n    x1 = tl.load(x1_ptr + prog_id * x1_stride + offsets, mask=offsets < n_cols)\n    x2 = tl.load(x2_ptr + prog_id * x2_stride + offsets, mask=offsets < n_cols)\n\n    # Normalize x1 and x2\n    norm1 = tl.sum(tl.abs(x1) ** p_norm, axis=0) ** (1.0 / p_norm)\n    norm2 = tl.sum(tl.abs(x2) ** p_norm, axis=0) ** (1.0 / p_norm)\n    x1_normalized = x1 / (norm1 + eps_norm)\n    x2_normalized = x2 / (norm2 + eps_norm)\n\n    # Compute pairwise distance\n    diff = x1_normalized - x2_normalized\n    distance = tl.sum(tl.abs(diff) ** p_norm, axis=0) ** (1.0 / p_norm)\n    distance = tl.where(tl.isnan(distance), 0.0, distance) + eps_distance\n\n    # Store the result\n    tl.store(output_ptr + prog_id * output_stride + offsets, distance, mask=offsets < n_cols)\n\n# Wrapper function\n@torch.inference_mode()\ndef fused_pairwise_distance_normalize(x1: Tensor, x2: Tensor, p_norm: float = 2.0, eps_norm: float = 1e-12, eps_distance: float = 1e-6, keepdim: bool = False) -> Tensor:\n    \"\"\"\n    Computes the pairwise distance between two input tensors `x1` and `x2` after normalizing both tensors.\n    Normalization is performed along the specified dimension, followed by pairwise distance calculation.\n\n    Args:\n        x1 (Tensor): First input tensor.\n        x2 (Tensor): Second input tensor.\n        p_norm (float, optional): The exponent value in the norm for normalization. Default: 2.\n        eps_norm (float, optional): Small value to avoid division by zero during normalization. Default: 1e-12.\n        eps_distance (float, optional): Small value to avoid division by zero in distance calculation. Default: 1e-6.\n        keepdim (bool, optional): If `True`, retains the last dimension in the output. Default: `False`.\n\n    Returns:\n        Tensor: The output tensor after applying the fused pairwise distance and normalization.\n    \"\"\"\n\n    def _kernel_meta():\n        device = x1.device\n        device_idx = device.index\n        device_type = device.type\n        stream = get_cuda_stream(device_idx)\n        return dict(device=device, device_type=device_type, stream=stream)\n\n    feat_size = x1.size(-1)\n    seq_len = x1.numel() // feat_size\n    x1_stride = x1.stride(-2)\n    x2_stride = x2.stride(-2)\n\n    BLOCK_N = triton.next_power_of_2(feat_size)\n    output_shape = list(x1.shape)\n    if not keepdim:\n        output_shape[-1] = 1\n    output = torch.empty(output_shape, dtype=x1.dtype, device=x1.device)\n\n    kernel_meta = _kernel_meta()\n    grid = (seq_len,)\n    fused_pairwise_distance_normalize_kernel[grid](\n        x1, x2, output, x1_stride, x2_stride, output.stride(-2),\n        feat_size, p_norm, eps_norm, eps_distance, feat_size, BLOCK_N,\n        num_warps=4, num_stages=2, **kernel_meta\n    )\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements the Adam optimization algorithm, which is an adaptive learning rate optimization algorithm designed for training deep neural networks. It computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients. The algorithm can optionally use the AMSGrad variant, apply weight decay, and maximize the objective function. It supports various implementation optimizations like foreach and fused implementations for performance improvements on CUDA.\nWrapper Entry Information: def Adam(params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False, foreach=None, maximize=False, capturable=False, differentiable=False, fused=None) -> Optimizer\nMath: m_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t; v_t = \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t; \\widehat{m_t} = m_t/(1-\\beta_1^t); \\widehat{v_t} = v_t/(1-\\beta_2^t); \\theta_t = \\theta_{t-1} - \\gamma \\widehat{m_t}/(\\sqrt{\\widehat{v_t}} + \\epsilon)\nother: The foreach and fused implementations are typically faster than the for-loop, single-tensor implementation. The algorithm is based on the paper 'Adam: A Method for Stochastic Optimization'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a fused Adam optimizer kernel for GPU execution. The kernel uses block-level parallelism to update parameters, gradients, and first and second moments for optimization based on learning rate, beta values, weight decay, and other inputs. Implement an AdamFused class to manage parameters and steps. import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for fused Adam optimizer\n@triton.jit\ndef fused_adam_kernel(\n    params_ptr, grads_ptr, n_ele, m_ptr, v_ptr, lr, \n    beta1, beta2, beta1_pow_step, beta2_pow_step, \n    eps, wd, step_count, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(0)\n    start = pid * BLOCK_SIZE\n    offsets = start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_ele\n\n    params = tl.load(params_ptr + offsets, mask=mask)\n    grads = tl.load(grads_ptr + offsets, mask=mask)\n    m = tl.load(m_ptr + offsets, mask=mask)\n    v = tl.load(v_ptr + offsets, mask=mask)\n\n    grads += wd * params\n\n    m_new = beta1 * m + (1 - beta1) * grads\n    v_new = beta2 * v + (1 - beta2) * (grads * grads)\n\n    m_new_corrected = m_new / (1 - beta1_pow_step)\n    v_new_corrected = v_new / (1 - beta2_pow_step)\n\n    params_new = params - (lr * m_new_corrected / (tl.sqrt(v_new_corrected) + eps))\n\n    tl.store(params_ptr + offsets, params_new, mask=mask)\n    tl.store(m_ptr + offsets, m_new, mask=mask)\n    tl.store(v_ptr + offsets, v_new, mask=mask)\n\n# Class to encapsulate the fused Adam optimizer logic\nclass AdamFused:\n    def __init__(self, parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0):\n        self.parameters = list(parameters)\n        self.n_ele = sum(param.numel() for param in self.parameters)\n        self.params = None\n        self.grads = None\n        self.lr = lr\n        self.beta1, self.beta2 = betas\n        self.eps = eps\n        self.wd = weight_decay\n        self.step_count = 0\n        \n        self.init_params_and_grads()\n        self.init_moments()\n\n    def init_params_and_grads(self):\n        self.params = torch.zeros(self.n_ele, dtype=self.parameters[0].dtype, device=self.parameters[0].device)\n        self.grads = torch.zeros(self.n_ele, dtype=self.parameters[0].dtype, device=self.parameters[0].device)\n\n        i = 0\n        for param in self.parameters:\n            num_ele =  param.numel()\n            # Populate self.params list\n            self.params[i : i+num_ele] = param.view(-1)\n            # Ensure that original model will be updated \n            # on updating self.params\n            param.data = self.params[i : i+num_ele].view(param.data.shape)\n            param.grad = self.grads[i : i+num_ele].view(param.data.shape)\n\n            i += num_ele\n\n        self.params.grad = self.grads\n\n    def init_moments(self):\n        self.m = torch.zeros_like(self.params)\n        self.v = torch.zeros_like(self.params)\n\n    def zero_grad(self, set_to_none=False):\n        if self.params.grad is not None:\n            if set_to_none:\n                self.params.grad = None\n            else:\n                if self.params.grad.grad_fn is not None:\n                    self.params.grad.detach_()\n                else:\n                    self.params.grad.requires_grad_(False)\n                self.params.grad.zero_()\n\n    def step(self):\n        self.step_count += 1\n\n        with torch.no_grad():\n            grid = lambda meta: (triton.cdiv(self.n_ele, meta['BLOCK_SIZE']), )\n            fused_adam_kernel[grid](\n                self.params, self.grads, self.n_ele, self.m, self.v, self.lr, \n                self.beta1, self.beta2, self.beta1 ** self.step_count, \n                self.beta2 ** self.step_count, self.eps, self.wd, self.step_count, \n                BLOCK_SIZE=1024\n            )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Implements the Adam optimization algorithm, which is an adaptive learning rate optimization algorithm designed for training deep neural networks. It computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients. The algorithm can optionally use the AMSGrad variant, apply weight decay, and maximize the objective function. It supports various implementation optimizations like foreach and fused implementations for performance improvements on CUDA.\nWrapper Entry Information: def Adam(params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False, foreach=None, maximize=False, capturable=False, differentiable=False, fused=None) -> Optimizer\nMath: m_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t; v_t = \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t; \\widehat{m_t} = m_t/(1-\\beta_1^t); \\widehat{v_t} = v_t/(1-\\beta_2^t); \\theta_t = \\theta_{t-1} - \\gamma \\widehat{m_t}/(\\sqrt{\\widehat{v_t}} + \\epsilon)\nother: The foreach and fused implementations are typically faster than the for-loop, single-tensor implementation. The algorithm is based on the paper 'Adam: A Method for Stochastic Optimization'.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for fused Adam optimizer\n@triton.jit\ndef fused_adam_kernel(\n    params_ptr, grads_ptr, n_ele, m_ptr, v_ptr, max_v_ptr, lr, \n    beta1, beta2, beta1_pow_step, beta2_pow_step, \n    eps, wd, step_count, maximize, BLOCK_SIZE: tl.constexpr\n):\n    pid = tl.program_id(0)\n    start = pid * BLOCK_SIZE\n    offsets = start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_ele\n\n    params = tl.load(params_ptr + offsets, mask=mask)\n    grads = tl.load(grads_ptr + offsets, mask=mask)\n    m = tl.load(m_ptr + offsets, mask=mask)\n    v = tl.load(v_ptr + offsets, mask=mask)\n    max_v = tl.load(max_v_ptr + offsets, mask=mask) if max_v_ptr else 0.0\n\n    grads += wd * params\n\n    m_new = beta1 * m + (1 - beta1) * grads\n    v_new = beta2 * v + (1 - beta2) * (grads * grads)\n\n    m_new_corrected = m_new / (1 - beta1_pow_step)\n    v_new_corrected = v_new / (1 - beta2_pow_step)\n\n    if max_v_ptr:\n        max_v = tl.maximum(max_v, v_new_corrected)\n        v_new_corrected = max_v\n\n    update = lr * m_new_corrected / (tl.sqrt(v_new_corrected) + eps)\n    if maximize:\n        params_new = params + update\n    else:\n        params_new = params - update\n\n    tl.store(params_ptr + offsets, params_new, mask=mask)\n    tl.store(m_ptr + offsets, m_new, mask=mask)\n    tl.store(v_ptr + offsets, v_new, mask=mask)\n    if max_v_ptr:\n        tl.store(max_v_ptr + offsets, max_v, mask=mask)\n\n# Class to encapsulate the fused Adam optimizer logic\nclass Adam:\n    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8, weight_decay=0, amsgrad=False, foreach=None, maximize=False, capturable=False, differentiable=False, fused=None):\n        self.params = list(params)\n        self.lr = lr\n        self.betas = betas\n        self.eps = eps\n        self.weight_decay = weight_decay\n        self.amsgrad = amsgrad\n        self.foreach = foreach\n        self.maximize = maximize\n        self.capturable = capturable\n        self.differentiable = differentiable\n        self.fused = fused\n        self.step_count = 0\n\n        self.init_moments()\n\n    def init_moments(self):\n        self.m = [torch.zeros_like(p) for p in self.params]\n        self.v = [torch.zeros_like(p) for p in self.params]\n        if self.amsgrad:\n            self.max_v = [torch.zeros_like(p) for p in self.params]\n\n    def zero_grad(self, set_to_none=False):\n        for p in self.params:\n            if p.grad is not None:\n                if set_to_none:\n                    p.grad = None\n                else:\n                    p.grad.zero_()\n\n    def step(self):\n        self.step_count += 1\n        beta1, beta2 = self.betas\n        beta1_pow_step = beta1 ** self.step_count\n        beta2_pow_step = beta2 ** self.step_count\n\n        if self.fused:\n            self.fused_step(beta1, beta2, beta1_pow_step, beta2_pow_step)\n        elif self.foreach:\n            self.foreach_step(beta1, beta2, beta1_pow_step, beta2_pow_step)\n        else:\n            self.for_loop_step(beta1, beta2, beta1_pow_step, beta2_pow_step)\n\n    def fused_step(self, beta1, beta2, beta1_pow_step, beta2_pow_step):\n        with torch.no_grad():\n            for param, grad, m, v, max_v in zip(self.params, [p.grad for p in self.params], self.m, self.v, self.max_v if self.amsgrad else [None] * len(self.params)):\n                grid = lambda meta: (triton.cdiv(param.numel(), meta['BLOCK_SIZE']), )\n                fused_adam_kernel[grid](\n                    param, grad, param.numel(), m, v, max_v, self.lr, \n                    beta1, beta2, beta1_pow_step, beta2_pow_step, \n                    self.eps, self.weight_decay, self.step_count, self.maximize, \n                    BLOCK_SIZE=1024\n                )\n\n    def foreach_step(self, beta1, beta2, beta1_pow_step, beta2_pow_step):\n        with torch.no_grad():\n            for param, grad, m, v, max_v in zip(self.params, [p.grad for p in self.params], self.m, self.v, self.max_v if self.amsgrad else [None] * len(self.params)):\n                m.mul_(beta1).add_(grad, alpha=1 - beta1)\n                v.mul_(beta2).addcmul_(grad, grad, value=1 - beta2)\n                m_hat = m / (1 - beta1_pow_step)\n                v_hat = v / (1 - beta2_pow_step)\n                if self.amsgrad:\n                    max_v = torch.maximum(max_v, v_hat)\n                    v_hat = max_v\n                update = self.lr * m_hat / (torch.sqrt(v_hat) + self.eps)\n                if self.maximize:\n                    param.add_(update)\n                else:\n                    param.sub_(update)\n\n    def for_loop_step(self, beta1, beta2, beta1_pow_step, beta2_pow_step):\n        with torch.no_grad():\n            for param, grad, m, v, max_v in zip(self.params, [p.grad for p in self.params], self.m, self.v, self.max_v if self.amsgrad else [None] * len(self.params)):\n                m.mul_(beta1).add_(grad, alpha=1 - beta1)\n                v.mul_(beta2).addcmul_(grad, grad, value=1 - beta2)\n                m_hat = m / (1 - beta1_pow_step)\n                v_hat = v / (1 - beta2_pow_step)\n                if self.amsgrad:\n                    max_v = torch.maximum(max_v, v_hat)\n                    v_hat = max_v\n                update = self.lr * m_hat / (torch.sqrt(v_hat) + self.eps)\n                if self.maximize:\n                    param.add_(update)\n                else:\n                    param.sub_(update)\n\n# Example usage:\n# params = [torch.randn(10, 10, requires_grad=True, device='cuda')]\n# optimizer = Adam(params, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0, amsgrad=True, foreach=True, maximize=False, capturable=False, differentiable=False, fused=True)\n# optimizer.zero_grad()\n# optimizer.step()\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining horizontal stacking (hstack) and element-wise division. The function first horizontally stacks a sequence of tensors and then divides each element of the resulting tensor by the corresponding element of a divisor tensor, with optional rounding modes.\nWrapper Entry Information: fused_hstack_div(tensors, divisor, *, rounding_mode=None, out=None) -> Tensor\n\n- **tensors** (sequence of Tensors): Sequence of tensors to be horizontally stacked. The tensors must have compatible shapes for stacking.\n- **divisor** (Tensor or Number): The tensor or number to divide the stacked tensor by. Must be broadcastable to the shape of the stacked tensor.\n- **rounding_mode** (str, optional): Type of rounding applied to the result:\n  - `None`: Default behavior. Performs no rounding and, if both `input` and `divisor` are integer types, promotes the inputs to the default scalar type. Equivalent to true division in Python (`/` operator).\n  - `'trunc'`: Rounds the results of the division towards zero.\n  - `'floor'`: Rounds the results of the division down.\n\n  Default: `None`.\n\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given a sequence of tensors [X_1, X_2, \\dots, X_n] and a divisor tensor D, the function computes:\n\n1. **Horizontal Stacking:**\n\n\\[\nX = \\text{hstack}(X_1, X_2, \\dots, X_n)\n\\]\n\n2. **Element-wise Division:**\n\n\\[\nY = \\frac{X}{D}\n\\]\nother: - The tensors in `tensors` must have shapes that are compatible for horizontal stacking, i.e., the dimensions except for the stacking dimension must be the same.\n- The `divisor` tensor must be broadcastable to the shape of the stacked tensor.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining horizontal stacking (hstack) and element-wise division. The function first horizontally stacks a sequence of tensors and then divides each element of the resulting tensor by the corresponding element of a divisor tensor, with optional rounding modes.\nWrapper Entry Information: fused_hstack_div(tensors, divisor, *, rounding_mode=None, out=None) -> Tensor\n\n- **tensors** (sequence of Tensors): Sequence of tensors to be horizontally stacked. The tensors must have compatible shapes for stacking.\n- **divisor** (Tensor or Number): The tensor or number to divide the stacked tensor by. Must be broadcastable to the shape of the stacked tensor.\n- **rounding_mode** (str, optional): Type of rounding applied to the result:\n  - `None`: Default behavior. Performs no rounding and, if both `input` and `divisor` are integer types, promotes the inputs to the default scalar type. Equivalent to true division in Python (`/` operator).\n  - `'trunc'`: Rounds the results of the division towards zero.\n  - `'floor'`: Rounds the results of the division down.\n\n  Default: `None`.\n\n- **out** (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: Given a sequence of tensors [X_1, X_2, \\dots, X_n] and a divisor tensor D, the function computes:\n\n1. **Horizontal Stacking:**\n\n\\[\nX = \\text{hstack}(X_1, X_2, \\dots, X_n)\n\\]\n\n2. **Element-wise Division:**\n\n\\[\nY = \\frac{X}{D}\n\\]\nother: - The tensors in `tensors` must have shapes that are compatible for horizontal stacking, i.e., the dimensions except for the stacking dimension must be the same.\n- The `divisor` tensor must be broadcastable to the shape of the stacked tensor.\n- The function supports autograd for gradient computation.\n- All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for fused hstack and division\n@triton.jit\ndef fused_hstack_div_kernel(\n    *tensors_ptr,  # Pointers to the input tensors\n    divisor_ptr,   # Pointer to the divisor tensor\n    out_ptr,       # Pointer to the output tensor\n    n_elements,    # Total number of elements in the output tensor\n    n_tensors,     # Number of input tensors\n    tensor_widths,  # Widths of the input tensors (for hstack)\n    divisor_is_scalar: tl.constexpr,  # Flag indicating if the divisor is a scalar\n    rounding_mode: tl.constexpr,      # Rounding mode\n    BLOCK_SIZE: tl.constexpr          # Block size for Triton kernel execution\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    # Load the divisor\n    if divisor_is_scalar:\n        divisor = tl.load(divisor_ptr)\n    else:\n        divisor = tl.load(divisor_ptr + offsets, mask=mask)\n\n    # Initialize the output tensor\n    out = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    # Load and stack the input tensors\n    offset = 0\n    for i in range(n_tensors):\n        tensor_width = tensor_widths[i]\n        tensor_mask = (offsets >= offset) & (offsets < offset + tensor_width) & mask\n        tensor_offsets = offsets - offset\n        tensor_data = tl.load(tensors_ptr[i] + tensor_offsets, mask=tensor_mask)\n        out += tensor_data\n        offset += tensor_width\n\n    # Perform element-wise division with the specified rounding mode\n    if rounding_mode == 0:  # None\n        out = out / divisor\n    elif rounding_mode == 1:  # 'trunc'\n        out = tl.where(out >= 0, tl.floor(out / divisor), tl.ceil(out / divisor))\n    elif rounding_mode == 2:  # 'floor'\n        out = tl.floor(out / divisor)\n\n    # Store the result in the output tensor\n    tl.store(out_ptr + offsets, out, mask=mask)\n\ndef fused_hstack_div(tensors, divisor, *, rounding_mode=None, out=None):\n    \"\"\"\n    Performs a fused operation combining horizontal stacking (hstack) and element-wise division.\n    \n    Parameters:\n    - tensors (sequence of Tensors): Sequence of tensors to be horizontally stacked.\n    - divisor (Tensor or Number): The tensor or number to divide the stacked tensor by.\n    - rounding_mode (str, optional): Type of rounding applied to the result:\n      - `None`: Default behavior. Performs no rounding and, if both `input` and `divisor` are integer types, promotes the inputs to the default scalar type. Equivalent to true division in Python (`/` operator).\n      - `'trunc'`: Rounds the results of the division towards zero.\n      - `'floor'`: Rounds the results of the division down.\n      Default: `None`.\n    - out (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\n    \n    Returns:\n    - Tensor: The resulting tensor after performing the fused operation.\n    \"\"\"\n    # Validate input tensors\n    if not all(isinstance(t, torch.Tensor) for t in tensors):\n        raise ValueError(\"All elements in 'tensors' must be tensors.\")\n    \n    # Validate divisor\n    if not isinstance(divisor, (torch.Tensor, int, float)):\n        raise ValueError(\"Divisor must be a tensor or a number.\")\n    \n    # Determine the shape of the stacked tensor\n    stacked_shape = list(tensors[0].shape)\n    stacked_shape[1] = sum(t.shape[1] for t in tensors)\n    \n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty(stacked_shape, dtype=tensors[0].dtype, device=tensors[0].device)\n    else:\n        if out.shape != stacked_shape:\n            raise ValueError(\"Output tensor shape does not match the expected shape.\")\n    \n    # Determine the number of elements in the output tensor\n    n_elements = out.numel()\n    \n    # Determine the block size for Triton kernel execution\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Prepare the tensor widths for hstack\n    tensor_widths = [t.shape[1] for t in tensors]\n    \n    # Prepare the divisor\n    if isinstance(divisor, (int, float)):\n        divisor = torch.tensor(divisor, dtype=tensors[0].dtype, device=tensors[0].device)\n        divisor_is_scalar = True\n    else:\n        divisor_is_scalar = False\n    \n    # Determine the rounding mode\n    rounding_mode_map = {None: 0, 'trunc': 1, 'floor': 2}\n    rounding_mode = rounding_mode_map.get(rounding_mode, 0)\n    \n    # Prepare the pointers for the Triton kernel\n    tensors_ptr = [t.data_ptr() for t in tensors]\n    divisor_ptr = divisor.data_ptr()\n    out_ptr = out.data_ptr()\n    \n    # Launch the Triton kernel\n    fused_hstack_div_kernel[grid_size, block_size](\n        *tensors_ptr,\n        divisor_ptr,\n        out_ptr,\n        n_elements,\n        len(tensors),\n        tensor_widths,\n        divisor_is_scalar,\n        rounding_mode,\n        BLOCK_SIZE=block_size\n    )\n    \n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Broadcasts the given tensors according to broadcasting semantics. This function takes multiple tensors as input and broadcasts them to have the same shape. Broadcasting refers to expanding the dimensions of tensors as necessary to make them compatible for element-wise operations. The broadcasted tensors share the same memory location for their elements, leading to potential issues with in-place operations.\nWrapper Entry Information: broadcast_tensors(*tensors) -> List of Tensors: *tensors (Args: any number of tensors of the same type) -> Example: x = torch.arange(3).view(1, 3), y = torch.arange(2).view(2, 1), a, b = torch.broadcast_tensors(x, y), a.size() == torch.Size([2, 3]), a == tensor([[0, 1, 2],[0, 1, 2]])\nother: More than one element of a broadcasted tensor may refer to a single memory location. In-place operations may result in incorrect behavior. If writing to tensors is needed, clone them first.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function for matrix multiplication with sparse tensors in BSR format and a regular dense matrix, and a wrapper function to call this kernel from PyTorch. import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef _sampled_addmm_kernel(\n    alpha,\n    beta,\n    IS_BETA_ZERO: tl.constexpr,\n    BLOCKSIZE_ROW: tl.constexpr,\n    BLOCKSIZE_COL: tl.constexpr,\n    k,\n    TILE_K: tl.constexpr,\n    values_ptr,\n    values_batch_stride,\n    values_nnz_stride,\n    values_row_block_stride,\n    values_col_block_stride,\n    crow_indices_ptr,\n    crow_indices_batch_stride,\n    crow_indices_stride,\n    col_indices_ptr,\n    col_indices_batch_stride,\n    col_indices_stride,\n    mat1_ptr,\n    mat1_batch_stride,\n    mat1_tiled_row_stride,\n    mat1_tiled_col_stride,\n    mat1_row_block_stride,\n    mat1_col_block_stride,\n    mat2_ptr,\n    mat2_batch_stride,\n    mat2_tiled_row_stride,\n    mat2_tiled_col_stride,\n    mat2_row_block_stride,\n    mat2_col_block_stride,\n    acc_dtype: tl.constexpr,\n    allow_tf32: tl.constexpr,\n):\n    batch_pid = tl.program_id(axis=1)\n    row_block_pid = tl.program_id(axis=0)\n\n    crow_indices_offset_ptr = (\n        crow_indices_ptr\n        + crow_indices_batch_stride * batch_pid\n        + crow_indices_stride * row_block_pid\n    )\n    nnz_offset = tl.load(crow_indices_offset_ptr)\n    nnz_offset_next = tl.load(crow_indices_offset_ptr + crow_indices_stride)\n\n    # Compute nnz for the row with number row_block_pid.\n    # If it is zero, skip the row.\n    row_nnz = nnz_offset_next - nnz_offset\n    if row_nnz == 0:\n        return\n\n    row_block_arange = tl.arange(0, BLOCKSIZE_ROW)\n    col_block_arange = tl.arange(0, BLOCKSIZE_COL)\n\n    # Pointers are set to the first block of the current row.\n    values_block_ptrs = (\n        values_ptr\n        + values_batch_stride * batch_pid\n        + values_nnz_stride * nnz_offset\n        + values_row_block_stride * row_block_arange[:, None]\n        + values_col_block_stride * col_block_arange[None, :]\n    )\n\n    col_index_nnz_ptr = (\n        col_indices_ptr\n        + col_indices_batch_stride * batch_pid\n        + col_indices_stride * nnz_offset\n    )\n\n    # Advance mat1 to the current tiled row, ignore columns.\n    mat1_block_ptrs = (\n        mat1_ptr\n        + mat1_batch_stride * batch_pid\n        + mat1_tiled_row_stride * row_block_pid\n        + mat1_row_block_stride * row_block_arange[:, None]\n    )\n\n    # Advance mat2 in batch and block col dimension.\n    mat2_block_ptrs = (\n        mat2_ptr\n        + mat2_batch_stride * batch_pid\n        + mat2_col_block_stride * col_block_arange[None, :]\n    )\n\n    k_tile_arange = tl.arange(0, TILE_K)\n    for _ in range(row_nnz):\n        acc_block = tl.zeros((BLOCKSIZE_ROW, BLOCKSIZE_COL), dtype=acc_dtype)\n\n        # find column block index\n        col_block = tl.load(col_index_nnz_ptr)\n\n        for k_tile in range(0, k, TILE_K):\n            k_offsets = k_tile + k_tile_arange\n            mask_k = k_offsets < k\n\n            mat1_block = tl.load(\n                mat1_block_ptrs\n                + mat1_col_block_stride * k_offsets[None, :],\n                mask=mask_k[None, :], other=0.0\n            )\n\n            mat2_block = tl.load(\n                mat2_block_ptrs\n                + mat2_tiled_col_stride * col_block\n                + mat2_row_block_stride * k_offsets[:, None],\n                mask=mask_k[:, None], other=0.0\n            )\n\n            acc_block += tl.dot(mat1_block, mat2_block, allow_tf32=allow_tf32, out_dtype=acc_dtype)\n\n        if IS_BETA_ZERO:\n            acc_block *= alpha\n        else:\n            acc_block = alpha * acc_block + beta * tl.load(values_block_ptrs)\n\n        # write result\n        tl.store(values_block_ptrs, acc_block.to(values_ptr.dtype.element_ty))\n\n        # advance val/col_index ptrs to the next block in the row.\n        values_block_ptrs += values_nnz_stride\n        col_index_nnz_ptr += col_indices_stride\n\ndef sampled_addmm(\n    input: torch.Tensor,\n    mat1: torch.Tensor,\n    mat2: torch.Tensor,\n    *,\n    beta=1.0,\n    alpha=1.0,\n    out: Optional[torch.Tensor] = None,\n    skip_checks: bool = False,\n    max_grid: Optional[Tuple[Optional[int], Optional[int], Optional[int]]] = None,\n):\n    f_name = \"sampled_addmm\"\n\n    def check(cond, msg):\n        if not cond:\n            raise ValueError(msg)\n\n    def check_bsr_layout(f_name, t):\n        check(\n            t.layout == torch.sparse_bsr,\n            f\"{f_name}(): only BSR sparse format is supported for the sparse argument.\",\n        )\n\n    def check_device(f_name, t, device):\n        check(\n            t.device == device and t.device.type == \"cuda\",\n            f\"{f_name}(): all inputs are expected to be on the same GPU device.\",\n        )\n\n    def check_mm_compatible_shapes(f_name, lhs, rhs):\n        check(\n            lhs.dim() >= 2 and rhs.dim() >= 2,\n            f\"{f_name}(): all inputs involved in the matrix product are expected to be at least 2D, \"\n            f\"but got lhs.dim() == {lhs.dim()} and rhs.dim() == {rhs.dim()}.\"\n        )\n\n        m, kl = lhs.shape[-2:]\n        kr, n = rhs.shape[-2:]\n\n        check(\n            kl == kr,\n            f\"{f_name}(): arguments' sizes involved in the matrix product are not compatible for matrix multiplication, \"\n            f\"got lhs.shape[-1] == {kl} which is not equal to rhs.shape[-2] == {kr}.\",\n        )\n\n    def check_dtype(f_name, t, dtype, *additional_dtypes):\n        check(\n            t.dtype == dtype\n            and t.dtype in ((torch.half, torch.bfloat16, torch.float) + tuple(*additional_dtypes)),\n            f\"{f_name}(): all inputs are expected to be of the same dtype \"\n            f\"and one of (half, bfloat16, float32) or {additional_dtypes}, \"\n            f\"but got dtype == {t.dtype}.\",\n        )\n\n    def check_blocksize(f_name, blocksize):\n        assert len(blocksize) == 2\n\n        def is_power_of_two(v):\n            return not (v & (v - 1))\n\n        def is_compatible_blocksize(b):\n            res = True\n            for blocksize in b:\n                # Triton loads only blocks which are at least 16 and powers of 2.\n                res = (blocksize >= 16 and is_power_of_two(blocksize)) and res\n            return res\n\n        check(\n            is_compatible_blocksize(blocksize),\n            f\"{f_name}(): sparse inputs' blocksize ({blocksize[0]}, {blocksize[1]}) \"\n            \"should be at least 16 and a power of 2 in each dimension.\",\n        )\n\n    def make_triton_contiguous(t):\n        \"\"\"Return input as a triton-contiguous tensor.\n\n        A triton-contiguous tensor is defined as a tensor that has strides\n        with minimal value equal to 1.\n\n        While triton kernels support triton-non-contiguous tensors (all\n        strides being greater than 1 or having 0 strides) arguments, a\n        considerable slow-down occurs because tensor data is copied\n        element-wise rather than chunk-wise.\n        \"\"\"\n        if min(t.stride()) != 1:\n            # TODO: investigate if contiguity along other axes than the\n            # last one can be beneficial for performance\n            return t.contiguous()\n        else:\n            return t\n\n    def broadcast_batch_dims(f_name, *tensors):\n        try:\n            return torch.broadcast_shapes(*(t.shape[:-2] for t in tensors))\n        except Exception:\n            check(False, f\"{f_name}(): inputs' batch dimensions are not broadcastable!\")\n\n    def prepare_inputs(bsr, *dense_tensors):\n        # Introduce fake batch dimension if not present for convenience.\n        crow_indices = bsr.crow_indices().unsqueeze(0)\n        col_indices = bsr.col_indices().unsqueeze(0)\n        values = make_triton_contiguous(bsr.values().unsqueeze(0))\n        tensors = [make_triton_contiguous(t.unsqueeze(0)) for t in dense_tensors]\n\n        # Compute broadcasted batch dimension\n        batch_dims_broadcasted = torch.broadcast_shapes(values.shape[:-3], *(t.shape[:-2] for t in tensors))\n\n        # Broadcast batch dimensions and squash.\n        # The result can be either a view or a copy.\n        def batch_broadcast_and_squash(t, batch_dims, invariant_dims):\n            return t.broadcast_to(batch_dims + invariant_dims).flatten(\n                0, len(batch_dims) - 1\n            )\n\n        crow_indices = batch_broadcast_and_squash(\n            crow_indices, batch_dims_broadcasted, (-1,)\n        )\n\n        col_indices = batch_broadcast_and_squash(\n            col_indices, batch_dims_broadcasted, (-1,)\n        )\n        values = batch_broadcast_and_squash(\n            values, batch_dims_broadcasted, values.shape[-3:]\n        )\n        tensors = [\n            batch_broadcast_and_squash(t, batch_dims_broadcasted, t.shape[-2:]) for t in tensors\n        ]\n\n        return crow_indices, col_indices, values, *tensors\n\n    def tile_to_blocksize(t, blocksize):\n        *rest, m, n = t.shape\n        new_shape = rest + [\n            m // blocksize[0],\n            blocksize[0],\n            n // blocksize[1],\n            blocksize[1],\n        ]\n        # using .view instead of .reshape to ensure that the result is\n        # indeed a view:\n        return t.view(new_shape).transpose(-3, -2)\n\n    def broadcast_batch_dims_bsr(f_name, bsr, *tensors):\n        batch_shape = broadcast_batch_dims(f_name, bsr, *tensors)\n\n        crow_indices = bsr.crow_indices().broadcast_to(batch_shape + (-1,))\n        col_indices = bsr.col_indices().broadcast_to(batch_shape + (-1,))\n        values = bsr.values().broadcast_to(batch_shape + bsr.values().shape[-3:])\n        size = batch_shape + bsr.shape[-2:]\n        return torch.sparse_compressed_tensor(crow_indices, col_indices, values, size=size, layout=bsr.layout)\n\n    check_bsr_layout(f_name, input)\n    input_broadcasted = broadcast_batch_dims_bsr(f_name, input, mat1, mat2)\n\n    if not skip_checks:\n        check_device(f_name, mat1, input.device)\n        check_device(f_name, mat2, input.device)\n        if beta != 0.0 and input.dtype is torch.bool:\n            check(\n                False,\n                f\"{f_name}(): having beta == {beta} not equal to 0.0 with boolean mask is not allowed.\"\n            )\n        if input.dtype is not torch.bool:\n            check_dtype(f_name, mat1, input.dtype)\n            check_dtype(f_name, mat2, input.dtype)\n        else:\n            check_dtype(f_name, mat1, mat2.dtype)\n        check_mm_compatible_shapes(f_name, mat1, mat2)\n        if out is not None:\n            check_bsr_layout(f_name, out)\n            check_device(f_name, out, mat1.device)\n            check_dtype(f_name, out, input.dtype)\n            check(\n                out.shape == input_broadcasted.shape\n                and out._nnz() == input_broadcasted._nnz(),\n                f\"{f_name}(): Expects `out` to be of shape {input_broadcasted.shape} \"\n                f\"and with nnz equal to {input_broadcasted._nnz()} \"\n                f\"but got out.shape = {out.shape} and out.nnz = {out._nnz()}\"\n            )\n\n    if out is None:\n        out = input_broadcasted.to(mat1.dtype, copy=True)\n    else:\n        out.copy_(input_broadcasted)\n\n    if out.numel() == 0 or out._nnz() == 0:\n        return out\n\n    blocksize = out.values().shape[-2:]\n    m = mat1.size(-2)\n    n = mat2.size(-1)\n    k = mat1.size(-1)\n\n    # NOTE: (m, 0) @ (0, n) == zeros(m, n)\n    if alpha == 0.0 or k == 0:\n        out.values().mul_(beta)\n        return out\n\n    # prepare inputs by reshaping them to be kernel-compatible\n    out_backup = out\n    crow_indices, col_indices, values, mat1, mat2 = prepare_inputs(out, mat1, mat2)\n\n    mat1 = tile_to_blocksize(mat1, (blocksize[0], k))\n    mat2 = tile_to_blocksize(mat2, (k, blocksize[1]))\n    tile_k = max(*blocksize)\n\n    _run_sampled_addmm_kernel(\n        alpha, beta, beta == 0.0,\n        blocksize, k, tile_k,\n        values, crow_indices, col_indices,\n        mat1, mat2,\n        max_grid\n    )\n\n    # If nnz x block strides are not the same in out_backup.values and values,\n    # it means that out_backup.values and values are not the views of each other,\n    # so we have to copy.\n    if out_backup.values().stride()[-3:] != values.stride()[-3:]:\n        out_backup.values().copy_(values.reshape(out_backup.values().shape))\n    return out_backup\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Broadcasts the given tensors according to broadcasting semantics. This function takes multiple tensors as input and broadcasts them to have the same shape. Broadcasting refers to expanding the dimensions of tensors as necessary to make them compatible for element-wise operations. The broadcasted tensors share the same memory location for their elements, leading to potential issues with in-place operations.\nWrapper Entry Information: broadcast_tensors(*tensors) -> List of Tensors: *tensors (Args: any number of tensors of the same type) -> Example: x = torch.arange(3).view(1, 3), y = torch.arange(2).view(2, 1), a, b = torch.broadcast_tensors(x, y), a.size() == torch.Size([2, 3]), a == tensor([[0, 1, 2],[0, 1, 2]])\nother: More than one element of a broadcasted tensor may refer to a single memory location. In-place operations may result in incorrect behavior. If writing to tensors is needed, clone them first.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n@triton.jit\ndef _elementwise_op_kernel(\n    x_ptr, y_ptr, output_ptr, size: tl.constexpr\n):\n    pid = tl.program_id(axis=0)\n    block_size = 1024\n    block_start = pid * block_size\n    offsets = block_start + tl.arange(0, block_size)\n    mask = offsets < size\n\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.load(y_ptr + offsets, mask=mask)\n    output = x + y  # Example element-wise operation: addition\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef broadcast_tensors(*tensors):\n    # Use PyTorch's built-in broadcasting to handle the tensors\n    broadcasted_tensors = torch.broadcast_tensors(*tensors)\n    \n    # Example: Perform an element-wise operation using the Triton kernel\n    if len(broadcasted_tensors) == 2:\n        x, y = broadcasted_tensors\n        output = torch.empty_like(x)\n        \n        # Define the grid and block sizes\n        grid = lambda meta: (x.numel() // meta['BLOCK_SIZE'] + 1,)\n        _elementwise_op_kernel[grid](x, y, output, x.numel(), BLOCK_SIZE=1024)\n        \n        # Return the output tensor\n        return [output, output]\n    else:\n        return broadcasted_tensors\n\n# Example usage\nx = torch.arange(3).view(1, 3)\ny = torch.arange(2).view(2, 1)\na, b = broadcast_tensors(x, y)\nprint(a.size())  # Output: torch.Size([2, 3])\nprint(a)  # Output: tensor([[0, 1, 2], [0, 1, 2]])\n\nx = torch.arange(3).view(1, 3)\ny = torch.arange(2).view(2, 1)\na, b = broadcast_tensors(x, y)\nassert a.size() == torch.Size([2, 3])\nassert torch.all(a == torch.tensor([[0, 1, 2], [0, 1, 2]]))\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor, followed by applying the rectified linear unit (ReLU) activation function element-wise on the result. This operation first applies a 2D convolution over the input tensor using the specified filters, and then applies ReLU activation to the convolution result, setting all negative values to zero.\nWrapper Entry Information: relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, inplace=False) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1. inplace (bool, optional): If True, will perform ReLU operation in-place. Default: False.\nMath: The operation is defined as: \\text{out} = \\text{ReLU}(\\text{conv2d}(\\text{input})), where \\text{ReLU}(x) = \\max(0, x).\nother: Returns:\n    Tensor: A tensor resulting from the 2D convolution followed by ReLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input tensor, followed by applying the rectified linear unit (ReLU) activation function element-wise on the result. This operation first applies a 2D convolution over the input tensor using the specified filters, and then applies ReLU activation to the convolution result, setting all negative values to zero.\nWrapper Entry Information: relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, inplace=False) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Default: 1. padding (int, tuple, or string, optional): Padding added to all sides of the input. Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1. inplace (bool, optional): If True, will perform ReLU operation in-place. Default: False.\nMath: The operation is defined as: \\text{out} = \\text{ReLU}(\\text{conv2d}(\\text{input})), where \\text{ReLU}(x) = \\max(0, x).\nother: Returns:\n    Tensor: A tensor resulting from the 2D convolution followed by ReLU activation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef relu_conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, output_ptr,\n    input_shape, weight_shape, output_shape,\n    stride, padding, dilation, groups,\n    BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_H: tl.constexpr, BLOCK_SIZE_W: tl.constexpr\n):\n    \"\"\"\n    Applies a 2D convolution followed by ReLU activation.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    weight_ptr : tl.tensor\n        Pointer to the weight tensor in global memory.\n    bias_ptr : tl.tensor\n        Pointer to the bias tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    input_shape : tuple\n        Shape of the input tensor (N, C, H, W).\n    weight_shape : tuple\n        Shape of the weight tensor (O, I, K, K).\n    output_shape : tuple\n        Shape of the output tensor (N, O, H_out, W_out).\n    stride : int or tuple\n        Stride of the convolution.\n    padding : int or tuple\n        Padding added to all sides of the input.\n    dilation : int or tuple\n        Spacing between kernel elements.\n    groups : int\n        Number of blocked connections from input channels to output channels.\n    BLOCK_SIZE_N : tl.constexpr\n        Block size for the batch dimension.\n    BLOCK_SIZE_H : tl.constexpr\n        Block size for the height dimension.\n    BLOCK_SIZE_W : tl.constexpr\n        Block size for the width dimension.\n    \"\"\"\n    n, c, h, w = input_shape\n    o, ic, kh, kw = weight_shape\n    _, _, h_out, w_out = output_shape\n\n    pid_n = tl.program_id(0)\n    pid_h = tl.program_id(1)\n    pid_w = tl.program_id(2)\n\n    n_start = pid_n * BLOCK_SIZE_N\n    h_start = pid_h * BLOCK_SIZE_H\n    w_start = pid_w * BLOCK_SIZE_W\n\n    n_offsets = n_start + tl.arange(0, BLOCK_SIZE_N)\n    h_offsets = h_start + tl.arange(0, BLOCK_SIZE_H)\n    w_offsets = w_start + tl.arange(0, BLOCK_SIZE_W)\n\n    mask_n = n_offsets < n\n    mask_h = h_offsets < h_out\n    mask_w = w_offsets < w_out\n\n    output_offsets = n_offsets[:, None, None] * o * h_out * w_out + \\\n                     h_offsets[None, :, None] * w_out + \\\n                     w_offsets[None, None, :]\n\n    output = tl.zeros((BLOCK_SIZE_N, BLOCK_SIZE_H, BLOCK_SIZE_W), dtype=tl.float32)\n\n    for oc in range(o):\n        for icg in range(ic // groups):\n            for kh in range(kh):\n                for kw in range(kw):\n                    h_in = h_offsets * stride - padding + kh * dilation\n                    w_in = w_offsets * stride - padding + kw * dilation\n                    mask_h_in = (h_in >= 0) & (h_in < h)\n                    mask_w_in = (w_in >= 0) & (w_in < w)\n                    mask_in = mask_h_in & mask_w_in & mask_n\n\n                    input_idx = n_offsets[:, None, None] * c * h * w + \\\n                                (icg * groups + pid_n) * h * w + \\\n                                h_in[None, :, None] * w + \\\n                                w_in[None, None, :]\n\n                    weight_idx = oc * ic * kh * kw + icg * kh * kw + kh * kw + kw\n\n                    input_val = tl.load(input_ptr + input_idx, mask=mask_in, other=0.0)\n                    weight_val = tl.load(weight_ptr + weight_idx)\n\n                    output += input_val * weight_val\n\n        if bias_ptr is not None:\n            bias_val = tl.load(bias_ptr + oc)\n            output += bias_val\n\n    output = tl.maximum(output, 0.0)  # Apply ReLU\n\n    tl.store(output_ptr + output_offsets, output, mask=mask_n & mask_h & mask_w)\n\ndef relu_conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1, inplace=False):\n    \"\"\"\n    Applies a 2D convolution followed by ReLU activation.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        The input tensor of shape (minibatch, in_channels, iH, iW).\n    weight : torch.Tensor\n        The convolution filters of shape (out_channels, in_channels / groups, kH, kW).\n    bias : torch.Tensor, optional\n        Optional bias tensor of shape (out_channels). Default: None.\n    stride : int or tuple, optional\n        The stride of the convolution kernel. Default: 1.\n    padding : int, tuple, or string, optional\n        Padding added to all sides of the input. Default: 0.\n    dilation : int or tuple, optional\n        The spacing between kernel elements. Default: 1.\n    groups : int, optional\n        Number of blocked connections from input channels to output channels. Default: 1.\n    inplace : bool, optional\n        If True, will perform ReLU operation in-place. Default: False.\n\n    Returns:\n    --------\n    torch.Tensor\n        A tensor resulting from the 2D convolution followed by ReLU activation.\n    \"\"\"\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n\n    N, C, H, W = input.shape\n    O, IC, KH, KW = weight.shape\n    IC = IC * groups\n    assert C % groups == 0, \"Input channels must be divisible by groups\"\n\n    if isinstance(stride, int):\n        stride = (stride, stride)\n    if isinstance(padding, int):\n        padding = (padding, padding)\n    if isinstance(dilation, int):\n        dilation = (dilation, dilation)\n\n    H_out = (H + 2 * padding[0] - dilation[0] * (KH - 1) - 1) // stride[0] + 1\n    W_out = (W + 2 * padding[1] - dilation[1] * (KW - 1) - 1) // stride[1] + 1\n\n    output_shape = (N, O, H_out, W_out)\n    output = torch.empty(output_shape, device=device)\n\n    BLOCK_SIZE_N = 16\n    BLOCK_SIZE_H = 16\n    BLOCK_SIZE_W = 16\n\n    grid = (N // BLOCK_SIZE_N, H_out // BLOCK_SIZE_H, W_out // BLOCK_SIZE_W)\n\n    relu_conv2d_kernel[grid](\n        input_ptr=input,\n        weight_ptr=weight,\n        bias_ptr=bias,\n        output_ptr=output,\n        input_shape=(N, C, H, W),\n        weight_shape=(O, IC // groups, KH, KW),\n        output_shape=output_shape,\n        stride=stride[0],\n        padding=padding[0],\n        dilation=dilation[0],\n        groups=groups,\n        BLOCK_SIZE_N=BLOCK_SIZE_N,\n        BLOCK_SIZE_H=BLOCK_SIZE_H,\n        BLOCK_SIZE_W=BLOCK_SIZE_W\n    )\n\n    if inplace:\n        input.copy_(output)\n        return input\n    else:\n        return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of the elements of the input tensor.\nWrapper Entry Information: log(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_{i} = \\log_{e} (x_{i})\nother: The function computes the natural logarithm (base e) of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a softmax operation on a 2D tensor. The kernel function 'softmax_kernel' takes 6 parameters: output_ptr (pointer to output tensor), input_ptr (pointer to input tensor), input_row_stride (stride of input tensor rows), output_row_stride (stride of output tensor rows), n_cols (number of columns in the input tensor), and BLOCK_SIZE (block size for processing). The function loads a row of the input tensor, computes the softmax, and stores the result in the output tensor. The 'softmax' function is a wrapper that prepares the input tensor, determines the block size, and launches the kernel. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n    # Subtract maximum for numerical stability\n    row_minus_max = row - tl.max(row, axis=0)\n    # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)\n    numerator = tl.exp(row_minus_max)\n    denominator = tl.sum(numerator, axis=0)\n    softmax_output = numerator / denominator\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, softmax_output, mask=col_offsets < n_cols)\n\ndef softmax(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    # You will see in the next tutorial how to auto-tune this value in a more natural\n    # way so you don't have to come up with manual heuristics yourself.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row o\n    # f the input matrix\n    softmax_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the natural logarithm of the elements of the input tensor.\nWrapper Entry Information: log(input, *, out=None) -> Tensor Args: input (Tensor): the input tensor. Keyword args: out (Tensor, optional): the output tensor.\nMath: y_{i} = \\log_{e} (x_{i})\nother: The function computes the natural logarithm (base e) of each element in the input tensor.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for computing the natural logarithm\n@triton.jit\ndef log_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Compute the 1D grid of program IDs\n    pid = tl.program_id(0)\n    # Compute the start index for this program instance\n    block_start = pid * BLOCK_SIZE\n    # Create a range of offsets for the block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    # Create a mask to ensure we don't access out-of-bounds memory\n    mask = offsets < n_elements\n    # Load the input elements\n    input_elements = tl.load(input_ptr + offsets, mask=mask)\n    # Compute the natural logarithm\n    output_elements = tl.log(input_elements)\n    # Store the result back to the output tensor\n    tl.store(output_ptr + offsets, output_elements, mask=mask)\n\n# Wrapper function for the log operation\ndef log(input, *, out=None):\n    # Determine the number of elements in the input tensor\n    n_elements = input.numel()\n    # Determine the block size (next power of two greater than the number of elements)\n    BLOCK_SIZE = triton.next_power_of_2(n_elements)\n    # Allocate the output tensor if not provided\n    if out is None:\n        out = torch.empty_like(input)\n    # Enqueue the kernel\n    log_kernel[(n_elements // BLOCK_SIZE + (n_elements % BLOCK_SIZE > 0))](\n        input,\n        out,\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a 2D adaptive average pooling over an input signal composed of several input planes. The output is of size H x W, for any input size. The number of output features is equal to the number of input planes. The target output size of the image can be a tuple (H, W) or a single H for a square image H x H. H and W can be either an int, or None which means the size will be the same as that of the input.\nWrapper Entry Information: def adaptive_avg_pool2d(output_size) -> Tensor\nArgs:\n    output_size: the target output size (single integer or double-integer tuple)\n\nShape:\n    - Input: (N, C, H_in, W_in) or (C, H_in, W_in)\n    - Output: (N, C, S_0, S_1) or (C, S_0, S_1), where S=output_size\nother: The target output size can be a single integer for square images or a tuple for rectangular dimensions. H and W can be None to retain input dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Apply a 2D adaptive average pooling over an input signal composed of several input planes. The output is of size H x W, for any input size. The number of output features is equal to the number of input planes. The target output size of the image can be a tuple (H, W) or a single H for a square image H x H. H and W can be either an int, or None which means the size will be the same as that of the input.\nWrapper Entry Information: def adaptive_avg_pool2d(output_size) -> Tensor\nArgs:\n    output_size: the target output size (single integer or double-integer tuple)\n\nShape:\n    - Input: (N, C, H_in, W_in) or (C, H_in, W_in)\n    - Output: (N, C, S_0, S_1) or (C, S_0, S_1), where S=output_size\nother: The target output size can be a single integer for square images or a tuple for rectangular dimensions. H and W can be None to retain input dimensions.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef adaptive_avg_pool2d_kernel(\n    input_ptr,  # *input tensor\n    output_ptr,  # *output tensor\n    N,  # batch size\n    C,  # number of channels\n    H_in,  # input height\n    W_in,  # input width\n    H_out,  # output height\n    W_out,  # output width\n    BLOCK_SIZE_C: tl.constexpr,  # block size for channels\n    BLOCK_SIZE_H: tl.constexpr,  # block size for height\n    BLOCK_SIZE_W: tl.constexpr,  # block size for width\n):\n    # Compute the output position for this thread\n    pid = tl.program_id(axis=0)\n    n = pid // (C * H_out * W_out)\n    c = (pid % (C * H_out * W_out)) // (H_out * W_out)\n    h_out = (pid % (H_out * W_out)) // W_out\n    w_out = pid % W_out\n\n    # Compute the input region for this output position\n    h_start = h_out * H_in // H_out\n    h_end = (h_out + 1) * H_in // H_out\n    w_start = w_out * W_in // W_out\n    w_end = (w_out + 1) * W_in // W_out\n\n    # Compute the average value for this output position\n    sum_val = 0.0\n    count = 0\n    for h in range(h_start, h_end):\n        for w in range(w_start, w_end):\n            input_offset = n * C * H_in * W_in + c * H_in * W_in + h * W_in + w\n            sum_val += tl.load(input_ptr + input_offset)\n            count += 1\n\n    avg_val = sum_val / count\n\n    # Write the result to the output tensor\n    output_offset = n * C * H_out * W_out + c * H_out * W_out + h_out * W_out + w_out\n    tl.store(output_ptr + output_offset, avg_val)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef adaptive_avg_pool2d(input: torch.Tensor, output_size) -> torch.Tensor:\n    # Determine the output size\n    if isinstance(output_size, int):\n        H_out = W_out = output_size\n    elif isinstance(output_size, tuple) and len(output_size) == 2:\n        H_out, W_out = output_size\n    else:\n        raise ValueError(\"output_size must be an integer or a tuple of two integers\")\n\n    # Determine the input shape\n    N, C, H_in, W_in = input.shape if input.dim() == 4 else (1, *input.shape)\n\n    # Determine the output shape\n    if H_out is None:\n        H_out = H_in\n    if W_out is None:\n        W_out = W_in\n\n    # Create the output tensor\n    output = torch.empty((N, C, H_out, W_out), device=input.device, dtype=input.dtype)\n\n    # Define the grid and block sizes\n    grid = (N * C * H_out * W_out, )\n    block = (1, )\n\n    # Launch the kernel\n    adaptive_avg_pool2d_kernel[grid, block](\n        input,  # *input tensor\n        output,  # *output tensor\n        N,  # batch size\n        C,  # number of channels\n        H_in,  # input height\n        W_in,  # input width\n        H_out,  # output height\n        W_out,  # output width\n        BLOCK_SIZE_C=1,  # block size for channels\n        BLOCK_SIZE_H=1,  # block size for height\n        BLOCK_SIZE_W=1,  # block size for width\n    )\n\n    # Return the output tensor\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Converts a float model to a dynamic quantized model by replacing specified modules with their dynamic weight-only quantized versions. Provides simple usage with a dtype argument (either float16 or qint8), and fine-grained control with qconfig and mapping parameters. The process is performed in-place if specified, transforming the original model.\nWrapper Entry Information: quantize_dynamic(model, qconfig_spec=None, inplace=False, mapping=None) -> Model\nArgs:\n    model: input model\n    qconfig_spec: Either a dictionary mapping submodule names/types to quantization configurations or a set of types/names for dynamic quantization\n    inplace: carry out model transformations in-place, mutating the original module\n    mapping: maps submodule types to dynamically quantized versions\nother: Dynamic quantization is typically performed on layers with large weight sizes such as Linear and RNN variants. The qconfig_spec can be a dictionary mapping submodule types or names to quantization configurations, or a set specifying which submodules to apply dynamic quantization to. If qconfig is provided, it overrides dtype.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement dynamic quantization with two kernels: (1) a helper kernel '_abs_max' that takes two values and returns the maximum absolute value between them; (2) a main kernel '_triton_dynamic_quantize_kernel' that processes input data pointers, applies a dynamic scale, and stores quantized results. It receives pointers for input, output, and scale tensors, strides, number of elements, and dimensions M and N. It computes the absolute maximum and dynamic scale per token, performs quantization, and stores the results. The main function 'triton_dynamic_quantize' prepares the input sizes and launches the kernel for processing. import triton\nimport triton.language as tl\n\n@triton.jit\ndef _abs_max(val1, val2):\n    # Calculate the absolute maximum of two values.\n    val1_abs = tl.abs(val1)\n    val2_abs = tl.abs(val2)\n    if val1_abs >= val2_abs:\n        return val1_abs\n    else:\n        return val2_abs\n\n@triton.autotune(configs=_get_autotune_configs(), key=[\"M\", \"N\"])\n@triton.jit\ndef _triton_dynamic_quantize_kernel(\n    output_ptr,  # Pointer to output tensor\n    input_ptr,   # Pointer to input tensor\n    scale_ptr,   # Pointer to scale tensor\n    stride_outputm,  # Stride for output in dimension m\n    stride_outputn,  # Stride for output in dimension n\n    stride_inputm,   # Stride for input in dimension m\n    stride_inputn,   # Stride for input in dimension n\n    n_elements,  # Number of elements to process\n    M: tl.constexpr,  # Number of rows (tokens)\n    N: tl.constexpr,  # Number of columns (hidden size)\n):\n    # Dynamic quantization kernel\n    pid = tl.program_id(axis=0)\n    offsets = tl.arange(0, N)\n    mask = offsets < n_elements\n    input_ptrs = input_ptr + pid * stride_inputm + offsets\n    input_vals = tl.load(input_ptrs, mask=mask, other=1e-6)\n    abs_max_f = tl.reduce(input_vals, 0, _abs_max)\n    dynamic_per_token_scale = 127.0 / abs_max_f\n    precison_mask = tl.where(input_vals > 0, 0.5, -0.5)\n    output_vals = (input_vals * dynamic_per_token_scale + precison_mask).to(tl.int8)\n    output_ptrs = output_ptr + pid * stride_outputm + offsets\n    tl.store(output_ptrs, output_vals, mask=mask)\n    tl.store(scale_ptr + pid, abs_max_f / 127.0)\n\n\ndef triton_dynamic_quantize(out, input, scale):\n    # Function to initiate the dynamic quantization process\n    assert input.is_contiguous(), \"input must be contiguous\"\n    num_tokens = input.size(0)\n    hidden_size = input.size(1)\n    block_size = 1024\n    # Ensure hidden_size is a power-of-two for tl.reduce\n    if hidden_size & (hidden_size - 1) == 0 and hidden_size > 0:\n        block_size = min(hidden_size / 2, block_size)\n    else:\n        hidden_size = triton.next_power_of_2(int(hidden_size))\n        block_size = min(hidden_size / 2, block_size)\n    # num_warps = int(max(block_size / THREADS_PER_WARP, 1))\n    _triton_dynamic_quantize_kernel[(num_tokens,)](\n        out,\n        input,\n        scale,\n        out.stride(0),\n        out.stride(1),\n        input.stride(0),\n        input.stride(1),\n        n_elements=input.size(1),\n        M=num_tokens,\n        N=hidden_size,\n    )\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Converts a float model to a dynamic quantized model by replacing specified modules with their dynamic weight-only quantized versions. Provides simple usage with a dtype argument (either float16 or qint8), and fine-grained control with qconfig and mapping parameters. The process is performed in-place if specified, transforming the original model.\nWrapper Entry Information: quantize_dynamic(model, qconfig_spec=None, inplace=False, mapping=None) -> Model\nArgs:\n    model: input model\n    qconfig_spec: Either a dictionary mapping submodule names/types to quantization configurations or a set of types/names for dynamic quantization\n    inplace: carry out model transformations in-place, mutating the original module\n    mapping: maps submodule types to dynamically quantized versions\nother: Dynamic quantization is typically performed on layers with large weight sizes such as Linear and RNN variants. The qconfig_spec can be a dictionary mapping submodule types or names to quantization configurations, or a set specifying which submodules to apply dynamic quantization to. If qconfig is provided, it overrides dtype.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport torch.nn as nn\nfrom torch.quantization import quantize_dynamic as torch_quantize_dynamic\n\ndef quantize_dynamic(model, qconfig_spec=None, inplace=False, mapping=None):\n    \"\"\"\n    Converts a float model to a dynamic quantized model by replacing specified modules with their dynamic weight-only quantized versions.\n    \n    Args:\n        model (torch.nn.Module): The input model to be quantized.\n        qconfig_spec (dict or set, optional): Either a dictionary mapping submodule names/types to quantization configurations or a set of types/names for dynamic quantization.\n        inplace (bool, optional): If True, carry out model transformations in-place, mutating the original module. Defaults to False.\n        mapping (dict, optional): A dictionary that maps submodule types to dynamically quantized versions. Defaults to None.\n    \n    Returns:\n        torch.nn.Module: The quantized model.\n    \"\"\"\n    # Determine the dtype for quantization based on the qconfig_spec or default to float16\n    dtype = torch.float16 if qconfig_spec is None else None\n    \n    # If qconfig_spec is provided, it overrides the dtype\n    if qconfig_spec is not None:\n        if isinstance(qconfig_spec, dict):\n            # qconfig_spec is a dictionary mapping submodule names/types to quantization configurations\n            qconfig_spec = {k: torch.quantization.default_dynamic_qconfig for k in qconfig_spec}\n        elif isinstance(qconfig_spec, set):\n            # qconfig_spec is a set specifying which submodules to apply dynamic quantization to\n            qconfig_spec = {k: torch.quantization.default_dynamic_qconfig for k in qconfig_spec}\n    \n    # Perform the dynamic quantization\n    quantized_model = torch_quantize_dynamic(\n        model=model,\n        qconfig_spec=qconfig_spec,\n        dtype=dtype,\n        inplace=inplace,\n        mapping=mapping\n    )\n    \n    return quantized_model\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image using specified filters and an optional bias, then adds another tensor or scalar to the convolution result, scaled by alpha. The input tensor shape is (minibatch, in_channels, iH, iW), and the weight tensor shape is (out_channels, in_channels / groups, kH, kW). The function also allows for setting the stride, padding, dilation, groups, and an optional output tensor.\nWrapper Entry Information: conv2d_add(input, weight, bias=None, other=None, stride=1, padding=0, dilation=1, groups=1, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. other (Tensor or Number, optional): The tensor or number to add to the convolution result. Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple (sH, sW). Default: 1. padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple (padH, padW). Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of groups to split the input into, must divide in_channels and out_channels. Default: 1. alpha (Number, optional): The multiplier for other. Default: 1. out (Tensor, optional): The output tensor.\nMath: \\text{out} = \\text{conv2d}(\\text{input}, \\text{weight}) + \\alpha \\times \\text{other}\nother: The 'groups' argument must divide both in_channels and out_channels. Padding can be specified as 'valid', 'same', a single number, or a tuple. The output tensor shape depends on convolution parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a 1D convolution kernel that applies a Gaussian kernel to input data. The kernel function 'convolve' takes six parameters: input_ptr (pointer to input tensor), output_ptr (pointer to output tensor), kernel_ptr (pointer to kernel tensor), X (length of input data), half_kernel_size (half the size of the kernel), and BLOCK_SIZE (block size for Triton grid). The function 'convolve_1d' wraps this kernel to perform convolution on a batch of input sequences using the specified Gaussian kernel, ensuring the input and kernel are on a CUDA device. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef convolve(\n    input_ptr, output_ptr, kernel_ptr, X, half_kernel_size, BLOCK_SIZE: tl.constexpr\n):\n    \"\"\"\n    Applies a 1D convolution with a Gaussian kernel to the input using Triton for GPU acceleration.\n\n    Parameters:\n    -----------\n    input_ptr : tl.tensor\n        Pointer to the input tensor in global memory.\n    output_ptr : tl.tensor\n        Pointer to the output tensor where the result will be stored.\n    kernel_ptr : tl.tensor\n        Pointer to the kernel tensor (Gaussian) used for convolution.\n    X : int\n        Length of the input data (number of elements along the 1D dimension).\n    half_kernel_size : int\n        Half the size of the kernel, used to calculate the kernel range.\n    BLOCK_SIZE : tl.constexpr\n        Size of the block used in the Triton kernel grid, determines the number of elements processed per block.\n\n    Notes:\n    ------\n    This function operates on 1D input data, performing convolution over a specified kernel size.\n    Handles boundaries by zero-padding the input when necessary.\n    \"\"\"\n\n    batch_id = tl.program_id(0)\n    block_start = tl.program_id(1) * BLOCK_SIZE\n    offsets = tl.arange(0, BLOCK_SIZE)\n    idx = block_start + offsets\n\n    mask = idx < X\n    result = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)\n\n    for k in range(2 * half_kernel_size + 1):\n        kernel_val = tl.load(kernel_ptr + k)\n        input_idx = idx + k - half_kernel_size\n        input_mask = (input_idx >= 0) & (input_idx < X) & mask\n        input_val = tl.load(\n            input_ptr + batch_id * X + input_idx, mask=input_mask, other=0.0\n        )\n        result += input_val * kernel_val\n\n    tl.store(output_ptr + batch_id * X + idx, result, mask=mask)\n\n\ndef convolve_1d(input, kernel):\n    \"\"\"\n    Performs a 1D convolution on a batch of input sequences using a Gaussian kernel.\n\n    Parameters:\n    -----------\n    input : torch.Tensor\n        A 2D tensor of shape (B, X) where B is the batch size and X is the length of the sequence.\n    kernel : torch.Tensor\n        A 1D tensor representing the convolution kernel (e.g., a Gaussian kernel).\n\n    Returns:\n    --------\n    torch.Tensor\n        A 2D tensor of shape (B, X) containing the convolved output.\n\n    Notes:\n    ------\n    The function divides the computation into blocks using Triton, performing convolution efficiently\n    on GPU by parallelizing over the batch dimension and the sequence length.\n    \"\"\"\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    assert input.device == kernel.device, \"Input and kernel must be on the same CUDA device.\"\n\n    B, X = input.shape\n    output = torch.empty_like(input)\n\n    BLOCK_SIZE = 256\n    num_blocks = (X + BLOCK_SIZE - 1) // BLOCK_SIZE\n    grid = (B, num_blocks)\n    half_kernel_size = kernel.shape[0] // 2\n\n    device = input.device\n    assert device.type == \"cuda\", \"Input tensor must be on a CUDA device for triton ops.\"\n    kernel = kernel.to(device)\n\n    convolve[grid](\n        input_ptr=input,\n        output_ptr=output,\n        kernel_ptr=kernel,\n        X=X,\n        half_kernel_size=half_kernel_size,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Applies a 2D convolution over an input image using specified filters and an optional bias, then adds another tensor or scalar to the convolution result, scaled by alpha. The input tensor shape is (minibatch, in_channels, iH, iW), and the weight tensor shape is (out_channels, in_channels / groups, kH, kW). The function also allows for setting the stride, padding, dilation, groups, and an optional output tensor.\nWrapper Entry Information: conv2d_add(input, weight, bias=None, other=None, stride=1, padding=0, dilation=1, groups=1, alpha=1, out=None) -> Tensor: input (Tensor): The input tensor of shape (minibatch, in_channels, iH, iW). weight (Tensor): The convolution filters of shape (out_channels, in_channels / groups, kH, kW). bias (Tensor, optional): Optional bias tensor of shape (out_channels). Default: None. other (Tensor or Number, optional): The tensor or number to add to the convolution result. Default: None. stride (int or tuple, optional): The stride of the convolution kernel. Can be a single number or a tuple (sH, sW). Default: 1. padding (int, tuple, or string, optional): Padding on both sides of the input. Can be 'valid', 'same', single number, or tuple (padH, padW). Default: 0. dilation (int or tuple, optional): The spacing between kernel elements. Default: 1. groups (int, optional): Number of groups to split the input into, must divide in_channels and out_channels. Default: 1. alpha (Number, optional): The multiplier for other. Default: 1. out (Tensor, optional): The output tensor.\nMath: \\text{out} = \\text{conv2d}(\\text{input}, \\text{weight}) + \\alpha \\times \\text{other}\nother: The 'groups' argument must divide both in_channels and out_channels. Padding can be specified as 'valid', 'same', a single number, or a tuple. The output tensor shape depends on convolution parameters.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\n\n# Triton kernel for 2D convolution\n@triton.jit\ndef conv2d_kernel(\n    input_ptr, weight_ptr, bias_ptr, other_ptr, output_ptr,\n    B, C, H, W, O, K, R, S, stride_h, stride_w, padding_h, padding_w,\n    dilation_h, dilation_w, groups, alpha, BLOCK_SIZE_N: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_size = BLOCK_SIZE_N\n    block_start = pid * block_size\n\n    # Compute the output dimensions\n    out_h = (H + 2 * padding_h - dilation_h * (R - 1) - 1) // stride_h + 1\n    out_w = (W + 2 * padding_w - dilation_w * (S - 1) - 1) // stride_w + 1\n\n    # Iterate over the output elements\n    for n in range(block_start, block_start + block_size):\n        if n >= B * out_h * out_w:\n            break\n\n        b = n // (out_h * out_w)\n        out_h_idx = (n % (out_h * out_w)) // out_w\n        out_w_idx = n % out_w\n\n        in_h_start = out_h_idx * stride_h - padding_h\n        in_w_start = out_w_idx * stride_w - padding_w\n\n        output_val = tl.zeros((O,), dtype=tl.float32)\n\n        for g in range(groups):\n            for k in range(K // groups):\n                for r in range(R):\n                    for s in range(S):\n                        in_h = in_h_start + r * dilation_h\n                        in_w = in_w_start + s * dilation_w\n\n                        if 0 <= in_h < H and 0 <= in_w < W:\n                            in_c_start = g * (C // groups)\n                            in_c_end = (g + 1) * (C // groups)\n\n                            weight_val = tl.load(weight_ptr + g * (K // groups) * R * S + k * R * S + r * S + s)\n                            input_val = tl.load(input_ptr + b * C * H * W + in_c_start * H * W + in_h * W + in_w)\n\n                            output_val += input_val * weight_val\n\n        if bias_ptr is not None:\n            bias_val = tl.load(bias_ptr + n % O)\n            output_val += bias_val\n\n        if other_ptr is not None:\n            other_val = tl.load(other_ptr + n % O)\n            output_val += alpha * other_val\n\n        tl.store(output_ptr + n, output_val)\n\n# Wrapper function for 2D convolution\ndef conv2d_add(input, weight, bias=None, other=None, stride=1, padding=0, dilation=1, groups=1, alpha=1, out=None):\n    # Validate input shapes and parameters\n    B, C, H, W = input.shape\n    O, C_per_group, R, S = weight.shape\n    assert C % groups == 0, \"in_channels must be divisible by groups\"\n    assert O % groups == 0, \"out_channels must be divisible by groups\"\n\n    # Handle stride, padding, and dilation\n    if isinstance(stride, int):\n        stride_h, stride_w = stride, stride\n    else:\n        stride_h, stride_w = stride\n\n    if isinstance(padding, int) or padding == 'valid' or padding == 'same':\n        if padding == 'valid':\n            padding_h, padding_w = 0, 0\n        elif padding == 'same':\n            padding_h = (dilation_h * (R - 1) + 1 - H % stride_h) // 2\n            padding_w = (dilation_w * (S - 1) + 1 - W % stride_w) // 2\n        else:\n            padding_h, padding_w = padding, padding\n    else:\n        padding_h, padding_w = padding\n\n    if isinstance(dilation, int):\n        dilation_h, dilation_w = dilation, dilation\n    else:\n        dilation_h, dilation_w = dilation\n\n    # Compute output dimensions\n    out_h = (H + 2 * padding_h - dilation_h * (R - 1) - 1) // stride_h + 1\n    out_w = (W + 2 * padding_w - dilation_w * (S - 1) - 1) // stride_w + 1\n\n    # Initialize output tensor\n    if out is None:\n        out = torch.empty((B, O, out_h, out_w), device=input.device, dtype=input.dtype)\n\n    # Flatten the input and output tensors for Triton\n    input_flat = input.view(B, C, H * W)\n    weight_flat = weight.view(O, C_per_group, R * S)\n    out_flat = out.view(B * O, out_h * out_w)\n\n    # Flatten bias and other if they are provided\n    if bias is not None:\n        bias_flat = bias.view(O)\n    else:\n        bias_flat = None\n\n    if other is not None:\n        other_flat = other.view(O)\n    else:\n        other_flat = None\n\n    # Launch the Triton kernel\n    BLOCK_SIZE_N = 256\n    num_blocks = (B * out_h * out_w + BLOCK_SIZE_N - 1) // BLOCK_SIZE_N\n    grid = (num_blocks,)\n\n    conv2d_kernel[grid](\n        input_flat, weight_flat, bias_flat, other_flat, out_flat,\n        B, C, H, W, O, K, R, S, stride_h, stride_w, padding_h, padding_w,\n        dilation_h, dilation_w, groups, alpha, BLOCK_SIZE_N\n    )\n\n    return out\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function torch.fft.ifftshift is the inverse of torch.fft.fftshift. It rearranges the elements of the input tensor, which is in FFT order, such that the zero-frequency component is moved back to the original position. This is useful for preparing data for inverse FFT operations. The function can rearrange specified dimensions or all dimensions by default.\nWrapper Entry Information: ifftshift(input, dim=None) -> Tensor\n\nArgs:\n    input (Tensor): the tensor in FFT order\n    dim (int, Tuple[int], optional): The dimensions to rearrange.\n        Only dimensions specified here will be rearranged, any other dimensions\n        will be left in their original order.\n        Default: All dimensions of input.\nother: Inverse of torch.fft.fftshift.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function torch.fft.ifftshift is the inverse of torch.fft.fftshift. It rearranges the elements of the input tensor, which is in FFT order, such that the zero-frequency component is moved back to the original position. This is useful for preparing data for inverse FFT operations. The function can rearrange specified dimensions or all dimensions by default.\nWrapper Entry Information: ifftshift(input, dim=None) -> Tensor\n\nArgs:\n    input (Tensor): the tensor in FFT order\n    dim (int, Tuple[int], optional): The dimensions to rearrange.\n        Only dimensions specified here will be rearranged, any other dimensions\n        will be left in their original order.\n        Default: All dimensions of input.\nother: Inverse of torch.fft.fftshift.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef ifftshift_kernel(input_ptr, output_ptr, shape, strides, num_dims, dims_to_shift, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    Triton kernel to perform ifftshift on the input tensor.\n    \n    Args:\n        input_ptr: Pointer to the input tensor.\n        output_ptr: Pointer to the output tensor.\n        shape: Shape of the input tensor.\n        strides: Strides of the input tensor.\n        num_dims: Number of dimensions of the input tensor.\n        dims_to_shift: Array of dimensions to rearrange.\n        BLOCK_SIZE: Block size for parallel processing.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n\n    # Compute the linear index in the input tensor\n    linear_index = block_start + tl.arange(0, BLOCK_SIZE)\n    in_bounds = tl.all(linear_index < shape[0] * shape[1] * shape[2] * shape[3])\n\n    # Initialize output index to the same as input index\n    output_index = linear_index\n\n    if in_bounds:\n        # Compute the multi-dimensional index from the linear index\n        multi_index = [0] * num_dims\n        for i in range(num_dims - 1, -1, -1):\n            multi_index[i] = linear_index % shape[i]\n            linear_index //= shape[i]\n\n        # Apply ifftshift to the specified dimensions\n        for dim in dims_to_shift:\n            half_dim = shape[dim] // 2\n            if multi_index[dim] < half_dim:\n                multi_index[dim] += half_dim\n            else:\n                multi_index[dim] -= half_dim\n\n        # Compute the new linear index for the output tensor\n        new_linear_index = 0\n        for i in range(num_dims):\n            new_linear_index += multi_index[i] * strides[i]\n\n        # Load input value and store it in the output tensor\n        input_value = tl.load(input_ptr + linear_index)\n        tl.store(output_ptr + new_linear_index, input_value)\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef ifftshift(input, dim=None):\n    \"\"\"\n    Inverse of torch.fft.fftshift. Rearranges the elements of the input tensor\n    such that the zero-frequency component is moved back to the original position.\n    \n    Args:\n        input (Tensor): The tensor in FFT order.\n        dim (int, Tuple[int], optional): The dimensions to rearrange.\n            Only dimensions specified here will be rearranged, any other dimensions\n            will be left in their original order.\n            Default: All dimensions of input.\n    \n    Returns:\n        Tensor: The rearranged tensor.\n    \"\"\"\n    if dim is None:\n        dim = tuple(range(input.dim()))\n    elif isinstance(dim, int):\n        dim = (dim,)\n    \n    # Convert input tensor to Triton tensor\n    input_t = input.contiguous()\n    output_t = torch.empty_like(input_t)\n    \n    # Prepare kernel launch configuration\n    shape = input_t.shape\n    strides = input_t.stride()\n    num_dims = input_t.dim()\n    dims_to_shift = torch.tensor(dim, dtype=torch.int32, device=input_t.device)\n    \n    # Launch the kernel\n    grid = (triton.cdiv(input_t.numel(), 1024),)\n    ifftshift_kernel[grid](input_t, output_t, shape, strides, num_dims, dims_to_shift, BLOCK_SIZE=1024)\n    \n    return output_t\n\n# Sample tensor\ninput_tensor = torch.arange(16).reshape(4, 4)\n\n# Apply ifftshift using the wrapper function\noutput_tensor = ifftshift(input_tensor, dim=(0, 1))\n\n# Expected result using torch.fft.ifftshift\nexpected_tensor = torch.fft.ifftshift(input_tensor, dim=(0, 1))\n\n# Verify the results\nprint(\"Output Tensor:\\n\", output_tensor)\nprint(\"Expected Tensor:\\n\", expected_tensor)\nassert torch.allclose(output_tensor, expected_tensor), \"The output does not match the expected result.\"\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sign bit check and the bitwise AND operation on the input tensors. `signbit` checks if the sign bit of each element in `input` is set, returning True for negative values, including -0. `bitwise_and` computes the bitwise AND between `input` and `other`, with the tensors needing to be of integral or boolean types.\nWrapper Entry Information: def signbit_bitwise_and(input: torch.Tensor, other: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    Args:\n        input (Tensor): The input tensor.\n        other (Tensor): The second tensor for bitwise AND, should be of integral or boolean types.\n    Example:\n        >>> a = torch.tensor([0.7, -1.2, 0., 2.3])\n        >>> b = torch.tensor([1, 0, 1, 1], dtype=torch.int8)\n        >>> signbit_result, bitwise_and_result = signbit_bitwise_and(a, b)\n        >>> signbit_result\n        tensor([False, True, False, False])\n        >>> bitwise_and_result\n        tensor([0, 0, 0, 0], dtype=torch.int8)\nother: The tensors need to be of integral or boolean types for the bitwise AND operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to perform bitwise AND operation on two tensors (A and B) element-wise and store the result in tensor C. The operation is done in parallel across blocks. The function uses the pointer to tensors A, B, and C, and processes 'n_elements' elements in 'BLOCK_SIZE' chunks, with each thread handling one element in the block. import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for bitwise AND operation on tensors\n@triton.jit\ndef bitwise_and_func_tensor(A_ptr, B_ptr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors A and B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B_ptr: Pointer to the tensor B (input).\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    B = tl.load(B_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Kernel for bitwise AND operation on a tensor A and a constant scalar B\n@triton.jit\ndef bitwise_and_func_scalar(A_ptr, B: tl.constexpr, C_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on a tensor A and a scalar B, and store the result in C.\n    \n    Parameters:\n    - A_ptr: Pointer to the tensor A (input).\n    - B: Scalar value to perform AND operation with.\n    - C_ptr: Pointer to the tensor C (output).\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    A = tl.load(A_ptr + offsets, mask=mask)\n    C = A & B\n    tl.store(C_ptr + offsets, C, mask=mask)\n\n# Wrapper function to choose between tensor-based and scalar-based bitwise AND\ndef bitwise_and(A, B):\n    \"\"\"\n    A wrapper function to invoke the appropriate Triton kernel for bitwise AND operation\n    based on the type of input B (tensor or scalar).\n    \n    Parameters:\n    - A: The first input tensor.\n    - B: The second input (either a tensor or scalar).\n    \n    Returns:\n    - C: The resulting tensor after performing the bitwise AND.\n    \"\"\"\n    C = torch.empty_like(A)\n    n_elements = C.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if isinstance(B, torch.Tensor):\n        # Call kernel for tensor-tensor bitwise AND\n        bitwise_and_func_tensor[(grid_size, 1, 1)](A, B, C, n_elements, block_size)\n    else:\n        # Call kernel for tensor-scalar bitwise AND\n        bitwise_and_func_scalar[(grid_size, 1, 1)](A, B, C, n_elements, block_size)   \n    return C\n\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the sign bit check and the bitwise AND operation on the input tensors. `signbit` checks if the sign bit of each element in `input` is set, returning True for negative values, including -0. `bitwise_and` computes the bitwise AND between `input` and `other`, with the tensors needing to be of integral or boolean types.\nWrapper Entry Information: def signbit_bitwise_and(input: torch.Tensor, other: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    Args:\n        input (Tensor): The input tensor.\n        other (Tensor): The second tensor for bitwise AND, should be of integral or boolean types.\n    Example:\n        >>> a = torch.tensor([0.7, -1.2, 0., 2.3])\n        >>> b = torch.tensor([1, 0, 1, 1], dtype=torch.int8)\n        >>> signbit_result, bitwise_and_result = signbit_bitwise_and(a, b)\n        >>> signbit_result\n        tensor([False, True, False, False])\n        >>> bitwise_and_result\n        tensor([0, 0, 0, 0], dtype=torch.int8)\nother: The tensors need to be of integral or boolean types for the bitwise AND operation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\nimport math\n\n# Kernel for signbit operation\n@triton.jit\ndef signbit_kernel(input_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to compute the sign bit of each element in the input tensor.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - output_ptr: Pointer to the output tensor.\n    - n_elements: Total number of elements in the tensor.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    output = input < 0\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Kernel for bitwise AND operation\n@triton.jit\ndef bitwise_and_kernel(input_ptr, other_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    A kernel to perform bitwise AND operation on two tensors.\n    \n    Parameters:\n    - input_ptr: Pointer to the input tensor.\n    - other_ptr: Pointer to the other tensor.\n    - output_ptr: Pointer to the output tensor.\n    - n_elements: Total number of elements in the tensors.\n    - BLOCK_SIZE: The block size for Triton kernel execution.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    input = tl.load(input_ptr + offsets, mask=mask)\n    other = tl.load(other_ptr + offsets, mask=mask)\n    output = input & other\n    tl.store(output_ptr + offsets, output, mask=mask)\n\n# Wrapper function to perform signbit and bitwise AND operations\ndef signbit_bitwise_and(input: torch.Tensor, other: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    \"\"\"\n    Computes the sign bit check and the bitwise AND operation on the input tensors.\n    \n    Args:\n        input (Tensor): The input tensor.\n        other (Tensor): The second tensor for bitwise AND, should be of integral or boolean types.\n    \n    Returns:\n        Tuple[torch.Tensor, torch.Tensor]: A tuple containing the results of the signbit and bitwise AND operations.\n    \"\"\"\n    # Ensure the input and other tensors are on the same device\n    device = input.device\n    assert other.device == device, \"Input and other tensors must be on the same device\"\n    \n    # Ensure the other tensor is of integral or boolean type\n    assert other.dtype in [torch.uint8, torch.int8, torch.int16, torch.int32, torch.int64, torch.bool], \\\n        \"The other tensor must be of integral or boolean type\"\n    \n    # Create output tensors\n    signbit_result = torch.empty_like(input, dtype=torch.bool, device=device)\n    bitwise_and_result = torch.empty_like(input, dtype=other.dtype, device=device)\n    \n    # Number of elements\n    n_elements = input.numel()\n    \n    # Block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    \n    # Grid size\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    # Launch signbit kernel\n    signbit_kernel[(grid_size, 1, 1)](input, signbit_result, n_elements, block_size)\n    \n    # Launch bitwise AND kernel\n    bitwise_and_kernel[(grid_size, 1, 1)](input, other, bitwise_and_result, n_elements, block_size)\n    \n    return signbit_result, bitwise_and_result\n\n# Example usage\nif __name__ == \"__main__\":\n    a = torch.tensor([0.7, -1.2, 0., 2.3], device='cuda')\n    b = torch.tensor([1, 0, 1, 1], dtype=torch.int8, device='cuda')\n    signbit_result, bitwise_and_result = signbit_bitwise_and(a, b)\n    print(\"Signbit result:\", signbit_result)\n    print(\"Bitwise AND result:\", bitwise_and_result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise repeat interleave and log-softmax activation. First, the input tensor is repeated along the specified dimension according to the values in 'repeats'. Then, a log-softmax activation is applied to the repeated tensor along the specified dimension. This function is differentiable and supports autograd for gradient computation, making it useful for backpropagation in neural networks.\nWrapper Entry Information: fused_repeat_interleave_log_softmax(input, repeats, dim=None, *, output_size=None, dtype=None, out=None) -> Tensor\nMath: Given an input tensor X and repeats r, the function computes: 1. Repeat Interleave: The input tensor is repeated along the specified dimension: Y = repeat_interleave(X, r, dim). 2. Log-Softmax Activation: The log-softmax function is applied to the repeated tensor along the specified dimension: Z_i = log( exp(Y_i) / sum_j exp(Y_j) ) where the summation is over the specified dimension.\nother: The 'repeats' parameter controls how many times each element is repeated along the specified dimension. The 'dim' parameter specifies the dimension along which to repeat and apply log-softmax. If 'dim' is None, the input is flattened before repeating. All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a streaming logsumexp kernel that computes the log of the sum of exponentials of input elements along a specified axis. The kernel takes input tensor X, output tensor OUT, strides for input and output tensors, the size of the reduction axis N, and a block size BLOCK_N. The kernel iterates over blocks of the input, computes the maximum value for numerical stability, and accumulates the exponentials. The result is stored in the output tensor. A wrapper function logsumexp is provided to reshape the input and call the kernel. Additionally, a softmax function softmax_ is implemented using the logsumexp kernel to normalize input tensor x along the last dimension. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for streaming logsumexp\n@triton.jit\ndef _logsumexp(X, OUT, xm_stride, xn_stride, out_stride, N, BLOCK_N: tl.constexpr):\n    rm = tl.program_id(0)\n    alpha = tl.zeros((1,), tl.float32) + -float('inf')\n    res = tl.zeros((1,), tl.float32)\n    for bn in range(0, N, BLOCK_N):\n        rn = bn + tl.arange(0, BLOCK_N)\n        Xmn = X + rm * xm_stride + rn * xn_stride\n        x = tl.load(Xmn, mask=rn < N, other=-float('inf'))\n        c = tl.max(x, axis=0)\n        # correct the current sum and update the max\n        res = tl.where(c > alpha, res * tl.exp(alpha - c), res)\n        alpha = tl.where(c > alpha, c, alpha)\n        res += tl.sum(tl.exp(x - alpha), axis=0)\n    out = tl.log(res) + alpha\n    rm = tl.program_id(0) + tl.arange(0, 1)\n    OUT = OUT + rm * out_stride\n    tl.store(OUT, out)\n\n# Function to call the Triton kernel\ndef logsumexp(input):\n    assert input.is_cuda\n    *dims, N = input.shape\n    input = input.view(-1, N)\n    out = input.new_empty(*dims).view(-1)\n    M = input.shape[0]\n    _logsumexp[(M,)](input, out, input.stride(0), input.stride(1), out.stride(0), N,\n                     BLOCK_N=4096, num_warps=4)\n    return out.view(*dims)\n\n# Softmax function using the logsumexp Triton kernel\ndef softmax_(x):\n    if not x.is_cuda:\n        return torch.softmax(x, dim=-1, out=x)\n    c = logsumexp(x)\n    return x.sub_(c[..., None]).exp_()\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Performs a fused operation combining element-wise repeat interleave and log-softmax activation. First, the input tensor is repeated along the specified dimension according to the values in 'repeats'. Then, a log-softmax activation is applied to the repeated tensor along the specified dimension. This function is differentiable and supports autograd for gradient computation, making it useful for backpropagation in neural networks.\nWrapper Entry Information: fused_repeat_interleave_log_softmax(input, repeats, dim=None, *, output_size=None, dtype=None, out=None) -> Tensor\nMath: Given an input tensor X and repeats r, the function computes: 1. Repeat Interleave: The input tensor is repeated along the specified dimension: Y = repeat_interleave(X, r, dim). 2. Log-Softmax Activation: The log-softmax function is applied to the repeated tensor along the specified dimension: Z_i = log( exp(Y_i) / sum_j exp(Y_j) ) where the summation is over the specified dimension.\nother: The 'repeats' parameter controls how many times each element is repeated along the specified dimension. The 'dim' parameter specifies the dimension along which to repeat and apply log-softmax. If 'dim' is None, the input is flattened before repeating. All operations are differentiable and support backpropagation.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel for fused repeat interleave and log-softmax\n@triton.jit\ndef _fused_repeat_interleave_log_softmax_kernel(\n    X, Y, OUT, xm_stride, xn_stride, out_stride, N, repeats, dim, BLOCK_N: tl.constexpr\n):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_N\n    offsets = block_start + tl.arange(0, BLOCK_N)\n    mask = offsets < N\n\n    # Load input data\n    Xmn = X + offsets * xn_stride\n    x = tl.load(Xmn, mask=mask, other=-float('inf'))\n\n    # Repeat interleave\n    repeated_x = tl.repeat(x, repeats, dim)\n\n    # Compute max for numerical stability\n    max_val = tl.max(repeated_x, axis=0)\n    repeated_x -= max_val\n\n    # Compute exponentials\n    exp_x = tl.exp(repeated_x)\n\n    # Compute sum of exponentials\n    sum_exp = tl.sum(exp_x, axis=0)\n\n    # Compute log-softmax\n    log_softmax = repeated_x - tl.log(sum_exp)\n\n    # Store the result\n    Ymn = Y + offsets * out_stride\n    tl.store(Ymn, log_softmax, mask=mask)\n\n# Wrapper function to call the Triton kernel\ndef fused_repeat_interleave_log_softmax(input, repeats, dim=None, *, output_size=None, dtype=None, out=None):\n    assert input.is_cuda, \"Input tensor must be on a CUDA device.\"\n    \n    if dim is None:\n        input = input.flatten()\n        dim = 0\n\n    # Compute the size of the repeated tensor\n    if output_size is None:\n        output_size = input.size(dim) * repeats\n\n    # Ensure the output tensor is created if not provided\n    if out is None:\n        out = torch.empty_like(input, dtype=dtype, device=input.device)\n        out = out.expand_as(input).repeat_interleave(repeats, dim=dim)\n    else:\n        assert out.shape == input.shape[:dim] + (output_size,) + input.shape[dim+1:], \"Output tensor shape mismatch.\"\n\n    # Compute the strides\n    input_stride = input.stride()\n    out_stride = out.stride()\n\n    # Launch the Triton kernel\n    grid = (out.numel() // output_size, )\n    _fused_repeat_interleave_log_softmax_kernel[grid](\n        input, input, out, input_stride[dim], input_stride[0], out_stride[dim], input.size(dim), repeats, dim, BLOCK_N=1024\n    )\n\n    return out\n\n# Example usage\ninput_tensor = torch.randn(2, 3, device='cuda')\nrepeats = 2\ndim = 1\noutput_tensor = fused_repeat_interleave_log_softmax(input_tensor, repeats, dim)\nprint(output_tensor)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Cholesky decomposition of a complex Hermitian or real symmetric positive-definite matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: def linalg.cholesky(A, *, upper=False, out=None) -> Tensor\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions\n                consisting of symmetric or Hermitian positive-definite matrices.\n\nKeyword args:\n    upper (bool, optional): whether to return an upper triangular matrix.\n        The tensor returned with upper=True is the conjugate transpose of the tensor\n        returned with upper=False.\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A = LL^{\\text{H}} where L is a lower triangular matrix with real positive diagonal and L^{\\text{H}} is the conjugate transpose when L is complex, and the transpose when L is real-valued.\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.cholesky_ex. Raises RuntimeError if the A matrix or any matrix in a batched A is not Hermitian (resp. symmetric) positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create kernels that compute the upper triangular part of matrices. The 'triu_kernel' function takes 7 parameters: input matrix pointer (X), output matrix pointer (Y), number of rows (M), number of columns (N), diagonal offset (diagonal), row block size (M_BLOCK_SIZE), and column block size (N_BLOCK_SIZE). It computes the upper triangular elements for a 2D matrix. The 'triu_batch_kernel' function takes 8 parameters: input matrix batch pointer (X), output matrix batch pointer (Y), number of matrices (batch), number of elements in each matrix (MN), number of columns (N), diagonal offset (diagonal), batch block size (BATCH_BLOCK_SIZE), and matrix element block size (MN_BLOCK_SIZE). It computes the upper triangular elements for a batch of matrices. The 'triu' function handles input tensors of 2D or higher dimensions, calling the appropriate kernel based on the tensor dimensions. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the upper triangular part of a 2D matrix\n@triton.jit\ndef triu_kernel(\n    X,  # Pointer to the input matrix\n    Y,  # Pointer to the output matrix\n    M,  # Number of rows in the input matrix\n    N,  # Number of columns in the input matrix\n    diagonal,  # Diagonal offset\n    M_BLOCK_SIZE: tl.constexpr,  # Block size for rows\n    N_BLOCK_SIZE: tl.constexpr,  # Block size for columns\n):\n    pid = tl.program_id(0)\n    row = pid * M_BLOCK_SIZE + tl.arange(0, M_BLOCK_SIZE)[:, None]\n    m_mask = row < M\n    X += row * N\n    Y += row * N\n\n    for n_offset in range(0, N, N_BLOCK_SIZE):\n        cols = n_offset + tl.arange(0, N_BLOCK_SIZE)[None, :]\n        n_mask = cols < N\n        mask = m_mask and n_mask\n\n        x = tl.load(X + cols, mask, other=0.0)\n        y = tl.where(row + diagonal <= cols, x, 0.0)\n        tl.store(Y + cols, y, mask=mask)\n\n# Triton kernel to compute the upper triangular part for batched matrices\n@triton.jit\ndef triu_batch_kernel(\n    X,  # Pointer to the input matrix batch\n    Y,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    MN,  # Number of elements in each matrix (flattened)\n    N,  # Number of columns in each matrix\n    diagonal,  # Diagonal offset\n    BATCH_BLOCK_SIZE: tl.constexpr,  # Block size for batch processing\n    MN_BLOCK_SIZE: tl.constexpr,  # Block size for elements within a matrix\n):\n    batch_id = tl.program_id(0)\n    mn_id = tl.program_id(1)\n    row = batch_id * BATCH_BLOCK_SIZE + tl.arange(0, BATCH_BLOCK_SIZE)[:, None]\n    batch_mask = row < batch\n    X += row * MN\n    Y += row * MN\n\n    cols = mn_id * MN_BLOCK_SIZE + tl.arange(0, MN_BLOCK_SIZE)[None, :]\n    mn_mask = cols < MN\n    mask = batch_mask and mn_mask\n    x = tl.load(X + cols, mask, other=0.0)\n    m = cols // N\n    n = cols % N\n    y = tl.where(m + diagonal <= n, x, 0.0)\n    tl.store(Y + cols, y, mask=mask)\n\n# Function to compute the upper triangular part of a matrix or batch of matrices\ndef triu(A, diagonal=0):\n    A = A.contiguous()\n    out = torch.empty_like(A)\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    M, N = A.shape[-2:]\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(M, meta[\"M_BLOCK_SIZE\"]),)\n            triu_kernel[grid](A, out, M, N, diagonal, M_BLOCK_SIZE=32, N_BLOCK_SIZE=8)\n        else:\n            batch = int(torch.numel(A) / M / N)\n            B = A.view(batch, -1)\n            grid = lambda meta: (\n                triton.cdiv(batch, meta[\"BATCH_BLOCK_SIZE\"]),\n                triton.cdiv(M * N, meta[\"MN_BLOCK_SIZE\"]),\n            )\n            triu_batch_kernel[grid](B, out, batch, M * N, N, diagonal, BATCH_BLOCK_SIZE=32, MN_BLOCK_SIZE=8)\n            out = out.view(A.shape)\n    return out\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the Cholesky decomposition of a complex Hermitian or real symmetric positive-definite matrix. Supports input of float, double, cfloat and cdouble dtypes. Also supports batches of matrices, and if A is a batch of matrices then the output has the same batch dimensions.\nWrapper Entry Information: def linalg.cholesky(A, *, upper=False, out=None) -> Tensor\n\nArgs:\n    A (Tensor): tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions\n                consisting of symmetric or Hermitian positive-definite matrices.\n\nKeyword args:\n    upper (bool, optional): whether to return an upper triangular matrix.\n        The tensor returned with upper=True is the conjugate transpose of the tensor\n        returned with upper=False.\n    out (Tensor, optional): output tensor. Ignored if `None`. Default: `None`.\nMath: A = LL^{\\text{H}} where L is a lower triangular matrix with real positive diagonal and L^{\\text{H}} is the conjugate transpose when L is complex, and the transpose when L is real-valued.\nother: When inputs are on a CUDA device, this function synchronizes that device with the CPU. For a version of this function that does not synchronize, see torch.linalg.cholesky_ex. Raises RuntimeError if the A matrix or any matrix in a batched A is not Hermitian (resp. symmetric) positive-definite.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the Cholesky decomposition of a single matrix\n@triton.jit\ndef cholesky_kernel(\n    A,  # Pointer to the input matrix\n    L,  # Pointer to the output matrix\n    n,  # Size of the matrix\n    upper: tl.constexpr,  # Whether to compute the upper triangular matrix\n    BLOCK_SIZE: tl.constexpr,  # Block size for the matrix\n):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n\n    # Compute the row and column indices for the current block\n    row = block_start + tl.arange(0, BLOCK_SIZE)[:, None]\n    col = block_start + tl.arange(0, BLOCK_SIZE)[None, :]\n\n    # Compute the mask for valid indices\n    mask = (row < n) & (col < n)\n\n    # Load the block from the input matrix\n    a_block = tl.load(A + row * n + col, mask=mask, other=0.0)\n\n    # Compute the Cholesky decomposition for the current block\n    for k in range(block_start, block_start + BLOCK_SIZE):\n        if k < n:\n            # Compute the diagonal element\n            if upper:\n                a_ii = tl.sqrt(a_block[k - block_start, k - block_start])\n                a_block[k - block_start, k - block_start] = a_ii\n            else:\n                a_ii = tl.sqrt(a_block[k - block_start, k - block_start])\n                a_block[k - block_start, k - block_start] = a_ii\n\n            # Compute the off-diagonal elements\n            for j in range(k + 1, block_start + BLOCK_SIZE):\n                if j < n:\n                    if upper:\n                        a_ij = (a_block[k - block_start, j - block_start] - tl.sum(a_block[k - block_start, :k - block_start] * a_block[j - block_start, :k - block_start])) / a_ii\n                        a_block[k - block_start, j - block_start] = a_ij\n                    else:\n                        a_ij = (a_block[j - block_start, k - block_start] - tl.sum(a_block[j - block_start, :k - block_start] * a_block[k - block_start, :k - block_start])) / a_ii\n                        a_block[j - block_start, k - block_start] = a_ij\n\n    # Store the result in the output matrix\n    if upper:\n        tl.store(L + col * n + row, a_block, mask=mask)\n    else:\n        tl.store(L + row * n + col, a_block, mask=mask)\n\n# Triton kernel to compute the Cholesky decomposition for batched matrices\n@triton.jit\ndef cholesky_batch_kernel(\n    A,  # Pointer to the input matrix batch\n    L,  # Pointer to the output matrix batch\n    batch,  # Number of matrices in the batch\n    n,  # Size of the matrix\n    upper: tl.constexpr,  # Whether to compute the upper triangular matrix\n    BLOCK_SIZE: tl.constexpr,  # Block size for the matrix\n):\n    pid = tl.program_id(0)\n    batch_id = pid // (n // BLOCK_SIZE)\n    block_start = (pid % (n // BLOCK_SIZE)) * BLOCK_SIZE\n\n    # Compute the row and column indices for the current block\n    row = block_start + tl.arange(0, BLOCK_SIZE)[:, None]\n    col = block_start + tl.arange(0, BLOCK_SIZE)[None, :]\n\n    # Compute the mask for valid indices\n    mask = (row < n) & (col < n)\n\n    # Load the block from the input matrix\n    a_block = tl.load(A + batch_id * n * n + row * n + col, mask=mask, other=0.0)\n\n    # Compute the Cholesky decomposition for the current block\n    for k in range(block_start, block_start + BLOCK_SIZE):\n        if k < n:\n            # Compute the diagonal element\n            if upper:\n                a_ii = tl.sqrt(a_block[k - block_start, k - block_start])\n                a_block[k - block_start, k - block_start] = a_ii\n            else:\n                a_ii = tl.sqrt(a_block[k - block_start, k - block_start])\n                a_block[k - block_start, k - block_start] = a_ii\n\n            # Compute the off-diagonal elements\n            for j in range(k + 1, block_start + BLOCK_SIZE):\n                if j < n:\n                    if upper:\n                        a_ij = (a_block[k - block_start, j - block_start] - tl.sum(a_block[k - block_start, :k - block_start] * a_block[j - block_start, :k - block_start])) / a_ii\n                        a_block[k - block_start, j - block_start] = a_ij\n                    else:\n                        a_ij = (a_block[j - block_start, k - block_start] - tl.sum(a_block[j - block_start, :k - block_start] * a_block[k - block_start, :k - block_start])) / a_ii\n                        a_block[j - block_start, k - block_start] = a_ij\n\n    # Store the result in the output matrix\n    if upper:\n        tl.store(L + batch_id * n * n + col * n + row, a_block, mask=mask)\n    else:\n        tl.store(L + batch_id * n * n + row * n + col, a_block, mask=mask)\n\n# Wrapper function to compute the Cholesky decomposition\ndef linalg_cholesky(A, *, upper=False, out=None):\n    A = A.contiguous()\n    if out is None:\n        out = torch.empty_like(A)\n    else:\n        assert out.shape == A.shape, \"Output tensor must have the same shape as input tensor\"\n        assert out.dtype == A.dtype, \"Output tensor must have the same dtype as input tensor\"\n\n    assert len(A.shape) > 1, \"Input tensor must have at least 2 dimensions\"\n    n = A.shape[-1]\n    assert A.shape[-2] == n, \"Input tensor must be a square matrix or batch of square matrices\"\n\n    with torch.cuda.device(A.device):\n        if len(A.shape) == 2:\n            grid = lambda meta: (triton.cdiv(n, meta[\"BLOCK_SIZE\"]),)\n            cholesky_kernel[grid](A, out, n, upper, BLOCK_SIZE=32)\n        else:\n            batch = A.shape[:-2].numel()\n            grid = lambda meta: (triton.cdiv(batch * n, meta[\"BLOCK_SIZE\"]),)\n            cholesky_batch_kernel[grid](A, out, batch, n, upper, BLOCK_SIZE=32)\n\n    return out\n\n# Example usage\nA = torch.randn(3, 3, 3, 3, device='cuda', dtype=torch.float64)\nA = A @ A.transpose(-2, -1)  # Ensure A is symmetric positive-definite\nL = linalg_cholesky(A, upper=False)\nprint(L)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with the scalar value 1, with the same size as the input tensor. It mirrors the properties of the input in terms of dtype, layout, device, and memory format unless specified otherwise. The function does not support the 'out' keyword as of version 0.4, and equivalent operation needs an alternative approach.\nWrapper Entry Information: ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor; input (Tensor): the size of :attr:`input` will determine size of the output tensor.; dtype (torch.dtype, optional): the desired data type of returned Tensor. Default: if None, defaults to the dtype of :attr:`input`.; layout (torch.layout, optional): the desired layout of returned tensor. Default: if None, defaults to the layout of :attr:`input`.; device (torch.device, optional): the desired device of returned tensor. Default: if None, defaults to the device of :attr:`input`.; requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.; memory_format (torch.memory_format, optional): the desired memory format of returned Tensor. Default: torch.preserve_format.\nother: Function does not support an 'out' keyword as of version 0.4. Use torch.ones for similar functionality if 'out' keyword is needed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to create a kernel called ones_kernel that initializes a tensor with 1.0 values on the GPU. The kernel takes three arguments: output_ptr (the GPU memory pointer to the output tensor), n_elements (the total number of elements to process), and BLOCK_SIZE (a compile-time constant specifying the size of each thread block). The ones function wraps this kernel to accept standard tensor creation parameters like size, dtype, and device, computes the necessary grid size, and then launches the kernel on the GPU. import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel that sets all elements in the output tensor to 1.0\n@triton.jit\ndef ones_kernel(\n    output_ptr,  # Pointer to the output tensor in GPU memory\n    n_elements,  # Total number of elements to process\n    BLOCK_SIZE: tl.constexpr,  # Size of each block of threads\n):\n    pid = tl.program_id(axis=0)  # Get the block index\n    block_start = pid * BLOCK_SIZE  # Calculate the start index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Calculate offsets for each thread\n    mask = offsets < n_elements  # Mask to ensure we don't write out of bounds\n    tl.store(output_ptr + offsets, 1.0, mask=mask)  # Store 1.0 in all valid positions\n\n# Function to initialize a tensor of given size with ones using the Triton kernel\ndef ones(size, *, dtype=None, layout=None, device=None, pin_memory=None):\n    if dtype is None:\n        dtype = torch.get_default_dtype()  # Use default PyTorch dtype if none provided\n    if device is None:\n        device = torch.device(\"cuda\")  # Default to CUDA device\n\n    out = torch.empty(size, device=device, dtype=dtype)  # Create an empty tensor\n    N = volume(size)  # Calculate the total number of elements\n    grid_fn = lambda meta: (triton.cdiv(N, meta[\"BLOCK_SIZE\"]),)  # Determine the grid size\n    with torch.cuda.device(device):\n        ones_kernel[grid_fn](out, N, BLOCK_SIZE=1024)  # Launch the Triton kernel\n    return out  # Return the initialized tensor\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a tensor filled with the scalar value 1, with the same size as the input tensor. It mirrors the properties of the input in terms of dtype, layout, device, and memory format unless specified otherwise. The function does not support the 'out' keyword as of version 0.4, and equivalent operation needs an alternative approach.\nWrapper Entry Information: ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format) -> Tensor; input (Tensor): the size of :attr:`input` will determine size of the output tensor.; dtype (torch.dtype, optional): the desired data type of returned Tensor. Default: if None, defaults to the dtype of :attr:`input`.; layout (torch.layout, optional): the desired layout of returned tensor. Default: if None, defaults to the layout of :attr:`input`.; device (torch.device, optional): the desired device of returned tensor. Default: if None, defaults to the device of :attr:`input`.; requires_grad (bool, optional): If autograd should record operations on the returned tensor. Default: False.; memory_format (torch.memory_format, optional): the desired memory format of returned Tensor. Default: torch.preserve_format.\nother: Function does not support an 'out' keyword as of version 0.4. Use torch.ones for similar functionality if 'out' keyword is needed.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nfrom flag_gems.utils.shape_utils import volume\n\n# Triton kernel that sets all elements in the output tensor to 1.0\n@triton.jit\ndef ones_kernel(\n    output_ptr,  # Pointer to the output tensor in GPU memory\n    n_elements,  # Total number of elements to process\n    BLOCK_SIZE: tl.constexpr,  # Size of each block of threads\n):\n    pid = tl.program_id(axis=0)  # Get the block index\n    block_start = pid * BLOCK_SIZE  # Calculate the start index for this block\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)  # Calculate offsets for each thread\n    mask = offsets < n_elements  # Mask to ensure we don't write out of bounds\n    tl.store(output_ptr + offsets, 1.0, mask=mask)  # Store 1.0 in all valid positions\n\n# Function to initialize a tensor of the same size as the input tensor with ones using the Triton kernel\ndef ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format):\n    # Determine the properties of the output tensor based on the input tensor and provided arguments\n    if dtype is None:\n        dtype = input.dtype\n    if layout is None:\n        layout = input.layout\n    if device is None:\n        device = input.device\n    if memory_format is None:\n        memory_format = input.memory_format\n\n    # Create an empty tensor with the same size as the input tensor\n    out = torch.empty_like(input, dtype=dtype, layout=layout, device=device, requires_grad=requires_grad, memory_format=memory_format)\n    \n    # Calculate the total number of elements\n    N = volume(input.shape)\n    \n    # Determine the grid size\n    grid_fn = lambda meta: (triton.cdiv(N, meta[\"BLOCK_SIZE\"]),)\n    \n    # Launch the Triton kernel\n    with torch.cuda.device(device):\n        ones_kernel[grid_fn](out, N, BLOCK_SIZE=1024)\n    \n    return out  # Return the initialized tensor\n\n# Example usage\ninput_tensor = torch.tensor([1, 2, 3], device='cuda')\noutput_tensor = ones_like(input_tensor)\nprint(output_tensor)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function `torch.cuda.amp.autocast` is deprecated and replaced by `torch.amp.autocast(\"cuda\", args...)`. It allows scripts to run in mixed precision, improving performance while maintaining accuracy. `autocast` serves as a context manager or decorator, wrapping the forward pass(es) of a network and any related loss computations. Tensors can be any type when entering an autocast region, and it is not necessary to manually cast models or inputs to `half()` or `bfloat16()`. The function selects op-specific data types for operations within an autocast region. Backward operations should not be run under autocast, as they execute in the same data type chosen for the corresponding forward operations.\nWrapper Entry Information: autocast(device_type, enabled=True, dtype=None, cache_enabled=True) -> ContextManager\nother: Deprecated in favor of torch.amp.autocast(\"cuda\"). Recommended to use for forward pass and loss computation only. Avoid using for backward passes. State is thread-local. Can be nested with `autocast(enabled=False)` to force a subregion to run in a specific dtype. The use of autocast in a new thread requires invoking the context manager or decorator in that thread.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel function 'sample_from_prob_kernel' that processes a vector in blocks. The kernel takes four parameters: x_ptr (pointer to input vector), output_ptr (pointer to output vector), n_elements (size of the vector), and BLOCK_SIZE (number of elements each program should process). The kernel identifies the program ID, calculates offsets, creates a mask for out-of-bounds access, loads data from DRAM, processes it by doubling the values, and stores the result back to DRAM. The function 'sample_from_prob' is a wrapper that prepares the output tensor, calculates the number of elements, defines the grid size, and launches the kernel with the specified block size. import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef sample_from_prob_kernel(x_ptr,  # *Pointer* to first input vector.\n                            output_ptr,  # *Pointer* to output vector.\n                            n_elements,  # Size of the vector.\n                            BLOCK_SIZE: tl.constexpr,  # Number of elements each program should process.\n                            ):\n  \n  # There are multiple 'programs' processing different data. We identify which program\n  # we are here:\n  pid = tl.program_id(axis=0)  # We use a 1D launch grid so axis is 0.\n\n  # This program will process inputs that are offset from the initial data.\n  # For instance, if you had a vector of length 256 and block_size of 64, the programs\n  # would each access the elements [0:64, 64:128, 128:192, 192:256].\n  # Note that offsets is a list of pointers:\n  block_start = pid * BLOCK_SIZE\n  offsets = block_start + tl.arange(0, BLOCK_SIZE)\n  # Create a mask to guard memory operations against out-of-bounds accesses.\n  mask = offsets < n_elements\n\n  # Load x and y from DRAM, masking out any extra elements in case the input is not a\n  # multiple of the block size.\n  x = tl.load(x_ptr + offsets, mask=mask)\n  output = x*2\n\n  # Write x + y back to DRAM.\n  tl.store(output_ptr + offsets, output, mask=mask)\n\ndef sample_from_prob(x: torch.Tensor):\n  # We need to preallocate the output.\n  output = torch.empty_like(x)\n  n_elements = output.numel()\n  # The SPMD launch grid denotes the number of kernel instances that run in parallel.\n  # It is analogous to CUDA launch grids. It can be either Tuple[int], or Callable(metaparameters) -> Tuple[int].\n  # In this case, we use a 1D grid where the size is the number of blocks:\n  grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n  # NOTE:\n  #  - Each torch.tensor object is implicitly converted into a pointer to its first element.\n  #  - `triton.jit`'ed functions can be indexed with a launch grid to obtain a callable GPU kernel.\n  #  - Don't forget to pass meta-parameters as keywords arguments.\n  sample_from_prob_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)\n  # We return a handle to z but, since `torch.cuda.synchronize()` hasn't been called, the kernel is still\n  # running asynchronously at this point.\n  return output\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: The function `torch.cuda.amp.autocast` is deprecated and replaced by `torch.amp.autocast(\"cuda\", args...)`. It allows scripts to run in mixed precision, improving performance while maintaining accuracy. `autocast` serves as a context manager or decorator, wrapping the forward pass(es) of a network and any related loss computations. Tensors can be any type when entering an autocast region, and it is not necessary to manually cast models or inputs to `half()` or `bfloat16()`. The function selects op-specific data types for operations within an autocast region. Backward operations should not be run under autocast, as they execute in the same data type chosen for the corresponding forward operations.\nWrapper Entry Information: autocast(device_type, enabled=True, dtype=None, cache_enabled=True) -> ContextManager\nother: Deprecated in favor of torch.amp.autocast(\"cuda\"). Recommended to use for forward pass and loss computation only. Avoid using for backward passes. State is thread-local. Can be nested with `autocast(enabled=False)` to force a subregion to run in a specific dtype. The use of autocast in a new thread requires invoking the context manager or decorator in that thread.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n# Define a context manager to simulate the behavior of torch.amp.autocast\nclass AutocastContext:\n    def __init__(self, device_type, enabled=True, dtype=None, cache_enabled=True):\n        self.device_type = device_type\n        self.enabled = enabled\n        self.dtype = dtype\n        self.cache_enabled = cache_enabled\n        self.original_dtype = None\n\n    def __enter__(self):\n        if self.enabled:\n            # Simulate entering the autocast region\n            if self.dtype is not None:\n                self.original_dtype = tl.dtype(self.dtype)\n                tl.set_dtype(self.dtype)\n            else:\n                # Default to half precision if no dtype is specified\n                self.original_dtype = tl.dtype('float32')\n                tl.set_dtype('float16')\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self.enabled:\n            # Restore the original data type\n            tl.set_dtype(self.original_dtype)\n\n# Define the autocast function\ndef autocast(device_type, enabled=True, dtype=None, cache_enabled=True):\n    return AutocastContext(device_type, enabled, dtype, cache_enabled)\n\n# Example usage of the autocast context manager\ndef forward_pass(x):\n    with autocast(device_type=\"cuda\", enabled=True, dtype='float16'):\n        # Perform forward pass operations here\n        y = x * 2  # Example operation\n    return y\n\n# Example kernel function that uses the autocast context\n@triton.jit\ndef sample_from_prob_kernel(x_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    x = tl.load(x_ptr + offsets, mask=mask)\n    output = x * 2\n\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef sample_from_prob(x: torch.Tensor):\n    output = torch.empty_like(x)\n    n_elements = output.numel()\n    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )\n\n    with autocast(device_type=\"cuda\", enabled=True, dtype='float16'):\n        sample_from_prob_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)\n\n    return output\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the elements of the input. Unlike NumPy's reciprocal, this function supports integral inputs by promoting them to the default scalar type.\nWrapper Entry Information: reciprocal(input, *, out=None) -> Tensor; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\text{input}_{i}}\nother: Integral inputs to reciprocal are automatically promoted to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel that computes the reciprocal of elements in an input tensor 'a' and stores the results in an output tensor 'b'. The kernel divides the work into blocks of size BLOCK_SIZE, where each block computes the reciprocal of multiple elements from 'a' and stores them in 'b'. The kernel takes as inputs the tensors 'a' and 'b', the total number of elements in 'a' (n_elements), and the block size (BLOCK_SIZE). import triton\nimport triton.language as tl\nimport torch\nimport math\n\n@triton.jit\ndef reciprocal_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    Kernel function to compute the reciprocal of elements in array 'a' and store them in 'b'.\n    \n    Parameters:\n    a (tensor): Input tensor with shape (n_elements,)\n    b (tensor): Output tensor to store reciprocal values of 'a'\n    n_elements (int): Total number of elements in the input tensor 'a'\n    BLOCK_SIZE (int): Block size used for parallel computation\n    \"\"\"\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    mask = offset < n_elements\n    a_value = tl.load(a + offset, mask=mask)\n    b_value = 1 / a_value.to(tl.float32)\n    tl.store(b + offset, b_value, mask=mask)  \n\ndef reciprocal(A):\n    \"\"\"\n    Wrapper function to call the Triton kernel for computing the reciprocal of elements in 'A'.\n    \n    Parameters:\n    A (tensor): Input tensor with shape (n_elements,)\n    \n    Returns:\n    tensor: Output tensor with reciprocal values\n    \"\"\"\n    B = torch.empty_like(A)\n    n_elements = A.numel()\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    grid_size = triton.cdiv(n_elements, block_size)\n    reciprocal_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n\nif __name__ == \"__main__\":\n    a = torch.randn([4, 4], device=\"cuda\")\n    print(torch.reciprocal(a))\n    print(reciprocal(a))\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Returns a new tensor with the reciprocal of the elements of the input. Unlike NumPy's reciprocal, this function supports integral inputs by promoting them to the default scalar type.\nWrapper Entry Information: reciprocal(input, *, out=None) -> Tensor; input (Tensor): the input tensor.; out (Tensor, optional): the output tensor.\nMath: \\text{out}_{i} = \\frac{1}{\\text{input}_{i}}\nother: Integral inputs to reciprocal are automatically promoted to the default scalar type.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the reciprocal of elements in an input tensor\n@triton.jit\ndef reciprocal_kernel(a_ptr, b_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    Kernel function to compute the reciprocal of elements in array 'a' and store them in 'b'.\n    \n    Parameters:\n    a_ptr (pointer): Pointer to the input tensor with shape (n_elements,)\n    b_ptr (pointer): Pointer to the output tensor to store reciprocal values of 'a'\n    n_elements (int): Total number of elements in the input tensor 'a'\n    BLOCK_SIZE (int): Block size used for parallel computation\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    a_value = tl.load(a_ptr + offsets, mask=mask)\n    b_value = 1 / a_value.to(tl.float32)\n    tl.store(b_ptr + offsets, b_value, mask=mask)\n\n# Wrapper function to call the Triton kernel\ndef reciprocal(input, *, out=None):\n    \"\"\"\n    Wrapper function to compute the reciprocal of elements in the input tensor.\n    \n    Parameters:\n    input (Tensor): The input tensor.\n    out (Tensor, optional): The output tensor. If not provided, a new tensor will be created.\n    \n    Returns:\n    Tensor: A new tensor with the reciprocal of the elements of the input tensor.\n    \"\"\"\n    # Promote integral inputs to the default scalar type\n    if input.dtype in [torch.int32, torch.int64]:\n        input = input.to(torch.get_default_dtype())\n    \n    n_elements = input.numel()\n    block_size = 1024  # Block size for parallel computation\n    grid_size = triton.cdiv(n_elements, block_size)\n    \n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n    \n    reciprocal_kernel[(grid_size,)](input, out, n_elements, block_size)\n    \n    return out\n\n# Example usage\nif __name__ == \"__main__\":\n    a = torch.tensor([1, 2, 3, 4], dtype=torch.int32, device=\"cuda\")\n    print(\"Input Tensor:\", a)\n    result = reciprocal(a)\n    print(\"Reciprocal Tensor:\", result)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine of each element in the input tensor, followed by determining the sign bit for each cosine result, indicating if it is positive or negative.\nWrapper Entry Information: def cos_signbit(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor for which the cosine and sign bit are computed.\nMath: \\text{cos\\_result} = \\cos(\\text{input}) \\text{sign\\_bit} = \\text{signbit}(\\text{cos\\_result})\nother: Returns a tuple containing the cosine of each element and a boolean tensor indicating the sign bit of each cosine result.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to define a kernel (cos_func) that computes the cosine for each element of a given tensor A. The kernel takes four parameters: tensor pointers a (input) and b (output), n_elements (number of elements in the input), and BLOCK_SIZE (number of elements processed per block, defined as a constexpr). The cos function wraps the triton kernel launch, preparing tensors and grid/block configurations. import torch\nimport triton\nimport triton.language as tl\nimport math\n\n# Kernel function: Computes the cosine of each element in the input tensor.\n@triton.jit\ndef cos_func(a, b, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block and thread\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Determine which elements are valid within the block\n    mask = offset < n_elements\n    # Load elements from tensor `a` into `a_value`\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the cosine of each element in `a_value`\n    b_value = tl.cos(a_value.to(tl.float32))\n    # Store the result back to tensor `b`\n    tl.store(b + offset, b_value, mask=mask)  \n\n# Function to invoke the Triton kernel and perform the computation\ndef cos(A):\n    # Prepare output tensor `B` with the same shape and type as `A`\n    B = torch.empty_like(A)\n    # Determine the total number of elements in the input tensor `A`\n    n_elements = A.numel()\n    # Calculate the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    cos_func[(grid_size, 1, 1)](A, B, n_elements, block_size)\n    return B\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the cosine of each element in the input tensor, followed by determining the sign bit for each cosine result, indicating if it is positive or negative.\nWrapper Entry Information: def cos_signbit(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: Args: input (Tensor): The input tensor for which the cosine and sign bit are computed.\nMath: \\text{cos\\_result} = \\cos(\\text{input}) \\text{sign\\_bit} = \\text{signbit}(\\text{cos\\_result})\nother: Returns a tuple containing the cosine of each element and a boolean tensor indicating the sign bit of each cosine result.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import torch\nimport triton\nimport triton.language as tl\nimport math\n\n# Kernel function: Computes the cosine of each element in the input tensor and determines the sign bit.\n@triton.jit\ndef cos_signbit_kernel(a, b, c, n_elements, BLOCK_SIZE: tl.constexpr):\n    # Calculate the offset for each block and thread\n    offset = tl.program_id(0) * BLOCK_SIZE + tl.arange(0, BLOCK_SIZE)\n    # Determine which elements are valid within the block\n    mask = offset < n_elements\n    # Load elements from tensor `a` into `a_value`\n    a_value = tl.load(a + offset, mask=mask)\n    # Compute the cosine of each element in `a_value`\n    b_value = tl.cos(a_value.to(tl.float32))\n    # Compute the sign bit of each cosine result\n    c_value = b_value < 0\n    # Store the cosine result back to tensor `b`\n    tl.store(b + offset, b_value, mask=mask)\n    # Store the sign bit result back to tensor `c`\n    tl.store(c + offset, c_value, mask=mask)\n\n# Wrapper function to invoke the Triton kernel and perform the computation\ndef cos_signbit(input: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n    # Prepare output tensors `B` and `C` with the same shape and type as `input`\n    B = torch.empty_like(input)\n    C = torch.empty_like(input, dtype=torch.bool)\n    # Determine the total number of elements in the input tensor `input`\n    n_elements = input.numel()\n    # Calculate the optimal block size\n    block_size = triton.next_power_of_2(math.ceil(math.sqrt(n_elements)))\n    # Determine the grid size needed to cover all elements\n    grid_size = triton.cdiv(n_elements, block_size)\n    # Launch the Triton kernel\n    cos_signbit_kernel[(grid_size, 1, 1)](input, B, C, n_elements, block_size)\n    return B, C\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the spectral norm (operator norm induced by the Euclidean vector norm) of a square matrix using its eigenvalues. The spectral norm is the largest absolute value among the eigenvalues of a matrix. It supports inputs of float, double, cfloat, and cdouble dtypes and handles batches of matrices.\nWrapper Entry Information: spectral_norm_eig(A, *, out=None) -> Tensor\nA (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\nout (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\|A\\|_2 = \\max \\{ |\\lambda| : \\lambda \\text{ is an eigenvalue of } A \\}\nother: For normal matrices (where A A^{H} = A^{H} A), the spectral norm equals the largest absolute eigenvalue.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement a kernel named square_kernel that takes 6 parameters: output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, and BLOCK_SIZE. The kernel computes the square of each element in the input matrix row-wise using parallelism over rows and writes the result to output_ptr. A function named square is implemented to prepare the arguments and call the kernel, taking a single parameter x which is a 2D tensor. The square function computes an appropriate BLOCK_SIZE based on the number of columns and determines num_warps to launch the kernel. import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to square elements of a matrix\n@triton.jit\ndef square_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_cols, BLOCK_SIZE: tl.constexpr):\n    # The rows of the softmax are independent, so we parallelize across those\n    row_idx = tl.program_id(0)\n    # The stride represents how much we need to increase the pointer to advance 1 row\n    row_start_ptr = input_ptr + row_idx * input_row_stride\n    # The block size is the next power of two greater than n_cols, so we can fit each\n    # row in a single block\n    col_offsets = tl.arange(0, BLOCK_SIZE)\n    input_ptrs = row_start_ptr + col_offsets\n    # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols\n    row = tl.load(input_ptrs, mask=col_offsets < n_cols, other=-float('inf'))\n\n    square_output = row * row\n    # Write back output to DRAM\n    output_row_start_ptr = output_ptr + row_idx * output_row_stride\n    output_ptrs = output_row_start_ptr + col_offsets\n    tl.store(output_ptrs, square_output, mask=col_offsets < n_cols)\n\n# Function to call the Triton kernel\ndef square(x):\n    n_rows, n_cols = x.shape\n    # The block size is the smallest power of two greater than the number of columns in `x`\n    BLOCK_SIZE = triton.next_power_of_2(n_cols)\n    # Another trick we can use is to ask the compiler to use more threads per row by\n    # increasing the number of warps (`num_warps`) over which each row is distributed.\n    num_warps = 4\n    if BLOCK_SIZE >= 2048:\n        num_warps = 8\n    if BLOCK_SIZE >= 4096:\n        num_warps = 16\n    # Allocate output\n    y = torch.empty_like(x)\n    # Enqueue kernel. The 1D launch grid is simple: we have one kernel instance per row of the input matrix\n    square_kernel[(n_rows, )](\n        y,\n        x,\n        x.stride(0),\n        y.stride(0),\n        n_cols,\n        num_warps=num_warps,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n    return y\n\n# Example usage of the kernel\ntorch.manual_seed(0)\nx = torch.randn(1823, 781, device='cuda')\ny_triton = square(x)\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the spectral norm (operator norm induced by the Euclidean vector norm) of a square matrix using its eigenvalues. The spectral norm is the largest absolute value among the eigenvalues of a matrix. It supports inputs of float, double, cfloat, and cdouble dtypes and handles batches of matrices.\nWrapper Entry Information: spectral_norm_eig(A, *, out=None) -> Tensor\nA (Tensor): Tensor of shape `(*, n, n)` where `*` is zero or more batch dimensions consisting of square matrices.\nout (Tensor, optional): Output tensor. Ignored if `None`. Default: `None`.\nMath: \\|A\\|_2 = \\max \\{ |\\lambda| : \\lambda \\text{ is an eigenvalue of } A \\}\nother: For normal matrices (where A A^{H} = A^{H} A), the spectral norm equals the largest absolute eigenvalue.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\nimport torch\n\n# Triton kernel to compute the spectral norm of a matrix using its eigenvalues\n@triton.jit\ndef spectral_norm_eig_kernel(\n    A_ptr,  # Pointer to the input matrix\n    A_batch_stride,  # Stride between batches in the input matrix\n    A_row_stride,  # Stride between rows in the input matrix\n    A_col_stride,  # Stride between columns in the input matrix\n    out_ptr,  # Pointer to the output tensor\n    n,  # Size of the square matrix\n    batch_size: tl.constexpr,  # Number of batches\n    BLOCK_SIZE: tl.constexpr  # Block size for parallelism\n):\n    batch_idx = tl.program_id(0)\n    if batch_idx >= batch_size:\n        return\n\n    # Compute the eigenvalues of the matrix\n    A_start_ptr = A_ptr + batch_idx * A_batch_stride\n    eigenvalues = tl.eig(A_start_ptr, A_row_stride, A_col_stride, n)\n\n    # Compute the absolute values of the eigenvalues\n    abs_eigenvalues = tl.abs(eigenvalues)\n\n    # Find the maximum absolute eigenvalue\n    max_abs_eigenvalue = tl.max(abs_eigenvalues, axis=0)\n\n    # Store the result in the output tensor\n    out_start_ptr = out_ptr + batch_idx\n    tl.store(out_start_ptr, max_abs_eigenvalue)\n\n# Wrapper function to call the Triton kernel\ndef spectral_norm_eig(A, *, out=None):\n    # Validate input tensor\n    if A.dim() < 2 or A.shape[-1] != A.shape[-2]:\n        raise ValueError(\"Input tensor must be a batch of square matrices\")\n\n    # Determine the number of batches and the size of the square matrix\n    batch_size = A.shape[:-2].numel()\n    n = A.shape[-1]\n\n    # Allocate output tensor if not provided\n    if out is None:\n        out = torch.empty(batch_size, device=A.device, dtype=A.dtype)\n\n    # Determine the block size for parallelism\n    BLOCK_SIZE = 128  # Adjust this value based on the GPU architecture\n\n    # Enqueue the kernel\n    spectral_norm_eig_kernel[(batch_size,)](\n        A,\n        A.stride(0) * A.element_size(),\n        A.stride(1) * A.element_size(),\n        A.stride(2) * A.element_size(),\n        out,\n        n,\n        batch_size,\n        num_warps=4,\n        BLOCK_SIZE=BLOCK_SIZE,\n    )\n\n    return out\n\n# Example usage of the kernel\ntorch.manual_seed(0)\nA = torch.randn(2, 3, 3, device='cuda', dtype=torch.float32)\nout = spectral_norm_eig(A)\nprint(out)\n", "label": ""}
{"instruction": "You are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the N dimensional discrete Fourier transform of the input tensor. It returns all positive and negative frequency terms, even though for real inputs, half of these values are redundant. Supports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or greater, but only for powers of 2 signal length in every transformed dimension.\nWrapper Entry Information: fftn(input, s=None, dim=None, norm=None, *, out=None) -> Tensor; input (Tensor): the input tensor; s (Tuple[int], optional): Signal size in the transformed dimensions. If given, each dimension dim[i] will either be zero-padded or trimmed to the length s[i] before computing the FFT. If a length -1 is specified, no padding is done in that dimension. Default: s = [input.size(d) for d in dim]; dim (Tuple[int], optional): Dimensions to be transformed. Default: all dimensions, or the last len(s) dimensions if s is given.; norm (str, optional): Normalization mode. For the forward transform (fftn), these correspond to: 'forward' - normalize by 1/n; 'backward' - no normalization; 'ortho' - normalize by 1/sqrt(n) (making the FFT orthonormal) Where n = prod(s) is the logical FFT size. Calling the backward transform (ifftn) with the same normalization mode will apply an overall normalization of 1/n between the two transforms. This is required to make ifftn the exact inverse. Default is 'backward' (no normalization).; out (Tensor, optional): the output tensor.\nother: The Fourier domain representation of any real signal satisfies the Hermitian property. torch.fft.rfftn returns the more compact one-sided representation where only the positive frequencies of the last dimension are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate. <|system|>Document 1:\nUse triton language to implement various mathematical operations on tensors, including matrix multiplication accumulation, gated linear unit application, softmax normalization, mean and inverse standard deviation calculation, Welford's algorithm for statistics update, exponential moving average update, input standardization, L1/L2 norm loss calculation, negative log likelihood loss, and cross entropy loss. import triton\nimport triton.language as tl\nfrom .act_kernels import apply_act_func\n\n@triton.jit\ndef accum_linear(accum, input1, input2, fp16: tl.constexpr, tf32: tl.constexpr):\n    \"\"\"\n    Accumulates matrix multiplications of input tensors for linear functions.\n\n    Args:\n        accum: Accumulator holding aggregation of matrix multiplications.\n            The accumulator must be of shape [BLOCK_SIZE1, BLOCK_SIZE3].\n        input1: First operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        input2: Second operand of matrix multiplication.\n            The operand must be of shape [BLOCK_SIZE2, BLOCK_SIZE3].\n        fp16: Flag for converting operands to FP16.\n        tf32: Flag for performing matrix multiplication in TF32.\n\n    Returns:\n        Accumulator with the result of the new matrix multiplication added to it.\n    \"\"\"\n    if fp16:\n        input1 = input1.to(tl.float16)\n        input2 = input2.to(tl.float16)\n\n    return accum + tl.dot(input1, input2, allow_tf32=tf32)\n\n@triton.jit\ndef glu(input1, input2, param, act_func: tl.constexpr):\n    \"\"\"\n    Applies the gated linear unit with an arbitrary activation function\n    to the input.\n\n    Args:\n        input1: First half of input to gate.\n            The first half must be of the same shape as the second half.\n        input2: Second half of input to gate.\n            The second half must be of the same shape as the first half.\n        param: Parameter in the case of parameterized activation functions.\n        act_func: Name of activation function to apply.\n            Options are 'sigmoid', 'tanh', 'relu', 'gelu', 'silu',\n            'relu6', 'hardsigmoid', 'hardswish', 'selu', 'mish', and 'leaky_relu'.\n\n    Returns:\n        Input transformed by the gated linear unit\n        with an arbitrary activation function.\n    \"\"\"\n    return input1 * apply_act_func(input2, None, None, None, param, act_func, False)\n\n@triton.jit\ndef softmax(input, log: tl.constexpr):\n    \"\"\"\n    Normalizes the input using softmax along the last dimension.\n\n    Args:\n        input: Input to normalize.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        log: Flag for indicating if the log of softmax should be taken.\n\n    Returns:\n        Input normalized by softmax.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    input = input - tl.max(input, axis=1)[:, None]\n    numerator = tl.exp(input)\n    denominator = tl.sum(numerator, axis=1)[:, None]\n\n    if log:\n        output = input - tl.log(denominator)\n\n    else:\n        output = numerator / denominator\n\n    return output\n\n@triton.jit\ndef calc_mean_and_inv_std(input, last_dim, eps, last_dim_mask: tl.constexpr):\n    \"\"\"\n    Calculates the mean and inverse standard deviation of the input\n    along the last dimension.\n\n    Args:\n        input: Input whose mean and inverse standard deviation are calculated.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        last_dim: Size of the last dimension of input.\n        eps: Epsilon added in the square root in the denominator\n            to avoid division by zero.\n        last_dim_mask: Mask for the last dimension indicating\n            which elements should be included in the calculations.\n            The mask must be of shape [BLOCK_SIZE2].\n\n    Returns:\n        Mean and inverse standard deviation of the input.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    mean = tl.sum(input, axis=1) / last_dim\n    diff = tl.where(last_dim_mask[None, :], input - mean[:, None], 0)\n    inv_std = tl.rsqrt(tl.sum(diff * diff, axis=1) / last_dim + eps)\n\n    return mean, inv_std\n\n@triton.jit\ndef update_welford(input, prev_count, prev_mean, prev_var, curr_count, mask: tl.constexpr):\n    \"\"\"\n    Updates count, mean, and variance (M2) statistics for Welford's algorithm.\n\n    Args:\n        input: Input used to update statistics.\n            The input must be of the same shape as the mask.\n        prev_count: Previous count statistic to update.\n        prev_mean: Previous mean statistic to update.\n        prev_var: Previous variance (M2) statistic to update.\n        curr_count: Count of elements in current input.\n        mask: Mask indicating which elements should be included in the calculations.\n            The mask must be of the same shape as the input.\n\n    Returns:\n        Updated count, mean, and variance (M2) statistics\n    \"\"\"\n    input = input.to(tl.float32)\n\n    count = prev_count + curr_count\n    mean = (tl.sum(input) - curr_count * prev_mean) / count\n    deltas = tl.where(mask, (input - mean) * (input - prev_mean), 0.)\n    var = prev_var + tl.sum(deltas)\n\n    return count, mean, var\n\n@triton.jit\ndef update_ema(prev_ema, new_val, momentum):\n    \"\"\"\n    Updates exponential moving average.\n\n    Args:\n        prev_ema: Previous exponential moving average.\n        new_val: Value used to update the exponential moving average.\n        momentum: Momentum.\n\n    Returns:\n        Updated running statistic.\n    \"\"\"\n    return (1 - momentum) * prev_ema + momentum * new_val\n\n@triton.jit\ndef standardize(input, mean, inv_std, weight, bias):\n    \"\"\"\n    Standardizes the input given its mean and inverse standard deviation,\n    multiplies the result by weights, and adds a bias vector.\n\n    Args:\n        input: Input to standardize.\n        mean: Mean of input.\n        inv_std: Inverse standard deviation of input.\n        weight: Weight multiplied by the standardized input.\n        bias: Bias added to the result of the weight multiplication.\n\n    Returns:\n        Standardized input.\n    \"\"\"\n    return weight * inv_std * (input - mean) + bias\n\n@triton.jit\ndef calc_p_loss(input, target, size, p_loss: tl.constexpr, reduction: tl.constexpr):\n    \"\"\"\n    Measures the L1 or squared L2 norm of the difference between the input\n    and target (i.e., mean absolute error or mean squared error).\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE].\n        target: Target.\n            The target must be of shape [BLOCK_SIZE].\n        size: Number of elements in the input and target.\n            This value is used only if reduction is 'mean'.\n        p_loss: p-norm used to compute the error.\n            Options are 1 for MAE and 2 for MSE.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the error\n            across all entries, and 'sum' for summing the error across all entries.\n\n    Returns:\n        Error.\n    \"\"\"\n    input = input.to(tl.float32)\n    target = target.to(tl.float32)\n\n    diff = input - target\n\n    if p_loss == 1:\n        error = tl.abs(diff)\n\n    elif p_loss == 2:\n        error = diff * diff\n\n    if reduction == 'none':\n        output = error\n\n    elif reduction == 'mean':\n        output = tl.sum(error) / size\n\n    elif reduction == 'sum':\n        output = tl.sum(error)\n\n    return output\n\n@triton.jit\ndef nll_loss(input, size, reduction: tl.constexpr):\n    \"\"\"\n    Measures the negative log likelihood loss given log-probabilities of target class.\n\n    Args:\n        input: Input containing predicted log-probabilities corresponding to target class.\n            The input can have arbitrary shape.\n        size: Number of elements in the input.\n            This value is used only if reduction is 'mean'.\n        reduction: Reduction strategy for the output.\n            Options are 'none' for no reduction, 'mean' for averaging the loss\n            across all entries, and 'sum' for summing the loss across all entries.\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n\n    if reduction == 'none':\n        output = -input\n\n    elif reduction == 'mean':\n        output = -tl.sum(input) / size\n\n    elif reduction == 'sum':\n        output = -tl.sum(input)\n\n    return output\n\n@triton.jit\ndef cross_entropy_loss(input, pred):\n    \"\"\"\n    Measures the per-row cross entropy loss given\n    input and predicted logits corresponding to target class.\n\n    Args:\n        input: Input.\n            The input must be of shape [BLOCK_SIZE1, BLOCK_SIZE2].\n        pred: Predicted logits corresponding to target class.\n            The predictions must be of shape [BLOCK_SIZE1].\n\n    Returns:\n        Loss.\n    \"\"\"\n    input = input.to(tl.float32)\n    pred = pred.to(tl.float32)\n\n    mx = tl.max(input, axis=1)\n    input -= mx[:, None]\n    loss = tl.log(tl.sum(tl.exp(input), axis=1)) - pred + mx\n\n    return loss\n</s>\n<|user|>\nYou are an expert in Triton programming, capable of writing corresponding Triton kernels and wrapper functions based on functional descriptions and function parameters. Ensure that the wrapper function fully corresponds to the provided function information.\nFunctional Description: Computes the N dimensional discrete Fourier transform of the input tensor. It returns all positive and negative frequency terms, even though for real inputs, half of these values are redundant. Supports torch.half and torch.chalf on CUDA with GPU Architecture SM53 or greater, but only for powers of 2 signal length in every transformed dimension.\nWrapper Entry Information: fftn(input, s=None, dim=None, norm=None, *, out=None) -> Tensor; input (Tensor): the input tensor; s (Tuple[int], optional): Signal size in the transformed dimensions. If given, each dimension dim[i] will either be zero-padded or trimmed to the length s[i] before computing the FFT. If a length -1 is specified, no padding is done in that dimension. Default: s = [input.size(d) for d in dim]; dim (Tuple[int], optional): Dimensions to be transformed. Default: all dimensions, or the last len(s) dimensions if s is given.; norm (str, optional): Normalization mode. For the forward transform (fftn), these correspond to: 'forward' - normalize by 1/n; 'backward' - no normalization; 'ortho' - normalize by 1/sqrt(n) (making the FFT orthonormal) Where n = prod(s) is the logical FFT size. Calling the backward transform (ifftn) with the same normalization mode will apply an overall normalization of 1/n between the two transforms. This is required to make ifftn the exact inverse. Default is 'backward' (no normalization).; out (Tensor, optional): the output tensor.\nother: The Fourier domain representation of any real signal satisfies the Hermitian property. torch.fft.rfftn returns the more compact one-sided representation where only the positive frequencies of the last dimension are returned.\nAfter generation, verify if the Triton wrapper aligns with the provided func_inputs. If not, regenerate.</s>\n<|assistant|>\n", "predict": "import triton\nimport triton.language as tl\n\n@triton.jit\ndef fftn_kernel(input_ptr, output_ptr, n, norm, BLOCK_SIZE: tl.constexpr):\n    \"\"\"\n    Computes the N-dimensional discrete Fourier transform of the input tensor.\n\n    Args:\n        input_ptr: Pointer to the input tensor.\n        output_ptr: Pointer to the output tensor.\n        n: Logical FFT size (product of signal sizes in transformed dimensions).\n        norm: Normalization mode ('forward', 'backward', 'ortho').\n        BLOCK_SIZE: Block size for parallelization.\n    \"\"\"\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n\n\n    # Load input data\n    input = tl.load(input_ptr + offsets, mask=mask)\n\n    # Perform FFT (this is a placeholder for the actual FFT implementation)\n    # For simplicity, we assume the FFT is already implemented and available as a function\n    output = fft(input, n, norm)\n\n    # Store the result\n    tl.store(output_ptr + offsets, output, mask=mask)\n\ndef fft(input, n, norm):\n    \"\"\"\n    Placeholder function for the actual FFT computation.\n    This function should be replaced with a real FFT implementation.\n    \"\"\"\n    # Placeholder for the actual FFT logic\n    output = input  # This should be replaced with the actual FFT computation\n    if norm == 'forward':\n        output /= n\n    elif norm == 'ortho':\n        output /= tl.sqrt(n)\n    return output\n\nimport torch\nimport triton\nimport triton.language as tl\n\ndef fftn(input, s=None, dim=None, norm=None, *, out=None):\n    \"\"\"\n    Computes the N-dimensional discrete Fourier transform of the input tensor.\n\n    Args:\n        input (Tensor): The input tensor.\n        s (Tuple[int], optional): Signal size in the transformed dimensions.\n            If given, each dimension dim[i] will either be zero-padded or trimmed to the length s[i] before computing the FFT.\n            If a length -1 is specified, no padding is done in that dimension. Default: s = [input.size(d) for d in dim].\n        dim (Tuple[int], optional): Dimensions to be transformed.\n            Default: all dimensions, or the last len(s) dimensions if s is given.\n        norm (str, optional): Normalization mode.\n            For the forward transform (fftn), these correspond to:\n            'forward' - normalize by 1/n\n            'backward' - no normalization\n            'ortho' - normalize by 1/sqrt(n) (making the FFT orthonormal)\n            Where n = prod(s) is the logical FFT size.\n            Calling the backward transform (ifftn) with the same normalization mode will apply an overall normalization of 1/n between the two transforms.\n            This is required to make ifftn the exact inverse. Default is 'backward' (no normalization).\n        out (Tensor, optional): The output tensor.\n\n    Returns:\n        Tensor: The Fourier transformed tensor.\n    \"\"\"\n    if s is None:\n        if dim is None:\n            s = input.shape\n        else:\n            s = [input.size(d) for d in dim]\n    else:\n        if dim is None:\n            dim = [-i for i in range(len(s), 0, -1)]\n\n    if dim is None:\n        dim = list(range(input.dim()))\n\n    if out is None:\n        out = torch.empty_like(input, dtype=input.dtype, device=input.device)\n\n    n = 1\n    for size in s:\n        n *= size\n\n    # Normalize the input if required\n    if norm == 'forward':\n        input = input / n\n    elif norm == 'ortho':\n        input = input / tl.sqrt(n)\n\n    # Launch the Triton kernel\n    grid = (input.numel() // (1024 * 32),)\n    fftn_kernel[grid](input, out, n, norm, BLOCK_SIZE=1024)\n\n    return out\n\nimport torch\n\n# Test input\ninput = torch.randn(4, 4, dtype=torch.complex64, device='cuda')\n\n# Compute the FFT using the Triton implementation\noutput = fftn(input, s=(4, 4), dim=(0, 1), norm='backward')\n\n# Compute the FFT using PyTorch for comparison\nexpected_output = torch.fft.fftn(input, s=(4, 4), dim=(0, 1), norm='backward')\n\n# Check if the results match\nprint(torch.allclose(output, expected_output))\n", "label": ""}
